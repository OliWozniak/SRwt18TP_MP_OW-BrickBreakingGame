
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdfc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fac  0800bfac  0800bfac  0001bfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df58  0800df58  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800df58  0800df58  0001df58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df60  0800df60  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df60  0800df60  0001df60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df64  0800df64  0001df64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800df68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  200000f0  0800e058  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a18  0800e058  00020a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003eb7a  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007238  00000000  00000000  0005ec9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002748  00000000  00000000  00065ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002430  00000000  00000000  00068620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003017a  00000000  00000000  0006aa50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000290c5  00000000  00000000  0009abca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6749  00000000  00000000  000c3c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ba3d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a57c  00000000  00000000  001ba454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bf94 	.word	0x0800bf94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	0800bf94 	.word	0x0800bf94

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BBG_init>:
#include "BBG.h"
#include <stdlib.h>
#include <stdio.h>
#include "main.h"

void BBG_init(BBG* bbg, Platforma * platforma, Klocek ** klocki, Kulka * kulka, int lkl) {
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b089      	sub	sp, #36	; 0x24
 80004f4:	af02      	add	r7, sp, #8
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]

	bbg->liczba_klockow = lkl;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000502:	60da      	str	r2, [r3, #12]
	bbg->platforma = platforma;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	601a      	str	r2, [r3, #0]
	rysuj_platforme(bbg->platforma);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f001 f8ec 	bl	80016ec <rysuj_platforme>

	bbg->klocki = klocki;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < bbg->liczba_klockow; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e03a      	b.n	8000596 <BBG_init+0xa6>
		    uint32_t kolor = i % 2 == 0 ? LCD_COLOR_YELLOW : LCD_COLOR_BLUE;
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	d102      	bne.n	8000530 <BBG_init+0x40>
 800052a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800052e:	e000      	b.n	8000532 <BBG_init+0x42>
 8000530:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <BBG_init+0xc8>)
 8000532:	613b      	str	r3, [r7, #16]
		    Klocek_init(bbg->klocki[i], i * bbg->klocki[i]->szerokosc, 0, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc,kolor);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	685a      	ldr	r2, [r3, #4]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	fb02 f103 	mul.w	r1, r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	689c      	ldr	r4, [r3, #8]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	685a      	ldr	r2, [r3, #4]
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	9201      	str	r2, [sp, #4]
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	4623      	mov	r3, r4
 8000578:	2200      	movs	r2, #0
 800057a:	f000 fc65 	bl	8000e48 <Klocek_init>
		    rysuj_klocek(bbg->klocki[i]);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	685a      	ldr	r2, [r3, #4]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fc78 	bl	8000e80 <rysuj_klocek>
	for (int i = 0; i < bbg->liczba_klockow; i++) {
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	3301      	adds	r3, #1
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	429a      	cmp	r2, r3
 800059e:	dbbf      	blt.n	8000520 <BBG_init+0x30>
		}
	bbg->kulka = kulka;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	609a      	str	r2, [r3, #8]
	rysuj_kulke(bbg->kulka);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fca2 	bl	8000ef4 <rysuj_kulke>
}
 80005b0:	bf00      	nop
 80005b2:	371c      	adds	r7, #28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	ff0000ff 	.word	0xff0000ff

080005bc <BBG_obsluga_zbicia_klocka>:
//		BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
//		free(bbg->klocki[i]);
//	}
//}

void BBG_obsluga_zbicia_klocka(BBG* bbg) {
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e0b6      	b.n	8000738 <BBG_obsluga_zbicia_klocka+0x17c>
        // Sprawdź, czy kulka zderzyła się z klockiem
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	441a      	add	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6859      	ldr	r1, [r3, #4]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	f2c0 80a3 	blt.w	8000732 <BBG_obsluga_zbicia_klocka+0x176>
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	1ad2      	subs	r2, r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6859      	ldr	r1, [r3, #4]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	440b      	add	r3, r1
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6859      	ldr	r1, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6858      	ldr	r0, [r3, #4]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4403      	add	r3, r0
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	440b      	add	r3, r1
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 8000618:	429a      	cmp	r2, r3
 800061a:	f300 808a 	bgt.w	8000732 <BBG_obsluga_zbicia_klocka+0x176>
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	441a      	add	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6859      	ldr	r1, [r3, #4]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 800063a:	429a      	cmp	r2, r3
 800063c:	db79      	blt.n	8000732 <BBG_obsluga_zbicia_klocka+0x176>
            bbg->kulka->polozenie_x - bbg->kulka->promien <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	1ad2      	subs	r2, r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6859      	ldr	r1, [r3, #4]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6819      	ldr	r1, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6858      	ldr	r0, [r3, #4]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4403      	add	r3, r0
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	440b      	add	r3, r1
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 800066a:	429a      	cmp	r2, r3
 800066c:	dc61      	bgt.n	8000732 <BBG_obsluga_zbicia_klocka+0x176>

            // Odwróć kierunek prędkości kulki
            bbg->kulka->predkosc_x *= -1;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	68da      	ldr	r2, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	4252      	negs	r2, r2
 800067a:	60da      	str	r2, [r3, #12]
            bbg->kulka->predkosc_y *= -1;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	691a      	ldr	r2, [r3, #16]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	4252      	negs	r2, r2
 8000688:	611a      	str	r2, [r3, #16]

            // zamaluj miejsce zbitego klocka
//            BSP_LCD_SetBackColor(0xFFFF0000); // czerwony
//            BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
            BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800068a:	4831      	ldr	r0, [pc, #196]	; (8000750 <BBG_obsluga_zbicia_klocka+0x194>)
 800068c:	f002 fc04 	bl	8002e98 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000690:	482f      	ldr	r0, [pc, #188]	; (8000750 <BBG_obsluga_zbicia_klocka+0x194>)
 8000692:	f002 fbe9 	bl	8002e68 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685a      	ldr	r2, [r3, #4]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	b298      	uxth	r0, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	b299      	uxth	r1, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	b29c      	uxth	r4, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	4622      	mov	r2, r4
 80006d8:	f002 fd68 	bl	80031ac <BSP_LCD_FillRect>

            // Usuń trafiony klocek z tablicy klocków
            free(bbg->klocki[i]);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f00b fb7d 	bl	800bde8 <free>

            // Przesuń pozostałe klocki w tablicy, aby zapełnić lukę po usuniętym klocku
            for (int j = i; j < bbg->liczba_klockow - 1; j++) {
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	e00f      	b.n	8000714 <BBG_obsluga_zbicia_klocka+0x158>
                bbg->klocki[j] = bbg->klocki[j + 1];
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	3301      	adds	r3, #1
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	441a      	add	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6859      	ldr	r1, [r3, #4]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	6812      	ldr	r2, [r2, #0]
 800070c:	601a      	str	r2, [r3, #0]
            for (int j = i; j < bbg->liczba_klockow - 1; j++) {
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	3301      	adds	r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	3b01      	subs	r3, #1
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	429a      	cmp	r2, r3
 800071e:	dbe9      	blt.n	80006f4 <BBG_obsluga_zbicia_klocka+0x138>
            }

            // Zmniejsz liczbę klocków o 1
            bbg->liczba_klockow--;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60da      	str	r2, [r3, #12]

            // Przerwij pętlę, gdy trafiony zostanie tylko jeden klocek
            if (bbg->liczba_klockow == 0) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d009      	beq.n	8000746 <BBG_obsluga_zbicia_klocka+0x18a>
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	429a      	cmp	r2, r3
 8000740:	f6ff af43 	blt.w	80005ca <BBG_obsluga_zbicia_klocka+0xe>
                break;
            }
        }
    }
}
 8000744:	e000      	b.n	8000748 <BBG_obsluga_zbicia_klocka+0x18c>
                break;
 8000746:	bf00      	nop
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	ffff0000 	.word	0xffff0000

08000754 <BBG_ruchKulki>:
    // Przykładowa obsługa dotyku
    printf("Obsługa dotyku ekranu\n");
}

// Ruch kulki (przykładowa implementacja)
void BBG_ruchKulki(BBG* bbg) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    // Przykładowy ruch kulki
    Kulka_ruch(bbg->kulka);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fbe1 	bl	8000f28 <Kulka_ruch>
    rysuj_kulke(bbg->kulka);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fbc2 	bl	8000ef4 <rysuj_kulke>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_CRC_Init+0x20>)
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <MX_CRC_Init+0x24>)
 8000780:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_CRC_Init+0x20>)
 8000784:	f003 fa9a 	bl	8003cbc <HAL_CRC_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800078e:	f000 ff87 	bl	80016a0 <Error_Handler>
  }

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200003bc 	.word	0x200003bc
 800079c:	40023000 	.word	0x40023000

080007a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <HAL_CRC_MspInit+0x3c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10d      	bne.n	80007ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <HAL_CRC_MspInit+0x40>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <HAL_CRC_MspInit+0x40>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <HAL_CRC_MspInit+0x40>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023000 	.word	0x40023000
 80007e0:	40023800 	.word	0x40023800

080007e4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_DMA2D_Init+0x5c>)
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <MX_DMA2D_Init+0x60>)
 80007ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_DMA2D_Init+0x5c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_DMA2D_Init+0x5c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_DMA2D_Init+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_DMA2D_Init+0x5c>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_DMA2D_Init+0x5c>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_DMA2D_Init+0x5c>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_DMA2D_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_DMA2D_Init+0x5c>)
 800081a:	f003 fc27 	bl	800406c <HAL_DMA2D_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000824:	f000 ff3c 	bl	80016a0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000828:	2101      	movs	r1, #1
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_DMA2D_Init+0x5c>)
 800082c:	f003 fe8c 	bl	8004548 <HAL_DMA2D_ConfigLayer>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000836:	f000 ff33 	bl	80016a0 <Error_Handler>
  }

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200003c4 	.word	0x200003c4
 8000844:	4002b000 	.word	0x4002b000

08000848 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_DMA2D_MspInit+0x48>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d115      	bne.n	8000886 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_DMA2D_MspInit+0x4c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <HAL_DMA2D_MspInit+0x4c>)
 8000864:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_DMA2D_MspInit+0x4c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2105      	movs	r1, #5
 800087a:	205a      	movs	r0, #90	; 0x5a
 800087c:	f003 f9f4 	bl	8003c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000880:	205a      	movs	r0, #90	; 0x5a
 8000882:	f003 fa0d 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	4002b000 	.word	0x4002b000
 8000894:	40023800 	.word	0x40023800

08000898 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_FMC_Init+0x98>)
 80008b2:	4a20      	ldr	r2, [pc, #128]	; (8000934 <MX_FMC_Init+0x9c>)
 80008b4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_FMC_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_FMC_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_FMC_Init+0x98>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_FMC_Init+0x98>)
 80008ca:	2210      	movs	r2, #16
 80008cc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_FMC_Init+0x98>)
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_FMC_Init+0x98>)
 80008d6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80008da:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_FMC_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_FMC_Init+0x98>)
 80008e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008e8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_FMC_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_FMC_Init+0x98>)
 80008f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80008fc:	2307      	movs	r3, #7
 80008fe:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000904:	2307      	movs	r3, #7
 8000906:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000908:	2303      	movs	r3, #3
 800090a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_FMC_Init+0x98>)
 800091a:	f007 fec9 	bl	80086b0 <HAL_SDRAM_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000924:	f000 febc 	bl	80016a0 <Error_Handler>
  }

}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000404 	.word	0x20000404
 8000934:	a0000140 	.word	0xa0000140

08000938 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800094c:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <HAL_FMC_MspInit+0x104>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d16f      	bne.n	8000a34 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000954:	4b39      	ldr	r3, [pc, #228]	; (8000a3c <HAL_FMC_MspInit+0x104>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <HAL_FMC_MspInit+0x108>)
 8000960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000962:	4a37      	ldr	r2, [pc, #220]	; (8000a40 <HAL_FMC_MspInit+0x108>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6393      	str	r3, [r2, #56]	; 0x38
 800096a:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <HAL_FMC_MspInit+0x108>)
 800096c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000976:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800097a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000988:	230c      	movs	r3, #12
 800098a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	482c      	ldr	r0, [pc, #176]	; (8000a44 <HAL_FMC_MspInit+0x10c>)
 8000992:	f003 ff07 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000996:	2301      	movs	r3, #1
 8000998:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4826      	ldr	r0, [pc, #152]	; (8000a48 <HAL_FMC_MspInit+0x110>)
 80009b0:	f003 fef8 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009b4:	f248 1333 	movw	r3, #33075	; 0x8133
 80009b8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	481f      	ldr	r0, [pc, #124]	; (8000a4c <HAL_FMC_MspInit+0x114>)
 80009d0:	f003 fee8 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009d4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009d8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009e6:	230c      	movs	r3, #12
 80009e8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <HAL_FMC_MspInit+0x118>)
 80009f0:	f003 fed8 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80009f4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009f8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <HAL_FMC_MspInit+0x11c>)
 8000a10:	f003 fec8 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000a14:	2360      	movs	r3, #96	; 0x60
 8000a16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a24:	230c      	movs	r3, #12
 8000a26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480a      	ldr	r0, [pc, #40]	; (8000a58 <HAL_FMC_MspInit+0x120>)
 8000a2e:	f003 feb9 	bl	80047a4 <HAL_GPIO_Init>
 8000a32:	e000      	b.n	8000a36 <HAL_FMC_MspInit+0xfe>
    return;
 8000a34:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000010c 	.word	0x2000010c
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021400 	.word	0x40021400
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	40020400 	.word	0x40020400

08000a5c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000a64:	f7ff ff68 	bl	8000938 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
 8000aa2:	4b7a      	ldr	r3, [pc, #488]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a79      	ldr	r2, [pc, #484]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b77      	ldr	r3, [pc, #476]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
 8000abe:	4b73      	ldr	r3, [pc, #460]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a72      	ldr	r2, [pc, #456]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000ac4:	f043 0320 	orr.w	r3, r3, #32
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b70      	ldr	r3, [pc, #448]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0320 	and.w	r3, r3, #32
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	4b6c      	ldr	r3, [pc, #432]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a6b      	ldr	r2, [pc, #428]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b69      	ldr	r3, [pc, #420]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	4b65      	ldr	r3, [pc, #404]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a64      	ldr	r2, [pc, #400]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b62      	ldr	r3, [pc, #392]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b5e      	ldr	r3, [pc, #376]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a5d      	ldr	r2, [pc, #372]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b5b      	ldr	r3, [pc, #364]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b57      	ldr	r3, [pc, #348]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a56      	ldr	r2, [pc, #344]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b50      	ldr	r3, [pc, #320]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a4f      	ldr	r2, [pc, #316]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b50:	f043 0310 	orr.w	r3, r3, #16
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0310 	and.w	r3, r3, #16
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <MX_GPIO_Init+0x204>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2116      	movs	r1, #22
 8000b82:	4843      	ldr	r0, [pc, #268]	; (8000c90 <MX_GPIO_Init+0x208>)
 8000b84:	f004 f8c2 	bl	8004d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	4841      	ldr	r0, [pc, #260]	; (8000c94 <MX_GPIO_Init+0x20c>)
 8000b8e:	f004 f8bd 	bl	8004d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b98:	483f      	ldr	r0, [pc, #252]	; (8000c98 <MX_GPIO_Init+0x210>)
 8000b9a:	f004 f8b7 	bl	8004d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ba4:	483d      	ldr	r0, [pc, #244]	; (8000c9c <MX_GPIO_Init+0x214>)
 8000ba6:	f004 f8b1 	bl	8004d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000baa:	2316      	movs	r3, #22
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4833      	ldr	r0, [pc, #204]	; (8000c90 <MX_GPIO_Init+0x208>)
 8000bc2:	f003 fdef 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bc6:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bcc:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <MX_GPIO_Init+0x218>)
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	482e      	ldr	r0, [pc, #184]	; (8000c94 <MX_GPIO_Init+0x20c>)
 8000bdc:	f003 fde2 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4827      	ldr	r0, [pc, #156]	; (8000c94 <MX_GPIO_Init+0x20c>)
 8000bf8:	f003 fdd4 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <MX_GPIO_Init+0x218>)
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4820      	ldr	r0, [pc, #128]	; (8000c90 <MX_GPIO_Init+0x208>)
 8000c10:	f003 fdc8 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <MX_GPIO_Init+0x21c>)
 8000c28:	f003 fdbc 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4815      	ldr	r0, [pc, #84]	; (8000c98 <MX_GPIO_Init+0x210>)
 8000c42:	f003 fdaf 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c46:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480e      	ldr	r0, [pc, #56]	; (8000c98 <MX_GPIO_Init+0x210>)
 8000c60:	f003 fda0 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <MX_GPIO_Init+0x214>)
 8000c7e:	f003 fd91 	bl	80047a4 <HAL_GPIO_Init>

}
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	; 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021800 	.word	0x40021800
 8000ca0:	10120000 	.word	0x10120000
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_I2C3_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <MX_I2C3_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000ce6:	f005 fa15 	bl	8006114 <HAL_I2C_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000cf0:	f000 fcd6 	bl	80016a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000cf8:	f006 f9fd 	bl	80070f6 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000d02:	f000 fccd 	bl	80016a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_I2C3_Init+0x74>)
 8000d0a:	f006 fa30 	bl	800716e <HAL_I2CEx_ConfigDigitalFilter>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000d14:	f000 fcc4 	bl	80016a0 <Error_Handler>
  }

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000438 	.word	0x20000438
 8000d20:	40005c00 	.word	0x40005c00
 8000d24:	000186a0 	.word	0x000186a0

08000d28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a29      	ldr	r2, [pc, #164]	; (8000dec <HAL_I2C_MspInit+0xc4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d14b      	bne.n	8000de2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a27      	ldr	r2, [pc, #156]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a20      	ldr	r2, [pc, #128]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d94:	2304      	movs	r3, #4
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4815      	ldr	r0, [pc, #84]	; (8000df4 <HAL_I2C_MspInit+0xcc>)
 8000da0:	f003 fd00 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000daa:	2312      	movs	r3, #18
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000db6:	2304      	movs	r3, #4
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <HAL_I2C_MspInit+0xd0>)
 8000dc2:	f003 fcef 	bl	80047a4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000dd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40005c00 	.word	0x40005c00
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020000 	.word	0x40020000

08000dfc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_I2C_MspDeInit+0x3c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d10f      	bne.n	8000e2e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_I2C_MspDeInit+0x40>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_I2C_MspDeInit+0x40>)
 8000e14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1e:	4808      	ldr	r0, [pc, #32]	; (8000e40 <HAL_I2C_MspDeInit+0x44>)
 8000e20:	f003 fe6a 	bl	8004af8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <HAL_I2C_MspDeInit+0x48>)
 8000e2a:	f003 fe65 	bl	8004af8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40005c00 	.word	0x40005c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020000 	.word	0x40020000

08000e48 <Klocek_init>:
#include "klocek.h"
#include "main.h"


// Inicjalizacja struktury Klocek
void Klocek_init(Klocek* k, int x, int y, int w, int h, uint32_t kol) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	603b      	str	r3, [r7, #0]
    k->pozycja_x = x;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	601a      	str	r2, [r3, #0]
    k->pozycja_y = y;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	605a      	str	r2, [r3, #4]
    k->szerokosc = w;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	609a      	str	r2, [r3, #8]
    k->wysokosc = h;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	60da      	str	r2, [r3, #12]
    k->kolor = kol;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	611a      	str	r2, [r3, #16]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <rysuj_klocek>:

void rysuj_klocek(Klocek* k){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(k->kolor);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 ffeb 	bl	8002e68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(k->pozycja_x, k->pozycja_y, k->szerokosc, k->wysokosc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	b298      	uxth	r0, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	b299      	uxth	r1, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	f002 f97f 	bl	80031ac <BSP_LCD_FillRect>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <Kulka_init>:
 */
#include "Kulka.h"
#include "main.h"

// Inicjalizacja struktury Kulka
void Kulka_init(Kulka* kulka, int x, int y, int r, int vx, int vy, uint32_t kol) {
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	603b      	str	r3, [r7, #0]
    kulka->polozenie_x = x;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	601a      	str	r2, [r3, #0]
    kulka->polozenie_y = y;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	605a      	str	r2, [r3, #4]
    kulka->promien = r;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	609a      	str	r2, [r3, #8]
    kulka->predkosc_x = vx;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
    kulka->predkosc_y = vy;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	611a      	str	r2, [r3, #16]
    kulka->kolor = kol;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6a3a      	ldr	r2, [r7, #32]
 8000ee6:	615a      	str	r2, [r3, #20]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <rysuj_kulke>:

void rysuj_kulke(Kulka* kulka){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(kulka->kolor);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 ffb1 	bl	8002e68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b298      	uxth	r0, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	b299      	uxth	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f002 f9a1 	bl	8003260 <BSP_LCD_FillCircle>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <Kulka_ruch>:
//
//    // narysuj na nowej pozycji
//    BSP_LCD_SetTextColor(kulka->kolor);
//	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
//}
void Kulka_ruch(Kulka* kulka) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	// Zamaluj stary stan kulki
	BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8000f30:	482f      	ldr	r0, [pc, #188]	; (8000ff0 <Kulka_ruch+0xc8>)
 8000f32:	f001 ff99 	bl	8002e68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	b298      	uxth	r0, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	b299      	uxth	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f002 f989 	bl	8003260 <BSP_LCD_FillCircle>

	// Oblicz nowe położenie kulki
	int nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
	int nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	4413      	add	r3, r2
 8000f64:	60bb      	str	r3, [r7, #8]

	// Sprawdź zderzenie z lewą i prawą krawędzią ekranu
	if (nowe_polozenie_x - kulka->promien < 0 || nowe_polozenie_x + kulka->promien > BSP_LCD_GetXSize()) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db09      	blt.n	8000f86 <Kulka_ruch+0x5e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	461c      	mov	r4, r3
 8000f7c:	f001 fe96 	bl	8002cac <BSP_LCD_GetXSize>
 8000f80:	4603      	mov	r3, r0
 8000f82:	429c      	cmp	r4, r3
 8000f84:	d904      	bls.n	8000f90 <Kulka_ruch+0x68>
		// Zderzenie z lewą lub prawą krawędzią, zmień kierunek prędkości poziomej
		kulka->predkosc_x = -kulka->predkosc_x;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	425a      	negs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	60da      	str	r2, [r3, #12]
	}

	// Sprawdź zderzenie z górną i dolną krawędzią ekranu
	if (nowe_polozenie_y - kulka->promien < 0 || nowe_polozenie_y + kulka->promien > BSP_LCD_GetYSize()) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db09      	blt.n	8000fb0 <Kulka_ruch+0x88>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	f001 fe8d 	bl	8002cc4 <BSP_LCD_GetYSize>
 8000faa:	4603      	mov	r3, r0
 8000fac:	429c      	cmp	r4, r3
 8000fae:	d904      	bls.n	8000fba <Kulka_ruch+0x92>
		// Zderzenie z górną lub dolną krawędzią, zmień kierunek prędkości pionowej
		kulka->predkosc_y = -kulka->predkosc_y;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	425a      	negs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	611a      	str	r2, [r3, #16]
	}

	// Aktualizuj położenie kulki na nowe pozycje
	kulka->polozenie_x = nowe_polozenie_x;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = nowe_polozenie_y;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	605a      	str	r2, [r3, #4]

	// Narysuj kulke na nowej pozycji
	BSP_LCD_SetTextColor(kulka->kolor);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 ff4c 	bl	8002e68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b298      	uxth	r0, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	b299      	uxth	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f002 f93c 	bl	8003260 <BSP_LCD_FillCircle>
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	ffff0000 	.word	0xffff0000

08000ff4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09a      	sub	sp, #104	; 0x68
 8000ff8:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ffa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ffe:	2234      	movs	r2, #52	; 0x34
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f00a ff03 	bl	800be0e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2234      	movs	r2, #52	; 0x34
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00a fefd 	bl	800be0e <memset>

  hltdc.Instance = LTDC;
 8001014:	4b4f      	ldr	r3, [pc, #316]	; (8001154 <MX_LTDC_Init+0x160>)
 8001016:	4a50      	ldr	r2, [pc, #320]	; (8001158 <MX_LTDC_Init+0x164>)
 8001018:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800101a:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <MX_LTDC_Init+0x160>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001020:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <MX_LTDC_Init+0x160>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001026:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <MX_LTDC_Init+0x160>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800102c:	4b49      	ldr	r3, [pc, #292]	; (8001154 <MX_LTDC_Init+0x160>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001032:	4b48      	ldr	r3, [pc, #288]	; (8001154 <MX_LTDC_Init+0x160>)
 8001034:	2209      	movs	r2, #9
 8001036:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <MX_LTDC_Init+0x160>)
 800103a:	2201      	movs	r2, #1
 800103c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800103e:	4b45      	ldr	r3, [pc, #276]	; (8001154 <MX_LTDC_Init+0x160>)
 8001040:	221d      	movs	r2, #29
 8001042:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <MX_LTDC_Init+0x160>)
 8001046:	2203      	movs	r2, #3
 8001048:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <MX_LTDC_Init+0x160>)
 800104c:	f240 120d 	movw	r2, #269	; 0x10d
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <MX_LTDC_Init+0x160>)
 8001054:	f240 1243 	movw	r2, #323	; 0x143
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800105a:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <MX_LTDC_Init+0x160>)
 800105c:	f240 1217 	movw	r2, #279	; 0x117
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <MX_LTDC_Init+0x160>)
 8001064:	f240 1247 	movw	r2, #327	; 0x147
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <MX_LTDC_Init+0x160>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001072:	4b38      	ldr	r3, [pc, #224]	; (8001154 <MX_LTDC_Init+0x160>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <MX_LTDC_Init+0x160>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001082:	4834      	ldr	r0, [pc, #208]	; (8001154 <MX_LTDC_Init+0x160>)
 8001084:	f006 f8b2 	bl	80071ec <HAL_LTDC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800108e:	f000 fb07 	bl	80016a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8001096:	23f0      	movs	r3, #240	; 0xf0
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800109e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010a4:	2302      	movs	r3, #2
 80010a6:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80010a8:	23ff      	movs	r3, #255	; 0xff
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010b4:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010b6:	2307      	movs	r3, #7
 80010b8:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 80010ba:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80010be:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 80010c0:	23f0      	movs	r3, #240	; 0xf0
 80010c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 80010c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010c8:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	481b      	ldr	r0, [pc, #108]	; (8001154 <MX_LTDC_Init+0x160>)
 80010e6:	f006 fa13 	bl	8007510 <HAL_LTDC_ConfigLayer>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 80010f0:	f000 fad6 	bl	80016a0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800110c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001110:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001112:	2305      	movs	r3, #5
 8001114:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_LTDC_Init+0x160>)
 800113c:	f006 f9e8 	bl	8007510 <HAL_LTDC_ConfigLayer>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8001146:	f000 faab 	bl	80016a0 <Error_Handler>
  }

}
 800114a:	bf00      	nop
 800114c:	3768      	adds	r7, #104	; 0x68
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000048c 	.word	0x2000048c
 8001158:	40016800 	.word	0x40016800

0800115c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a7b      	ldr	r2, [pc, #492]	; (8001368 <HAL_LTDC_MspInit+0x20c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	f040 80f0 	bne.w	8001360 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
 8001184:	4b79      	ldr	r3, [pc, #484]	; (800136c <HAL_LTDC_MspInit+0x210>)
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	4a78      	ldr	r2, [pc, #480]	; (800136c <HAL_LTDC_MspInit+0x210>)
 800118a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800118e:	6453      	str	r3, [r2, #68]	; 0x44
 8001190:	4b76      	ldr	r3, [pc, #472]	; (800136c <HAL_LTDC_MspInit+0x210>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001198:	623b      	str	r3, [r7, #32]
 800119a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	4b72      	ldr	r3, [pc, #456]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4a71      	ldr	r2, [pc, #452]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
 80011ac:	4b6f      	ldr	r3, [pc, #444]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	4b6b      	ldr	r3, [pc, #428]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a6a      	ldr	r2, [pc, #424]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b68      	ldr	r3, [pc, #416]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	4b64      	ldr	r3, [pc, #400]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a63      	ldr	r2, [pc, #396]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b61      	ldr	r3, [pc, #388]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	4b5d      	ldr	r3, [pc, #372]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	4a5c      	ldr	r2, [pc, #368]	; (800136c <HAL_LTDC_MspInit+0x210>)
 80011fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001200:	4b5a      	ldr	r3, [pc, #360]	; (800136c <HAL_LTDC_MspInit+0x210>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4b56      	ldr	r3, [pc, #344]	; (800136c <HAL_LTDC_MspInit+0x210>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	4a55      	ldr	r2, [pc, #340]	; (800136c <HAL_LTDC_MspInit+0x210>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6313      	str	r3, [r2, #48]	; 0x30
 800121c:	4b53      	ldr	r3, [pc, #332]	; (800136c <HAL_LTDC_MspInit+0x210>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <HAL_LTDC_MspInit+0x210>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_LTDC_MspInit+0x210>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6313      	str	r3, [r2, #48]	; 0x30
 8001238:	4b4c      	ldr	r3, [pc, #304]	; (800136c <HAL_LTDC_MspInit+0x210>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001256:	230e      	movs	r3, #14
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	4843      	ldr	r0, [pc, #268]	; (8001370 <HAL_LTDC_MspInit+0x214>)
 8001262:	f003 fa9f 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001266:	f641 0358 	movw	r3, #6232	; 0x1858
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001278:	230e      	movs	r3, #14
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	483c      	ldr	r0, [pc, #240]	; (8001374 <HAL_LTDC_MspInit+0x218>)
 8001284:	f003 fa8e 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001288:	2303      	movs	r3, #3
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001298:	2309      	movs	r3, #9
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	4835      	ldr	r0, [pc, #212]	; (8001378 <HAL_LTDC_MspInit+0x21c>)
 80012a4:	f003 fa7e 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80012a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ba:	230e      	movs	r3, #14
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	482c      	ldr	r0, [pc, #176]	; (8001378 <HAL_LTDC_MspInit+0x21c>)
 80012c6:	f003 fa6d 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80012ca:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012dc:	230e      	movs	r3, #14
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4825      	ldr	r0, [pc, #148]	; (800137c <HAL_LTDC_MspInit+0x220>)
 80012e8:	f003 fa5c 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80012ec:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012fe:	230e      	movs	r3, #14
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	481d      	ldr	r0, [pc, #116]	; (8001380 <HAL_LTDC_MspInit+0x224>)
 800130a:	f003 fa4b 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800130e:	2348      	movs	r3, #72	; 0x48
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800131e:	230e      	movs	r3, #14
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	4816      	ldr	r0, [pc, #88]	; (8001384 <HAL_LTDC_MspInit+0x228>)
 800132a:	f003 fa3b 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800132e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001340:	2309      	movs	r3, #9
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <HAL_LTDC_MspInit+0x220>)
 800134c:	f003 fa2a 	bl	80047a4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2105      	movs	r1, #5
 8001354:	2058      	movs	r0, #88	; 0x58
 8001356:	f002 fc87 	bl	8003c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800135a:	2058      	movs	r0, #88	; 0x58
 800135c:	f002 fca0 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001360:	bf00      	nop
 8001362:	3738      	adds	r7, #56	; 0x38
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40016800 	.word	0x40016800
 800136c:	40023800 	.word	0x40023800
 8001370:	40021400 	.word	0x40021400
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40021800 	.word	0x40021800
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b09f      	sub	sp, #124	; 0x7c
 800138c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138e:	f002 fb4f 	bl	8003a30 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001392:	f000 f8ef 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001396:	f7ff fb77 	bl	8000a88 <MX_GPIO_Init>
  MX_CRC_Init();
 800139a:	f7ff f9ed 	bl	8000778 <MX_CRC_Init>
  MX_DMA2D_Init();
 800139e:	f7ff fa21 	bl	80007e4 <MX_DMA2D_Init>
  MX_FMC_Init();
 80013a2:	f7ff fa79 	bl	8000898 <MX_FMC_Init>
  MX_I2C3_Init();
 80013a6:	f7ff fc7f 	bl	8000ca8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80013aa:	f7ff fe23 	bl	8000ff4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80013ae:	f000 f9b9 	bl	8001724 <MX_SPI5_Init>
  MX_TIM1_Init();
 80013b2:	f000 fb67 	bl	8001a84 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013b6:	f000 fbd7 	bl	8001b68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80013ba:	f001 fc0d 	bl	8002bd8 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80013be:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80013c2:	2001      	movs	r0, #1
 80013c4:	f001 fc8a 	bl	8002cdc <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f001 fceb 	bl	8002da4 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLUE);
 80013ce:	4865      	ldr	r0, [pc, #404]	; (8001564 <main+0x1dc>)
 80013d0:	f001 fd96 	bl	8002f00 <BSP_LCD_Clear>
    //HAL_Delay(1000);
    BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	2001      	movs	r0, #1
 80013da:	f001 fd31 	bl	8002e40 <BSP_LCD_SetColorKeying>
    BSP_LCD_SetLayerVisible(1, DISABLE);
 80013de:	2100      	movs	r1, #0
 80013e0:	2001      	movs	r0, #1
 80013e2:	f001 fcef 	bl	8002dc4 <BSP_LCD_SetLayerVisible>

    BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 80013e6:	4960      	ldr	r1, [pc, #384]	; (8001568 <main+0x1e0>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f001 fc77 	bl	8002cdc <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(0);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f001 fcd8 	bl	8002da4 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 80013f4:	f001 ffd4 	bl	80033a0 <BSP_LCD_DisplayOn>

    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f001 fd80 	bl	8002f00 <BSP_LCD_Clear>

    BSP_LCD_SetFont(&Font12);
 8001400:	485a      	ldr	r0, [pc, #360]	; (800156c <main+0x1e4>)
 8001402:	f001 fd63 	bl	8002ecc <BSP_LCD_SetFont>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001406:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800140a:	f001 fd2d 	bl	8002e68 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	f001 fd41 	bl	8002e98 <BSP_LCD_SetBackColor>

//    Touchscreen_Calibration();
    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001416:	f001 fc49 	bl	8002cac <BSP_LCD_GetXSize>
 800141a:	4603      	mov	r3, r0
 800141c:	b29c      	uxth	r4, r3
 800141e:	f001 fc51 	bl	8002cc4 <BSP_LCD_GetYSize>
 8001422:	4603      	mov	r3, r0
 8001424:	b29b      	uxth	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	4620      	mov	r0, r4
 800142a:	f002 fac7 	bl	80039bc <BSP_TS_Init>
    BSP_LCD_Clear(LCD_COLOR_RED);
 800142e:	4850      	ldr	r0, [pc, #320]	; (8001570 <main+0x1e8>)
 8001430:	f001 fd66 	bl	8002f00 <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001434:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001438:	f001 fd2e 	bl	8002e98 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800143c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001440:	f001 fd12 	bl	8002e68 <BSP_LCD_SetTextColor>

    // kulka
    int kulka_pocz_x = 200;
 8001444:	23c8      	movs	r3, #200	; 0xc8
 8001446:	663b      	str	r3, [r7, #96]	; 0x60
    int kulka_pocz_y = 300;
 8001448:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800144c:	65fb      	str	r3, [r7, #92]	; 0x5c
    int kulka_r = 8;
 800144e:	2308      	movs	r3, #8
 8001450:	65bb      	str	r3, [r7, #88]	; 0x58
    int kulka_vx = 1;
 8001452:	2301      	movs	r3, #1
 8001454:	657b      	str	r3, [r7, #84]	; 0x54
    int kulka_vy = 1;
 8001456:	2301      	movs	r3, #1
 8001458:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t kulka_kolor = LCD_COLOR_BLACK;
 800145a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800145e:	64fb      	str	r3, [r7, #76]	; 0x4c

    // platforma
    int platforma_x = 120;
 8001460:	2378      	movs	r3, #120	; 0x78
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
    int platforma_y = 300;
 8001464:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001468:	647b      	str	r3, [r7, #68]	; 0x44
    int platforma_krok = 5;
 800146a:	2305      	movs	r3, #5
 800146c:	643b      	str	r3, [r7, #64]	; 0x40
    int platforma_wysokosc = 10;
 800146e:	230a      	movs	r3, #10
 8001470:	63fb      	str	r3, [r7, #60]	; 0x3c
    int platforma_szerokosc = 50;
 8001472:	2332      	movs	r3, #50	; 0x32
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t platforma_kolor = LCD_COLOR_YELLOW;
 8001476:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800147a:	637b      	str	r3, [r7, #52]	; 0x34

    // klocek
    int klocek_szerokosc = 30;
 800147c:	231e      	movs	r3, #30
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
    int klocek_wysokosc = 10;
 8001480:	230a      	movs	r3, #10
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
    int liczba_klockow = 10;
 8001484:	230a      	movs	r3, #10
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28

    int odswiezanie = 16; // 1000ms / 16 = 60HZ
 8001488:	2310      	movs	r3, #16
 800148a:	627b      	str	r3, [r7, #36]	; 0x24

	Platforma* platforma = (Platforma*)malloc(sizeof(Platforma));
 800148c:	2018      	movs	r0, #24
 800148e:	f00a fca3 	bl	800bdd8 <malloc>
 8001492:	4603      	mov	r3, r0
 8001494:	623b      	str	r3, [r7, #32]
	Kulka* kulka = (Kulka*)malloc(sizeof(Kulka));
 8001496:	2018      	movs	r0, #24
 8001498:	f00a fc9e 	bl	800bdd8 <malloc>
 800149c:	4603      	mov	r3, r0
 800149e:	61fb      	str	r3, [r7, #28]
    Klocek** klocki = (Klocek**)malloc(liczba_klockow * sizeof(Klocek*));
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00a fc97 	bl	800bdd8 <malloc>
 80014aa:	4603      	mov	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < liczba_klockow; i++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	667b      	str	r3, [r7, #100]	; 0x64
 80014b2:	e026      	b.n	8001502 <main+0x17a>
        klocki[i] = (Klocek*)malloc(sizeof(Klocek));
 80014b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	18d4      	adds	r4, r2, r3
 80014bc:	2014      	movs	r0, #20
 80014be:	f00a fc8b 	bl	800bdd8 <malloc>
 80014c2:	4603      	mov	r3, r0
 80014c4:	6023      	str	r3, [r4, #0]
        uint32_t kolor_klocka = i % 2 == 0 ? LCD_COLOR_BLUE : LCD_COLOR_YELLOW;
 80014c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <main+0x14c>
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <main+0x1dc>)
 80014d2:	e001      	b.n	80014d8 <main+0x150>
 80014d4:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80014d8:	617b      	str	r3, [r7, #20]
        Klocek_init(klocki[i], i * klocek_szerokosc, klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka);
 80014da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4413      	add	r3, r2
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014e8:	fb02 f103 	mul.w	r1, r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f8:	f7ff fca6 	bl	8000e48 <Klocek_init>
    for (int i = 0; i < liczba_klockow; i++) {
 80014fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014fe:	3301      	adds	r3, #1
 8001500:	667b      	str	r3, [r7, #100]	; 0x64
 8001502:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	429a      	cmp	r2, r3
 8001508:	dbd4      	blt.n	80014b4 <main+0x12c>
    }


	//Klocek* klocek = (Klocek*)malloc(sizeof(Klocek));

    Platforma_init(platforma, platforma_x, platforma_y, platforma_szerokosc, platforma_wysokosc, platforma_krok, platforma_kolor);
 800150a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800151a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800151c:	6a38      	ldr	r0, [r7, #32]
 800151e:	f000 f8c6 	bl	80016ae <Platforma_init>
    Kulka_init(kulka, kulka_pocz_x, kulka_pocz_y, kulka_r, kulka_vx, kulka_vy, kulka_kolor);
 8001522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001532:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001534:	69f8      	ldr	r0, [r7, #28]
 8001536:	f7ff fcbe 	bl	8000eb6 <Kulka_init>
//    Klocek_init(klocek, klocek_, 0, 10, 5);

	BBG bbg;
	BBG_init(&bbg, platforma, klocki, kulka, liczba_klockow);
 800153a:	1d38      	adds	r0, r7, #4
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	6a39      	ldr	r1, [r7, #32]
 8001546:	f7fe ffd3 	bl	80004f0 <BBG_init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BBG_ruchKulki(&bbg);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f901 	bl	8000754 <BBG_ruchKulki>
	  BBG_obsluga_zbicia_klocka(&bbg);
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f831 	bl	80005bc <BBG_obsluga_zbicia_klocka>
	  HAL_Delay(odswiezanie);
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	4618      	mov	r0, r3
 800155e:	f002 faa9 	bl	8003ab4 <HAL_Delay>
	  BBG_ruchKulki(&bbg);
 8001562:	e7f2      	b.n	800154a <main+0x1c2>
 8001564:	ff0000ff 	.word	0xff0000ff
 8001568:	d0130000 	.word	0xd0130000
 800156c:	20000074 	.word	0x20000074
 8001570:	ffff0000 	.word	0xffff0000

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0a0      	sub	sp, #128	; 0x80
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800157e:	2230      	movs	r2, #48	; 0x30
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f00a fc43 	bl	800be0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2230      	movs	r2, #48	; 0x30
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00a fc34 	bl	800be0e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b32      	ldr	r3, [pc, #200]	; (8001674 <SystemClock_Config+0x100>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a31      	ldr	r2, [pc, #196]	; (8001674 <SystemClock_Config+0x100>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <SystemClock_Config+0x100>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <SystemClock_Config+0x104>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015ce:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <SystemClock_Config+0x104>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <SystemClock_Config+0x104>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ec:	2302      	movs	r3, #2
 80015ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015fa:	2348      	movs	r3, #72	; 0x48
 80015fc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015fe:	2302      	movs	r3, #2
 8001600:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001602:	2303      	movs	r3, #3
 8001604:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001606:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800160a:	4618      	mov	r0, r3
 800160c:	f006 f9fe 	bl	8007a0c <HAL_RCC_OscConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001616:	f000 f843 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161e:	2302      	movs	r3, #2
 8001620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f006 fc58 	bl	8007eec <HAL_RCC_ClockConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001642:	f000 f82d 	bl	80016a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001646:	2308      	movs	r3, #8
 8001648:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800164a:	2332      	movs	r3, #50	; 0x32
 800164c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800164e:	2302      	movs	r3, #2
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001652:	2300      	movs	r3, #0
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4618      	mov	r0, r3
 800165c:	f006 fe6a 	bl	8008334 <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001666:	f000 f81b 	bl	80016a0 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3780      	adds	r7, #128	; 0x80
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800168e:	f002 f9f1 	bl	8003a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40001000 	.word	0x40001000

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */


  /* USER CODE END Error_Handler_Debug */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <Platforma_init>:

#include "Platforma.h"
#include "main.h"

// Inicjalizacja struktury Platforma
void Platforma_init(Platforma* platforma, int x, int y ,int w, int h, int k, uint32_t kol) {
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	603b      	str	r3, [r7, #0]
    platforma->polozenie_x = x;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	601a      	str	r2, [r3, #0]
    platforma->polozenie_y = y;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	605a      	str	r2, [r3, #4]
    platforma->szerokosc = w;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	609a      	str	r2, [r3, #8]
    platforma->wysokosc = h;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	60da      	str	r2, [r3, #12]
    platforma->krok = k;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	611a      	str	r2, [r3, #16]
    platforma->kolor = kol;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a3a      	ldr	r2, [r7, #32]
 80016de:	615a      	str	r2, [r3, #20]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <rysuj_platforme>:
void rysuj_platforme(Platforma* platforma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(platforma->kolor);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 fbb5 	bl	8002e68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b298      	uxth	r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	b299      	uxth	r1, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	b29a      	uxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f001 fd49 	bl	80031ac <BSP_LCD_FillRect>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_SPI5_Init+0x64>)
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <MX_SPI5_Init+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_SPI5_Init+0x64>)
 8001730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001734:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_SPI5_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_SPI5_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_SPI5_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_SPI5_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <MX_SPI5_Init+0x64>)
 8001750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001754:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MX_SPI5_Init+0x64>)
 8001758:	2218      	movs	r2, #24
 800175a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <MX_SPI5_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_SPI5_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <MX_SPI5_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_SPI5_Init+0x64>)
 8001770:	220a      	movs	r2, #10
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <MX_SPI5_Init+0x64>)
 8001776:	f007 f81a 	bl	80087ae <HAL_SPI_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001780:	f7ff ff8e 	bl	80016a0 <Error_Handler>
  }

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000534 	.word	0x20000534
 800178c:	40015000 	.word	0x40015000

08001790 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a19      	ldr	r2, [pc, #100]	; (8001814 <HAL_SPI_MspInit+0x84>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d12c      	bne.n	800180c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017d8:	f043 0320 	orr.w	r3, r3, #32
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80017ea:	f44f 7360 	mov.w	r3, #896	; 0x380
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017fc:	2305      	movs	r3, #5
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_SPI_MspInit+0x8c>)
 8001808:	f002 ffcc 	bl	80047a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40015000 	.word	0x40015000
 8001818:	40023800 	.word	0x40023800
 800181c:	40021400 	.word	0x40021400

08001820 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_SPI_MspDeInit+0x30>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d10a      	bne.n	8001848 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_SPI_MspDeInit+0x34>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_SPI_MspDeInit+0x34>)
 8001838:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800183e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_SPI_MspDeInit+0x38>)
 8001844:	f003 f958 	bl	8004af8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40015000 	.word	0x40015000
 8001854:	40023800 	.word	0x40023800
 8001858:	40021400 	.word	0x40021400

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_MspInit+0x54>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <HAL_MspInit+0x54>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x54>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_MspInit+0x54>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_MspInit+0x54>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_MspInit+0x54>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	210f      	movs	r1, #15
 800189e:	f06f 0001 	mvn.w	r0, #1
 80018a2:	f002 f9e1 	bl	8003c68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	2036      	movs	r0, #54	; 0x36
 80018ca:	f002 f9cd 	bl	8003c68 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ce:	2036      	movs	r0, #54	; 0x36
 80018d0:	f002 f9e6 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_InitTick+0xa4>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_InitTick+0xa4>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_InitTick+0xa4>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018f0:	f107 0210 	add.w	r2, r7, #16
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f006 fce8 	bl	80082d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001900:	f006 fcbe 	bl	8008280 <HAL_RCC_GetPCLK1Freq>
 8001904:	4603      	mov	r3, r0
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_InitTick+0xa8>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	3b01      	subs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_InitTick+0xac>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <HAL_InitTick+0xb0>)
 800191c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_InitTick+0xac>)
 8001920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001924:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_InitTick+0xac>)
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_InitTick+0xac>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_InitTick+0xac>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <HAL_InitTick+0xac>)
 800193a:	f007 fcc3 	bl	80092c4 <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001944:	4806      	ldr	r0, [pc, #24]	; (8001960 <HAL_InitTick+0xac>)
 8001946:	f007 fce8 	bl	800931a <HAL_TIM_Base_Start_IT>
 800194a:	4603      	mov	r3, r0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3730      	adds	r7, #48	; 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	431bde83 	.word	0x431bde83
 8001960:	2000058c 	.word	0x2000058c
 8001964:	40001000 	.word	0x40001000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <MemManage_Handler+0x4>

08001982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler+0x4>

0800198e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <TIM6_DAC_IRQHandler+0x10>)
 80019a2:	f007 fcde 	bl	8009362 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000058c 	.word	0x2000058c

080019b0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <OTG_HS_IRQHandler+0x10>)
 80019b6:	f003 f9c2 	bl	8004d3e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000750 	.word	0x20000750

080019c4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <LTDC_IRQHandler+0x10>)
 80019ca:	f005 fcdf 	bl	800738c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000048c 	.word	0x2000048c

080019d8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <DMA2D_IRQHandler+0x10>)
 80019de:	f002 fca2 	bl	8004326 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200003c4 	.word	0x200003c4

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f00a f9b2 	bl	800bd84 <__errno>
 8001a20:	4602      	mov	r2, r0
 8001a22:	230c      	movs	r3, #12
 8001a24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20030000 	.word	0x20030000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	20000110 	.word	0x20000110
 8001a54:	20000a18 	.word	0x20000a18

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <SystemInit+0x28>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <SystemInit+0x28>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SystemInit+0x28>)
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	609a      	str	r2, [r3, #8]
#endif
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <MX_TIM1_Init+0x9c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001ace:	f007 fbf9 	bl	80092c4 <HAL_TIM_Base_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ad8:	f7ff fde2 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001aea:	f007 fd42 	bl	8009572 <HAL_TIM_ConfigClockSource>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001af4:	f7ff fdd4 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001b06:	f007 ff4d 	bl	80099a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b10:	f7ff fdc6 	bl	80016a0 <Error_Handler>
  }

}
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200005cc 	.word	0x200005cc
 8001b20:	40010000 	.word	0x40010000

08001b24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_TIM_Base_MspInit+0x3c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10d      	bne.n	8001b52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_TIM_Base_MspInit+0x40>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_TIM_Base_MspInit+0x40>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_TIM_Base_MspInit+0x40>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40010000 	.word	0x40010000
 8001b64:	40023800 	.word	0x40023800

08001b68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <MX_USART1_UART_Init+0x50>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	f007 ff90 	bl	8009ac4 <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001baa:	f7ff fd79 	bl	80016a0 <Error_Handler>
  }

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000060c 	.word	0x2000060c
 8001bb8:	40011000 	.word	0x40011000

08001bbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_UART_MspInit+0x84>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d12c      	bne.n	8001c38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_UART_MspInit+0x88>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <HAL_UART_MspInit+0x88>)
 8001be8:	f043 0310 	orr.w	r3, r3, #16
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_UART_MspInit+0x88>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_UART_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_UART_MspInit+0x88>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_UART_MspInit+0x88>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c28:	2307      	movs	r3, #7
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <HAL_UART_MspInit+0x8c>)
 8001c34:	f002 fdb6 	bl	80047a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40011000 	.word	0x40011000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000

08001c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c84 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c52:	e003      	b.n	8001c5c <LoopCopyDataInit>

08001c54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c5a:	3104      	adds	r1, #4

08001c5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c5c:	480b      	ldr	r0, [pc, #44]	; (8001c8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c64:	d3f6      	bcc.n	8001c54 <CopyDataInit>
  ldr  r2, =_sbss
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c68:	e002      	b.n	8001c70 <LoopFillZerobss>

08001c6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c6c:	f842 3b04 	str.w	r3, [r2], #4

08001c70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c74:	d3f9      	bcc.n	8001c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c76:	f7ff feef 	bl	8001a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f00a f889 	bl	800bd90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7e:	f7ff fb83 	bl	8001388 <main>
  bx  lr    
 8001c82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c84:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c88:	0800df68 	.word	0x0800df68
  ldr  r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c90:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8001c94:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8001c98:	20000a18 	.word	0x20000a18

08001c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC_IRQHandler>

08001c9e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001ca2:	f000 fe4b 	bl	800293c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001ca6:	20ca      	movs	r0, #202	; 0xca
 8001ca8:	f000 f95d 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001cac:	20c3      	movs	r0, #195	; 0xc3
 8001cae:	f000 f967 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001cb2:	2008      	movs	r0, #8
 8001cb4:	f000 f964 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001cb8:	2050      	movs	r0, #80	; 0x50
 8001cba:	f000 f961 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001cbe:	20cf      	movs	r0, #207	; 0xcf
 8001cc0:	f000 f951 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f000 f95b 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001cca:	20c1      	movs	r0, #193	; 0xc1
 8001ccc:	f000 f958 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001cd0:	2030      	movs	r0, #48	; 0x30
 8001cd2:	f000 f955 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001cd6:	20ed      	movs	r0, #237	; 0xed
 8001cd8:	f000 f945 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001cdc:	2064      	movs	r0, #100	; 0x64
 8001cde:	f000 f94f 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	f000 f94c 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001ce8:	2012      	movs	r0, #18
 8001cea:	f000 f949 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001cee:	2081      	movs	r0, #129	; 0x81
 8001cf0:	f000 f946 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001cf4:	20e8      	movs	r0, #232	; 0xe8
 8001cf6:	f000 f936 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001cfa:	2085      	movs	r0, #133	; 0x85
 8001cfc:	f000 f940 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f000 f93d 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d06:	2078      	movs	r0, #120	; 0x78
 8001d08:	f000 f93a 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001d0c:	20cb      	movs	r0, #203	; 0xcb
 8001d0e:	f000 f92a 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001d12:	2039      	movs	r0, #57	; 0x39
 8001d14:	f000 f934 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001d18:	202c      	movs	r0, #44	; 0x2c
 8001d1a:	f000 f931 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f92e 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001d24:	2034      	movs	r0, #52	; 0x34
 8001d26:	f000 f92b 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001d2a:	2002      	movs	r0, #2
 8001d2c:	f000 f928 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001d30:	20f7      	movs	r0, #247	; 0xf7
 8001d32:	f000 f918 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001d36:	2020      	movs	r0, #32
 8001d38:	f000 f922 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001d3c:	20ea      	movs	r0, #234	; 0xea
 8001d3e:	f000 f912 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f91c 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f000 f919 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001d4e:	20b1      	movs	r0, #177	; 0xb1
 8001d50:	f000 f909 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f000 f913 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001d5a:	201b      	movs	r0, #27
 8001d5c:	f000 f910 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d60:	20b6      	movs	r0, #182	; 0xb6
 8001d62:	f000 f900 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d66:	200a      	movs	r0, #10
 8001d68:	f000 f90a 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001d6c:	20a2      	movs	r0, #162	; 0xa2
 8001d6e:	f000 f907 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001d72:	20c0      	movs	r0, #192	; 0xc0
 8001d74:	f000 f8f7 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001d78:	2010      	movs	r0, #16
 8001d7a:	f000 f901 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001d7e:	20c1      	movs	r0, #193	; 0xc1
 8001d80:	f000 f8f1 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001d84:	2010      	movs	r0, #16
 8001d86:	f000 f8fb 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001d8a:	20c5      	movs	r0, #197	; 0xc5
 8001d8c:	f000 f8eb 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001d90:	2045      	movs	r0, #69	; 0x45
 8001d92:	f000 f8f5 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001d96:	2015      	movs	r0, #21
 8001d98:	f000 f8f2 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001d9c:	20c7      	movs	r0, #199	; 0xc7
 8001d9e:	f000 f8e2 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001da2:	2090      	movs	r0, #144	; 0x90
 8001da4:	f000 f8ec 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001da8:	2036      	movs	r0, #54	; 0x36
 8001daa:	f000 f8dc 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001dae:	20c8      	movs	r0, #200	; 0xc8
 8001db0:	f000 f8e6 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001db4:	20f2      	movs	r0, #242	; 0xf2
 8001db6:	f000 f8d6 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f8e0 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001dc0:	20b0      	movs	r0, #176	; 0xb0
 8001dc2:	f000 f8d0 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001dc6:	20c2      	movs	r0, #194	; 0xc2
 8001dc8:	f000 f8da 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001dcc:	20b6      	movs	r0, #182	; 0xb6
 8001dce:	f000 f8ca 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f000 f8d4 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001dd8:	20a7      	movs	r0, #167	; 0xa7
 8001dda:	f000 f8d1 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001dde:	2027      	movs	r0, #39	; 0x27
 8001de0:	f000 f8ce 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001de4:	2004      	movs	r0, #4
 8001de6:	f000 f8cb 	bl	8001f80 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001dea:	202a      	movs	r0, #42	; 0x2a
 8001dec:	f000 f8bb 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f000 f8c5 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f000 f8c2 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f000 f8bf 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001e02:	20ef      	movs	r0, #239	; 0xef
 8001e04:	f000 f8bc 	bl	8001f80 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001e08:	202b      	movs	r0, #43	; 0x2b
 8001e0a:	f000 f8ac 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f000 f8b6 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f000 f8b3 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f000 f8b0 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001e20:	203f      	movs	r0, #63	; 0x3f
 8001e22:	f000 f8ad 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001e26:	20f6      	movs	r0, #246	; 0xf6
 8001e28:	f000 f89d 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f000 f8a7 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f8a4 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001e38:	2006      	movs	r0, #6
 8001e3a:	f000 f8a1 	bl	8001f80 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001e3e:	202c      	movs	r0, #44	; 0x2c
 8001e40:	f000 f891 	bl	8001f66 <ili9341_WriteReg>
  LCD_Delay(200);
 8001e44:	20c8      	movs	r0, #200	; 0xc8
 8001e46:	f000 fe67 	bl	8002b18 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001e4a:	2026      	movs	r0, #38	; 0x26
 8001e4c:	f000 f88b 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f000 f895 	bl	8001f80 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001e56:	20e0      	movs	r0, #224	; 0xe0
 8001e58:	f000 f885 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f000 f88f 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001e62:	2029      	movs	r0, #41	; 0x29
 8001e64:	f000 f88c 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001e68:	2024      	movs	r0, #36	; 0x24
 8001e6a:	f000 f889 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001e6e:	200c      	movs	r0, #12
 8001e70:	f000 f886 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001e74:	200e      	movs	r0, #14
 8001e76:	f000 f883 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001e7a:	2009      	movs	r0, #9
 8001e7c:	f000 f880 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001e80:	204e      	movs	r0, #78	; 0x4e
 8001e82:	f000 f87d 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001e86:	2078      	movs	r0, #120	; 0x78
 8001e88:	f000 f87a 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001e8c:	203c      	movs	r0, #60	; 0x3c
 8001e8e:	f000 f877 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001e92:	2009      	movs	r0, #9
 8001e94:	f000 f874 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001e98:	2013      	movs	r0, #19
 8001e9a:	f000 f871 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001e9e:	2005      	movs	r0, #5
 8001ea0:	f000 f86e 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001ea4:	2017      	movs	r0, #23
 8001ea6:	f000 f86b 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001eaa:	2011      	movs	r0, #17
 8001eac:	f000 f868 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f000 f865 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001eb6:	20e1      	movs	r0, #225	; 0xe1
 8001eb8:	f000 f855 	bl	8001f66 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f000 f85f 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001ec2:	2016      	movs	r0, #22
 8001ec4:	f000 f85c 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001ec8:	201b      	movs	r0, #27
 8001eca:	f000 f859 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001ece:	2004      	movs	r0, #4
 8001ed0:	f000 f856 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ed4:	2011      	movs	r0, #17
 8001ed6:	f000 f853 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001eda:	2007      	movs	r0, #7
 8001edc:	f000 f850 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001ee0:	2031      	movs	r0, #49	; 0x31
 8001ee2:	f000 f84d 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001ee6:	2033      	movs	r0, #51	; 0x33
 8001ee8:	f000 f84a 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001eec:	2042      	movs	r0, #66	; 0x42
 8001eee:	f000 f847 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001ef2:	2005      	movs	r0, #5
 8001ef4:	f000 f844 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001ef8:	200c      	movs	r0, #12
 8001efa:	f000 f841 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001efe:	200a      	movs	r0, #10
 8001f00:	f000 f83e 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001f04:	2028      	movs	r0, #40	; 0x28
 8001f06:	f000 f83b 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001f0a:	202f      	movs	r0, #47	; 0x2f
 8001f0c:	f000 f838 	bl	8001f80 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001f10:	200f      	movs	r0, #15
 8001f12:	f000 f835 	bl	8001f80 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001f16:	2011      	movs	r0, #17
 8001f18:	f000 f825 	bl	8001f66 <ili9341_WriteReg>
  LCD_Delay(200);
 8001f1c:	20c8      	movs	r0, #200	; 0xc8
 8001f1e:	f000 fdfb 	bl	8002b18 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f22:	2029      	movs	r0, #41	; 0x29
 8001f24:	f000 f81f 	bl	8001f66 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001f28:	202c      	movs	r0, #44	; 0x2c
 8001f2a:	f000 f81c 	bl	8001f66 <ili9341_WriteReg>
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001f36:	f000 fd01 	bl	800293c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001f3a:	2103      	movs	r1, #3
 8001f3c:	20d3      	movs	r0, #211	; 0xd3
 8001f3e:	f000 f82c 	bl	8001f9a <ili9341_ReadData>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29b      	uxth	r3, r3
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f4e:	2029      	movs	r0, #41	; 0x29
 8001f50:	f000 f809 	bl	8001f66 <ili9341_WriteReg>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001f5c:	2028      	movs	r0, #40	; 0x28
 8001f5e:	f000 f802 	bl	8001f66 <ili9341_WriteReg>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fd7c 	bl	8002a70 <LCD_IO_WriteReg>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fd4d 	bl	8002a2c <LCD_IO_WriteData>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	460a      	mov	r2, r1
 8001fa4:	80fb      	strh	r3, [r7, #6]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001faa:	797a      	ldrb	r2, [r7, #5]
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fd7f 	bl	8002ab4 <LCD_IO_ReadData>
 8001fb6:	4603      	mov	r3, r0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001fc4:	23f0      	movs	r3, #240	; 0xf0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001fd4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fa59 	bl	80024a8 <stmpe811_GetInstance>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2bff      	cmp	r3, #255	; 0xff
 8001ffe:	d112      	bne.n	8002026 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002000:	2000      	movs	r0, #0
 8002002:	f000 fa51 	bl	80024a8 <stmpe811_GetInstance>
 8002006:	4603      	mov	r3, r0
 8002008:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800200a:	7bbb      	ldrb	r3, [r7, #14]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d80a      	bhi.n	8002026 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	b2d1      	uxtb	r1, r2
 8002016:	4a06      	ldr	r2, [pc, #24]	; (8002030 <stmpe811_Init+0x4c>)
 8002018:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800201a:	f000 fd88 	bl	8002b2e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f807 	bl	8002034 <stmpe811_Reset>
    }
  }
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000114 	.word	0x20000114

08002034 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2202      	movs	r2, #2
 8002044:	2103      	movs	r1, #3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fd7d 	bl	8002b46 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800204c:	200a      	movs	r0, #10
 800204e:	f000 fdb7 	bl	8002bc0 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2200      	movs	r2, #0
 8002058:	2103      	movs	r1, #3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fd73 	bl	8002b46 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002060:	2002      	movs	r0, #2
 8002062:	f000 fdad 	bl	8002bc0 <IOE_Delay>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800206e:	b590      	push	{r4, r7, lr}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002078:	f000 fd59 	bl	8002b2e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fd72 	bl	8002b6c <IOE_Read>
 8002088:	4603      	mov	r3, r0
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2101      	movs	r1, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fd69 	bl	8002b6c <IOE_Read>
 800209a:	4603      	mov	r3, r0
 800209c:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800209e:	4323      	orrs	r3, r4
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	b29b      	uxth	r3, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}

080020ac <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2109      	movs	r1, #9
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fd53 	bl	8002b6c <IOE_Read>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	2109      	movs	r1, #9
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fd33 	bl	8002b46 <IOE_Write>
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2109      	movs	r1, #9
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fd35 	bl	8002b6c <IOE_Read>
 8002102:	4603      	mov	r3, r0
 8002104:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	2109      	movs	r1, #9
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fd15 	bl	8002b46 <IOE_Write>
    
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	460a      	mov	r2, r1
 800212e:	80fb      	strh	r3, [r7, #6]
 8002130:	4613      	mov	r3, r2
 8002132:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	210a      	movs	r1, #10
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fd14 	bl	8002b6c <IOE_Read>
 8002144:	4603      	mov	r3, r0
 8002146:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	797b      	ldrb	r3, [r7, #5]
 800214c:	4313      	orrs	r3, r2
 800214e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	210a      	movs	r1, #10
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fcf4 	bl	8002b46 <IOE_Write>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	460a      	mov	r2, r1
 8002170:	80fb      	strh	r3, [r7, #6]
 8002172:	4613      	mov	r3, r2
 8002174:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	210a      	movs	r1, #10
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fcf3 	bl	8002b6c <IOE_Read>
 8002186:	4603      	mov	r3, r0
 8002188:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800218a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800218e:	43db      	mvns	r3, r3
 8002190:	b25a      	sxtb	r2, r3
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4013      	ands	r3, r2
 8002198:	b25b      	sxtb	r3, r3
 800219a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	210a      	movs	r1, #10
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fcce 	bl	8002b46 <IOE_Write>
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	460a      	mov	r2, r1
 80021bc:	80fb      	strh	r3, [r7, #6]
 80021be:	4613      	mov	r3, r2
 80021c0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	210b      	movs	r1, #11
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fccf 	bl	8002b6c <IOE_Read>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	797b      	ldrb	r3, [r7, #5]
 80021d4:	4013      	ands	r3, r2
 80021d6:	b2db      	uxtb	r3, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	460a      	mov	r2, r1
 80021ea:	80fb      	strh	r3, [r7, #6]
 80021ec:	4613      	mov	r3, r2
 80021ee:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	797a      	ldrb	r2, [r7, #5]
 80021f6:	210b      	movs	r1, #11
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fca4 	bl	8002b46 <IOE_Write>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	6039      	str	r1, [r7, #0]
 8002210:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2117      	movs	r1, #23
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fca5 	bl	8002b6c <IOE_Read>
 8002222:	4603      	mov	r3, r0
 8002224:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b25b      	sxtb	r3, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	b25a      	sxtb	r2, r3
 800222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002232:	4013      	ands	r3, r2
 8002234:	b25b      	sxtb	r3, r3
 8002236:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	2117      	movs	r1, #23
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fc80 	bl	8002b46 <IOE_Write>
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2104      	movs	r1, #4
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fc84 	bl	8002b6c <IOE_Read>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	f023 0304 	bic.w	r3, r3, #4
 800226e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	2104      	movs	r1, #4
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fc64 	bl	8002b46 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	21f0      	movs	r1, #240	; 0xf0
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ffbf 	bl	8002206 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	2104      	movs	r1, #4
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fc54 	bl	8002b46 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2249      	movs	r2, #73	; 0x49
 80022a4:	2120      	movs	r1, #32
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fc4d 	bl	8002b46 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80022ac:	2002      	movs	r0, #2
 80022ae:	f000 fc87 	bl	8002bc0 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2201      	movs	r2, #1
 80022b8:	2121      	movs	r1, #33	; 0x21
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fc43 	bl	8002b46 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	229a      	movs	r2, #154	; 0x9a
 80022c6:	2141      	movs	r1, #65	; 0x41
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fc3c 	bl	8002b46 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2201      	movs	r2, #1
 80022d4:	214a      	movs	r1, #74	; 0x4a
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fc35 	bl	8002b46 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2201      	movs	r2, #1
 80022e2:	214b      	movs	r1, #75	; 0x4b
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fc2e 	bl	8002b46 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2200      	movs	r2, #0
 80022f0:	214b      	movs	r1, #75	; 0x4b
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fc27 	bl	8002b46 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2201      	movs	r2, #1
 80022fe:	2156      	movs	r1, #86	; 0x56
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fc20 	bl	8002b46 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2201      	movs	r2, #1
 800230c:	2158      	movs	r1, #88	; 0x58
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fc19 	bl	8002b46 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2201      	movs	r2, #1
 800231a:	2140      	movs	r1, #64	; 0x40
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fc12 	bl	8002b46 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	22ff      	movs	r2, #255	; 0xff
 8002328:	210b      	movs	r1, #11
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fc0b 	bl	8002b46 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002330:	2002      	movs	r0, #2
 8002332:	f000 fc45 	bl	8002bc0 <IOE_Delay>
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2140      	movs	r1, #64	; 0x40
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fc0a 	bl	8002b6c <IOE_Read>
 8002358:	4603      	mov	r3, r0
 800235a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235e:	2b80      	cmp	r3, #128	; 0x80
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800236a:	7bbb      	ldrb	r3, [r7, #14]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	214c      	movs	r1, #76	; 0x4c
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fbf8 	bl	8002b6c <IOE_Read>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d010      	beq.n	80023a4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e00d      	b.n	80023a4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2201      	movs	r2, #1
 800238e:	214b      	movs	r1, #75	; 0x4b
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fbd8 	bl	8002b46 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2200      	movs	r2, #0
 800239c:	214b      	movs	r1, #75	; 0x4b
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fbd1 	bl	8002b46 <IOE_Write>
  }
  
  return ret;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80023bc:	89fb      	ldrh	r3, [r7, #14]
 80023be:	b2d8      	uxtb	r0, r3
 80023c0:	f107 0210 	add.w	r2, r7, #16
 80023c4:	2304      	movs	r3, #4
 80023c6:	21d7      	movs	r1, #215	; 0xd7
 80023c8:	f000 fbe3 	bl	8002b92 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80023cc:	7c3b      	ldrb	r3, [r7, #16]
 80023ce:	061a      	lsls	r2, r3, #24
 80023d0:	7c7b      	ldrb	r3, [r7, #17]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	7cbb      	ldrb	r3, [r7, #18]
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	4313      	orrs	r3, r2
 80023dc:	7cfa      	ldrb	r2, [r7, #19]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	0d1b      	lsrs	r3, r3, #20
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2201      	movs	r2, #1
 8002402:	214b      	movs	r1, #75	; 0x4b
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fb9e 	bl	8002b46 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800240a:	89fb      	ldrh	r3, [r7, #14]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2200      	movs	r2, #0
 8002410:	214b      	movs	r1, #75	; 0x4b
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fb97 	bl	8002b46 <IOE_Write>
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800242a:	f000 fb86 	bl	8002b3a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	211f      	movs	r1, #31
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fe76 	bl	8002124 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fe36 	bl	80020ac <stmpe811_EnableGlobalIT>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fe47 	bl	80020e8 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	211f      	movs	r1, #31
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fe81 	bl	8002166 <stmpe811_DisableITSource>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	211f      	movs	r1, #31
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fe99 	bl	80021b2 <stmpe811_ReadGITStatus>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	211f      	movs	r1, #31
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fea1 	bl	80021e0 <stmpe811_ClearGlobalIT>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e00b      	b.n	80024d4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <stmpe811_GetInstance+0x40>)
 80024c0:	5cd3      	ldrb	r3, [r2, r3]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	88fa      	ldrh	r2, [r7, #6]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d101      	bne.n	80024ce <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	e006      	b.n	80024dc <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	3301      	adds	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d9f0      	bls.n	80024bc <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80024da:	23ff      	movs	r3, #255	; 0xff
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000114 	.word	0x20000114

080024ec <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a33      	ldr	r2, [pc, #204]	; (80025c8 <I2Cx_MspInit+0xdc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d15f      	bne.n	80025be <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	4b32      	ldr	r3, [pc, #200]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a31      	ldr	r2, [pc, #196]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a2a      	ldr	r2, [pc, #168]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b28      	ldr	r3, [pc, #160]	; (80025cc <I2Cx_MspInit+0xe0>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800253c:	2312      	movs	r3, #18
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002544:	2302      	movs	r3, #2
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002548:	2304      	movs	r3, #4
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	481f      	ldr	r0, [pc, #124]	; (80025d0 <I2Cx_MspInit+0xe4>)
 8002554:	f002 f926 	bl	80047a4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800255c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	481b      	ldr	r0, [pc, #108]	; (80025d4 <I2Cx_MspInit+0xe8>)
 8002566:	f002 f91d 	bl	80047a4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a16      	ldr	r2, [pc, #88]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002574:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <I2Cx_MspInit+0xe0>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <I2Cx_MspInit+0xe0>)
 800258c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002590:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <I2Cx_MspInit+0xe0>)
 8002598:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800259c:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	210f      	movs	r1, #15
 80025a2:	2048      	movs	r0, #72	; 0x48
 80025a4:	f001 fb60 	bl	8003c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80025a8:	2048      	movs	r0, #72	; 0x48
 80025aa:	f001 fb79 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	210f      	movs	r1, #15
 80025b2:	2049      	movs	r0, #73	; 0x49
 80025b4:	f001 fb58 	bl	8003c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80025b8:	2049      	movs	r0, #73	; 0x49
 80025ba:	f001 fb71 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40005c00 	.word	0x40005c00
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020800 	.word	0x40020800

080025d8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80025dc:	4814      	ldr	r0, [pc, #80]	; (8002630 <I2Cx_Init+0x58>)
 80025de:	f004 fa21 	bl	8006a24 <HAL_I2C_GetState>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d121      	bne.n	800262c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <I2Cx_Init+0x58>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <I2Cx_Init+0x5c>)
 80025ec:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <I2Cx_Init+0x58>)
 80025f0:	4a11      	ldr	r2, [pc, #68]	; (8002638 <I2Cx_Init+0x60>)
 80025f2:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <I2Cx_Init+0x58>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <I2Cx_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <I2Cx_Init+0x58>)
 8002602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002606:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <I2Cx_Init+0x58>)
 800260a:	2200      	movs	r2, #0
 800260c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <I2Cx_Init+0x58>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <I2Cx_Init+0x58>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <I2Cx_Init+0x58>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002620:	4803      	ldr	r0, [pc, #12]	; (8002630 <I2Cx_Init+0x58>)
 8002622:	f7ff ff63 	bl	80024ec <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002626:	4802      	ldr	r0, [pc, #8]	; (8002630 <I2Cx_Init+0x58>)
 8002628:	f003 fd74 	bl	8006114 <HAL_I2C_Init>
  }
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000064c 	.word	0x2000064c
 8002634:	40005c00 	.word	0x40005c00
 8002638:	000186a0 	.word	0x000186a0

0800263c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <I2Cx_ITConfig+0x58>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <I2Cx_ITConfig+0x58>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <I2Cx_ITConfig+0x58>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800265e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002662:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002664:	2301      	movs	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <I2Cx_ITConfig+0x5c>)
 800266e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	4619      	mov	r1, r3
 8002674:	4809      	ldr	r0, [pc, #36]	; (800269c <I2Cx_ITConfig+0x60>)
 8002676:	f002 f895 	bl	80047a4 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800267a:	2200      	movs	r2, #0
 800267c:	210f      	movs	r1, #15
 800267e:	2028      	movs	r0, #40	; 0x28
 8002680:	f001 faf2 	bl	8003c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002684:	2028      	movs	r0, #40	; 0x28
 8002686:	f001 fb0b 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	10210000 	.word	0x10210000
 800269c:	40020000 	.word	0x40020000

080026a0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af04      	add	r7, sp, #16
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	460b      	mov	r3, r1
 80026ac:	71bb      	strb	r3, [r7, #6]
 80026ae:	4613      	mov	r3, r2
 80026b0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	b299      	uxth	r1, r3
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <I2Cx_WriteData+0x4c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	2301      	movs	r3, #1
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	1d7b      	adds	r3, r7, #5
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2301      	movs	r3, #1
 80026ce:	4808      	ldr	r0, [pc, #32]	; (80026f0 <I2Cx_WriteData+0x50>)
 80026d0:	f003 fe88 	bl	80063e4 <HAL_I2C_Mem_Write>
 80026d4:	4603      	mov	r3, r0
 80026d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80026de:	f000 f863 	bl	80027a8 <I2Cx_Error>
  }        
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000064 	.word	0x20000064
 80026f0:	2000064c 	.word	0x2000064c

080026f4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af04      	add	r7, sp, #16
 80026fa:	4603      	mov	r3, r0
 80026fc:	460a      	mov	r2, r1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	4613      	mov	r3, r2
 8002702:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	b299      	uxth	r1, r3
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <I2Cx_ReadData+0x50>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2301      	movs	r3, #1
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	f107 030e 	add.w	r3, r7, #14
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	4808      	ldr	r0, [pc, #32]	; (8002748 <I2Cx_ReadData+0x54>)
 8002728:	f003 ff56 	bl	80065d8 <HAL_I2C_Mem_Read>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002736:	f000 f837 	bl	80027a8 <I2Cx_Error>
  
  }
  return value;
 800273a:	7bbb      	ldrb	r3, [r7, #14]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000064 	.word	0x20000064
 8002748:	2000064c 	.word	0x2000064c

0800274c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af04      	add	r7, sp, #16
 8002752:	603a      	str	r2, [r7, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
 800275a:	460b      	mov	r3, r1
 800275c:	71bb      	strb	r3, [r7, #6]
 800275e:	4613      	mov	r3, r2
 8002760:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	b299      	uxth	r1, r3
 800276a:	79bb      	ldrb	r3, [r7, #6]
 800276c:	b29a      	uxth	r2, r3
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <I2Cx_ReadBuffer+0x54>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	88bb      	ldrh	r3, [r7, #4]
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2301      	movs	r3, #1
 800277e:	4809      	ldr	r0, [pc, #36]	; (80027a4 <I2Cx_ReadBuffer+0x58>)
 8002780:	f003 ff2a 	bl	80065d8 <HAL_I2C_Mem_Read>
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800278e:	2300      	movs	r3, #0
 8002790:	e002      	b.n	8002798 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002792:	f000 f809 	bl	80027a8 <I2Cx_Error>

    return 1;
 8002796:	2301      	movs	r3, #1
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000064 	.word	0x20000064
 80027a4:	2000064c 	.word	0x2000064c

080027a8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80027ac:	4803      	ldr	r0, [pc, #12]	; (80027bc <I2Cx_Error+0x14>)
 80027ae:	f003 fde9 	bl	8006384 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80027b2:	f7ff ff11 	bl	80025d8 <I2Cx_Init>
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000064c 	.word	0x2000064c

080027c0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80027c4:	4819      	ldr	r0, [pc, #100]	; (800282c <SPIx_Init+0x6c>)
 80027c6:	f006 fc5d 	bl	8009084 <HAL_SPI_GetState>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d12b      	bne.n	8002828 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <SPIx_Init+0x6c>)
 80027d2:	4a17      	ldr	r2, [pc, #92]	; (8002830 <SPIx_Init+0x70>)
 80027d4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <SPIx_Init+0x6c>)
 80027d8:	2218      	movs	r2, #24
 80027da:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <SPIx_Init+0x6c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <SPIx_Init+0x6c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80027e8:	4b10      	ldr	r3, [pc, #64]	; (800282c <SPIx_Init+0x6c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <SPIx_Init+0x6c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80027f4:	4b0d      	ldr	r3, [pc, #52]	; (800282c <SPIx_Init+0x6c>)
 80027f6:	2207      	movs	r2, #7
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <SPIx_Init+0x6c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <SPIx_Init+0x6c>)
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <SPIx_Init+0x6c>)
 8002808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <SPIx_Init+0x6c>)
 8002810:	2200      	movs	r2, #0
 8002812:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SPIx_Init+0x6c>)
 8002816:	f44f 7282 	mov.w	r2, #260	; 0x104
 800281a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800281c:	4803      	ldr	r0, [pc, #12]	; (800282c <SPIx_Init+0x6c>)
 800281e:	f000 f853 	bl	80028c8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002822:	4802      	ldr	r0, [pc, #8]	; (800282c <SPIx_Init+0x6c>)
 8002824:	f005 ffc3 	bl	80087ae <HAL_SPI_Init>
  } 
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000118 	.word	0x20000118
 8002830:	40015000 	.word	0x40015000

08002834 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	b29a      	uxth	r2, r3
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <SPIx_Read+0x38>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f107 0108 	add.w	r1, r7, #8
 800284e:	4808      	ldr	r0, [pc, #32]	; (8002870 <SPIx_Read+0x3c>)
 8002850:	f006 f96d 	bl	8008b2e <HAL_SPI_Receive>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800285e:	f000 f827 	bl	80028b0 <SPIx_Error>
  }
  
  return readvalue;
 8002862:	68bb      	ldr	r3, [r7, #8]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000068 	.word	0x20000068
 8002870:	20000118 	.word	0x20000118

08002874 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <SPIx_Write+0x34>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1db9      	adds	r1, r7, #6
 8002888:	2201      	movs	r2, #1
 800288a:	4808      	ldr	r0, [pc, #32]	; (80028ac <SPIx_Write+0x38>)
 800288c:	f006 f81b 	bl	80088c6 <HAL_SPI_Transmit>
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800289a:	f000 f809 	bl	80028b0 <SPIx_Error>
  }
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000068 	.word	0x20000068
 80028ac:	20000118 	.word	0x20000118

080028b0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80028b4:	4803      	ldr	r0, [pc, #12]	; (80028c4 <SPIx_Error+0x14>)
 80028b6:	f005 ffde 	bl	8008876 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80028ba:	f7ff ff81 	bl	80027c0 <SPIx_Init>
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000118 	.word	0x20000118

080028c8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <SPIx_MspInit+0x6c>)
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	4a16      	ldr	r2, [pc, #88]	; (8002934 <SPIx_MspInit+0x6c>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028de:	6453      	str	r3, [r2, #68]	; 0x44
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <SPIx_MspInit+0x6c>)
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <SPIx_MspInit+0x6c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <SPIx_MspInit+0x6c>)
 80028f6:	f043 0320 	orr.w	r3, r3, #32
 80028fa:	6313      	str	r3, [r2, #48]	; 0x30
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <SPIx_MspInit+0x6c>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002908:	f44f 7360 	mov.w	r3, #896	; 0x380
 800290c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002912:	2302      	movs	r3, #2
 8002914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002916:	2301      	movs	r3, #1
 8002918:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800291a:	2305      	movs	r3, #5
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <SPIx_MspInit+0x70>)
 8002926:	f001 ff3d 	bl	80047a4 <HAL_GPIO_Init>
}
 800292a:	bf00      	nop
 800292c:	3728      	adds	r7, #40	; 0x28
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	40021400 	.word	0x40021400

0800293c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <LCD_IO_Init+0xe0>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d164      	bne.n	8002a14 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800294a:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <LCD_IO_Init+0xe0>)
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <LCD_IO_Init+0xe4>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4a31      	ldr	r2, [pc, #196]	; (8002a20 <LCD_IO_Init+0xe4>)
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	6313      	str	r3, [r2, #48]	; 0x30
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <LCD_IO_Init+0xe4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800296c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002970:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002972:	2301      	movs	r3, #1
 8002974:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	4619      	mov	r1, r3
 8002984:	4827      	ldr	r0, [pc, #156]	; (8002a24 <LCD_IO_Init+0xe8>)
 8002986:	f001 ff0d 	bl	80047a4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <LCD_IO_Init+0xe4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <LCD_IO_Init+0xe4>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <LCD_IO_Init+0xe4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80029a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4619      	mov	r1, r3
 80029be:	4819      	ldr	r0, [pc, #100]	; (8002a24 <LCD_IO_Init+0xe8>)
 80029c0:	f001 fef0 	bl	80047a4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <LCD_IO_Init+0xe4>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <LCD_IO_Init+0xe4>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <LCD_IO_Init+0xe4>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80029e0:	2304      	movs	r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029ec:	2302      	movs	r3, #2
 80029ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	4619      	mov	r1, r3
 80029f6:	480c      	ldr	r0, [pc, #48]	; (8002a28 <LCD_IO_Init+0xec>)
 80029f8:	f001 fed4 	bl	80047a4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80029fc:	2200      	movs	r2, #0
 80029fe:	2104      	movs	r1, #4
 8002a00:	4809      	ldr	r0, [pc, #36]	; (8002a28 <LCD_IO_Init+0xec>)
 8002a02:	f002 f983 	bl	8004d0c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002a06:	2201      	movs	r2, #1
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4807      	ldr	r0, [pc, #28]	; (8002a28 <LCD_IO_Init+0xec>)
 8002a0c:	f002 f97e 	bl	8004d0c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002a10:	f7ff fed6 	bl	80027c0 <SPIx_Init>
  }
}
 8002a14:	bf00      	nop
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000170 	.word	0x20000170
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40020c00 	.word	0x40020c00
 8002a28:	40020800 	.word	0x40020800

08002a2c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a36:	2201      	movs	r2, #1
 8002a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a3c:	480a      	ldr	r0, [pc, #40]	; (8002a68 <LCD_IO_WriteData+0x3c>)
 8002a3e:	f002 f965 	bl	8004d0c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002a42:	2200      	movs	r2, #0
 8002a44:	2104      	movs	r1, #4
 8002a46:	4809      	ldr	r0, [pc, #36]	; (8002a6c <LCD_IO_WriteData+0x40>)
 8002a48:	f002 f960 	bl	8004d0c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ff10 	bl	8002874 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a54:	2201      	movs	r2, #1
 8002a56:	2104      	movs	r1, #4
 8002a58:	4804      	ldr	r0, [pc, #16]	; (8002a6c <LCD_IO_WriteData+0x40>)
 8002a5a:	f002 f957 	bl	8004d0c <HAL_GPIO_WritePin>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40020800 	.word	0x40020800

08002a70 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a80:	480a      	ldr	r0, [pc, #40]	; (8002aac <LCD_IO_WriteReg+0x3c>)
 8002a82:	f002 f943 	bl	8004d0c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002a86:	2200      	movs	r2, #0
 8002a88:	2104      	movs	r1, #4
 8002a8a:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <LCD_IO_WriteReg+0x40>)
 8002a8c:	f002 f93e 	bl	8004d0c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff feed 	bl	8002874 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	4804      	ldr	r0, [pc, #16]	; (8002ab0 <LCD_IO_WriteReg+0x40>)
 8002aa0:	f002 f934 	bl	8004d0c <HAL_GPIO_WritePin>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40020c00 	.word	0x40020c00
 8002ab0:	40020800 	.word	0x40020800

08002ab4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	460a      	mov	r2, r1
 8002abe:	80fb      	strh	r3, [r7, #6]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2104      	movs	r1, #4
 8002acc:	4810      	ldr	r0, [pc, #64]	; (8002b10 <LCD_IO_ReadData+0x5c>)
 8002ace:	f002 f91d 	bl	8004d0c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ad8:	480e      	ldr	r0, [pc, #56]	; (8002b14 <LCD_IO_ReadData+0x60>)
 8002ada:	f002 f917 	bl	8004d0c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fec7 	bl	8002874 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002ae6:	797b      	ldrb	r3, [r7, #5]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fea3 	bl	8002834 <SPIx_Read>
 8002aee:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002af0:	2201      	movs	r2, #1
 8002af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002af6:	4807      	ldr	r0, [pc, #28]	; (8002b14 <LCD_IO_ReadData+0x60>)
 8002af8:	f002 f908 	bl	8004d0c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002afc:	2201      	movs	r2, #1
 8002afe:	2104      	movs	r1, #4
 8002b00:	4803      	ldr	r0, [pc, #12]	; (8002b10 <LCD_IO_ReadData+0x5c>)
 8002b02:	f002 f903 	bl	8004d0c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40020800 	.word	0x40020800
 8002b14:	40020c00 	.word	0x40020c00

08002b18 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 ffc7 	bl	8003ab4 <HAL_Delay>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002b32:	f7ff fd51 	bl	80025d8 <I2Cx_Init>
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002b3e:	f7ff fd7d 	bl	800263c <I2Cx_ITConfig>
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	71fb      	strb	r3, [r7, #7]
 8002b50:	460b      	mov	r3, r1
 8002b52:	71bb      	strb	r3, [r7, #6]
 8002b54:	4613      	mov	r3, r2
 8002b56:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002b58:	797a      	ldrb	r2, [r7, #5]
 8002b5a:	79b9      	ldrb	r1, [r7, #6]
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fd9e 	bl	80026a0 <I2Cx_WriteData>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	460a      	mov	r2, r1
 8002b76:	71fb      	strb	r3, [r7, #7]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002b7c:	79ba      	ldrb	r2, [r7, #6]
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fdb6 	bl	80026f4 <I2Cx_ReadData>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	603a      	str	r2, [r7, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	71bb      	strb	r3, [r7, #6]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002ba8:	88bb      	ldrh	r3, [r7, #4]
 8002baa:	79b9      	ldrb	r1, [r7, #6]
 8002bac:	79f8      	ldrb	r0, [r7, #7]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	f7ff fdcc 	bl	800274c <I2Cx_ReadBuffer>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b29b      	uxth	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 ff73 	bl	8003ab4 <HAL_Delay>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002bdc:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002bde:	4a2e      	ldr	r2, [pc, #184]	; (8002c98 <BSP_LCD_Init+0xc0>)
 8002be0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002be4:	2209      	movs	r2, #9
 8002be6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002be8:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002bee:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002bf0:	221d      	movs	r2, #29
 8002bf2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002bfc:	f240 120d 	movw	r2, #269	; 0x10d
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c04:	f240 1243 	movw	r2, #323	; 0x143
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c0c:	f240 1217 	movw	r2, #279	; 0x117
 8002c10:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c14:	f240 1247 	movw	r2, #327	; 0x147
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <BSP_LCD_Init+0xc4>)
 8002c34:	2208      	movs	r2, #8
 8002c36:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c38:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <BSP_LCD_Init+0xc4>)
 8002c3a:	22c0      	movs	r2, #192	; 0xc0
 8002c3c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <BSP_LCD_Init+0xc4>)
 8002c40:	2204      	movs	r2, #4
 8002c42:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002c44:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <BSP_LCD_Init+0xc4>)
 8002c46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002c4c:	4813      	ldr	r0, [pc, #76]	; (8002c9c <BSP_LCD_Init+0xc4>)
 8002c4e:	f005 fb71 	bl	8008334 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002c58:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002c6a:	f000 fba9 	bl	80033c0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002c6e:	4809      	ldr	r0, [pc, #36]	; (8002c94 <BSP_LCD_Init+0xbc>)
 8002c70:	f004 fabc 	bl	80071ec <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <BSP_LCD_Init+0xc8>)
 8002c76:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <BSP_LCD_Init+0xcc>)
 8002c78:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <BSP_LCD_Init+0xc8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002c82:	f000 fcd1 	bl	8003628 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c86:	4808      	ldr	r0, [pc, #32]	; (8002ca8 <BSP_LCD_Init+0xd0>)
 8002c88:	f000 f920 	bl	8002ecc <BSP_LCD_SetFont>

  return LCD_OK;
 8002c8c:	2300      	movs	r3, #0
}  
 8002c8e:	4618      	mov	r0, r3
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200006a0 	.word	0x200006a0
 8002c98:	40016800 	.word	0x40016800
 8002c9c:	200001b4 	.word	0x200001b4
 8002ca0:	20000748 	.word	0x20000748
 8002ca4:	20000004 	.word	0x20000004
 8002ca8:	2000006c 	.word	0x2000006c

08002cac <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <BSP_LCD_GetXSize+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	4798      	blx	r3
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000748 	.word	0x20000748

08002cc4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <BSP_LCD_GetYSize+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	4798      	blx	r3
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000748 	.word	0x20000748

08002cdc <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b090      	sub	sp, #64	; 0x40
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002cec:	f7ff ffde 	bl	8002cac <BSP_LCD_GetXSize>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002cf8:	f7ff ffe4 	bl	8002cc4 <BSP_LCD_GetYSize>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002d08:	23ff      	movs	r3, #255	; 0xff
 8002d0a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002d22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002d28:	2307      	movs	r3, #7
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002d2c:	f7ff ffbe 	bl	8002cac <BSP_LCD_GetXSize>
 8002d30:	4603      	mov	r3, r0
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002d34:	f7ff ffc6 	bl	8002cc4 <BSP_LCD_GetYSize>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	4619      	mov	r1, r3
 8002d44:	4814      	ldr	r0, [pc, #80]	; (8002d98 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d46:	f004 fbe3 	bl	8007510 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	4913      	ldr	r1, [pc, #76]	; (8002d9c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3304      	adds	r3, #4
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	490e      	ldr	r1, [pc, #56]	; (8002d9c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3308      	adds	r3, #8
 8002d70:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002d72:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	4909      	ldr	r1, [pc, #36]	; (8002d9c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002d86:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002d88:	4803      	ldr	r0, [pc, #12]	; (8002d98 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d8a:	f004 fc7d 	bl	8007688 <HAL_LTDC_EnableDither>
}
 8002d8e:	bf00      	nop
 8002d90:	3740      	adds	r7, #64	; 0x40
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200006a0 	.word	0x200006a0
 8002d9c:	200001e8 	.word	0x200001e8
 8002da0:	2000006c 	.word	0x2000006c

08002da4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <BSP_LCD_SelectLayer+0x1c>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	200001e4 	.word	0x200001e4

08002dc4 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d112      	bne.n	8002dfc <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <BSP_LCD_SetLayerVisible+0x78>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	01db      	lsls	r3, r3, #7
 8002de0:	4413      	add	r3, r2
 8002de2:	3384      	adds	r3, #132	; 0x84
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <BSP_LCD_SetLayerVisible+0x78>)
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	4611      	mov	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	01d2      	lsls	r2, r2, #7
 8002df0:	440a      	add	r2, r1
 8002df2:	3284      	adds	r2, #132	; 0x84
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e011      	b.n	8002e20 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <BSP_LCD_SetLayerVisible+0x78>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	01db      	lsls	r3, r3, #7
 8002e06:	4413      	add	r3, r2
 8002e08:	3384      	adds	r3, #132	; 0x84
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <BSP_LCD_SetLayerVisible+0x78>)
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	4611      	mov	r1, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	01d2      	lsls	r2, r2, #7
 8002e16:	440a      	add	r2, r1
 8002e18:	3284      	adds	r2, #132	; 0x84
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <BSP_LCD_SetLayerVisible+0x78>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <BSP_LCD_SetLayerVisible+0x78>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	200006a0 	.word	0x200006a0

08002e40 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <BSP_LCD_SetColorKeying+0x24>)
 8002e50:	f004 fb9c 	bl	800758c <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4803      	ldr	r0, [pc, #12]	; (8002e64 <BSP_LCD_SetColorKeying+0x24>)
 8002e58:	f004 fbdc 	bl	8007614 <HAL_LTDC_EnableColorKeying>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200006a0 	.word	0x200006a0

08002e68 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <BSP_LCD_SetTextColor+0x28>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4907      	ldr	r1, [pc, #28]	; (8002e94 <BSP_LCD_SetTextColor+0x2c>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	200001e4 	.word	0x200001e4
 8002e94:	200001e8 	.word	0x200001e8

08002e98 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <BSP_LCD_SetBackColor+0x2c>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4908      	ldr	r1, [pc, #32]	; (8002ec8 <BSP_LCD_SetBackColor+0x30>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	200001e4 	.word	0x200001e4
 8002ec8:	200001e8 	.word	0x200001e8

08002ecc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <BSP_LCD_SetFont+0x2c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4908      	ldr	r1, [pc, #32]	; (8002efc <BSP_LCD_SetFont+0x30>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	200001e4 	.word	0x200001e4
 8002efc:	200001e8 	.word	0x200001e8

08002f00 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <BSP_LCD_Clear+0x48>)
 8002f0a:	681c      	ldr	r4, [r3, #0]
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <BSP_LCD_Clear+0x48>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <BSP_LCD_Clear+0x4c>)
 8002f12:	2134      	movs	r1, #52	; 0x34
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	335c      	adds	r3, #92	; 0x5c
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461d      	mov	r5, r3
 8002f20:	f7ff fec4 	bl	8002cac <BSP_LCD_GetXSize>
 8002f24:	4606      	mov	r6, r0
 8002f26:	f7ff fecd 	bl	8002cc4 <BSP_LCD_GetYSize>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2300      	movs	r3, #0
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	4632      	mov	r2, r6
 8002f38:	4629      	mov	r1, r5
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f000 fb3c 	bl	80035b8 <FillBuffer>
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f48:	200001e4 	.word	0x200001e4
 8002f4c:	200006a0 	.word	0x200006a0

08002f50 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f50:	b5b0      	push	{r4, r5, r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	4603      	mov	r3, r0
 8002f58:	80fb      	strh	r3, [r7, #6]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	80bb      	strh	r3, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <BSP_LCD_DrawHLine+0x70>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <BSP_LCD_DrawHLine+0x74>)
 8002f6c:	2134      	movs	r1, #52	; 0x34
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	335c      	adds	r3, #92	; 0x5c
 8002f76:	681c      	ldr	r4, [r3, #0]
 8002f78:	f7ff fe98 	bl	8002cac <BSP_LCD_GetXSize>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	88bb      	ldrh	r3, [r7, #4]
 8002f80:	fb03 f202 	mul.w	r2, r3, r2
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4423      	add	r3, r4
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <BSP_LCD_DrawHLine+0x70>)
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	68fc      	ldr	r4, [r7, #12]
 8002f94:	887d      	ldrh	r5, [r7, #2]
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <BSP_LCD_DrawHLine+0x70>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	490b      	ldr	r1, [pc, #44]	; (8002fc8 <BSP_LCD_DrawHLine+0x78>)
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	2300      	movs	r3, #0
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2301      	movs	r3, #1
 8002fb0:	462a      	mov	r2, r5
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	f000 fb00 	bl	80035b8 <FillBuffer>
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc0:	200001e4 	.word	0x200001e4
 8002fc4:	200006a0 	.word	0x200006a0
 8002fc8:	200001e8 	.word	0x200001e8

08002fcc <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	80fb      	strh	r3, [r7, #6]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	80bb      	strh	r3, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	f1c3 0303 	rsb	r3, r3, #3
 8002fe6:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002ff0:	e0cf      	b.n	8003192 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	b298      	uxth	r0, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	88ba      	ldrh	r2, [r7, #4]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	b29c      	uxth	r4, r3
 8003006:	4b67      	ldr	r3, [pc, #412]	; (80031a4 <BSP_LCD_DrawCircle+0x1d8>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4967      	ldr	r1, [pc, #412]	; (80031a8 <BSP_LCD_DrawCircle+0x1dc>)
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4621      	mov	r1, r4
 800301c:	f000 faa6 	bl	800356c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	b29b      	uxth	r3, r3
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	b298      	uxth	r0, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	b29b      	uxth	r3, r3
 800302e:	88ba      	ldrh	r2, [r7, #4]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	b29c      	uxth	r4, r3
 8003034:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <BSP_LCD_DrawCircle+0x1d8>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	495b      	ldr	r1, [pc, #364]	; (80031a8 <BSP_LCD_DrawCircle+0x1dc>)
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	4621      	mov	r1, r4
 800304a:	f000 fa8f 	bl	800356c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	b29a      	uxth	r2, r3
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	4413      	add	r3, r2
 8003056:	b298      	uxth	r0, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	b29b      	uxth	r3, r3
 800305c:	88ba      	ldrh	r2, [r7, #4]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	b29c      	uxth	r4, r3
 8003062:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <BSP_LCD_DrawCircle+0x1d8>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4950      	ldr	r1, [pc, #320]	; (80031a8 <BSP_LCD_DrawCircle+0x1dc>)
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4621      	mov	r1, r4
 8003078:	f000 fa78 	bl	800356c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	b29b      	uxth	r3, r3
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	b298      	uxth	r0, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	b29b      	uxth	r3, r3
 800308a:	88ba      	ldrh	r2, [r7, #4]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b29c      	uxth	r4, r3
 8003090:	4b44      	ldr	r3, [pc, #272]	; (80031a4 <BSP_LCD_DrawCircle+0x1d8>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4944      	ldr	r1, [pc, #272]	; (80031a8 <BSP_LCD_DrawCircle+0x1dc>)
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	4621      	mov	r1, r4
 80030a6:	f000 fa61 	bl	800356c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4413      	add	r3, r2
 80030b2:	b298      	uxth	r0, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	88bb      	ldrh	r3, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	b29c      	uxth	r4, r3
 80030be:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <BSP_LCD_DrawCircle+0x1d8>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4939      	ldr	r1, [pc, #228]	; (80031a8 <BSP_LCD_DrawCircle+0x1dc>)
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4621      	mov	r1, r4
 80030d4:	f000 fa4a 	bl	800356c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	b298      	uxth	r0, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	88bb      	ldrh	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	b29c      	uxth	r4, r3
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <BSP_LCD_DrawCircle+0x1d8>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	492d      	ldr	r1, [pc, #180]	; (80031a8 <BSP_LCD_DrawCircle+0x1dc>)
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	4621      	mov	r1, r4
 8003102:	f000 fa33 	bl	800356c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	b29a      	uxth	r2, r3
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	4413      	add	r3, r2
 800310e:	b298      	uxth	r0, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	b29a      	uxth	r2, r3
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	b29c      	uxth	r4, r3
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <BSP_LCD_DrawCircle+0x1d8>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4922      	ldr	r1, [pc, #136]	; (80031a8 <BSP_LCD_DrawCircle+0x1dc>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4621      	mov	r1, r4
 8003130:	f000 fa1c 	bl	800356c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	b29b      	uxth	r3, r3
 8003138:	88fa      	ldrh	r2, [r7, #6]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	b298      	uxth	r0, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	b29a      	uxth	r2, r3
 8003142:	88bb      	ldrh	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	b29c      	uxth	r4, r3
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <BSP_LCD_DrawCircle+0x1d8>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4916      	ldr	r1, [pc, #88]	; (80031a8 <BSP_LCD_DrawCircle+0x1dc>)
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4621      	mov	r1, r4
 800315e:	f000 fa05 	bl	800356c <BSP_LCD_DrawPixel>

    if (d < 0)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	da06      	bge.n	8003176 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	4413      	add	r3, r2
 8003170:	3306      	adds	r3, #6
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e00a      	b.n	800318c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	009a      	lsls	r2, r3, #2
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4413      	add	r3, r2
 8003182:	330a      	adds	r3, #10
 8003184:	617b      	str	r3, [r7, #20]
      cury--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3b01      	subs	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	3301      	adds	r3, #1
 8003190:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	429a      	cmp	r2, r3
 8003198:	f67f af2b 	bls.w	8002ff2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	200001e4 	.word	0x200001e4
 80031a8:	200001e8 	.word	0x200001e8

080031ac <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80031ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af02      	add	r7, sp, #8
 80031b4:	4604      	mov	r4, r0
 80031b6:	4608      	mov	r0, r1
 80031b8:	4611      	mov	r1, r2
 80031ba:	461a      	mov	r2, r3
 80031bc:	4623      	mov	r3, r4
 80031be:	80fb      	strh	r3, [r7, #6]
 80031c0:	4603      	mov	r3, r0
 80031c2:	80bb      	strh	r3, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <BSP_LCD_FillRect+0xa8>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4920      	ldr	r1, [pc, #128]	; (8003258 <BSP_LCD_FillRect+0xac>)
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fe40 	bl	8002e68 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80031e8:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <BSP_LCD_FillRect+0xa8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1b      	ldr	r2, [pc, #108]	; (800325c <BSP_LCD_FillRect+0xb0>)
 80031ee:	2134      	movs	r1, #52	; 0x34
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	681c      	ldr	r4, [r3, #0]
 80031fa:	f7ff fd57 	bl	8002cac <BSP_LCD_GetXSize>
 80031fe:	4602      	mov	r2, r0
 8003200:	88bb      	ldrh	r3, [r7, #4]
 8003202:	fb03 f202 	mul.w	r2, r3, r2
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4423      	add	r3, r4
 800320e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <BSP_LCD_FillRect+0xa8>)
 8003212:	681c      	ldr	r4, [r3, #0]
 8003214:	68fd      	ldr	r5, [r7, #12]
 8003216:	887e      	ldrh	r6, [r7, #2]
 8003218:	f8b7 8000 	ldrh.w	r8, [r7]
 800321c:	f7ff fd46 	bl	8002cac <BSP_LCD_GetXSize>
 8003220:	4602      	mov	r2, r0
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	1ad1      	subs	r1, r2, r3
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <BSP_LCD_FillRect+0xa8>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	480b      	ldr	r0, [pc, #44]	; (8003258 <BSP_LCD_FillRect+0xac>)
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4403      	add	r3, r0
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	9100      	str	r1, [sp, #0]
 800323c:	4643      	mov	r3, r8
 800323e:	4632      	mov	r2, r6
 8003240:	4629      	mov	r1, r5
 8003242:	4620      	mov	r0, r4
 8003244:	f000 f9b8 	bl	80035b8 <FillBuffer>
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003252:	bf00      	nop
 8003254:	200001e4 	.word	0x200001e4
 8003258:	200001e8 	.word	0x200001e8
 800325c:	200006a0 	.word	0x200006a0

08003260 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	80fb      	strh	r3, [r7, #6]
 800326a:	460b      	mov	r3, r1
 800326c:	80bb      	strh	r3, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	f1c3 0303 	rsb	r3, r3, #3
 800327a:	617b      	str	r3, [r7, #20]

  curx = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003280:	887b      	ldrh	r3, [r7, #2]
 8003282:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003284:	4b44      	ldr	r3, [pc, #272]	; (8003398 <BSP_LCD_FillCircle+0x138>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4944      	ldr	r1, [pc, #272]	; (800339c <BSP_LCD_FillCircle+0x13c>)
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fde6 	bl	8002e68 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800329c:	e061      	b.n	8003362 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d021      	beq.n	80032e8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	88fa      	ldrh	r2, [r7, #6]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	b298      	uxth	r0, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	88bb      	ldrh	r3, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	b299      	uxth	r1, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	b29b      	uxth	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	f7ff fe45 	bl	8002f50 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	b298      	uxth	r0, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	88ba      	ldrh	r2, [r7, #4]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	b299      	uxth	r1, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	f7ff fe34 	bl	8002f50 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d021      	beq.n	8003332 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	b298      	uxth	r0, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	88ba      	ldrh	r2, [r7, #4]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	b299      	uxth	r1, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	b29b      	uxth	r3, r3
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	b29b      	uxth	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	f7ff fe20 	bl	8002f50 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	b29b      	uxth	r3, r3
 8003314:	88fa      	ldrh	r2, [r7, #6]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	b298      	uxth	r0, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	b29a      	uxth	r2, r3
 800331e:	88bb      	ldrh	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	b299      	uxth	r1, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	b29b      	uxth	r3, r3
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	f7ff fe0f 	bl	8002f50 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	da06      	bge.n	8003346 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	009a      	lsls	r2, r3, #2
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	4413      	add	r3, r2
 8003340:	3306      	adds	r3, #6
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e00a      	b.n	800335c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	009a      	lsls	r2, r3, #2
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	4413      	add	r3, r2
 8003352:	330a      	adds	r3, #10
 8003354:	617b      	str	r3, [r7, #20]
      cury--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3b01      	subs	r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	3301      	adds	r3, #1
 8003360:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	429a      	cmp	r2, r3
 8003368:	d999      	bls.n	800329e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <BSP_LCD_FillCircle+0x138>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	490b      	ldr	r1, [pc, #44]	; (800339c <BSP_LCD_FillCircle+0x13c>)
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fd73 	bl	8002e68 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003382:	887a      	ldrh	r2, [r7, #2]
 8003384:	88b9      	ldrh	r1, [r7, #4]
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fe1f 	bl	8002fcc <BSP_LCD_DrawCircle>
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200001e4 	.word	0x200001e4
 800339c:	200001e8 	.word	0x200001e8

080033a0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <BSP_LCD_DisplayOn+0x1c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80033ae:	4b03      	ldr	r3, [pc, #12]	; (80033bc <BSP_LCD_DisplayOn+0x1c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4798      	blx	r3
  }
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000748 	.word	0x20000748

080033c0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08e      	sub	sp, #56	; 0x38
 80033c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	4b61      	ldr	r3, [pc, #388]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	4a60      	ldr	r2, [pc, #384]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
 80033d6:	4b5e      	ldr	r3, [pc, #376]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033de:	623b      	str	r3, [r7, #32]
 80033e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a59      	ldr	r2, [pc, #356]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b57      	ldr	r3, [pc, #348]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	4b53      	ldr	r3, [pc, #332]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a52      	ldr	r2, [pc, #328]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b50      	ldr	r3, [pc, #320]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a4b      	ldr	r2, [pc, #300]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b49      	ldr	r3, [pc, #292]	; (8003550 <BSP_LCD_MspInit+0x190>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <BSP_LCD_MspInit+0x190>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a44      	ldr	r2, [pc, #272]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b42      	ldr	r3, [pc, #264]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b3e      	ldr	r3, [pc, #248]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a3d      	ldr	r2, [pc, #244]	; (8003550 <BSP_LCD_MspInit+0x190>)
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	4b37      	ldr	r3, [pc, #220]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a36      	ldr	r2, [pc, #216]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003478:	f043 0320 	orr.w	r3, r3, #32
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4b30      	ldr	r3, [pc, #192]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a2f      	ldr	r2, [pc, #188]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <BSP_LCD_MspInit+0x190>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80034a6:	f641 0358 	movw	r3, #6232	; 0x1858
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80034b4:	2302      	movs	r3, #2
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80034b8:	230e      	movs	r3, #14
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80034bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c0:	4619      	mov	r1, r3
 80034c2:	4824      	ldr	r0, [pc, #144]	; (8003554 <BSP_LCD_MspInit+0x194>)
 80034c4:	f001 f96e 	bl	80047a4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80034c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d2:	4619      	mov	r1, r3
 80034d4:	4820      	ldr	r0, [pc, #128]	; (8003558 <BSP_LCD_MspInit+0x198>)
 80034d6:	f001 f965 	bl	80047a4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80034da:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80034e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e4:	4619      	mov	r1, r3
 80034e6:	481d      	ldr	r0, [pc, #116]	; (800355c <BSP_LCD_MspInit+0x19c>)
 80034e8:	f001 f95c 	bl	80047a4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80034ec:	2348      	movs	r3, #72	; 0x48
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80034f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f4:	4619      	mov	r1, r3
 80034f6:	481a      	ldr	r0, [pc, #104]	; (8003560 <BSP_LCD_MspInit+0x1a0>)
 80034f8:	f001 f954 	bl	80047a4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80034fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003506:	4619      	mov	r1, r3
 8003508:	4816      	ldr	r0, [pc, #88]	; (8003564 <BSP_LCD_MspInit+0x1a4>)
 800350a:	f001 f94b 	bl	80047a4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800350e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003518:	4619      	mov	r1, r3
 800351a:	4813      	ldr	r0, [pc, #76]	; (8003568 <BSP_LCD_MspInit+0x1a8>)
 800351c:	f001 f942 	bl	80047a4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003520:	2303      	movs	r3, #3
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003524:	2309      	movs	r3, #9
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352c:	4619      	mov	r1, r3
 800352e:	480a      	ldr	r0, [pc, #40]	; (8003558 <BSP_LCD_MspInit+0x198>)
 8003530:	f001 f938 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003534:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	4619      	mov	r1, r3
 8003540:	4809      	ldr	r0, [pc, #36]	; (8003568 <BSP_LCD_MspInit+0x1a8>)
 8003542:	f001 f92f 	bl	80047a4 <HAL_GPIO_Init>
}
 8003546:	bf00      	nop
 8003548:	3738      	adds	r7, #56	; 0x38
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	40020000 	.word	0x40020000
 8003558:	40020400 	.word	0x40020400
 800355c:	40020800 	.word	0x40020800
 8003560:	40020c00 	.word	0x40020c00
 8003564:	40021400 	.word	0x40021400
 8003568:	40021800 	.word	0x40021800

0800356c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800356c:	b5b0      	push	{r4, r5, r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	603a      	str	r2, [r7, #0]
 8003576:	80fb      	strh	r3, [r7, #6]
 8003578:	460b      	mov	r3, r1
 800357a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <BSP_LCD_DrawPixel+0x44>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <BSP_LCD_DrawPixel+0x48>)
 8003582:	2134      	movs	r1, #52	; 0x34
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	335c      	adds	r3, #92	; 0x5c
 800358c:	681c      	ldr	r4, [r3, #0]
 800358e:	88bd      	ldrh	r5, [r7, #4]
 8003590:	f7ff fb8c 	bl	8002cac <BSP_LCD_GetXSize>
 8003594:	4603      	mov	r3, r0
 8003596:	fb03 f205 	mul.w	r2, r3, r5
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4423      	add	r3, r4
 80035a2:	461a      	mov	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bdb0      	pop	{r4, r5, r7, pc}
 80035b0:	200001e4 	.word	0x200001e4
 80035b4:	200006a0 	.word	0x200006a0

080035b8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80035c6:	4b16      	ldr	r3, [pc, #88]	; (8003620 <FillBuffer+0x68>)
 80035c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035cc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035ce:	4b14      	ldr	r3, [pc, #80]	; (8003620 <FillBuffer+0x68>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80035d4:	4a12      	ldr	r2, [pc, #72]	; (8003620 <FillBuffer+0x68>)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <FillBuffer+0x68>)
 80035dc:	4a11      	ldr	r2, [pc, #68]	; (8003624 <FillBuffer+0x6c>)
 80035de:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80035e0:	480f      	ldr	r0, [pc, #60]	; (8003620 <FillBuffer+0x68>)
 80035e2:	f000 fd43 	bl	800406c <HAL_DMA2D_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d115      	bne.n	8003618 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80035ec:	68f9      	ldr	r1, [r7, #12]
 80035ee:	480c      	ldr	r0, [pc, #48]	; (8003620 <FillBuffer+0x68>)
 80035f0:	f000 ffaa 	bl	8004548 <HAL_DMA2D_ConfigLayer>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10e      	bne.n	8003618 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69f9      	ldr	r1, [r7, #28]
 8003604:	4806      	ldr	r0, [pc, #24]	; (8003620 <FillBuffer+0x68>)
 8003606:	f000 fd7a 	bl	80040fe <HAL_DMA2D_Start>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003610:	210a      	movs	r1, #10
 8003612:	4803      	ldr	r0, [pc, #12]	; (8003620 <FillBuffer+0x68>)
 8003614:	f000 fd9e 	bl	8004154 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000174 	.word	0x20000174
 8003624:	4002b000 	.word	0x4002b000

08003628 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800362e:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <BSP_SDRAM_Init+0xb0>)
 8003630:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003634:	2202      	movs	r2, #2
 8003636:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 800363a:	2207      	movs	r2, #7
 800363c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800363e:	4b27      	ldr	r3, [pc, #156]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003640:	2204      	movs	r2, #4
 8003642:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003646:	2207      	movs	r2, #7
 8003648:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 800364c:	2202      	movs	r2, #2
 800364e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003650:	4b22      	ldr	r3, [pc, #136]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003652:	2202      	movs	r2, #2
 8003654:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003658:	2202      	movs	r2, #2
 800365a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800365e:	2201      	movs	r2, #1
 8003660:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800366a:	2204      	movs	r2, #4
 800366c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800366e:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003670:	2210      	movs	r2, #16
 8003672:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003674:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003676:	2240      	movs	r2, #64	; 0x40
 8003678:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800367c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003680:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003684:	2200      	movs	r2, #0
 8003686:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800368a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800368e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003692:	2200      	movs	r2, #0
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003698:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800369e:	2100      	movs	r1, #0
 80036a0:	480c      	ldr	r0, [pc, #48]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 80036a2:	f000 f87f 	bl	80037a4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80036a6:	490d      	ldr	r1, [pc, #52]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 80036a8:	480a      	ldr	r0, [pc, #40]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 80036aa:	f005 f801 	bl	80086b0 <HAL_SDRAM_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <BSP_SDRAM_Init+0xb8>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e002      	b.n	80036c2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <BSP_SDRAM_Init+0xb8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80036c2:	f240 506a 	movw	r0, #1386	; 0x56a
 80036c6:	f000 f80d 	bl	80036e4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <BSP_SDRAM_Init+0xb8>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000200 	.word	0x20000200
 80036d8:	a0000140 	.word	0xa0000140
 80036dc:	20000234 	.word	0x20000234
 80036e0:	2000007c 	.word	0x2000007c

080036e4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f8:	2208      	movs	r2, #8
 80036fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fe:	2201      	movs	r2, #1
 8003700:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003704:	2200      	movs	r2, #0
 8003706:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800370c:	4923      	ldr	r1, [pc, #140]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370e:	4824      	ldr	r0, [pc, #144]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003710:	f005 f802 	bl	8008718 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003714:	2001      	movs	r0, #1
 8003716:	f000 f9cd 	bl	8003ab4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800371c:	2202      	movs	r2, #2
 800371e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003720:	4b1e      	ldr	r3, [pc, #120]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003722:	2208      	movs	r2, #8
 8003724:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003726:	4b1d      	ldr	r3, [pc, #116]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003728:	2201      	movs	r2, #1
 800372a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800372e:	2200      	movs	r2, #0
 8003730:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003736:	4919      	ldr	r1, [pc, #100]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003738:	4819      	ldr	r0, [pc, #100]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800373a:	f004 ffed 	bl	8008718 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003740:	2203      	movs	r2, #3
 8003742:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003746:	2208      	movs	r2, #8
 8003748:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374c:	2204      	movs	r2, #4
 800374e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003750:	4b12      	ldr	r3, [pc, #72]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003752:	2200      	movs	r2, #0
 8003754:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800375a:	4910      	ldr	r1, [pc, #64]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375c:	4810      	ldr	r0, [pc, #64]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800375e:	f004 ffdb 	bl	8008718 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003762:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003766:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800376a:	2204      	movs	r2, #4
 800376c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003770:	2208      	movs	r2, #8
 8003772:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003776:	2201      	movs	r2, #1
 8003778:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a07      	ldr	r2, [pc, #28]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003784:	4905      	ldr	r1, [pc, #20]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003786:	4806      	ldr	r0, [pc, #24]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003788:	f004 ffc6 	bl	8008718 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4804      	ldr	r0, [pc, #16]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003790:	f004 ffed 	bl	800876e <HAL_SDRAM_ProgramRefreshRate>
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000250 	.word	0x20000250
 80037a0:	20000200 	.word	0x20000200

080037a4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b090      	sub	sp, #64	; 0x40
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80ec 	beq.w	800398e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ba:	4b77      	ldr	r3, [pc, #476]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	4a76      	ldr	r2, [pc, #472]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6393      	str	r3, [r2, #56]	; 0x38
 80037c6:	4b74      	ldr	r3, [pc, #464]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	4b70      	ldr	r3, [pc, #448]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a6f      	ldr	r2, [pc, #444]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 80037dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b6d      	ldr	r3, [pc, #436]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	4b69      	ldr	r3, [pc, #420]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a68      	ldr	r2, [pc, #416]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 80037f8:	f043 0302 	orr.w	r3, r3, #2
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b66      	ldr	r3, [pc, #408]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	623b      	str	r3, [r7, #32]
 8003808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	4b62      	ldr	r3, [pc, #392]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a61      	ldr	r2, [pc, #388]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b5f      	ldr	r3, [pc, #380]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	4b5b      	ldr	r3, [pc, #364]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a5a      	ldr	r2, [pc, #360]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003830:	f043 0308 	orr.w	r3, r3, #8
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b58      	ldr	r3, [pc, #352]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	4b54      	ldr	r3, [pc, #336]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4a53      	ldr	r2, [pc, #332]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 800384c:	f043 0310 	orr.w	r3, r3, #16
 8003850:	6313      	str	r3, [r2, #48]	; 0x30
 8003852:	4b51      	ldr	r3, [pc, #324]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	4b4d      	ldr	r3, [pc, #308]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a4c      	ldr	r2, [pc, #304]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003868:	f043 0320 	orr.w	r3, r3, #32
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b4a      	ldr	r3, [pc, #296]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	4b46      	ldr	r3, [pc, #280]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a45      	ldr	r2, [pc, #276]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 8003884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b43      	ldr	r3, [pc, #268]	; (8003998 <BSP_SDRAM_MspInit+0x1f4>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003896:	2302      	movs	r3, #2
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800389a:	2302      	movs	r3, #2
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80038a2:	230c      	movs	r3, #12
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80038a6:	2360      	movs	r3, #96	; 0x60
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80038aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ae:	4619      	mov	r1, r3
 80038b0:	483a      	ldr	r0, [pc, #232]	; (800399c <BSP_SDRAM_MspInit+0x1f8>)
 80038b2:	f000 ff77 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80038b6:	2301      	movs	r3, #1
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80038ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038be:	4619      	mov	r1, r3
 80038c0:	4837      	ldr	r0, [pc, #220]	; (80039a0 <BSP_SDRAM_MspInit+0x1fc>)
 80038c2:	f000 ff6f 	bl	80047a4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80038c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80038cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038d0:	4619      	mov	r1, r3
 80038d2:	4834      	ldr	r0, [pc, #208]	; (80039a4 <BSP_SDRAM_MspInit+0x200>)
 80038d4:	f000 ff66 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80038d8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80038de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038e2:	4619      	mov	r1, r3
 80038e4:	4830      	ldr	r0, [pc, #192]	; (80039a8 <BSP_SDRAM_MspInit+0x204>)
 80038e6:	f000 ff5d 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80038ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80038f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f4:	4619      	mov	r1, r3
 80038f6:	482d      	ldr	r0, [pc, #180]	; (80039ac <BSP_SDRAM_MspInit+0x208>)
 80038f8:	f000 ff54 	bl	80047a4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80038fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003906:	4619      	mov	r1, r3
 8003908:	4829      	ldr	r0, [pc, #164]	; (80039b0 <BSP_SDRAM_MspInit+0x20c>)
 800390a:	f000 ff4b 	bl	80047a4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800390e:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 8003910:	2200      	movs	r2, #0
 8003912:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 800391c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003920:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 8003924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003928:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 800392c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003930:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 8003934:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003938:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 800393c:	2200      	movs	r2, #0
 800393e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003940:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 8003942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003946:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003948:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 800394a:	2200      	movs	r2, #0
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800394e:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 8003950:	2203      	movs	r2, #3
 8003952:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 8003956:	2200      	movs	r2, #0
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 8003962:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <BSP_SDRAM_MspInit+0x214>)
 8003964:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
 800396c:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003972:	4810      	ldr	r0, [pc, #64]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 8003974:	f000 fa6c 	bl	8003e50 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003978:	480e      	ldr	r0, [pc, #56]	; (80039b4 <BSP_SDRAM_MspInit+0x210>)
 800397a:	f000 f9bb 	bl	8003cf4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	210f      	movs	r1, #15
 8003982:	2038      	movs	r0, #56	; 0x38
 8003984:	f000 f970 	bl	8003c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003988:	2038      	movs	r0, #56	; 0x38
 800398a:	f000 f989 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800398e:	bf00      	nop
 8003990:	3740      	adds	r7, #64	; 0x40
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	40020400 	.word	0x40020400
 80039a0:	40020800 	.word	0x40020800
 80039a4:	40020c00 	.word	0x40020c00
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40021400 	.word	0x40021400
 80039b0:	40021800 	.word	0x40021800
 80039b4:	20000260 	.word	0x20000260
 80039b8:	40026410 	.word	0x40026410

080039bc <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	460a      	mov	r2, r1
 80039c6:	80fb      	strh	r3, [r7, #6]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80039d0:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <BSP_TS_Init+0x64>)
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <BSP_TS_Init+0x68>)
 80039d8:	88bb      	ldrh	r3, [r7, #4]
 80039da:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <BSP_TS_Init+0x6c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2082      	movs	r0, #130	; 0x82
 80039e2:	4798      	blx	r3
 80039e4:	4603      	mov	r3, r0
 80039e6:	461a      	mov	r2, r3
 80039e8:	f640 0311 	movw	r3, #2065	; 0x811
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d104      	bne.n	80039fa <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <BSP_TS_Init+0x70>)
 80039f2:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <BSP_TS_Init+0x6c>)
 80039f4:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <BSP_TS_Init+0x70>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2082      	movs	r0, #130	; 0x82
 8003a08:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <BSP_TS_Init+0x70>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2082      	movs	r0, #130	; 0x82
 8003a12:	4798      	blx	r3
  }

  return ret;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200002c4 	.word	0x200002c4
 8003a24:	200002c6 	.word	0x200002c6
 8003a28:	2000003c 	.word	0x2000003c
 8003a2c:	200002c0 	.word	0x200002c0

08003a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <HAL_Init+0x40>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0d      	ldr	r2, [pc, #52]	; (8003a70 <HAL_Init+0x40>)
 8003a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_Init+0x40>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <HAL_Init+0x40>)
 8003a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_Init+0x40>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <HAL_Init+0x40>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a58:	2003      	movs	r0, #3
 8003a5a:	f000 f8fa 	bl	8003c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f7fd ff28 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a64:	f7fd fefa 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023c00 	.word	0x40023c00

08003a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_IncTick+0x20>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_IncTick+0x24>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <HAL_IncTick+0x24>)
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000084 	.word	0x20000084
 8003a98:	2000074c 	.word	0x2000074c

08003a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <HAL_GetTick+0x14>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	2000074c 	.word	0x2000074c

08003ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003abc:	f7ff ffee 	bl	8003a9c <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d005      	beq.n	8003ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_Delay+0x40>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ada:	bf00      	nop
 8003adc:	f7ff ffde 	bl	8003a9c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d8f7      	bhi.n	8003adc <HAL_Delay+0x28>
  {
  }
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000084 	.word	0x20000084

08003af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2a:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	60d3      	str	r3, [r2, #12]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <__NVIC_GetPriorityGrouping+0x18>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0307 	and.w	r3, r3, #7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0b      	blt.n	8003b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4907      	ldr	r1, [pc, #28]	; (8003b94 <__NVIC_EnableIRQ+0x38>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000e100 	.word	0xe000e100

08003b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	db0a      	blt.n	8003bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	490c      	ldr	r1, [pc, #48]	; (8003be4 <__NVIC_SetPriority+0x4c>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc0:	e00a      	b.n	8003bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4908      	ldr	r1, [pc, #32]	; (8003be8 <__NVIC_SetPriority+0x50>)
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	0112      	lsls	r2, r2, #4
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	761a      	strb	r2, [r3, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000e100 	.word	0xe000e100
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f1c3 0307 	rsb	r3, r3, #7
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	bf28      	it	cs
 8003c0a:	2304      	movcs	r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d902      	bls.n	8003c1c <NVIC_EncodePriority+0x30>
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3b03      	subs	r3, #3
 8003c1a:	e000      	b.n	8003c1e <NVIC_EncodePriority+0x32>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	401a      	ands	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c34:	f04f 31ff 	mov.w	r1, #4294967295
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	43d9      	mvns	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	4313      	orrs	r3, r2
         );
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3724      	adds	r7, #36	; 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ff4c 	bl	8003af8 <__NVIC_SetPriorityGrouping>
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c7a:	f7ff ff61 	bl	8003b40 <__NVIC_GetPriorityGrouping>
 8003c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	6978      	ldr	r0, [r7, #20]
 8003c86:	f7ff ffb1 	bl	8003bec <NVIC_EncodePriority>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff80 	bl	8003b98 <__NVIC_SetPriority>
}
 8003c98:	bf00      	nop
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ff54 	bl	8003b5c <__NVIC_EnableIRQ>
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00e      	b.n	8003cec <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	795b      	ldrb	r3, [r3, #5]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fc fd5e 	bl	80007a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d00:	f7ff fecc 	bl	8003a9c <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e099      	b.n	8003e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d30:	e00f      	b.n	8003d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d32:	f7ff feb3 	bl	8003a9c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d908      	bls.n	8003d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e078      	b.n	8003e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e8      	bne.n	8003d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_DMA_Init+0x158>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d107      	bne.n	8003dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4313      	orrs	r3, r2
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0307 	bic.w	r3, r3, #7
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d117      	bne.n	8003e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f8bd 	bl	8003f78 <DMA_CheckFifoParam>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e12:	2301      	movs	r3, #1
 8003e14:	e016      	b.n	8003e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f874 	bl	8003f0c <DMA_CalcBaseAndBitshift>
 8003e24:	4603      	mov	r3, r0
 8003e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	223f      	movs	r2, #63	; 0x3f
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	f010803f 	.word	0xf010803f

08003e50 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e050      	b.n	8003f04 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d101      	bne.n	8003e72 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e048      	b.n	8003f04 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2221      	movs	r2, #33	; 0x21
 8003eb0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f82a 	bl	8003f0c <DMA_CalcBaseAndBitshift>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee4:	223f      	movs	r2, #63	; 0x3f
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	3b10      	subs	r3, #16
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <DMA_CalcBaseAndBitshift+0x64>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <DMA_CalcBaseAndBitshift+0x68>)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d909      	bls.n	8003f4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	1d1a      	adds	r2, r3, #4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f4c:	e007      	b.n	8003f5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	aaaaaaab 	.word	0xaaaaaaab
 8003f74:	0800def0 	.word	0x0800def0

08003f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11f      	bne.n	8003fd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d855      	bhi.n	8004044 <DMA_CheckFifoParam+0xcc>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <DMA_CheckFifoParam+0x28>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fb1 	.word	0x08003fb1
 8003fa4:	08003fc3 	.word	0x08003fc3
 8003fa8:	08003fb1 	.word	0x08003fb1
 8003fac:	08004045 	.word	0x08004045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d045      	beq.n	8004048 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc0:	e042      	b.n	8004048 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fca:	d13f      	bne.n	800404c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd0:	e03c      	b.n	800404c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fda:	d121      	bne.n	8004020 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d836      	bhi.n	8004050 <DMA_CheckFifoParam+0xd8>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <DMA_CheckFifoParam+0x70>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	08003ff9 	.word	0x08003ff9
 8003fec:	08003fff 	.word	0x08003fff
 8003ff0:	08003ff9 	.word	0x08003ff9
 8003ff4:	08004011 	.word	0x08004011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8003ffc:	e02f      	b.n	800405e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d024      	beq.n	8004054 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400e:	e021      	b.n	8004054 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004018:	d11e      	bne.n	8004058 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800401e:	e01b      	b.n	8004058 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d902      	bls.n	800402c <DMA_CheckFifoParam+0xb4>
 8004026:	2b03      	cmp	r3, #3
 8004028:	d003      	beq.n	8004032 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800402a:	e018      	b.n	800405e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e015      	b.n	800405e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00e      	beq.n	800405c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      break;
 8004042:	e00b      	b.n	800405c <DMA_CheckFifoParam+0xe4>
      break;
 8004044:	bf00      	nop
 8004046:	e00a      	b.n	800405e <DMA_CheckFifoParam+0xe6>
      break;
 8004048:	bf00      	nop
 800404a:	e008      	b.n	800405e <DMA_CheckFifoParam+0xe6>
      break;
 800404c:	bf00      	nop
 800404e:	e006      	b.n	800405e <DMA_CheckFifoParam+0xe6>
      break;
 8004050:	bf00      	nop
 8004052:	e004      	b.n	800405e <DMA_CheckFifoParam+0xe6>
      break;
 8004054:	bf00      	nop
 8004056:	e002      	b.n	800405e <DMA_CheckFifoParam+0xe6>
      break;   
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <DMA_CheckFifoParam+0xe6>
      break;
 800405c:	bf00      	nop
    }
  } 
  
  return status; 
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e03b      	b.n	80040f6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc fbd8 	bl	8000848 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040bc:	f023 0107 	bic.w	r1, r3, #7
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68d1      	ldr	r1, [r2, #12]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	430b      	orrs	r3, r1
 80040e4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af02      	add	r7, sp, #8
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_DMA2D_Start+0x1c>
 8004116:	2302      	movs	r3, #2
 8004118:	e018      	b.n	800414c <HAL_DMA2D_Start+0x4e>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fa99 	bl	800466c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d056      	beq.n	800421e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004170:	f7ff fc94 	bl	8003a9c <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004176:	e04b      	b.n	8004210 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004186:	2b00      	cmp	r3, #0
 8004188:	d023      	beq.n	80041d2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	f043 0202 	orr.w	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2221      	movs	r2, #33	; 0x21
 80041bc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2204      	movs	r2, #4
 80041c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0a5      	b.n	800431e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d01a      	beq.n	8004210 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80041da:	f7ff fc5f 	bl	8003a9c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <HAL_DMA2D_PollForTransfer+0x9c>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10f      	bne.n	8004210 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2203      	movs	r2, #3
 8004200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e086      	b.n	800431e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ac      	beq.n	8004178 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d061      	beq.n	8004304 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004240:	f7ff fc2c 	bl	8003a9c <HAL_GetTick>
 8004244:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004246:	e056      	b.n	80042f6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02e      	beq.n	80042b8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	f043 0204 	orr.w	r2, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	f043 0202 	orr.w	r2, r3, #2
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	f043 0201 	orr.w	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2229      	movs	r2, #41	; 0x29
 80042a2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2204      	movs	r2, #4
 80042a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e032      	b.n	800431e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d01a      	beq.n	80042f6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80042c0:	f7ff fbec 	bl	8003a9c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <HAL_DMA2D_PollForTransfer+0x182>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2203      	movs	r2, #3
 80042e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e013      	b.n	800431e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0a1      	beq.n	8004248 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2212      	movs	r2, #18
 800430a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d026      	beq.n	8004396 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d021      	beq.n	8004396 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	f043 0201 	orr.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2204      	movs	r2, #4
 800437a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d026      	beq.n	80043ee <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d021      	beq.n	80043ee <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2220      	movs	r2, #32
 80043c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c6:	f043 0202 	orr.w	r2, r3, #2
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2204      	movs	r2, #4
 80043d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d026      	beq.n	8004446 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d021      	beq.n	8004446 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004410:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2208      	movs	r2, #8
 8004418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2204      	movs	r2, #4
 800442a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00e      	beq.n	8004478 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004468:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2204      	movs	r2, #4
 8004470:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f853 	bl	800451e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d024      	beq.n	80044cc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01f      	beq.n	80044cc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800449a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2202      	movs	r2, #2
 80044a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01f      	beq.n	8004516 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01a      	beq.n	8004516 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044ee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2210      	movs	r2, #16
 80044f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f80e 	bl	8004532 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_DMA2D_ConfigLayer+0x20>
 8004564:	2302      	movs	r3, #2
 8004566:	e079      	b.n	800465c <HAL_DMA2D_ConfigLayer+0x114>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	3318      	adds	r3, #24
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004592:	4b35      	ldr	r3, [pc, #212]	; (8004668 <HAL_DMA2D_ConfigLayer+0x120>)
 8004594:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b0a      	cmp	r3, #10
 800459c:	d003      	beq.n	80045a6 <HAL_DMA2D_ConfigLayer+0x5e>
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b09      	cmp	r3, #9
 80045a4:	d107      	bne.n	80045b6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e005      	b.n	80045c2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	061b      	lsls	r3, r3, #24
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d120      	bne.n	800460a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	ea02 0103 	and.w	r1, r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	430a      	orrs	r2, r1
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b0a      	cmp	r3, #10
 80045f0:	d003      	beq.n	80045fa <HAL_DMA2D_ConfigLayer+0xb2>
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b09      	cmp	r3, #9
 80045f8:	d127      	bne.n	800464a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004606:	629a      	str	r2, [r3, #40]	; 0x28
 8004608:	e01f      	b.n	800464a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	43db      	mvns	r3, r3
 8004614:	ea02 0103 	and.w	r1, r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	430a      	orrs	r2, r1
 8004620:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b0a      	cmp	r3, #10
 8004632:	d003      	beq.n	800463c <HAL_DMA2D_ConfigLayer+0xf4>
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b09      	cmp	r3, #9
 800463a:	d106      	bne.n	800464a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004648:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	ff03000f 	.word	0xff03000f

0800466c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800466c:	b480      	push	{r7}
 800466e:	b08b      	sub	sp, #44	; 0x2c
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	041a      	lsls	r2, r3, #16
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	431a      	orrs	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046a4:	d174      	bne.n	8004790 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046b4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046bc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d108      	bne.n	80046de <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
 80046dc:	e053      	b.n	8004786 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d106      	bne.n	80046f4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
 80046f2:	e048      	b.n	8004786 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d111      	bne.n	8004720 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	0cdb      	lsrs	r3, r3, #19
 8004700:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	0a9b      	lsrs	r3, r3, #10
 8004706:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	08db      	lsrs	r3, r3, #3
 800470c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	02db      	lsls	r3, r3, #11
 8004716:	4313      	orrs	r3, r2
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
 800471e:	e032      	b.n	8004786 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d117      	bne.n	8004758 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	0fdb      	lsrs	r3, r3, #31
 800472c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	0cdb      	lsrs	r3, r3, #19
 8004732:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	0adb      	lsrs	r3, r3, #11
 8004738:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	08db      	lsrs	r3, r3, #3
 800473e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	029b      	lsls	r3, r3, #10
 8004748:	431a      	orrs	r2, r3
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	03db      	lsls	r3, r3, #15
 800474e:	4313      	orrs	r3, r2
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
 8004756:	e016      	b.n	8004786 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	0f1b      	lsrs	r3, r3, #28
 800475c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	0d1b      	lsrs	r3, r3, #20
 8004762:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	0b1b      	lsrs	r3, r3, #12
 8004768:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	011a      	lsls	r2, r3, #4
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	431a      	orrs	r2, r3
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	031b      	lsls	r3, r3, #12
 800477e:	4313      	orrs	r3, r2
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800478e:	e003      	b.n	8004798 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	60da      	str	r2, [r3, #12]
}
 8004798:	bf00      	nop
 800479a:	372c      	adds	r7, #44	; 0x2c
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	e177      	b.n	8004ab0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047c0:	2201      	movs	r2, #1
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	429a      	cmp	r2, r3
 80047da:	f040 8166 	bne.w	8004aaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d00b      	beq.n	80047fe <HAL_GPIO_Init+0x5a>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d007      	beq.n	80047fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047f2:	2b11      	cmp	r3, #17
 80047f4:	d003      	beq.n	80047fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b12      	cmp	r3, #18
 80047fc:	d130      	bne.n	8004860 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	2203      	movs	r2, #3
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004834:	2201      	movs	r2, #1
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 0201 	and.w	r2, r3, #1
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	2203      	movs	r2, #3
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4013      	ands	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0xfc>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b12      	cmp	r3, #18
 800489e:	d123      	bne.n	80048e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	08da      	lsrs	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3208      	adds	r2, #8
 80048a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	220f      	movs	r2, #15
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	08da      	lsrs	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3208      	adds	r2, #8
 80048e2:	69b9      	ldr	r1, [r7, #24]
 80048e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	2203      	movs	r2, #3
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 0203 	and.w	r2, r3, #3
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80c0 	beq.w	8004aaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <HAL_GPIO_Init+0x320>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	4a64      	ldr	r2, [pc, #400]	; (8004ac4 <HAL_GPIO_Init+0x320>)
 8004934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004938:	6453      	str	r3, [r2, #68]	; 0x44
 800493a:	4b62      	ldr	r3, [pc, #392]	; (8004ac4 <HAL_GPIO_Init+0x320>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004946:	4a60      	ldr	r2, [pc, #384]	; (8004ac8 <HAL_GPIO_Init+0x324>)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	3302      	adds	r3, #2
 800494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	220f      	movs	r2, #15
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a57      	ldr	r2, [pc, #348]	; (8004acc <HAL_GPIO_Init+0x328>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d037      	beq.n	80049e2 <HAL_GPIO_Init+0x23e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a56      	ldr	r2, [pc, #344]	; (8004ad0 <HAL_GPIO_Init+0x32c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d031      	beq.n	80049de <HAL_GPIO_Init+0x23a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a55      	ldr	r2, [pc, #340]	; (8004ad4 <HAL_GPIO_Init+0x330>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d02b      	beq.n	80049da <HAL_GPIO_Init+0x236>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a54      	ldr	r2, [pc, #336]	; (8004ad8 <HAL_GPIO_Init+0x334>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d025      	beq.n	80049d6 <HAL_GPIO_Init+0x232>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a53      	ldr	r2, [pc, #332]	; (8004adc <HAL_GPIO_Init+0x338>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01f      	beq.n	80049d2 <HAL_GPIO_Init+0x22e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a52      	ldr	r2, [pc, #328]	; (8004ae0 <HAL_GPIO_Init+0x33c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d019      	beq.n	80049ce <HAL_GPIO_Init+0x22a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a51      	ldr	r2, [pc, #324]	; (8004ae4 <HAL_GPIO_Init+0x340>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <HAL_GPIO_Init+0x226>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a50      	ldr	r2, [pc, #320]	; (8004ae8 <HAL_GPIO_Init+0x344>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00d      	beq.n	80049c6 <HAL_GPIO_Init+0x222>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a4f      	ldr	r2, [pc, #316]	; (8004aec <HAL_GPIO_Init+0x348>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <HAL_GPIO_Init+0x21e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a4e      	ldr	r2, [pc, #312]	; (8004af0 <HAL_GPIO_Init+0x34c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_GPIO_Init+0x21a>
 80049ba:	2309      	movs	r3, #9
 80049bc:	e012      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049be:	230a      	movs	r3, #10
 80049c0:	e010      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049c2:	2308      	movs	r3, #8
 80049c4:	e00e      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049c6:	2307      	movs	r3, #7
 80049c8:	e00c      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049ca:	2306      	movs	r3, #6
 80049cc:	e00a      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049ce:	2305      	movs	r3, #5
 80049d0:	e008      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049d2:	2304      	movs	r3, #4
 80049d4:	e006      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049d6:	2303      	movs	r3, #3
 80049d8:	e004      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049da:	2302      	movs	r3, #2
 80049dc:	e002      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <HAL_GPIO_Init+0x240>
 80049e2:	2300      	movs	r3, #0
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	f002 0203 	and.w	r2, r2, #3
 80049ea:	0092      	lsls	r2, r2, #2
 80049ec:	4093      	lsls	r3, r2
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f4:	4934      	ldr	r1, [pc, #208]	; (8004ac8 <HAL_GPIO_Init+0x324>)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	3302      	adds	r3, #2
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a02:	4b3c      	ldr	r3, [pc, #240]	; (8004af4 <HAL_GPIO_Init+0x350>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a26:	4a33      	ldr	r2, [pc, #204]	; (8004af4 <HAL_GPIO_Init+0x350>)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a2c:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <HAL_GPIO_Init+0x350>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a50:	4a28      	ldr	r2, [pc, #160]	; (8004af4 <HAL_GPIO_Init+0x350>)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a56:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <HAL_GPIO_Init+0x350>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <HAL_GPIO_Init+0x350>)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <HAL_GPIO_Init+0x350>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aa4:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <HAL_GPIO_Init+0x350>)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3301      	adds	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	f67f ae84 	bls.w	80047c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3724      	adds	r7, #36	; 0x24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	40013800 	.word	0x40013800
 8004acc:	40020000 	.word	0x40020000
 8004ad0:	40020400 	.word	0x40020400
 8004ad4:	40020800 	.word	0x40020800
 8004ad8:	40020c00 	.word	0x40020c00
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40021400 	.word	0x40021400
 8004ae4:	40021800 	.word	0x40021800
 8004ae8:	40021c00 	.word	0x40021c00
 8004aec:	40022000 	.word	0x40022000
 8004af0:	40022400 	.word	0x40022400
 8004af4:	40013c00 	.word	0x40013c00

08004af8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e0d9      	b.n	8004cc8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b14:	2201      	movs	r2, #1
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4013      	ands	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	f040 80c9 	bne.w	8004cc2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b30:	4a6a      	ldr	r2, [pc, #424]	; (8004cdc <HAL_GPIO_DeInit+0x1e4>)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	089b      	lsrs	r3, r3, #2
 8004b36:	3302      	adds	r3, #2
 8004b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	220f      	movs	r2, #15
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a62      	ldr	r2, [pc, #392]	; (8004ce0 <HAL_GPIO_DeInit+0x1e8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d037      	beq.n	8004bca <HAL_GPIO_DeInit+0xd2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a61      	ldr	r2, [pc, #388]	; (8004ce4 <HAL_GPIO_DeInit+0x1ec>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d031      	beq.n	8004bc6 <HAL_GPIO_DeInit+0xce>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a60      	ldr	r2, [pc, #384]	; (8004ce8 <HAL_GPIO_DeInit+0x1f0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d02b      	beq.n	8004bc2 <HAL_GPIO_DeInit+0xca>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a5f      	ldr	r2, [pc, #380]	; (8004cec <HAL_GPIO_DeInit+0x1f4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d025      	beq.n	8004bbe <HAL_GPIO_DeInit+0xc6>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a5e      	ldr	r2, [pc, #376]	; (8004cf0 <HAL_GPIO_DeInit+0x1f8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01f      	beq.n	8004bba <HAL_GPIO_DeInit+0xc2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a5d      	ldr	r2, [pc, #372]	; (8004cf4 <HAL_GPIO_DeInit+0x1fc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d019      	beq.n	8004bb6 <HAL_GPIO_DeInit+0xbe>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a5c      	ldr	r2, [pc, #368]	; (8004cf8 <HAL_GPIO_DeInit+0x200>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <HAL_GPIO_DeInit+0xba>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a5b      	ldr	r2, [pc, #364]	; (8004cfc <HAL_GPIO_DeInit+0x204>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00d      	beq.n	8004bae <HAL_GPIO_DeInit+0xb6>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a5a      	ldr	r2, [pc, #360]	; (8004d00 <HAL_GPIO_DeInit+0x208>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <HAL_GPIO_DeInit+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a59      	ldr	r2, [pc, #356]	; (8004d04 <HAL_GPIO_DeInit+0x20c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d101      	bne.n	8004ba6 <HAL_GPIO_DeInit+0xae>
 8004ba2:	2309      	movs	r3, #9
 8004ba4:	e012      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004ba6:	230a      	movs	r3, #10
 8004ba8:	e010      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004baa:	2308      	movs	r3, #8
 8004bac:	e00e      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004bae:	2307      	movs	r3, #7
 8004bb0:	e00c      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004bb2:	2306      	movs	r3, #6
 8004bb4:	e00a      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004bb6:	2305      	movs	r3, #5
 8004bb8:	e008      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004bba:	2304      	movs	r3, #4
 8004bbc:	e006      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e004      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e002      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <HAL_GPIO_DeInit+0xd4>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	f002 0203 	and.w	r2, r2, #3
 8004bd2:	0092      	lsls	r2, r2, #2
 8004bd4:	4093      	lsls	r3, r2
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d132      	bne.n	8004c42 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004bdc:	4b4a      	ldr	r3, [pc, #296]	; (8004d08 <HAL_GPIO_DeInit+0x210>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	4948      	ldr	r1, [pc, #288]	; (8004d08 <HAL_GPIO_DeInit+0x210>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004bea:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <HAL_GPIO_DeInit+0x210>)
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	4945      	ldr	r1, [pc, #276]	; (8004d08 <HAL_GPIO_DeInit+0x210>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004bf8:	4b43      	ldr	r3, [pc, #268]	; (8004d08 <HAL_GPIO_DeInit+0x210>)
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	4941      	ldr	r1, [pc, #260]	; (8004d08 <HAL_GPIO_DeInit+0x210>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c06:	4b40      	ldr	r3, [pc, #256]	; (8004d08 <HAL_GPIO_DeInit+0x210>)
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	493e      	ldr	r1, [pc, #248]	; (8004d08 <HAL_GPIO_DeInit+0x210>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004c24:	4a2d      	ldr	r2, [pc, #180]	; (8004cdc <HAL_GPIO_DeInit+0x1e4>)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	089b      	lsrs	r3, r3, #2
 8004c2a:	3302      	adds	r3, #2
 8004c2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	43da      	mvns	r2, r3
 8004c34:	4829      	ldr	r0, [pc, #164]	; (8004cdc <HAL_GPIO_DeInit+0x1e4>)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	2103      	movs	r1, #3
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	401a      	ands	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	08da      	lsrs	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3208      	adds	r2, #8
 8004c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	220f      	movs	r2, #15
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43db      	mvns	r3, r3
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	08d2      	lsrs	r2, r2, #3
 8004c78:	4019      	ands	r1, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3208      	adds	r2, #8
 8004c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	2103      	movs	r1, #3
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	401a      	ands	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	2103      	movs	r1, #3
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	401a      	ands	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	f67f af22 	bls.w	8004b14 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40013800 	.word	0x40013800
 8004ce0:	40020000 	.word	0x40020000
 8004ce4:	40020400 	.word	0x40020400
 8004ce8:	40020800 	.word	0x40020800
 8004cec:	40020c00 	.word	0x40020c00
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40021400 	.word	0x40021400
 8004cf8:	40021800 	.word	0x40021800
 8004cfc:	40021c00 	.word	0x40021c00
 8004d00:	40022000 	.word	0x40022000
 8004d04:	40022400 	.word	0x40022400
 8004d08:	40013c00 	.word	0x40013c00

08004d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	807b      	strh	r3, [r7, #2]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d1c:	787b      	ldrb	r3, [r7, #1]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d22:	887a      	ldrh	r2, [r7, #2]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d28:	e003      	b.n	8004d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d2a:	887b      	ldrh	r3, [r7, #2]
 8004d2c:	041a      	lsls	r2, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	619a      	str	r2, [r3, #24]
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b086      	sub	sp, #24
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f005 fc67 	bl	800a628 <USB_GetMode>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	f040 80ef 	bne.w	8004f40 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f005 fc4b 	bl	800a602 <USB_ReadInterrupts>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80e5 	beq.w	8004f3e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f005 fc42 	bl	800a602 <USB_ReadInterrupts>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d88:	d104      	bne.n	8004d94 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d92:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f005 fc32 	bl	800a602 <USB_ReadInterrupts>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da8:	d104      	bne.n	8004db4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004db2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f005 fc22 	bl	800a602 <USB_ReadInterrupts>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dc8:	d104      	bne.n	8004dd4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004dd2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f005 fc12 	bl	800a602 <USB_ReadInterrupts>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d103      	bne.n	8004df0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2202      	movs	r2, #2
 8004dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f005 fc04 	bl	800a602 <USB_ReadInterrupts>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e04:	d115      	bne.n	8004e32 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e0e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d108      	bne.n	8004e32 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f006 ff2b 	bl	800bc7c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f005 fc09 	bl	800a644 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f005 fbe3 	bl	800a602 <USB_ReadInterrupts>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e46:	d102      	bne.n	8004e4e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f001 f8ef 	bl	800602c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f005 fbd5 	bl	800a602 <USB_ReadInterrupts>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d106      	bne.n	8004e70 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f006 feee 	bl	800bc44 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f005 fbc4 	bl	800a602 <USB_ReadInterrupts>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e84:	d138      	bne.n	8004ef8 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f005 fc14 	bl	800a6b8 <USB_HC_ReadInterrupt>
 8004e90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	e025      	b.n	8004ee4 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d018      	beq.n	8004ede <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec2:	d106      	bne.n	8004ed2 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f858 	bl	8004f80 <HCD_HC_IN_IRQHandler>
 8004ed0:	e005      	b.n	8004ede <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fc86 	bl	80057ea <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3d4      	bcc.n	8004e98 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f005 fb80 	bl	800a602 <USB_ReadInterrupts>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d101      	bne.n	8004f10 <HAL_HCD_IRQHandler+0x1d2>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_HCD_IRQHandler+0x1d4>
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d014      	beq.n	8004f40 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0210 	bic.w	r2, r2, #16
 8004f24:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 ffd4 	bl	8005ed4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0210 	orr.w	r2, r2, #16
 8004f3a:	619a      	str	r2, [r3, #24]
 8004f3c:	e000      	b.n	8004f40 <HAL_HCD_IRQHandler+0x202>
      return;
 8004f3e:	bf00      	nop
    }
  }
}
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_HCD_Stop+0x16>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e00d      	b.n	8004f78 <HAL_HCD_Stop+0x32>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f005 fcb5 	bl	800a8d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d119      	bne.n	8004fe4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	60d3      	str	r3, [r2, #12]
 8004fe2:	e0ce      	b.n	8005182 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffa:	d12c      	bne.n	8005056 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4413      	add	r3, r2
 8005004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005008:	461a      	mov	r2, r3
 800500a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800500e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	440b      	add	r3, r1
 800501e:	335d      	adds	r3, #93	; 0x5d
 8005020:	2207      	movs	r2, #7
 8005022:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	440a      	add	r2, r1
 800503a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800503e:	f043 0302 	orr.w	r3, r3, #2
 8005042:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	4611      	mov	r1, r2
 800504e:	4618      	mov	r0, r3
 8005050:	f005 fb43 	bl	800a6da <USB_HC_Halt>
 8005054:	e095      	b.n	8005182 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b20      	cmp	r3, #32
 800506a:	d109      	bne.n	8005080 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4413      	add	r3, r2
 8005074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005078:	461a      	mov	r2, r3
 800507a:	2320      	movs	r3, #32
 800507c:	6093      	str	r3, [r2, #8]
 800507e:	e080      	b.n	8005182 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b08      	cmp	r3, #8
 8005094:	d134      	bne.n	8005100 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b0:	f043 0302 	orr.w	r3, r3, #2
 80050b4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	335d      	adds	r3, #93	; 0x5d
 80050c6:	2205      	movs	r2, #5
 80050c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d6:	461a      	mov	r2, r3
 80050d8:	2310      	movs	r3, #16
 80050da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	461a      	mov	r2, r3
 80050ea:	2308      	movs	r3, #8
 80050ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f005 faee 	bl	800a6da <USB_HC_Halt>
 80050fe:	e040      	b.n	8005182 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4413      	add	r3, r2
 8005108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005116:	d134      	bne.n	8005182 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	440a      	add	r2, r1
 800512e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005132:	f043 0302 	orr.w	r3, r3, #2
 8005136:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f005 fac9 	bl	800a6da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005154:	461a      	mov	r2, r3
 8005156:	2310      	movs	r3, #16
 8005158:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	335d      	adds	r3, #93	; 0x5d
 800516a:	2208      	movs	r2, #8
 800516c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	461a      	mov	r2, r3
 800517c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005180:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005198:	d122      	bne.n	80051e0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b4:	f043 0302 	orr.w	r3, r3, #2
 80051b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f005 fa88 	bl	800a6da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	461a      	mov	r2, r3
 80051d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051dc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80051de:	e300      	b.n	80057e2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	f040 80fd 	bne.w	80053f2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	440b      	add	r3, r1
 800520e:	3348      	adds	r3, #72	; 0x48
 8005210:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	0159      	lsls	r1, r3, #5
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	440b      	add	r3, r1
 800521a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005224:	1ad1      	subs	r1, r2, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4403      	add	r3, r0
 8005234:	334c      	adds	r3, #76	; 0x4c
 8005236:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	440b      	add	r3, r1
 8005246:	335d      	adds	r3, #93	; 0x5d
 8005248:	2201      	movs	r2, #1
 800524a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	440b      	add	r3, r1
 800525a:	3358      	adds	r3, #88	; 0x58
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526c:	461a      	mov	r2, r3
 800526e:	2301      	movs	r3, #1
 8005270:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	333f      	adds	r3, #63	; 0x3f
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	440b      	add	r3, r1
 8005296:	333f      	adds	r3, #63	; 0x3f
 8005298:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800529a:	2b02      	cmp	r3, #2
 800529c:	d121      	bne.n	80052e2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b8:	f043 0302 	orr.w	r3, r3, #2
 80052bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	4611      	mov	r1, r2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f005 fa06 	bl	800a6da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	461a      	mov	r2, r3
 80052dc:	2310      	movs	r3, #16
 80052de:	6093      	str	r3, [r2, #8]
 80052e0:	e070      	b.n	80053c4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	440b      	add	r3, r1
 80052f0:	333f      	adds	r3, #63	; 0x3f
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d12a      	bne.n	800534e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	440a      	add	r2, r1
 800530e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005316:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	440b      	add	r3, r1
 8005326:	335c      	adds	r3, #92	; 0x5c
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	b2d8      	uxtb	r0, r3
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	335c      	adds	r3, #92	; 0x5c
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	4601      	mov	r1, r0
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f006 fca6 	bl	800bc98 <HAL_HCD_HC_NotifyURBChange_Callback>
 800534c:	e03a      	b.n	80053c4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	333f      	adds	r3, #63	; 0x3f
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d12f      	bne.n	80053c4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	440b      	add	r3, r1
 8005372:	335c      	adds	r3, #92	; 0x5c
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	440b      	add	r3, r1
 8005386:	3350      	adds	r3, #80	; 0x50
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	f083 0301 	eor.w	r3, r3, #1
 800538e:	b2d8      	uxtb	r0, r3
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	3350      	adds	r3, #80	; 0x50
 80053a0:	4602      	mov	r2, r0
 80053a2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	b2d8      	uxtb	r0, r3
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	440b      	add	r3, r1
 80053b6:	335c      	adds	r3, #92	; 0x5c
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	4601      	mov	r1, r0
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f006 fc6a 	bl	800bc98 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	440b      	add	r3, r1
 80053d2:	3350      	adds	r3, #80	; 0x50
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	f083 0301 	eor.w	r3, r3, #1
 80053da:	b2d8      	uxtb	r0, r3
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	440b      	add	r3, r1
 80053ea:	3350      	adds	r3, #80	; 0x50
 80053ec:	4602      	mov	r2, r0
 80053ee:	701a      	strb	r2, [r3, #0]
}
 80053f0:	e1f7      	b.n	80057e2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b02      	cmp	r3, #2
 8005406:	f040 811a 	bne.w	800563e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	440a      	add	r2, r1
 8005420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005424:	f023 0302 	bic.w	r3, r3, #2
 8005428:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	440b      	add	r3, r1
 8005438:	335d      	adds	r3, #93	; 0x5d
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d10a      	bne.n	8005456 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	440b      	add	r3, r1
 800544e:	335c      	adds	r3, #92	; 0x5c
 8005450:	2201      	movs	r2, #1
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	e0d9      	b.n	800560a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	440b      	add	r3, r1
 8005464:	335d      	adds	r3, #93	; 0x5d
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b05      	cmp	r3, #5
 800546a:	d10a      	bne.n	8005482 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	440b      	add	r3, r1
 800547a:	335c      	adds	r3, #92	; 0x5c
 800547c:	2205      	movs	r2, #5
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e0c3      	b.n	800560a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	440b      	add	r3, r1
 8005490:	335d      	adds	r3, #93	; 0x5d
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b06      	cmp	r3, #6
 8005496:	d00a      	beq.n	80054ae <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	440b      	add	r3, r1
 80054a6:	335d      	adds	r3, #93	; 0x5d
 80054a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d156      	bne.n	800555c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	440b      	add	r3, r1
 80054bc:	3358      	adds	r3, #88	; 0x58
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	1c59      	adds	r1, r3, #1
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4403      	add	r3, r0
 80054d0:	3358      	adds	r3, #88	; 0x58
 80054d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	440b      	add	r3, r1
 80054e2:	3358      	adds	r3, #88	; 0x58
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d914      	bls.n	8005514 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	440b      	add	r3, r1
 80054f8:	3358      	adds	r3, #88	; 0x58
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	440b      	add	r3, r1
 800550c:	335c      	adds	r3, #92	; 0x5c
 800550e:	2204      	movs	r2, #4
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e009      	b.n	8005528 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	440b      	add	r3, r1
 8005522:	335c      	adds	r3, #92	; 0x5c
 8005524:	2202      	movs	r2, #2
 8005526:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800553e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005546:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4413      	add	r3, r2
 8005550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005554:	461a      	mov	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e056      	b.n	800560a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	440b      	add	r3, r1
 800556a:	335d      	adds	r3, #93	; 0x5d
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d123      	bne.n	80055ba <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	440b      	add	r3, r1
 8005580:	335c      	adds	r3, #92	; 0x5c
 8005582:	2202      	movs	r2, #2
 8005584:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800559c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055a4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	461a      	mov	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	e027      	b.n	800560a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	335d      	adds	r3, #93	; 0x5d
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b07      	cmp	r3, #7
 80055ce:	d11c      	bne.n	800560a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	440b      	add	r3, r1
 80055de:	3358      	adds	r3, #88	; 0x58
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	1c59      	adds	r1, r3, #1
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4403      	add	r3, r0
 80055f2:	3358      	adds	r3, #88	; 0x58
 80055f4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	440b      	add	r3, r1
 8005604:	335c      	adds	r3, #92	; 0x5c
 8005606:	2204      	movs	r2, #4
 8005608:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005616:	461a      	mov	r2, r3
 8005618:	2302      	movs	r3, #2
 800561a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	b2d8      	uxtb	r0, r3
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	440b      	add	r3, r1
 800562e:	335c      	adds	r3, #92	; 0x5c
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	4601      	mov	r1, r0
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f006 fb2e 	bl	800bc98 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800563c:	e0d1      	b.n	80057e2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b80      	cmp	r3, #128	; 0x80
 8005652:	d13e      	bne.n	80056d2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	440a      	add	r2, r1
 800566a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800566e:	f043 0302 	orr.w	r3, r3, #2
 8005672:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	440b      	add	r3, r1
 8005682:	3358      	adds	r3, #88	; 0x58
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	1c59      	adds	r1, r3, #1
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4403      	add	r3, r0
 8005696:	3358      	adds	r3, #88	; 0x58
 8005698:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	440b      	add	r3, r1
 80056a8:	335d      	adds	r3, #93	; 0x5d
 80056aa:	2206      	movs	r2, #6
 80056ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	4611      	mov	r1, r2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f005 f80e 	bl	800a6da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	461a      	mov	r2, r3
 80056cc:	2380      	movs	r3, #128	; 0x80
 80056ce:	6093      	str	r3, [r2, #8]
}
 80056d0:	e087      	b.n	80057e2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d17c      	bne.n	80057e2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	440b      	add	r3, r1
 80056f6:	333f      	adds	r3, #63	; 0x3f
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d122      	bne.n	8005744 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	440b      	add	r3, r1
 800570c:	3358      	adds	r3, #88	; 0x58
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4413      	add	r3, r2
 800571a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	440a      	add	r2, r1
 8005728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800572c:	f043 0302 	orr.w	r3, r3, #2
 8005730:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f004 ffcc 	bl	800a6da <USB_HC_Halt>
 8005742:	e045      	b.n	80057d0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	333f      	adds	r3, #63	; 0x3f
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	440b      	add	r3, r1
 8005768:	333f      	adds	r3, #63	; 0x3f
 800576a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800576c:	2b02      	cmp	r3, #2
 800576e:	d12f      	bne.n	80057d0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	440b      	add	r3, r1
 800577e:	3358      	adds	r3, #88	; 0x58
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d121      	bne.n	80057d0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	440b      	add	r3, r1
 800579a:	335d      	adds	r3, #93	; 0x5d
 800579c:	2203      	movs	r2, #3
 800579e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ba:	f043 0302 	orr.w	r3, r3, #2
 80057be:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	4611      	mov	r1, r2
 80057ca:	4618      	mov	r0, r3
 80057cc:	f004 ff85 	bl	800a6da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057dc:	461a      	mov	r2, r3
 80057de:	2310      	movs	r3, #16
 80057e0:	6093      	str	r3, [r2, #8]
}
 80057e2:	bf00      	nop
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4413      	add	r3, r2
 800580c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b04      	cmp	r3, #4
 8005818:	d119      	bne.n	800584e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005826:	461a      	mov	r2, r3
 8005828:	2304      	movs	r3, #4
 800582a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	440a      	add	r2, r1
 8005842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005846:	f043 0302 	orr.w	r3, r3, #2
 800584a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800584c:	e33e      	b.n	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b20      	cmp	r3, #32
 8005862:	d141      	bne.n	80058e8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005870:	461a      	mov	r2, r3
 8005872:	2320      	movs	r3, #32
 8005874:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	440b      	add	r3, r1
 8005884:	333d      	adds	r3, #61	; 0x3d
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	f040 831f 	bne.w	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	440b      	add	r3, r1
 800589c:	333d      	adds	r3, #61	; 0x3d
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	440b      	add	r3, r1
 80058b0:	335c      	adds	r3, #92	; 0x5c
 80058b2:	2202      	movs	r2, #2
 80058b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	0151      	lsls	r1, r2, #5
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	440a      	add	r2, r1
 80058cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	4611      	mov	r1, r2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f004 fefa 	bl	800a6da <USB_HC_Halt>
}
 80058e6:	e2f1      	b.n	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d13f      	bne.n	800597e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	440b      	add	r3, r1
 800590c:	335d      	adds	r3, #93	; 0x5d
 800590e:	2204      	movs	r2, #4
 8005910:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	440b      	add	r3, r1
 8005920:	333d      	adds	r3, #61	; 0x3d
 8005922:	2201      	movs	r2, #1
 8005924:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	440b      	add	r3, r1
 8005934:	3358      	adds	r3, #88	; 0x58
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	440a      	add	r2, r1
 8005950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005954:	f043 0302 	orr.w	r3, r3, #2
 8005958:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f004 feb8 	bl	800a6da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	461a      	mov	r2, r3
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	6093      	str	r3, [r2, #8]
}
 800597c:	e2a6      	b.n	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005994:	d122      	bne.n	80059dc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f004 fe8a 	bl	800a6da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d2:	461a      	mov	r2, r3
 80059d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059d8:	6093      	str	r3, [r2, #8]
}
 80059da:	e277      	b.n	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d135      	bne.n	8005a5e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	440b      	add	r3, r1
 8005a00:	3358      	adds	r3, #88	; 0x58
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f004 fe52 	bl	800a6da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a42:	461a      	mov	r2, r3
 8005a44:	2301      	movs	r3, #1
 8005a46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	440b      	add	r3, r1
 8005a56:	335d      	adds	r3, #93	; 0x5d
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
}
 8005a5c:	e236      	b.n	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d12b      	bne.n	8005acc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a80:	461a      	mov	r2, r3
 8005a82:	2308      	movs	r3, #8
 8005a84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa0:	f043 0302 	orr.w	r3, r3, #2
 8005aa4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f004 fe12 	bl	800a6da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	335d      	adds	r3, #93	; 0x5d
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	701a      	strb	r2, [r3, #0]
}
 8005aca:	e1ff      	b.n	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b10      	cmp	r3, #16
 8005ae0:	d155      	bne.n	8005b8e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	440b      	add	r3, r1
 8005af0:	3358      	adds	r3, #88	; 0x58
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	440b      	add	r3, r1
 8005b04:	335d      	adds	r3, #93	; 0x5d
 8005b06:	2203      	movs	r2, #3
 8005b08:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	440b      	add	r3, r1
 8005b18:	333d      	adds	r3, #61	; 0x3d
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d114      	bne.n	8005b4a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	440b      	add	r3, r1
 8005b2e:	333c      	adds	r3, #60	; 0x3c
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	440b      	add	r3, r1
 8005b44:	333d      	adds	r3, #61	; 0x3d
 8005b46:	2201      	movs	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f004 fdb0 	bl	800a6da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b86:	461a      	mov	r2, r3
 8005b88:	2310      	movs	r3, #16
 8005b8a:	6093      	str	r3, [r2, #8]
}
 8005b8c:	e19e      	b.n	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba0:	2b80      	cmp	r3, #128	; 0x80
 8005ba2:	d12b      	bne.n	8005bfc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bbe:	f043 0302 	orr.w	r3, r3, #2
 8005bc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f004 fd83 	bl	800a6da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	440b      	add	r3, r1
 8005be2:	335d      	adds	r3, #93	; 0x5d
 8005be4:	2206      	movs	r2, #6
 8005be6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	6093      	str	r3, [r2, #8]
}
 8005bfa:	e167      	b.n	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c12:	d135      	bne.n	8005c80 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2e:	f043 0302 	orr.w	r3, r3, #2
 8005c32:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f004 fd4b 	bl	800a6da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	461a      	mov	r2, r3
 8005c52:	2310      	movs	r3, #16
 8005c54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	461a      	mov	r2, r3
 8005c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	335d      	adds	r3, #93	; 0x5d
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	701a      	strb	r2, [r3, #0]
}
 8005c7e:	e125      	b.n	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	f040 811a 	bne.w	8005ecc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb2:	f023 0302 	bic.w	r3, r3, #2
 8005cb6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	440b      	add	r3, r1
 8005cc6:	335d      	adds	r3, #93	; 0x5d
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d137      	bne.n	8005d3e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	440b      	add	r3, r1
 8005cdc:	335c      	adds	r3, #92	; 0x5c
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	440b      	add	r3, r1
 8005cf0:	333f      	adds	r3, #63	; 0x3f
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d00b      	beq.n	8005d10 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	440b      	add	r3, r1
 8005d06:	333f      	adds	r3, #63	; 0x3f
 8005d08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	f040 80c5 	bne.w	8005e9a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3351      	adds	r3, #81	; 0x51
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2d8      	uxtb	r0, r3
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	440b      	add	r3, r1
 8005d36:	3351      	adds	r3, #81	; 0x51
 8005d38:	4602      	mov	r2, r0
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e0ad      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	440b      	add	r3, r1
 8005d4c:	335d      	adds	r3, #93	; 0x5d
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d10a      	bne.n	8005d6a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	440b      	add	r3, r1
 8005d62:	335c      	adds	r3, #92	; 0x5c
 8005d64:	2202      	movs	r2, #2
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e097      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	440b      	add	r3, r1
 8005d78:	335d      	adds	r3, #93	; 0x5d
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d10a      	bne.n	8005d96 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	440b      	add	r3, r1
 8005d8e:	335c      	adds	r3, #92	; 0x5c
 8005d90:	2202      	movs	r2, #2
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	e081      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	440b      	add	r3, r1
 8005da4:	335d      	adds	r3, #93	; 0x5d
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b05      	cmp	r3, #5
 8005daa:	d10a      	bne.n	8005dc2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	440b      	add	r3, r1
 8005dba:	335c      	adds	r3, #92	; 0x5c
 8005dbc:	2205      	movs	r2, #5
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	e06b      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	440b      	add	r3, r1
 8005dd0:	335d      	adds	r3, #93	; 0x5d
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b06      	cmp	r3, #6
 8005dd6:	d00a      	beq.n	8005dee <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	440b      	add	r3, r1
 8005de6:	335d      	adds	r3, #93	; 0x5d
 8005de8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d155      	bne.n	8005e9a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3358      	adds	r3, #88	; 0x58
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	1c59      	adds	r1, r3, #1
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4403      	add	r3, r0
 8005e10:	3358      	adds	r3, #88	; 0x58
 8005e12:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	440b      	add	r3, r1
 8005e22:	3358      	adds	r3, #88	; 0x58
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d914      	bls.n	8005e54 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	440b      	add	r3, r1
 8005e38:	3358      	adds	r3, #88	; 0x58
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	335c      	adds	r3, #92	; 0x5c
 8005e4e:	2204      	movs	r2, #4
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e009      	b.n	8005e68 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	440b      	add	r3, r1
 8005e62:	335c      	adds	r3, #92	; 0x5c
 8005e64:	2202      	movs	r2, #2
 8005e66:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e7e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e86:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	461a      	mov	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	b2d8      	uxtb	r0, r3
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	440b      	add	r3, r1
 8005ebe:	335c      	adds	r3, #92	; 0x5c
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	4601      	mov	r1, r0
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f005 fee6 	bl	800bc98 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005ecc:	bf00      	nop
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	; 0x28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	0c5b      	lsrs	r3, r3, #17
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f08:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d003      	beq.n	8005f18 <HCD_RXQLVL_IRQHandler+0x44>
 8005f10:	2b05      	cmp	r3, #5
 8005f12:	f000 8082 	beq.w	800601a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f16:	e083      	b.n	8006020 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d07f      	beq.n	800601e <HCD_RXQLVL_IRQHandler+0x14a>
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	440b      	add	r3, r1
 8005f2c:	3344      	adds	r3, #68	; 0x44
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d074      	beq.n	800601e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	440b      	add	r3, r1
 8005f46:	3344      	adds	r3, #68	; 0x44
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	b292      	uxth	r2, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f004 fb2e 	bl	800a5b0 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	440b      	add	r3, r1
 8005f62:	3344      	adds	r3, #68	; 0x44
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	18d1      	adds	r1, r2, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	4403      	add	r3, r0
 8005f78:	3344      	adds	r3, #68	; 0x44
 8005f7a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	440b      	add	r3, r1
 8005f8a:	334c      	adds	r3, #76	; 0x4c
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	18d1      	adds	r1, r2, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4403      	add	r3, r0
 8005fa0:	334c      	adds	r3, #76	; 0x4c
 8005fa2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <HCD_RXQLVL_IRQHandler+0x154>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d031      	beq.n	800601e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fd0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fd8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3350      	adds	r3, #80	; 0x50
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	f083 0301 	eor.w	r3, r3, #1
 8006002:	b2d8      	uxtb	r0, r3
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	440b      	add	r3, r1
 8006012:	3350      	adds	r3, #80	; 0x50
 8006014:	4602      	mov	r2, r0
 8006016:	701a      	strb	r2, [r3, #0]
      break;
 8006018:	e001      	b.n	800601e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800601a:	bf00      	nop
 800601c:	e000      	b.n	8006020 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800601e:	bf00      	nop
  }
}
 8006020:	bf00      	nop
 8006022:	3728      	adds	r7, #40	; 0x28
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	1ff80000 	.word	0x1ff80000

0800602c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006058:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b02      	cmp	r3, #2
 8006062:	d10b      	bne.n	800607c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b01      	cmp	r3, #1
 800606c:	d102      	bne.n	8006074 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f005 fdf6 	bl	800bc60 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f043 0302 	orr.w	r3, r3, #2
 800607a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b08      	cmp	r3, #8
 8006084:	d132      	bne.n	80060ec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f043 0308 	orr.w	r3, r3, #8
 800608c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b04      	cmp	r3, #4
 8006096:	d126      	bne.n	80060e6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d113      	bne.n	80060c8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060aa:	d106      	bne.n	80060ba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2102      	movs	r1, #2
 80060b2:	4618      	mov	r0, r3
 80060b4:	f004 fac6 	bl	800a644 <USB_InitFSLSPClkSel>
 80060b8:	e011      	b.n	80060de <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2101      	movs	r1, #1
 80060c0:	4618      	mov	r0, r3
 80060c2:	f004 fabf 	bl	800a644 <USB_InitFSLSPClkSel>
 80060c6:	e00a      	b.n	80060de <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d106      	bne.n	80060de <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d6:	461a      	mov	r2, r3
 80060d8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80060dc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f005 fdec 	bl	800bcbc <HAL_HCD_PortEnabled_Callback>
 80060e4:	e002      	b.n	80060ec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f005 fdf6 	bl	800bcd8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d103      	bne.n	80060fe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f043 0320 	orr.w	r3, r3, #32
 80060fc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006104:	461a      	mov	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	6013      	str	r3, [r2, #0]
}
 800610a:	bf00      	nop
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e11f      	b.n	8006366 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fa fdf4 	bl	8000d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2224      	movs	r2, #36	; 0x24
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006176:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006178:	f002 f882 	bl	8008280 <HAL_RCC_GetPCLK1Freq>
 800617c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	4a7b      	ldr	r2, [pc, #492]	; (8006370 <HAL_I2C_Init+0x25c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d807      	bhi.n	8006198 <HAL_I2C_Init+0x84>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4a7a      	ldr	r2, [pc, #488]	; (8006374 <HAL_I2C_Init+0x260>)
 800618c:	4293      	cmp	r3, r2
 800618e:	bf94      	ite	ls
 8006190:	2301      	movls	r3, #1
 8006192:	2300      	movhi	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e006      	b.n	80061a6 <HAL_I2C_Init+0x92>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a77      	ldr	r2, [pc, #476]	; (8006378 <HAL_I2C_Init+0x264>)
 800619c:	4293      	cmp	r3, r2
 800619e:	bf94      	ite	ls
 80061a0:	2301      	movls	r3, #1
 80061a2:	2300      	movhi	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e0db      	b.n	8006366 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4a72      	ldr	r2, [pc, #456]	; (800637c <HAL_I2C_Init+0x268>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	0c9b      	lsrs	r3, r3, #18
 80061b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4a64      	ldr	r2, [pc, #400]	; (8006370 <HAL_I2C_Init+0x25c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d802      	bhi.n	80061e8 <HAL_I2C_Init+0xd4>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	3301      	adds	r3, #1
 80061e6:	e009      	b.n	80061fc <HAL_I2C_Init+0xe8>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	4a63      	ldr	r2, [pc, #396]	; (8006380 <HAL_I2C_Init+0x26c>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	099b      	lsrs	r3, r3, #6
 80061fa:	3301      	adds	r3, #1
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6812      	ldr	r2, [r2, #0]
 8006200:	430b      	orrs	r3, r1
 8006202:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800620e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	4956      	ldr	r1, [pc, #344]	; (8006370 <HAL_I2C_Init+0x25c>)
 8006218:	428b      	cmp	r3, r1
 800621a:	d80d      	bhi.n	8006238 <HAL_I2C_Init+0x124>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	1e59      	subs	r1, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	fbb1 f3f3 	udiv	r3, r1, r3
 800622a:	3301      	adds	r3, #1
 800622c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006230:	2b04      	cmp	r3, #4
 8006232:	bf38      	it	cc
 8006234:	2304      	movcc	r3, #4
 8006236:	e04f      	b.n	80062d8 <HAL_I2C_Init+0x1c4>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d111      	bne.n	8006264 <HAL_I2C_Init+0x150>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	1e58      	subs	r0, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6859      	ldr	r1, [r3, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	440b      	add	r3, r1
 800624e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006252:	3301      	adds	r3, #1
 8006254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	e012      	b.n	800628a <HAL_I2C_Init+0x176>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	1e58      	subs	r0, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6859      	ldr	r1, [r3, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	0099      	lsls	r1, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	fbb0 f3f3 	udiv	r3, r0, r3
 800627a:	3301      	adds	r3, #1
 800627c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_I2C_Init+0x17e>
 800628e:	2301      	movs	r3, #1
 8006290:	e022      	b.n	80062d8 <HAL_I2C_Init+0x1c4>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10e      	bne.n	80062b8 <HAL_I2C_Init+0x1a4>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1e58      	subs	r0, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6859      	ldr	r1, [r3, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	440b      	add	r3, r1
 80062a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ac:	3301      	adds	r3, #1
 80062ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b6:	e00f      	b.n	80062d8 <HAL_I2C_Init+0x1c4>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	1e58      	subs	r0, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	0099      	lsls	r1, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ce:	3301      	adds	r3, #1
 80062d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	6809      	ldr	r1, [r1, #0]
 80062dc:	4313      	orrs	r3, r2
 80062de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69da      	ldr	r2, [r3, #28]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006306:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6911      	ldr	r1, [r2, #16]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68d2      	ldr	r2, [r2, #12]
 8006312:	4311      	orrs	r1, r2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	430b      	orrs	r3, r1
 800631a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695a      	ldr	r2, [r3, #20]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	000186a0 	.word	0x000186a0
 8006374:	001e847f 	.word	0x001e847f
 8006378:	003d08ff 	.word	0x003d08ff
 800637c:	431bde83 	.word	0x431bde83
 8006380:	10624dd3 	.word	0x10624dd3

08006384 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e021      	b.n	80063da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2224      	movs	r2, #36	; 0x24
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fa fd24 	bl	8000dfc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	461a      	mov	r2, r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	817b      	strh	r3, [r7, #10]
 80063f6:	460b      	mov	r3, r1
 80063f8:	813b      	strh	r3, [r7, #8]
 80063fa:	4613      	mov	r3, r2
 80063fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063fe:	f7fd fb4d 	bl	8003a9c <HAL_GetTick>
 8006402:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b20      	cmp	r3, #32
 800640e:	f040 80d9 	bne.w	80065c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	2319      	movs	r3, #25
 8006418:	2201      	movs	r2, #1
 800641a:	496d      	ldr	r1, [pc, #436]	; (80065d0 <HAL_I2C_Mem_Write+0x1ec>)
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 fc8d 	bl	8006d3c <I2C_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006428:	2302      	movs	r3, #2
 800642a:	e0cc      	b.n	80065c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_I2C_Mem_Write+0x56>
 8006436:	2302      	movs	r3, #2
 8006438:	e0c5      	b.n	80065c6 <HAL_I2C_Mem_Write+0x1e2>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b01      	cmp	r3, #1
 800644e:	d007      	beq.n	8006460 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800646e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2221      	movs	r2, #33	; 0x21
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a3a      	ldr	r2, [r7, #32]
 800648a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4a4d      	ldr	r2, [pc, #308]	; (80065d4 <HAL_I2C_Mem_Write+0x1f0>)
 80064a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064a2:	88f8      	ldrh	r0, [r7, #6]
 80064a4:	893a      	ldrh	r2, [r7, #8]
 80064a6:	8979      	ldrh	r1, [r7, #10]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4603      	mov	r3, r0
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fac4 	bl	8006a40 <I2C_RequestMemoryWrite>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d052      	beq.n	8006564 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e081      	b.n	80065c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fd0e 	bl	8006ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00d      	beq.n	80064ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d107      	bne.n	80064ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e06b      	b.n	80065c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	781a      	ldrb	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b04      	cmp	r3, #4
 800652a:	d11b      	bne.n	8006564 <HAL_I2C_Mem_Write+0x180>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006530:	2b00      	cmp	r3, #0
 8006532:	d017      	beq.n	8006564 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	781a      	ldrb	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1aa      	bne.n	80064c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fcfa 	bl	8006f6a <I2C_WaitOnBTFFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00d      	beq.n	8006598 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	2b04      	cmp	r3, #4
 8006582:	d107      	bne.n	8006594 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006592:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e016      	b.n	80065c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	e000      	b.n	80065c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80065c4:	2302      	movs	r3, #2
  }
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	00100002 	.word	0x00100002
 80065d4:	ffff0000 	.word	0xffff0000

080065d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	; 0x30
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	461a      	mov	r2, r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	817b      	strh	r3, [r7, #10]
 80065ea:	460b      	mov	r3, r1
 80065ec:	813b      	strh	r3, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065f2:	f7fd fa53 	bl	8003a9c <HAL_GetTick>
 80065f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b20      	cmp	r3, #32
 8006602:	f040 8208 	bne.w	8006a16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	2319      	movs	r3, #25
 800660c:	2201      	movs	r2, #1
 800660e:	497b      	ldr	r1, [pc, #492]	; (80067fc <HAL_I2C_Mem_Read+0x224>)
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fb93 	bl	8006d3c <I2C_WaitOnFlagUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800661c:	2302      	movs	r3, #2
 800661e:	e1fb      	b.n	8006a18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_I2C_Mem_Read+0x56>
 800662a:	2302      	movs	r3, #2
 800662c:	e1f4      	b.n	8006a18 <HAL_I2C_Mem_Read+0x440>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d007      	beq.n	8006654 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2222      	movs	r2, #34	; 0x22
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2240      	movs	r2, #64	; 0x40
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800667e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a5b      	ldr	r2, [pc, #364]	; (8006800 <HAL_I2C_Mem_Read+0x228>)
 8006694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006696:	88f8      	ldrh	r0, [r7, #6]
 8006698:	893a      	ldrh	r2, [r7, #8]
 800669a:	8979      	ldrh	r1, [r7, #10]
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	4603      	mov	r3, r0
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 fa60 	bl	8006b6c <I2C_RequestMemoryRead>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e1b0      	b.n	8006a18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d113      	bne.n	80066e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066be:	2300      	movs	r3, #0
 80066c0:	623b      	str	r3, [r7, #32]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	623b      	str	r3, [r7, #32]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	623b      	str	r3, [r7, #32]
 80066d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e184      	b.n	80069f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d11b      	bne.n	8006726 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	61fb      	str	r3, [r7, #28]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e164      	b.n	80069f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672a:	2b02      	cmp	r3, #2
 800672c:	d11b      	bne.n	8006766 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800673c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800674c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	e144      	b.n	80069f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800677c:	e138      	b.n	80069f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006782:	2b03      	cmp	r3, #3
 8006784:	f200 80f1 	bhi.w	800696a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678c:	2b01      	cmp	r3, #1
 800678e:	d123      	bne.n	80067d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fc29 	bl	8006fec <I2C_WaitOnRXNEFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e139      	b.n	8006a18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067d6:	e10b      	b.n	80069f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d14e      	bne.n	800687e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	2200      	movs	r2, #0
 80067e8:	4906      	ldr	r1, [pc, #24]	; (8006804 <HAL_I2C_Mem_Read+0x22c>)
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 faa6 	bl	8006d3c <I2C_WaitOnFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e10e      	b.n	8006a18 <HAL_I2C_Mem_Read+0x440>
 80067fa:	bf00      	nop
 80067fc:	00100002 	.word	0x00100002
 8006800:	ffff0000 	.word	0xffff0000
 8006804:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691a      	ldr	r2, [r3, #16]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800687c:	e0b8      	b.n	80069f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	2200      	movs	r2, #0
 8006886:	4966      	ldr	r1, [pc, #408]	; (8006a20 <HAL_I2C_Mem_Read+0x448>)
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 fa57 	bl	8006d3c <I2C_WaitOnFlagUntilTimeout>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0bf      	b.n	8006a18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	2200      	movs	r2, #0
 80068e2:	494f      	ldr	r1, [pc, #316]	; (8006a20 <HAL_I2C_Mem_Read+0x448>)
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 fa29 	bl	8006d3c <I2C_WaitOnFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e091      	b.n	8006a18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691a      	ldr	r2, [r3, #16]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006968:	e042      	b.n	80069f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800696a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fb3c 	bl	8006fec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e04c      	b.n	8006a18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d118      	bne.n	80069f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f47f aec2 	bne.w	800677e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e000      	b.n	8006a18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a16:	2302      	movs	r3, #2
  }
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3728      	adds	r7, #40	; 0x28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	00010004 	.word	0x00010004

08006a24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a32:	b2db      	uxtb	r3, r3
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	4608      	mov	r0, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	817b      	strh	r3, [r7, #10]
 8006a52:	460b      	mov	r3, r1
 8006a54:	813b      	strh	r3, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 f960 	bl	8006d3c <I2C_WaitOnFlagUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00d      	beq.n	8006a9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a90:	d103      	bne.n	8006a9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e05f      	b.n	8006b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a9e:	897b      	ldrh	r3, [r7, #10]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006aac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	6a3a      	ldr	r2, [r7, #32]
 8006ab2:	492d      	ldr	r1, [pc, #180]	; (8006b68 <I2C_RequestMemoryWrite+0x128>)
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f998 	bl	8006dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e04c      	b.n	8006b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006adc:	6a39      	ldr	r1, [r7, #32]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fa02 	bl	8006ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00d      	beq.n	8006b06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d107      	bne.n	8006b02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e02b      	b.n	8006b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d105      	bne.n	8006b18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b0c:	893b      	ldrh	r3, [r7, #8]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	611a      	str	r2, [r3, #16]
 8006b16:	e021      	b.n	8006b5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b18:	893b      	ldrh	r3, [r7, #8]
 8006b1a:	0a1b      	lsrs	r3, r3, #8
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b28:	6a39      	ldr	r1, [r7, #32]
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 f9dc 	bl	8006ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00d      	beq.n	8006b52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d107      	bne.n	8006b4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e005      	b.n	8006b5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b52:	893b      	ldrh	r3, [r7, #8]
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	00010002 	.word	0x00010002

08006b6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	4608      	mov	r0, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	817b      	strh	r3, [r7, #10]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	813b      	strh	r3, [r7, #8]
 8006b82:	4613      	mov	r3, r2
 8006b84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ba4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f8c2 	bl	8006d3c <I2C_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00d      	beq.n	8006bda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bcc:	d103      	bne.n	8006bd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e0aa      	b.n	8006d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bda:	897b      	ldrh	r3, [r7, #10]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006be8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	6a3a      	ldr	r2, [r7, #32]
 8006bee:	4952      	ldr	r1, [pc, #328]	; (8006d38 <I2C_RequestMemoryRead+0x1cc>)
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f8fa 	bl	8006dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e097      	b.n	8006d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c18:	6a39      	ldr	r1, [r7, #32]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f964 	bl	8006ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00d      	beq.n	8006c42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d107      	bne.n	8006c3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e076      	b.n	8006d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c42:	88fb      	ldrh	r3, [r7, #6]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d105      	bne.n	8006c54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c48:	893b      	ldrh	r3, [r7, #8]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	611a      	str	r2, [r3, #16]
 8006c52:	e021      	b.n	8006c98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c54:	893b      	ldrh	r3, [r7, #8]
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c64:	6a39      	ldr	r1, [r7, #32]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f93e 	bl	8006ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d107      	bne.n	8006c8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e050      	b.n	8006d30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c8e:	893b      	ldrh	r3, [r7, #8]
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	6a39      	ldr	r1, [r7, #32]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f923 	bl	8006ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00d      	beq.n	8006cc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d107      	bne.n	8006cc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e035      	b.n	8006d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f82b 	bl	8006d3c <I2C_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00d      	beq.n	8006d08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfa:	d103      	bne.n	8006d04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e013      	b.n	8006d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d08:	897b      	ldrh	r3, [r7, #10]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	6a3a      	ldr	r2, [r7, #32]
 8006d1c:	4906      	ldr	r1, [pc, #24]	; (8006d38 <I2C_RequestMemoryRead+0x1cc>)
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 f863 	bl	8006dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	00010002 	.word	0x00010002

08006d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d4c:	e025      	b.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d021      	beq.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d56:	f7fc fea1 	bl	8003a9c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d302      	bcc.n	8006d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d116      	bne.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f043 0220 	orr.w	r2, r3, #32
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e023      	b.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	0c1b      	lsrs	r3, r3, #16
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d10d      	bne.n	8006dc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	43da      	mvns	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4013      	ands	r3, r2
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	e00c      	b.n	8006dda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	43da      	mvns	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d0b6      	beq.n	8006d4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
 8006df6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006df8:	e051      	b.n	8006e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e08:	d123      	bne.n	8006e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f043 0204 	orr.w	r2, r3, #4
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e046      	b.n	8006ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e58:	d021      	beq.n	8006e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e5a:	f7fc fe1f 	bl	8003a9c <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d302      	bcc.n	8006e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d116      	bne.n	8006e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	f043 0220 	orr.w	r2, r3, #32
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e020      	b.n	8006ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	0c1b      	lsrs	r3, r3, #16
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d10c      	bne.n	8006ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	43da      	mvns	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf14      	ite	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	2300      	moveq	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	e00b      	b.n	8006eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	43da      	mvns	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bf14      	ite	ne
 8006ed4:	2301      	movne	r3, #1
 8006ed6:	2300      	moveq	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d18d      	bne.n	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ef4:	e02d      	b.n	8006f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f8ce 	bl	8007098 <I2C_IsAcknowledgeFailed>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e02d      	b.n	8006f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0c:	d021      	beq.n	8006f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f0e:	f7fc fdc5 	bl	8003a9c <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d302      	bcc.n	8006f24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d116      	bne.n	8006f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	f043 0220 	orr.w	r2, r3, #32
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e007      	b.n	8006f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5c:	2b80      	cmp	r3, #128	; 0x80
 8006f5e:	d1ca      	bne.n	8006ef6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f76:	e02d      	b.n	8006fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 f88d 	bl	8007098 <I2C_IsAcknowledgeFailed>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e02d      	b.n	8006fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8e:	d021      	beq.n	8006fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f90:	f7fc fd84 	bl	8003a9c <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d302      	bcc.n	8006fa6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d116      	bne.n	8006fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	f043 0220 	orr.w	r2, r3, #32
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e007      	b.n	8006fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d1ca      	bne.n	8006f78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ff8:	e042      	b.n	8007080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b10      	cmp	r3, #16
 8007006:	d119      	bne.n	800703c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0210 	mvn.w	r2, #16
 8007010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e029      	b.n	8007090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800703c:	f7fc fd2e 	bl	8003a9c <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	429a      	cmp	r2, r3
 800704a:	d302      	bcc.n	8007052 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d116      	bne.n	8007080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	f043 0220 	orr.w	r2, r3, #32
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e007      	b.n	8007090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	d1b5      	bne.n	8006ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ae:	d11b      	bne.n	80070e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	f043 0204 	orr.w	r2, r3, #4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b20      	cmp	r3, #32
 800710a:	d129      	bne.n	8007160 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2224      	movs	r2, #36	; 0x24
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0201 	bic.w	r2, r2, #1
 8007122:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0210 	bic.w	r2, r2, #16
 8007132:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	e000      	b.n	8007162 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007160:	2302      	movs	r3, #2
  }
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800716e:	b480      	push	{r7}
 8007170:	b085      	sub	sp, #20
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b20      	cmp	r3, #32
 8007186:	d12a      	bne.n	80071de <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2224      	movs	r2, #36	; 0x24
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80071a8:	89fb      	ldrh	r3, [r7, #14]
 80071aa:	f023 030f 	bic.w	r3, r3, #15
 80071ae:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	89fb      	ldrh	r3, [r7, #14]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	89fa      	ldrh	r2, [r7, #14]
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0201 	orr.w	r2, r2, #1
 80071d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	e000      	b.n	80071e0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80071de:	2302      	movs	r3, #2
  }
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e0bf      	b.n	800737e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d106      	bne.n	8007218 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7f9 ffa2 	bl	800115c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800722e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6999      	ldr	r1, [r3, #24]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007244:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6899      	ldr	r1, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	4b4a      	ldr	r3, [pc, #296]	; (8007388 <HAL_LTDC_Init+0x19c>)
 8007260:	400b      	ands	r3, r1
 8007262:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	041b      	lsls	r3, r3, #16
 800726a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6899      	ldr	r1, [r3, #8]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68d9      	ldr	r1, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4b3e      	ldr	r3, [pc, #248]	; (8007388 <HAL_LTDC_Init+0x19c>)
 800728e:	400b      	ands	r3, r1
 8007290:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68d9      	ldr	r1, [r3, #12]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1a      	ldr	r2, [r3, #32]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6919      	ldr	r1, [r3, #16]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	4b33      	ldr	r3, [pc, #204]	; (8007388 <HAL_LTDC_Init+0x19c>)
 80072bc:	400b      	ands	r3, r1
 80072be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6919      	ldr	r1, [r3, #16]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6959      	ldr	r1, [r3, #20]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	4b27      	ldr	r3, [pc, #156]	; (8007388 <HAL_LTDC_Init+0x19c>)
 80072ea:	400b      	ands	r3, r1
 80072ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6959      	ldr	r1, [r3, #20]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800732e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0206 	orr.w	r2, r2, #6
 800735a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0201 	orr.w	r2, r2, #1
 800736a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	f000f800 	.word	0xf000f800

0800738c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d023      	beq.n	80073f6 <HAL_LTDC_IRQHandler+0x6a>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01e      	beq.n	80073f6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0204 	bic.w	r2, r2, #4
 80073c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2204      	movs	r2, #4
 80073ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073d6:	f043 0201 	orr.w	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2204      	movs	r2, #4
 80073e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f86f 	bl	80074d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d023      	beq.n	8007448 <HAL_LTDC_IRQHandler+0xbc>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d01e      	beq.n	8007448 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0202 	bic.w	r2, r2, #2
 8007418:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2202      	movs	r2, #2
 8007420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007428:	f043 0202 	orr.w	r2, r3, #2
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2204      	movs	r2, #4
 8007436:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f846 	bl	80074d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01b      	beq.n	800748a <HAL_LTDC_IRQHandler+0xfe>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d016      	beq.n	800748a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0201 	bic.w	r2, r2, #1
 800746a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2201      	movs	r2, #1
 8007472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f82f 	bl	80074e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	d01b      	beq.n	80074cc <HAL_LTDC_IRQHandler+0x140>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d016      	beq.n	80074cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0208 	bic.w	r2, r2, #8
 80074ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2208      	movs	r2, #8
 80074b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f818 	bl	80074fc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007510:	b5b0      	push	{r4, r5, r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_LTDC_ConfigLayer+0x1a>
 8007526:	2302      	movs	r3, #2
 8007528:	e02c      	b.n	8007584 <HAL_LTDC_ConfigLayer+0x74>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2202      	movs	r2, #2
 8007536:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2134      	movs	r1, #52	; 0x34
 8007540:	fb01 f303 	mul.w	r3, r1, r3
 8007544:	4413      	add	r3, r2
 8007546:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	4614      	mov	r4, r2
 800754e:	461d      	mov	r5, r3
 8007550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800755a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f8b9 	bl	80076dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2201      	movs	r2, #1
 8007570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bdb0      	pop	{r4, r5, r7, pc}

0800758c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_LTDC_ConfigColorKeying+0x1a>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e030      	b.n	8007608 <HAL_LTDC_ConfigColorKeying+0x7c>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2202      	movs	r2, #2
 80075b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	01db      	lsls	r3, r3, #7
 80075c0:	4413      	add	r3, r2
 80075c2:	3384      	adds	r3, #132	; 0x84
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	4611      	mov	r1, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	01d2      	lsls	r2, r2, #7
 80075d0:	440a      	add	r2, r1
 80075d2:	3284      	adds	r2, #132	; 0x84
 80075d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80075d8:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	01db      	lsls	r3, r3, #7
 80075e4:	4413      	add	r3, r2
 80075e6:	3384      	adds	r3, #132	; 0x84
 80075e8:	461a      	mov	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2201      	movs	r2, #1
 80075f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_LTDC_EnableColorKeying+0x18>
 8007628:	2302      	movs	r3, #2
 800762a:	e026      	b.n	800767a <HAL_LTDC_EnableColorKeying+0x66>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	01db      	lsls	r3, r3, #7
 8007646:	4413      	add	r3, r2
 8007648:	3384      	adds	r3, #132	; 0x84
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6812      	ldr	r2, [r2, #0]
 8007650:	4611      	mov	r1, r2
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	01d2      	lsls	r2, r2, #7
 8007656:	440a      	add	r2, r1
 8007658:	3284      	adds	r2, #132	; 0x84
 800765a:	f043 0302 	orr.w	r3, r3, #2
 800765e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2201      	movs	r2, #1
 8007666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007696:	2b01      	cmp	r3, #1
 8007698:	d101      	bne.n	800769e <HAL_LTDC_EnableDither+0x16>
 800769a:	2302      	movs	r3, #2
 800769c:	e016      	b.n	80076cc <HAL_LTDC_EnableDither+0x44>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2202      	movs	r2, #2
 80076aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80076ae:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <HAL_LTDC_EnableDither+0x50>)
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	4a09      	ldr	r2, [pc, #36]	; (80076d8 <HAL_LTDC_EnableDither+0x50>)
 80076b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	40016800 	.word	0x40016800

080076dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80076dc:	b480      	push	{r7}
 80076de:	b089      	sub	sp, #36	; 0x24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	0c1b      	lsrs	r3, r3, #16
 80076f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f8:	4413      	add	r3, r2
 80076fa:	041b      	lsls	r3, r3, #16
 80076fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	01db      	lsls	r3, r3, #7
 8007708:	4413      	add	r3, r2
 800770a:	3384      	adds	r3, #132	; 0x84
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	4611      	mov	r1, r2
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	01d2      	lsls	r2, r2, #7
 8007718:	440a      	add	r2, r1
 800771a:	3284      	adds	r2, #132	; 0x84
 800771c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007720:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	0c1b      	lsrs	r3, r3, #16
 800772e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007732:	4413      	add	r3, r2
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	01db      	lsls	r3, r3, #7
 8007740:	440b      	add	r3, r1
 8007742:	3384      	adds	r3, #132	; 0x84
 8007744:	4619      	mov	r1, r3
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4313      	orrs	r3, r2
 800774a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800775a:	4413      	add	r3, r2
 800775c:	041b      	lsls	r3, r3, #16
 800775e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	01db      	lsls	r3, r3, #7
 800776a:	4413      	add	r3, r2
 800776c:	3384      	adds	r3, #132	; 0x84
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	4611      	mov	r1, r2
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	01d2      	lsls	r2, r2, #7
 800777a:	440a      	add	r2, r1
 800777c:	3284      	adds	r2, #132	; 0x84
 800777e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007782:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007792:	4413      	add	r3, r2
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4619      	mov	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	01db      	lsls	r3, r3, #7
 80077a0:	440b      	add	r3, r1
 80077a2:	3384      	adds	r3, #132	; 0x84
 80077a4:	4619      	mov	r1, r3
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	01db      	lsls	r3, r3, #7
 80077b6:	4413      	add	r3, r2
 80077b8:	3384      	adds	r3, #132	; 0x84
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	4611      	mov	r1, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	01d2      	lsls	r2, r2, #7
 80077c6:	440a      	add	r2, r1
 80077c8:	3284      	adds	r2, #132	; 0x84
 80077ca:	f023 0307 	bic.w	r3, r3, #7
 80077ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	01db      	lsls	r3, r3, #7
 80077da:	4413      	add	r3, r2
 80077dc:	3384      	adds	r3, #132	; 0x84
 80077de:	461a      	mov	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	061b      	lsls	r3, r3, #24
 8007800:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	01db      	lsls	r3, r3, #7
 800780c:	4413      	add	r3, r2
 800780e:	3384      	adds	r3, #132	; 0x84
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	01db      	lsls	r3, r3, #7
 800781c:	4413      	add	r3, r2
 800781e:	3384      	adds	r3, #132	; 0x84
 8007820:	461a      	mov	r2, r3
 8007822:	2300      	movs	r3, #0
 8007824:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800782c:	461a      	mov	r2, r3
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	431a      	orrs	r2, r3
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	431a      	orrs	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4619      	mov	r1, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	01db      	lsls	r3, r3, #7
 8007840:	440b      	add	r3, r1
 8007842:	3384      	adds	r3, #132	; 0x84
 8007844:	4619      	mov	r1, r3
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	01db      	lsls	r3, r3, #7
 8007856:	4413      	add	r3, r2
 8007858:	3384      	adds	r3, #132	; 0x84
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	6812      	ldr	r2, [r2, #0]
 8007860:	4611      	mov	r1, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	01d2      	lsls	r2, r2, #7
 8007866:	440a      	add	r2, r1
 8007868:	3284      	adds	r2, #132	; 0x84
 800786a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800786e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	01db      	lsls	r3, r3, #7
 800787a:	4413      	add	r3, r2
 800787c:	3384      	adds	r3, #132	; 0x84
 800787e:	461a      	mov	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	01db      	lsls	r3, r3, #7
 8007890:	4413      	add	r3, r2
 8007892:	3384      	adds	r3, #132	; 0x84
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	4611      	mov	r1, r2
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	01d2      	lsls	r2, r2, #7
 80078a0:	440a      	add	r2, r1
 80078a2:	3284      	adds	r2, #132	; 0x84
 80078a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80078a8:	f023 0307 	bic.w	r3, r3, #7
 80078ac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	69da      	ldr	r2, [r3, #28]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	68f9      	ldr	r1, [r7, #12]
 80078b8:	6809      	ldr	r1, [r1, #0]
 80078ba:	4608      	mov	r0, r1
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	01c9      	lsls	r1, r1, #7
 80078c0:	4401      	add	r1, r0
 80078c2:	3184      	adds	r1, #132	; 0x84
 80078c4:	4313      	orrs	r3, r2
 80078c6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	01db      	lsls	r3, r3, #7
 80078d2:	4413      	add	r3, r2
 80078d4:	3384      	adds	r3, #132	; 0x84
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	01db      	lsls	r3, r3, #7
 80078e2:	4413      	add	r3, r2
 80078e4:	3384      	adds	r3, #132	; 0x84
 80078e6:	461a      	mov	r2, r3
 80078e8:	2300      	movs	r3, #0
 80078ea:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	01db      	lsls	r3, r3, #7
 80078f6:	4413      	add	r3, r2
 80078f8:	3384      	adds	r3, #132	; 0x84
 80078fa:	461a      	mov	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800790a:	2304      	movs	r3, #4
 800790c:	61fb      	str	r3, [r7, #28]
 800790e:	e01b      	b.n	8007948 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d102      	bne.n	800791e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007918:	2303      	movs	r3, #3
 800791a:	61fb      	str	r3, [r7, #28]
 800791c:	e014      	b.n	8007948 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b04      	cmp	r3, #4
 8007924:	d00b      	beq.n	800793e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800792a:	2b02      	cmp	r3, #2
 800792c:	d007      	beq.n	800793e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007932:	2b03      	cmp	r3, #3
 8007934:	d003      	beq.n	800793e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800793a:	2b07      	cmp	r3, #7
 800793c:	d102      	bne.n	8007944 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800793e:	2302      	movs	r3, #2
 8007940:	61fb      	str	r3, [r7, #28]
 8007942:	e001      	b.n	8007948 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007944:	2301      	movs	r3, #1
 8007946:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	01db      	lsls	r3, r3, #7
 8007952:	4413      	add	r3, r2
 8007954:	3384      	adds	r3, #132	; 0x84
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	6812      	ldr	r2, [r2, #0]
 800795c:	4611      	mov	r1, r2
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	01d2      	lsls	r2, r2, #7
 8007962:	440a      	add	r2, r1
 8007964:	3284      	adds	r2, #132	; 0x84
 8007966:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800796a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	fb02 f303 	mul.w	r3, r2, r3
 8007976:	041a      	lsls	r2, r3, #16
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6859      	ldr	r1, [r3, #4]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	1acb      	subs	r3, r1, r3
 8007982:	69f9      	ldr	r1, [r7, #28]
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	3303      	adds	r3, #3
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	6809      	ldr	r1, [r1, #0]
 800798e:	4608      	mov	r0, r1
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	01c9      	lsls	r1, r1, #7
 8007994:	4401      	add	r1, r0
 8007996:	3184      	adds	r1, #132	; 0x84
 8007998:	4313      	orrs	r3, r2
 800799a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	01db      	lsls	r3, r3, #7
 80079a6:	4413      	add	r3, r2
 80079a8:	3384      	adds	r3, #132	; 0x84
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	4611      	mov	r1, r2
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	01d2      	lsls	r2, r2, #7
 80079b6:	440a      	add	r2, r1
 80079b8:	3284      	adds	r2, #132	; 0x84
 80079ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80079be:	f023 0307 	bic.w	r3, r3, #7
 80079c2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	461a      	mov	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	01db      	lsls	r3, r3, #7
 80079ce:	4413      	add	r3, r2
 80079d0:	3384      	adds	r3, #132	; 0x84
 80079d2:	461a      	mov	r2, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	01db      	lsls	r3, r3, #7
 80079e4:	4413      	add	r3, r2
 80079e6:	3384      	adds	r3, #132	; 0x84
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	4611      	mov	r1, r2
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	01d2      	lsls	r2, r2, #7
 80079f4:	440a      	add	r2, r1
 80079f6:	3284      	adds	r2, #132	; 0x84
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	6013      	str	r3, [r2, #0]
}
 80079fe:	bf00      	nop
 8007a00:	3724      	adds	r7, #36	; 0x24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
	...

08007a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e25b      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d075      	beq.n	8007b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a2a:	4ba3      	ldr	r3, [pc, #652]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 030c 	and.w	r3, r3, #12
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d00c      	beq.n	8007a50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a36:	4ba0      	ldr	r3, [pc, #640]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d112      	bne.n	8007a68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a42:	4b9d      	ldr	r3, [pc, #628]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a4e:	d10b      	bne.n	8007a68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a50:	4b99      	ldr	r3, [pc, #612]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d05b      	beq.n	8007b14 <HAL_RCC_OscConfig+0x108>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d157      	bne.n	8007b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e236      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a70:	d106      	bne.n	8007a80 <HAL_RCC_OscConfig+0x74>
 8007a72:	4b91      	ldr	r3, [pc, #580]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a90      	ldr	r2, [pc, #576]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	e01d      	b.n	8007abc <HAL_RCC_OscConfig+0xb0>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a88:	d10c      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x98>
 8007a8a:	4b8b      	ldr	r3, [pc, #556]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a8a      	ldr	r2, [pc, #552]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	4b88      	ldr	r3, [pc, #544]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a87      	ldr	r2, [pc, #540]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	e00b      	b.n	8007abc <HAL_RCC_OscConfig+0xb0>
 8007aa4:	4b84      	ldr	r3, [pc, #528]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a83      	ldr	r2, [pc, #524]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	4b81      	ldr	r3, [pc, #516]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a80      	ldr	r2, [pc, #512]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d013      	beq.n	8007aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac4:	f7fb ffea 	bl	8003a9c <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007acc:	f7fb ffe6 	bl	8003a9c <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b64      	cmp	r3, #100	; 0x64
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e1fb      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ade:	4b76      	ldr	r3, [pc, #472]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f0      	beq.n	8007acc <HAL_RCC_OscConfig+0xc0>
 8007aea:	e014      	b.n	8007b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aec:	f7fb ffd6 	bl	8003a9c <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007af2:	e008      	b.n	8007b06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007af4:	f7fb ffd2 	bl	8003a9c <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b64      	cmp	r3, #100	; 0x64
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e1e7      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b06:	4b6c      	ldr	r3, [pc, #432]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1f0      	bne.n	8007af4 <HAL_RCC_OscConfig+0xe8>
 8007b12:	e000      	b.n	8007b16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d063      	beq.n	8007bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b22:	4b65      	ldr	r3, [pc, #404]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 030c 	and.w	r3, r3, #12
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00b      	beq.n	8007b46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b2e:	4b62      	ldr	r3, [pc, #392]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b36:	2b08      	cmp	r3, #8
 8007b38:	d11c      	bne.n	8007b74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b3a:	4b5f      	ldr	r3, [pc, #380]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d116      	bne.n	8007b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b46:	4b5c      	ldr	r3, [pc, #368]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <HAL_RCC_OscConfig+0x152>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d001      	beq.n	8007b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e1bb      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b5e:	4b56      	ldr	r3, [pc, #344]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	4952      	ldr	r1, [pc, #328]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b72:	e03a      	b.n	8007bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d020      	beq.n	8007bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b7c:	4b4f      	ldr	r3, [pc, #316]	; (8007cbc <HAL_RCC_OscConfig+0x2b0>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b82:	f7fb ff8b 	bl	8003a9c <HAL_GetTick>
 8007b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b88:	e008      	b.n	8007b9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b8a:	f7fb ff87 	bl	8003a9c <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d901      	bls.n	8007b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e19c      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b9c:	4b46      	ldr	r3, [pc, #280]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0f0      	beq.n	8007b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ba8:	4b43      	ldr	r3, [pc, #268]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	00db      	lsls	r3, r3, #3
 8007bb6:	4940      	ldr	r1, [pc, #256]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	600b      	str	r3, [r1, #0]
 8007bbc:	e015      	b.n	8007bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bbe:	4b3f      	ldr	r3, [pc, #252]	; (8007cbc <HAL_RCC_OscConfig+0x2b0>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc4:	f7fb ff6a 	bl	8003a9c <HAL_GetTick>
 8007bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bca:	e008      	b.n	8007bde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bcc:	f7fb ff66 	bl	8003a9c <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d901      	bls.n	8007bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e17b      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bde:	4b36      	ldr	r3, [pc, #216]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f0      	bne.n	8007bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0308 	and.w	r3, r3, #8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d030      	beq.n	8007c58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d016      	beq.n	8007c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bfe:	4b30      	ldr	r3, [pc, #192]	; (8007cc0 <HAL_RCC_OscConfig+0x2b4>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c04:	f7fb ff4a 	bl	8003a9c <HAL_GetTick>
 8007c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c0a:	e008      	b.n	8007c1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c0c:	f7fb ff46 	bl	8003a9c <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e15b      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c1e:	4b26      	ldr	r3, [pc, #152]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0f0      	beq.n	8007c0c <HAL_RCC_OscConfig+0x200>
 8007c2a:	e015      	b.n	8007c58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c2c:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <HAL_RCC_OscConfig+0x2b4>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c32:	f7fb ff33 	bl	8003a9c <HAL_GetTick>
 8007c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c3a:	f7fb ff2f 	bl	8003a9c <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e144      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c4c:	4b1a      	ldr	r3, [pc, #104]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f0      	bne.n	8007c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 80a0 	beq.w	8007da6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10f      	bne.n	8007c96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c76:	2300      	movs	r3, #0
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	4b0f      	ldr	r3, [pc, #60]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	4a0e      	ldr	r2, [pc, #56]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c84:	6413      	str	r3, [r2, #64]	; 0x40
 8007c86:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	60bb      	str	r3, [r7, #8]
 8007c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c92:	2301      	movs	r3, #1
 8007c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c96:	4b0b      	ldr	r3, [pc, #44]	; (8007cc4 <HAL_RCC_OscConfig+0x2b8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d121      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ca2:	4b08      	ldr	r3, [pc, #32]	; (8007cc4 <HAL_RCC_OscConfig+0x2b8>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a07      	ldr	r2, [pc, #28]	; (8007cc4 <HAL_RCC_OscConfig+0x2b8>)
 8007ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cae:	f7fb fef5 	bl	8003a9c <HAL_GetTick>
 8007cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cb4:	e011      	b.n	8007cda <HAL_RCC_OscConfig+0x2ce>
 8007cb6:	bf00      	nop
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	42470000 	.word	0x42470000
 8007cc0:	42470e80 	.word	0x42470e80
 8007cc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cc8:	f7fb fee8 	bl	8003a9c <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e0fd      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cda:	4b81      	ldr	r3, [pc, #516]	; (8007ee0 <HAL_RCC_OscConfig+0x4d4>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0f0      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d106      	bne.n	8007cfc <HAL_RCC_OscConfig+0x2f0>
 8007cee:	4b7d      	ldr	r3, [pc, #500]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf2:	4a7c      	ldr	r2, [pc, #496]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cfa:	e01c      	b.n	8007d36 <HAL_RCC_OscConfig+0x32a>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b05      	cmp	r3, #5
 8007d02:	d10c      	bne.n	8007d1e <HAL_RCC_OscConfig+0x312>
 8007d04:	4b77      	ldr	r3, [pc, #476]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d08:	4a76      	ldr	r2, [pc, #472]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d0a:	f043 0304 	orr.w	r3, r3, #4
 8007d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d10:	4b74      	ldr	r3, [pc, #464]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d14:	4a73      	ldr	r2, [pc, #460]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d16:	f043 0301 	orr.w	r3, r3, #1
 8007d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d1c:	e00b      	b.n	8007d36 <HAL_RCC_OscConfig+0x32a>
 8007d1e:	4b71      	ldr	r3, [pc, #452]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d22:	4a70      	ldr	r2, [pc, #448]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	6713      	str	r3, [r2, #112]	; 0x70
 8007d2a:	4b6e      	ldr	r3, [pc, #440]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2e:	4a6d      	ldr	r2, [pc, #436]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d30:	f023 0304 	bic.w	r3, r3, #4
 8007d34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d015      	beq.n	8007d6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d3e:	f7fb fead 	bl	8003a9c <HAL_GetTick>
 8007d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d44:	e00a      	b.n	8007d5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d46:	f7fb fea9 	bl	8003a9c <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e0bc      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d5c:	4b61      	ldr	r3, [pc, #388]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0ee      	beq.n	8007d46 <HAL_RCC_OscConfig+0x33a>
 8007d68:	e014      	b.n	8007d94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d6a:	f7fb fe97 	bl	8003a9c <HAL_GetTick>
 8007d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d70:	e00a      	b.n	8007d88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d72:	f7fb fe93 	bl	8003a9c <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d901      	bls.n	8007d88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e0a6      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d88:	4b56      	ldr	r3, [pc, #344]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ee      	bne.n	8007d72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d105      	bne.n	8007da6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d9a:	4b52      	ldr	r3, [pc, #328]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	4a51      	ldr	r2, [pc, #324]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8092 	beq.w	8007ed4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007db0:	4b4c      	ldr	r3, [pc, #304]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f003 030c 	and.w	r3, r3, #12
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d05c      	beq.n	8007e76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d141      	bne.n	8007e48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dc4:	4b48      	ldr	r3, [pc, #288]	; (8007ee8 <HAL_RCC_OscConfig+0x4dc>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dca:	f7fb fe67 	bl	8003a9c <HAL_GetTick>
 8007dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd0:	e008      	b.n	8007de4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dd2:	f7fb fe63 	bl	8003a9c <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e078      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007de4:	4b3f      	ldr	r3, [pc, #252]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1f0      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	019b      	lsls	r3, r3, #6
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	041b      	lsls	r3, r3, #16
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	061b      	lsls	r3, r3, #24
 8007e14:	4933      	ldr	r1, [pc, #204]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e1a:	4b33      	ldr	r3, [pc, #204]	; (8007ee8 <HAL_RCC_OscConfig+0x4dc>)
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e20:	f7fb fe3c 	bl	8003a9c <HAL_GetTick>
 8007e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e26:	e008      	b.n	8007e3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e28:	f7fb fe38 	bl	8003a9c <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e04d      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e3a:	4b2a      	ldr	r3, [pc, #168]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f0      	beq.n	8007e28 <HAL_RCC_OscConfig+0x41c>
 8007e46:	e045      	b.n	8007ed4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e48:	4b27      	ldr	r3, [pc, #156]	; (8007ee8 <HAL_RCC_OscConfig+0x4dc>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e4e:	f7fb fe25 	bl	8003a9c <HAL_GetTick>
 8007e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e54:	e008      	b.n	8007e68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e56:	f7fb fe21 	bl	8003a9c <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d901      	bls.n	8007e68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e036      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e68:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1f0      	bne.n	8007e56 <HAL_RCC_OscConfig+0x44a>
 8007e74:	e02e      	b.n	8007ed4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d101      	bne.n	8007e82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e029      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e82:	4b18      	ldr	r3, [pc, #96]	; (8007ee4 <HAL_RCC_OscConfig+0x4d8>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d11c      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d115      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007eaa:	4013      	ands	r3, r2
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d10d      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d106      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d001      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40007000 	.word	0x40007000
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	42470060 	.word	0x42470060

08007eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e0cc      	b.n	800809a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f00:	4b68      	ldr	r3, [pc, #416]	; (80080a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d90c      	bls.n	8007f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f0e:	4b65      	ldr	r3, [pc, #404]	; (80080a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f16:	4b63      	ldr	r3, [pc, #396]	; (80080a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d001      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e0b8      	b.n	800809a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d020      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f40:	4b59      	ldr	r3, [pc, #356]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	4a58      	ldr	r2, [pc, #352]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f58:	4b53      	ldr	r3, [pc, #332]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	4a52      	ldr	r2, [pc, #328]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f64:	4b50      	ldr	r3, [pc, #320]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	494d      	ldr	r1, [pc, #308]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d044      	beq.n	800800c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d107      	bne.n	8007f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f8a:	4b47      	ldr	r3, [pc, #284]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d119      	bne.n	8007fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e07f      	b.n	800809a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d003      	beq.n	8007faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d107      	bne.n	8007fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007faa:	4b3f      	ldr	r3, [pc, #252]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d109      	bne.n	8007fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e06f      	b.n	800809a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fba:	4b3b      	ldr	r3, [pc, #236]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e067      	b.n	800809a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fca:	4b37      	ldr	r3, [pc, #220]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f023 0203 	bic.w	r2, r3, #3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	4934      	ldr	r1, [pc, #208]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fdc:	f7fb fd5e 	bl	8003a9c <HAL_GetTick>
 8007fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fe2:	e00a      	b.n	8007ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fe4:	f7fb fd5a 	bl	8003a9c <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e04f      	b.n	800809a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ffa:	4b2b      	ldr	r3, [pc, #172]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 020c 	and.w	r2, r3, #12
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	429a      	cmp	r2, r3
 800800a:	d1eb      	bne.n	8007fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800800c:	4b25      	ldr	r3, [pc, #148]	; (80080a4 <HAL_RCC_ClockConfig+0x1b8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d20c      	bcs.n	8008034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800801a:	4b22      	ldr	r3, [pc, #136]	; (80080a4 <HAL_RCC_ClockConfig+0x1b8>)
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008022:	4b20      	ldr	r3, [pc, #128]	; (80080a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d001      	beq.n	8008034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e032      	b.n	800809a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d008      	beq.n	8008052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008040:	4b19      	ldr	r3, [pc, #100]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	4916      	ldr	r1, [pc, #88]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	4313      	orrs	r3, r2
 8008050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	490e      	ldr	r1, [pc, #56]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 800806e:	4313      	orrs	r3, r2
 8008070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008072:	f000 f821 	bl	80080b8 <HAL_RCC_GetSysClockFreq>
 8008076:	4601      	mov	r1, r0
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <HAL_RCC_ClockConfig+0x1bc>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	091b      	lsrs	r3, r3, #4
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <HAL_RCC_ClockConfig+0x1c0>)
 8008084:	5cd3      	ldrb	r3, [r2, r3]
 8008086:	fa21 f303 	lsr.w	r3, r1, r3
 800808a:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <HAL_RCC_ClockConfig+0x1c4>)
 800808c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800808e:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4618      	mov	r0, r3
 8008094:	f7f9 fc0e 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40023c00 	.word	0x40023c00
 80080a8:	40023800 	.word	0x40023800
 80080ac:	0800bfac 	.word	0x0800bfac
 80080b0:	20000000 	.word	0x20000000
 80080b4:	20000080 	.word	0x20000080

080080b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	607b      	str	r3, [r7, #4]
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	2300      	movs	r3, #0
 80080c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080ce:	4b63      	ldr	r3, [pc, #396]	; (800825c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 030c 	and.w	r3, r3, #12
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d007      	beq.n	80080ea <HAL_RCC_GetSysClockFreq+0x32>
 80080da:	2b08      	cmp	r3, #8
 80080dc:	d008      	beq.n	80080f0 <HAL_RCC_GetSysClockFreq+0x38>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f040 80b4 	bne.w	800824c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080e4:	4b5e      	ldr	r3, [pc, #376]	; (8008260 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80080e6:	60bb      	str	r3, [r7, #8]
       break;
 80080e8:	e0b3      	b.n	8008252 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080ea:	4b5e      	ldr	r3, [pc, #376]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80080ec:	60bb      	str	r3, [r7, #8]
      break;
 80080ee:	e0b0      	b.n	8008252 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080f0:	4b5a      	ldr	r3, [pc, #360]	; (800825c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080fa:	4b58      	ldr	r3, [pc, #352]	; (800825c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d04a      	beq.n	800819c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008106:	4b55      	ldr	r3, [pc, #340]	; (800825c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	099b      	lsrs	r3, r3, #6
 800810c:	f04f 0400 	mov.w	r4, #0
 8008110:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	ea03 0501 	and.w	r5, r3, r1
 800811c:	ea04 0602 	and.w	r6, r4, r2
 8008120:	4629      	mov	r1, r5
 8008122:	4632      	mov	r2, r6
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	f04f 0400 	mov.w	r4, #0
 800812c:	0154      	lsls	r4, r2, #5
 800812e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008132:	014b      	lsls	r3, r1, #5
 8008134:	4619      	mov	r1, r3
 8008136:	4622      	mov	r2, r4
 8008138:	1b49      	subs	r1, r1, r5
 800813a:	eb62 0206 	sbc.w	r2, r2, r6
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	f04f 0400 	mov.w	r4, #0
 8008146:	0194      	lsls	r4, r2, #6
 8008148:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800814c:	018b      	lsls	r3, r1, #6
 800814e:	1a5b      	subs	r3, r3, r1
 8008150:	eb64 0402 	sbc.w	r4, r4, r2
 8008154:	f04f 0100 	mov.w	r1, #0
 8008158:	f04f 0200 	mov.w	r2, #0
 800815c:	00e2      	lsls	r2, r4, #3
 800815e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008162:	00d9      	lsls	r1, r3, #3
 8008164:	460b      	mov	r3, r1
 8008166:	4614      	mov	r4, r2
 8008168:	195b      	adds	r3, r3, r5
 800816a:	eb44 0406 	adc.w	r4, r4, r6
 800816e:	f04f 0100 	mov.w	r1, #0
 8008172:	f04f 0200 	mov.w	r2, #0
 8008176:	0262      	lsls	r2, r4, #9
 8008178:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800817c:	0259      	lsls	r1, r3, #9
 800817e:	460b      	mov	r3, r1
 8008180:	4614      	mov	r4, r2
 8008182:	4618      	mov	r0, r3
 8008184:	4621      	mov	r1, r4
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f04f 0400 	mov.w	r4, #0
 800818c:	461a      	mov	r2, r3
 800818e:	4623      	mov	r3, r4
 8008190:	f7f8 f82e 	bl	80001f0 <__aeabi_uldivmod>
 8008194:	4603      	mov	r3, r0
 8008196:	460c      	mov	r4, r1
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	e049      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819c:	4b2f      	ldr	r3, [pc, #188]	; (800825c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	099b      	lsrs	r3, r3, #6
 80081a2:	f04f 0400 	mov.w	r4, #0
 80081a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80081aa:	f04f 0200 	mov.w	r2, #0
 80081ae:	ea03 0501 	and.w	r5, r3, r1
 80081b2:	ea04 0602 	and.w	r6, r4, r2
 80081b6:	4629      	mov	r1, r5
 80081b8:	4632      	mov	r2, r6
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	f04f 0400 	mov.w	r4, #0
 80081c2:	0154      	lsls	r4, r2, #5
 80081c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80081c8:	014b      	lsls	r3, r1, #5
 80081ca:	4619      	mov	r1, r3
 80081cc:	4622      	mov	r2, r4
 80081ce:	1b49      	subs	r1, r1, r5
 80081d0:	eb62 0206 	sbc.w	r2, r2, r6
 80081d4:	f04f 0300 	mov.w	r3, #0
 80081d8:	f04f 0400 	mov.w	r4, #0
 80081dc:	0194      	lsls	r4, r2, #6
 80081de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80081e2:	018b      	lsls	r3, r1, #6
 80081e4:	1a5b      	subs	r3, r3, r1
 80081e6:	eb64 0402 	sbc.w	r4, r4, r2
 80081ea:	f04f 0100 	mov.w	r1, #0
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	00e2      	lsls	r2, r4, #3
 80081f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80081f8:	00d9      	lsls	r1, r3, #3
 80081fa:	460b      	mov	r3, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	195b      	adds	r3, r3, r5
 8008200:	eb44 0406 	adc.w	r4, r4, r6
 8008204:	f04f 0100 	mov.w	r1, #0
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	02a2      	lsls	r2, r4, #10
 800820e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008212:	0299      	lsls	r1, r3, #10
 8008214:	460b      	mov	r3, r1
 8008216:	4614      	mov	r4, r2
 8008218:	4618      	mov	r0, r3
 800821a:	4621      	mov	r1, r4
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f04f 0400 	mov.w	r4, #0
 8008222:	461a      	mov	r2, r3
 8008224:	4623      	mov	r3, r4
 8008226:	f7f7 ffe3 	bl	80001f0 <__aeabi_uldivmod>
 800822a:	4603      	mov	r3, r0
 800822c:	460c      	mov	r4, r1
 800822e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008230:	4b0a      	ldr	r3, [pc, #40]	; (800825c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	0c1b      	lsrs	r3, r3, #16
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	3301      	adds	r3, #1
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	fbb2 f3f3 	udiv	r3, r2, r3
 8008248:	60bb      	str	r3, [r7, #8]
      break;
 800824a:	e002      	b.n	8008252 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800824c:	4b04      	ldr	r3, [pc, #16]	; (8008260 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800824e:	60bb      	str	r3, [r7, #8]
      break;
 8008250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008252:	68bb      	ldr	r3, [r7, #8]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800825c:	40023800 	.word	0x40023800
 8008260:	00f42400 	.word	0x00f42400
 8008264:	007a1200 	.word	0x007a1200

08008268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800826c:	4b03      	ldr	r3, [pc, #12]	; (800827c <HAL_RCC_GetHCLKFreq+0x14>)
 800826e:	681b      	ldr	r3, [r3, #0]
}
 8008270:	4618      	mov	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	20000000 	.word	0x20000000

08008280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008284:	f7ff fff0 	bl	8008268 <HAL_RCC_GetHCLKFreq>
 8008288:	4601      	mov	r1, r0
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	0a9b      	lsrs	r3, r3, #10
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	4a03      	ldr	r2, [pc, #12]	; (80082a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008296:	5cd3      	ldrb	r3, [r2, r3]
 8008298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800829c:	4618      	mov	r0, r3
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	40023800 	.word	0x40023800
 80082a4:	0800bfbc 	.word	0x0800bfbc

080082a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082ac:	f7ff ffdc 	bl	8008268 <HAL_RCC_GetHCLKFreq>
 80082b0:	4601      	mov	r1, r0
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	0b5b      	lsrs	r3, r3, #13
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	4a03      	ldr	r2, [pc, #12]	; (80082cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80082be:	5cd3      	ldrb	r3, [r2, r3]
 80082c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	40023800 	.word	0x40023800
 80082cc:	0800bfbc 	.word	0x0800bfbc

080082d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	220f      	movs	r2, #15
 80082de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082e0:	4b12      	ldr	r3, [pc, #72]	; (800832c <HAL_RCC_GetClockConfig+0x5c>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 0203 	and.w	r2, r3, #3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80082ec:	4b0f      	ldr	r3, [pc, #60]	; (800832c <HAL_RCC_GetClockConfig+0x5c>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <HAL_RCC_GetClockConfig+0x5c>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008304:	4b09      	ldr	r3, [pc, #36]	; (800832c <HAL_RCC_GetClockConfig+0x5c>)
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	08db      	lsrs	r3, r3, #3
 800830a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008312:	4b07      	ldr	r3, [pc, #28]	; (8008330 <HAL_RCC_GetClockConfig+0x60>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 020f 	and.w	r2, r3, #15
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	601a      	str	r2, [r3, #0]
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	40023800 	.word	0x40023800
 8008330:	40023c00 	.word	0x40023c00

08008334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008358:	2b00      	cmp	r3, #0
 800835a:	d105      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008364:	2b00      	cmp	r3, #0
 8008366:	d075      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008368:	4bad      	ldr	r3, [pc, #692]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800836e:	f7fb fb95 	bl	8003a9c <HAL_GetTick>
 8008372:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008374:	e008      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008376:	f7fb fb91 	bl	8003a9c <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d901      	bls.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e18b      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008388:	4ba6      	ldr	r3, [pc, #664]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f0      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d009      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	019a      	lsls	r2, r3, #6
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	071b      	lsls	r3, r3, #28
 80083ac:	499d      	ldr	r1, [pc, #628]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d01f      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083c0:	4b98      	ldr	r3, [pc, #608]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c6:	0f1b      	lsrs	r3, r3, #28
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	019a      	lsls	r2, r3, #6
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	061b      	lsls	r3, r3, #24
 80083da:	431a      	orrs	r2, r3
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	071b      	lsls	r3, r3, #28
 80083e0:	4990      	ldr	r1, [pc, #576]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083e8:	4b8e      	ldr	r3, [pc, #568]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ee:	f023 021f 	bic.w	r2, r3, #31
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	498a      	ldr	r1, [pc, #552]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00d      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	019a      	lsls	r2, r3, #6
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	061b      	lsls	r3, r3, #24
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	071b      	lsls	r3, r3, #28
 8008420:	4980      	ldr	r1, [pc, #512]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008422:	4313      	orrs	r3, r2
 8008424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008428:	4b7d      	ldr	r3, [pc, #500]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800842a:	2201      	movs	r2, #1
 800842c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800842e:	f7fb fb35 	bl	8003a9c <HAL_GetTick>
 8008432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008434:	e008      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008436:	f7fb fb31 	bl	8003a9c <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e12b      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008448:	4b76      	ldr	r3, [pc, #472]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0304 	and.w	r3, r3, #4
 800845c:	2b00      	cmp	r3, #0
 800845e:	d105      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008468:	2b00      	cmp	r3, #0
 800846a:	d079      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800846c:	4b6e      	ldr	r3, [pc, #440]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008472:	f7fb fb13 	bl	8003a9c <HAL_GetTick>
 8008476:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008478:	e008      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800847a:	f7fb fb0f 	bl	8003a9c <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e109      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800848c:	4b65      	ldr	r3, [pc, #404]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008498:	d0ef      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0304 	and.w	r3, r3, #4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d020      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084a6:	4b5f      	ldr	r3, [pc, #380]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ac:	0f1b      	lsrs	r3, r3, #28
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	019a      	lsls	r2, r3, #6
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	061b      	lsls	r3, r3, #24
 80084c0:	431a      	orrs	r2, r3
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	071b      	lsls	r3, r3, #28
 80084c6:	4957      	ldr	r1, [pc, #348]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80084ce:	4b55      	ldr	r3, [pc, #340]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	3b01      	subs	r3, #1
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	4950      	ldr	r1, [pc, #320]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01e      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80084f4:	4b4b      	ldr	r3, [pc, #300]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fa:	0e1b      	lsrs	r3, r3, #24
 80084fc:	f003 030f 	and.w	r3, r3, #15
 8008500:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	019a      	lsls	r2, r3, #6
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	061b      	lsls	r3, r3, #24
 800850c:	431a      	orrs	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	071b      	lsls	r3, r3, #28
 8008514:	4943      	ldr	r1, [pc, #268]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800851c:	4b41      	ldr	r3, [pc, #260]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800851e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	493e      	ldr	r1, [pc, #248]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008532:	4b3d      	ldr	r3, [pc, #244]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008534:	2201      	movs	r2, #1
 8008536:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008538:	f7fb fab0 	bl	8003a9c <HAL_GetTick>
 800853c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800853e:	e008      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008540:	f7fb faac 	bl	8003a9c <HAL_GetTick>
 8008544:	4602      	mov	r2, r0
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d901      	bls.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e0a6      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008552:	4b34      	ldr	r3, [pc, #208]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800855a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800855e:	d1ef      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 808d 	beq.w	8008688 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	4b2c      	ldr	r3, [pc, #176]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	4a2b      	ldr	r2, [pc, #172]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800857c:	6413      	str	r3, [r2, #64]	; 0x40
 800857e:	4b29      	ldr	r3, [pc, #164]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800858a:	4b28      	ldr	r3, [pc, #160]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a27      	ldr	r2, [pc, #156]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008594:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008596:	f7fb fa81 	bl	8003a9c <HAL_GetTick>
 800859a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800859c:	e008      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800859e:	f7fb fa7d 	bl	8003a9c <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e077      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80085b0:	4b1e      	ldr	r3, [pc, #120]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0f0      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085bc:	4b19      	ldr	r3, [pc, #100]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d039      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d032      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085da:	4b12      	ldr	r3, [pc, #72]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085e4:	4b12      	ldr	r3, [pc, #72]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085ea:	4b11      	ldr	r3, [pc, #68]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085f0:	4a0c      	ldr	r2, [pc, #48]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085f6:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d11e      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008602:	f7fb fa4b 	bl	8003a9c <HAL_GetTick>
 8008606:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008608:	e014      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800860a:	f7fb fa47 	bl	8003a9c <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	f241 3288 	movw	r2, #5000	; 0x1388
 8008618:	4293      	cmp	r3, r2
 800861a:	d90b      	bls.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e03f      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008620:	42470068 	.word	0x42470068
 8008624:	40023800 	.word	0x40023800
 8008628:	42470070 	.word	0x42470070
 800862c:	40007000 	.word	0x40007000
 8008630:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008634:	4b1c      	ldr	r3, [pc, #112]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0e4      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800864c:	d10d      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800864e:	4b16      	ldr	r3, [pc, #88]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800865e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008662:	4911      	ldr	r1, [pc, #68]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008664:	4313      	orrs	r3, r2
 8008666:	608b      	str	r3, [r1, #8]
 8008668:	e005      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800866a:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	4a0e      	ldr	r2, [pc, #56]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008670:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008674:	6093      	str	r3, [r2, #8]
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008678:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008682:	4909      	ldr	r1, [pc, #36]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008684:	4313      	orrs	r3, r2
 8008686:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800869a:	4b04      	ldr	r3, [pc, #16]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800869c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	40023800 	.word	0x40023800
 80086ac:	424711e0 	.word	0x424711e0

080086b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e025      	b.n	8008710 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7f8 f9bf 	bl	8000a5c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2202      	movs	r2, #2
 80086e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f001 fdb1 	bl	800a258 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	461a      	mov	r2, r3
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	f001 fe1c 	bl	800a33e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d101      	bne.n	8008734 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008730:	2302      	movs	r3, #2
 8008732:	e018      	b.n	8008766 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	68b9      	ldr	r1, [r7, #8]
 8008744:	4618      	mov	r0, r3
 8008746:	f001 fe79 	bl	800a43c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b02      	cmp	r3, #2
 8008750:	d104      	bne.n	800875c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2205      	movs	r2, #5
 8008756:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800875a:	e003      	b.n	8008764 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d101      	bne.n	8008788 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008784:	2302      	movs	r3, #2
 8008786:	e00e      	b.n	80087a6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	4618      	mov	r0, r3
 8008798:	f001 fe8c 	bl	800a4b4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e056      	b.n	800886e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7f8 ffd8 	bl	8001790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800881c:	431a      	orrs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	ea42 0103 	orr.w	r1, r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	0c1b      	lsrs	r3, r3, #16
 800883e:	f003 0104 	and.w	r1, r3, #4
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69da      	ldr	r2, [r3, #28]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800885c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e01a      	b.n	80088be <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800889e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7f8 ffbd 	bl	8001820 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b088      	sub	sp, #32
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	603b      	str	r3, [r7, #0]
 80088d2:	4613      	mov	r3, r2
 80088d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d101      	bne.n	80088e8 <HAL_SPI_Transmit+0x22>
 80088e4:	2302      	movs	r3, #2
 80088e6:	e11e      	b.n	8008b26 <HAL_SPI_Transmit+0x260>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088f0:	f7fb f8d4 	bl	8003a9c <HAL_GetTick>
 80088f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088f6:	88fb      	ldrh	r3, [r7, #6]
 80088f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b01      	cmp	r3, #1
 8008904:	d002      	beq.n	800890c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008906:	2302      	movs	r3, #2
 8008908:	77fb      	strb	r3, [r7, #31]
    goto error;
 800890a:	e103      	b.n	8008b14 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d002      	beq.n	8008918 <HAL_SPI_Transmit+0x52>
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800891c:	e0fa      	b.n	8008b14 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2203      	movs	r2, #3
 8008922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	88fa      	ldrh	r2, [r7, #6]
 8008936:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	88fa      	ldrh	r2, [r7, #6]
 800893c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008964:	d107      	bne.n	8008976 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008980:	2b40      	cmp	r3, #64	; 0x40
 8008982:	d007      	beq.n	8008994 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800899c:	d14b      	bne.n	8008a36 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <HAL_SPI_Transmit+0xe6>
 80089a6:	8afb      	ldrh	r3, [r7, #22]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d13e      	bne.n	8008a2a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	881a      	ldrh	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089bc:	1c9a      	adds	r2, r3, #2
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	3b01      	subs	r3, #1
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089d0:	e02b      	b.n	8008a2a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d112      	bne.n	8008a06 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	881a      	ldrh	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	1c9a      	adds	r2, r3, #2
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	3b01      	subs	r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a04:	e011      	b.n	8008a2a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a06:	f7fb f849 	bl	8003a9c <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d803      	bhi.n	8008a1e <HAL_SPI_Transmit+0x158>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1c:	d102      	bne.n	8008a24 <HAL_SPI_Transmit+0x15e>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d102      	bne.n	8008a2a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a28:	e074      	b.n	8008b14 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1ce      	bne.n	80089d2 <HAL_SPI_Transmit+0x10c>
 8008a34:	e04c      	b.n	8008ad0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <HAL_SPI_Transmit+0x17e>
 8008a3e:	8afb      	ldrh	r3, [r7, #22]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d140      	bne.n	8008ac6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	330c      	adds	r3, #12
 8008a4e:	7812      	ldrb	r2, [r2, #0]
 8008a50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	3b01      	subs	r3, #1
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a6a:	e02c      	b.n	8008ac6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d113      	bne.n	8008aa2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	330c      	adds	r3, #12
 8008a84:	7812      	ldrb	r2, [r2, #0]
 8008a86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008aa0:	e011      	b.n	8008ac6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008aa2:	f7fa fffb 	bl	8003a9c <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d803      	bhi.n	8008aba <HAL_SPI_Transmit+0x1f4>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab8:	d102      	bne.n	8008ac0 <HAL_SPI_Transmit+0x1fa>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ac4:	e026      	b.n	8008b14 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1cd      	bne.n	8008a6c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 fbb3 	bl	8009240 <SPI_EndRxTxTransaction>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10a      	bne.n	8008b04 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008aee:	2300      	movs	r3, #0
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	77fb      	strb	r3, [r7, #31]
 8008b10:	e000      	b.n	8008b14 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008b12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b24:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3720      	adds	r7, #32
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b088      	sub	sp, #32
 8008b32:	af02      	add	r7, sp, #8
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	603b      	str	r3, [r7, #0]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b4a:	d112      	bne.n	8008b72 <HAL_SPI_Receive+0x44>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10e      	bne.n	8008b72 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2204      	movs	r2, #4
 8008b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b5c:	88fa      	ldrh	r2, [r7, #6]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	4613      	mov	r3, r2
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 f8e9 	bl	8008d40 <HAL_SPI_TransmitReceive>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	e0e2      	b.n	8008d38 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_SPI_Receive+0x52>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e0db      	b.n	8008d38 <HAL_SPI_Receive+0x20a>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b88:	f7fa ff88 	bl	8003a9c <HAL_GetTick>
 8008b8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d002      	beq.n	8008ba0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b9e:	e0c2      	b.n	8008d26 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <HAL_SPI_Receive+0x7e>
 8008ba6:	88fb      	ldrh	r3, [r7, #6]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bb0:	e0b9      	b.n	8008d26 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	88fa      	ldrh	r2, [r7, #6]
 8008bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	88fa      	ldrh	r2, [r7, #6]
 8008bd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bf8:	d107      	bne.n	8008c0a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c14:	2b40      	cmp	r3, #64	; 0x40
 8008c16:	d007      	beq.n	8008c28 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d162      	bne.n	8008cf6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c30:	e02e      	b.n	8008c90 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d115      	bne.n	8008c6c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f103 020c 	add.w	r2, r3, #12
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4c:	7812      	ldrb	r2, [r2, #0]
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c6a:	e011      	b.n	8008c90 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c6c:	f7fa ff16 	bl	8003a9c <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d803      	bhi.n	8008c84 <HAL_SPI_Receive+0x156>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c82:	d102      	bne.n	8008c8a <HAL_SPI_Receive+0x15c>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c8e:	e04a      	b.n	8008d26 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1cb      	bne.n	8008c32 <HAL_SPI_Receive+0x104>
 8008c9a:	e031      	b.n	8008d00 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d113      	bne.n	8008cd2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	b292      	uxth	r2, r2
 8008cb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	1c9a      	adds	r2, r3, #2
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cd0:	e011      	b.n	8008cf6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cd2:	f7fa fee3 	bl	8003a9c <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d803      	bhi.n	8008cea <HAL_SPI_Receive+0x1bc>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce8:	d102      	bne.n	8008cf0 <HAL_SPI_Receive+0x1c2>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d102      	bne.n	8008cf6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008cf4:	e017      	b.n	8008d26 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1cd      	bne.n	8008c9c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 fa35 	bl	8009174 <SPI_EndRxTransaction>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2220      	movs	r2, #32
 8008d14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]
 8008d22:	e000      	b.n	8008d26 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008d24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08c      	sub	sp, #48	; 0x30
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d101      	bne.n	8008d66 <HAL_SPI_TransmitReceive+0x26>
 8008d62:	2302      	movs	r3, #2
 8008d64:	e18a      	b.n	800907c <HAL_SPI_TransmitReceive+0x33c>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d6e:	f7fa fe95 	bl	8003a9c <HAL_GetTick>
 8008d72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d84:	887b      	ldrh	r3, [r7, #2]
 8008d86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d00f      	beq.n	8008db0 <HAL_SPI_TransmitReceive+0x70>
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d96:	d107      	bne.n	8008da8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d103      	bne.n	8008da8 <HAL_SPI_TransmitReceive+0x68>
 8008da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d003      	beq.n	8008db0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008da8:	2302      	movs	r3, #2
 8008daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008dae:	e15b      	b.n	8009068 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <HAL_SPI_TransmitReceive+0x82>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <HAL_SPI_TransmitReceive+0x82>
 8008dbc:	887b      	ldrh	r3, [r7, #2]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d103      	bne.n	8008dca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008dc8:	e14e      	b.n	8009068 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d003      	beq.n	8008dde <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2205      	movs	r2, #5
 8008dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	887a      	ldrh	r2, [r7, #2]
 8008dee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	887a      	ldrh	r2, [r7, #2]
 8008df4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	887a      	ldrh	r2, [r7, #2]
 8008e00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	887a      	ldrh	r2, [r7, #2]
 8008e06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	2b40      	cmp	r3, #64	; 0x40
 8008e20:	d007      	beq.n	8008e32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e3a:	d178      	bne.n	8008f2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <HAL_SPI_TransmitReceive+0x10a>
 8008e44:	8b7b      	ldrh	r3, [r7, #26]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d166      	bne.n	8008f18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	881a      	ldrh	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5a:	1c9a      	adds	r2, r3, #2
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e6e:	e053      	b.n	8008f18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d11b      	bne.n	8008eb6 <HAL_SPI_TransmitReceive+0x176>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d016      	beq.n	8008eb6 <HAL_SPI_TransmitReceive+0x176>
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d113      	bne.n	8008eb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	881a      	ldrh	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9e:	1c9a      	adds	r2, r3, #2
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d119      	bne.n	8008ef8 <HAL_SPI_TransmitReceive+0x1b8>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d014      	beq.n	8008ef8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	b292      	uxth	r2, r2
 8008eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee0:	1c9a      	adds	r2, r3, #2
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ef8:	f7fa fdd0 	bl	8003a9c <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d807      	bhi.n	8008f18 <HAL_SPI_TransmitReceive+0x1d8>
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0e:	d003      	beq.n	8008f18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f16:	e0a7      	b.n	8009068 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1a6      	bne.n	8008e70 <HAL_SPI_TransmitReceive+0x130>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1a1      	bne.n	8008e70 <HAL_SPI_TransmitReceive+0x130>
 8008f2c:	e07c      	b.n	8009028 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <HAL_SPI_TransmitReceive+0x1fc>
 8008f36:	8b7b      	ldrh	r3, [r7, #26]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d16b      	bne.n	8009014 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	330c      	adds	r3, #12
 8008f46:	7812      	ldrb	r2, [r2, #0]
 8008f48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f62:	e057      	b.n	8009014 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d11c      	bne.n	8008fac <HAL_SPI_TransmitReceive+0x26c>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d017      	beq.n	8008fac <HAL_SPI_TransmitReceive+0x26c>
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d114      	bne.n	8008fac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	330c      	adds	r3, #12
 8008f8c:	7812      	ldrb	r2, [r2, #0]
 8008f8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d119      	bne.n	8008fee <HAL_SPI_TransmitReceive+0x2ae>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d014      	beq.n	8008fee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68da      	ldr	r2, [r3, #12]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fce:	b2d2      	uxtb	r2, r2
 8008fd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fea:	2301      	movs	r3, #1
 8008fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fee:	f7fa fd55 	bl	8003a9c <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d803      	bhi.n	8009006 <HAL_SPI_TransmitReceive+0x2c6>
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009004:	d102      	bne.n	800900c <HAL_SPI_TransmitReceive+0x2cc>
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	2b00      	cmp	r3, #0
 800900a:	d103      	bne.n	8009014 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009012:	e029      	b.n	8009068 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009018:	b29b      	uxth	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1a2      	bne.n	8008f64 <HAL_SPI_TransmitReceive+0x224>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009022:	b29b      	uxth	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	d19d      	bne.n	8008f64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 f907 	bl	8009240 <SPI_EndRxTxTransaction>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d006      	beq.n	8009046 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2220      	movs	r2, #32
 8009042:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009044:	e010      	b.n	8009068 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800904e:	2300      	movs	r3, #0
 8009050:	617b      	str	r3, [r7, #20]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	e000      	b.n	8009068 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009066:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009078:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800907c:	4618      	mov	r0, r3
 800907e:	3730      	adds	r7, #48	; 0x30
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009092:	b2db      	uxtb	r3, r3
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	4613      	mov	r3, r2
 80090ae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090b0:	e04c      	b.n	800914c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b8:	d048      	beq.n	800914c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80090ba:	f7fa fcef 	bl	8003a9c <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d902      	bls.n	80090d0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d13d      	bne.n	800914c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090e8:	d111      	bne.n	800910e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090f2:	d004      	beq.n	80090fe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090fc:	d107      	bne.n	800910e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800910c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009116:	d10f      	bne.n	8009138 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009136:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e00f      	b.n	800916c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4013      	ands	r3, r2
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	429a      	cmp	r2, r3
 800915a:	bf0c      	ite	eq
 800915c:	2301      	moveq	r3, #1
 800915e:	2300      	movne	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	461a      	mov	r2, r3
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	429a      	cmp	r2, r3
 8009168:	d1a3      	bne.n	80090b2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009188:	d111      	bne.n	80091ae <SPI_EndRxTransaction+0x3a>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009192:	d004      	beq.n	800919e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800919c:	d107      	bne.n	80091ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091b6:	d12a      	bne.n	800920e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091c0:	d012      	beq.n	80091e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2200      	movs	r2, #0
 80091ca:	2180      	movs	r1, #128	; 0x80
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f7ff ff67 	bl	80090a0 <SPI_WaitFlagStateUntilTimeout>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d02d      	beq.n	8009234 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091dc:	f043 0220 	orr.w	r2, r3, #32
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e026      	b.n	8009236 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2200      	movs	r2, #0
 80091f0:	2101      	movs	r1, #1
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7ff ff54 	bl	80090a0 <SPI_WaitFlagStateUntilTimeout>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d01a      	beq.n	8009234 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009202:	f043 0220 	orr.w	r2, r3, #32
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e013      	b.n	8009236 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2200      	movs	r2, #0
 8009216:	2101      	movs	r1, #1
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f7ff ff41 	bl	80090a0 <SPI_WaitFlagStateUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d007      	beq.n	8009234 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009228:	f043 0220 	orr.w	r2, r3, #32
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e000      	b.n	8009236 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af02      	add	r7, sp, #8
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800924c:	4b1b      	ldr	r3, [pc, #108]	; (80092bc <SPI_EndRxTxTransaction+0x7c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a1b      	ldr	r2, [pc, #108]	; (80092c0 <SPI_EndRxTxTransaction+0x80>)
 8009252:	fba2 2303 	umull	r2, r3, r2, r3
 8009256:	0d5b      	lsrs	r3, r3, #21
 8009258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800925c:	fb02 f303 	mul.w	r3, r2, r3
 8009260:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800926a:	d112      	bne.n	8009292 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2200      	movs	r2, #0
 8009274:	2180      	movs	r1, #128	; 0x80
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7ff ff12 	bl	80090a0 <SPI_WaitFlagStateUntilTimeout>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d016      	beq.n	80092b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009286:	f043 0220 	orr.w	r2, r3, #32
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e00f      	b.n	80092b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	3b01      	subs	r3, #1
 800929c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a8:	2b80      	cmp	r3, #128	; 0x80
 80092aa:	d0f2      	beq.n	8009292 <SPI_EndRxTxTransaction+0x52>
 80092ac:	e000      	b.n	80092b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80092ae:	bf00      	nop
  }

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20000000 	.word	0x20000000
 80092c0:	165e9f81 	.word	0x165e9f81

080092c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e01d      	b.n	8009312 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d106      	bne.n	80092f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7f8 fc1a 	bl	8001b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3304      	adds	r3, #4
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f000 fa14 	bl	8009730 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f042 0201 	orr.w	r2, r2, #1
 8009330:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b06      	cmp	r3, #6
 8009342:	d007      	beq.n	8009354 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0201 	orr.w	r2, r2, #1
 8009352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b02      	cmp	r3, #2
 8009376:	d122      	bne.n	80093be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b02      	cmp	r3, #2
 8009384:	d11b      	bne.n	80093be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f06f 0202 	mvn.w	r2, #2
 800938e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f9a5 	bl	80096f4 <HAL_TIM_IC_CaptureCallback>
 80093aa:	e005      	b.n	80093b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f997 	bl	80096e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f9a8 	bl	8009708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d122      	bne.n	8009412 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d11b      	bne.n	8009412 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f06f 0204 	mvn.w	r2, #4
 80093e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f97b 	bl	80096f4 <HAL_TIM_IC_CaptureCallback>
 80093fe:	e005      	b.n	800940c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f96d 	bl	80096e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f97e 	bl	8009708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f003 0308 	and.w	r3, r3, #8
 800941c:	2b08      	cmp	r3, #8
 800941e:	d122      	bne.n	8009466 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	f003 0308 	and.w	r3, r3, #8
 800942a:	2b08      	cmp	r3, #8
 800942c:	d11b      	bne.n	8009466 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f06f 0208 	mvn.w	r2, #8
 8009436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2204      	movs	r2, #4
 800943c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f951 	bl	80096f4 <HAL_TIM_IC_CaptureCallback>
 8009452:	e005      	b.n	8009460 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f943 	bl	80096e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f954 	bl	8009708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	f003 0310 	and.w	r3, r3, #16
 8009470:	2b10      	cmp	r3, #16
 8009472:	d122      	bne.n	80094ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f003 0310 	and.w	r3, r3, #16
 800947e:	2b10      	cmp	r3, #16
 8009480:	d11b      	bne.n	80094ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f06f 0210 	mvn.w	r2, #16
 800948a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2208      	movs	r2, #8
 8009490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f927 	bl	80096f4 <HAL_TIM_IC_CaptureCallback>
 80094a6:	e005      	b.n	80094b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f919 	bl	80096e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f92a 	bl	8009708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d10e      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d107      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f06f 0201 	mvn.w	r2, #1
 80094de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7f8 f8cb 	bl	800167c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f0:	2b80      	cmp	r3, #128	; 0x80
 80094f2:	d10e      	bne.n	8009512 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fe:	2b80      	cmp	r3, #128	; 0x80
 8009500:	d107      	bne.n	8009512 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800950a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 facf 	bl	8009ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951c:	2b40      	cmp	r3, #64	; 0x40
 800951e:	d10e      	bne.n	800953e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	2b40      	cmp	r3, #64	; 0x40
 800952c:	d107      	bne.n	800953e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f8ef 	bl	800971c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b20      	cmp	r3, #32
 800954a:	d10e      	bne.n	800956a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f003 0320 	and.w	r3, r3, #32
 8009556:	2b20      	cmp	r3, #32
 8009558:	d107      	bne.n	800956a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f06f 0220 	mvn.w	r2, #32
 8009562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fa99 	bl	8009a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009582:	2b01      	cmp	r3, #1
 8009584:	d101      	bne.n	800958a <HAL_TIM_ConfigClockSource+0x18>
 8009586:	2302      	movs	r3, #2
 8009588:	e0a6      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x166>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2202      	movs	r2, #2
 8009596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b40      	cmp	r3, #64	; 0x40
 80095c0:	d067      	beq.n	8009692 <HAL_TIM_ConfigClockSource+0x120>
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	d80b      	bhi.n	80095de <HAL_TIM_ConfigClockSource+0x6c>
 80095c6:	2b10      	cmp	r3, #16
 80095c8:	d073      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x140>
 80095ca:	2b10      	cmp	r3, #16
 80095cc:	d802      	bhi.n	80095d4 <HAL_TIM_ConfigClockSource+0x62>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d06f      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80095d2:	e078      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095d4:	2b20      	cmp	r3, #32
 80095d6:	d06c      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x140>
 80095d8:	2b30      	cmp	r3, #48	; 0x30
 80095da:	d06a      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80095dc:	e073      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095de:	2b70      	cmp	r3, #112	; 0x70
 80095e0:	d00d      	beq.n	80095fe <HAL_TIM_ConfigClockSource+0x8c>
 80095e2:	2b70      	cmp	r3, #112	; 0x70
 80095e4:	d804      	bhi.n	80095f0 <HAL_TIM_ConfigClockSource+0x7e>
 80095e6:	2b50      	cmp	r3, #80	; 0x50
 80095e8:	d033      	beq.n	8009652 <HAL_TIM_ConfigClockSource+0xe0>
 80095ea:	2b60      	cmp	r3, #96	; 0x60
 80095ec:	d041      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80095ee:	e06a      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f4:	d066      	beq.n	80096c4 <HAL_TIM_ConfigClockSource+0x152>
 80095f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095fa:	d017      	beq.n	800962c <HAL_TIM_ConfigClockSource+0xba>
      break;
 80095fc:	e063      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	6899      	ldr	r1, [r3, #8]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	f000 f9a9 	bl	8009964 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009620:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	609a      	str	r2, [r3, #8]
      break;
 800962a:	e04c      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	6899      	ldr	r1, [r3, #8]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	685a      	ldr	r2, [r3, #4]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f000 f992 	bl	8009964 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800964e:	609a      	str	r2, [r3, #8]
      break;
 8009650:	e039      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6818      	ldr	r0, [r3, #0]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	6859      	ldr	r1, [r3, #4]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	461a      	mov	r2, r3
 8009660:	f000 f906 	bl	8009870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2150      	movs	r1, #80	; 0x50
 800966a:	4618      	mov	r0, r3
 800966c:	f000 f95f 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 8009670:	e029      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6818      	ldr	r0, [r3, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	6859      	ldr	r1, [r3, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	461a      	mov	r2, r3
 8009680:	f000 f925 	bl	80098ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2160      	movs	r1, #96	; 0x60
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f94f 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 8009690:	e019      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	6859      	ldr	r1, [r3, #4]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	461a      	mov	r2, r3
 80096a0:	f000 f8e6 	bl	8009870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2140      	movs	r1, #64	; 0x40
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 f93f 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 80096b0:	e009      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4619      	mov	r1, r3
 80096bc:	4610      	mov	r0, r2
 80096be:	f000 f936 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 80096c2:	e000      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80096c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a40      	ldr	r2, [pc, #256]	; (8009844 <TIM_Base_SetConfig+0x114>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d013      	beq.n	8009770 <TIM_Base_SetConfig+0x40>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800974e:	d00f      	beq.n	8009770 <TIM_Base_SetConfig+0x40>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a3d      	ldr	r2, [pc, #244]	; (8009848 <TIM_Base_SetConfig+0x118>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d00b      	beq.n	8009770 <TIM_Base_SetConfig+0x40>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a3c      	ldr	r2, [pc, #240]	; (800984c <TIM_Base_SetConfig+0x11c>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d007      	beq.n	8009770 <TIM_Base_SetConfig+0x40>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a3b      	ldr	r2, [pc, #236]	; (8009850 <TIM_Base_SetConfig+0x120>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d003      	beq.n	8009770 <TIM_Base_SetConfig+0x40>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a3a      	ldr	r2, [pc, #232]	; (8009854 <TIM_Base_SetConfig+0x124>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d108      	bne.n	8009782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	4313      	orrs	r3, r2
 8009780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a2f      	ldr	r2, [pc, #188]	; (8009844 <TIM_Base_SetConfig+0x114>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d02b      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009790:	d027      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a2c      	ldr	r2, [pc, #176]	; (8009848 <TIM_Base_SetConfig+0x118>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d023      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a2b      	ldr	r2, [pc, #172]	; (800984c <TIM_Base_SetConfig+0x11c>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d01f      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a2a      	ldr	r2, [pc, #168]	; (8009850 <TIM_Base_SetConfig+0x120>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d01b      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a29      	ldr	r2, [pc, #164]	; (8009854 <TIM_Base_SetConfig+0x124>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d017      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a28      	ldr	r2, [pc, #160]	; (8009858 <TIM_Base_SetConfig+0x128>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d013      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a27      	ldr	r2, [pc, #156]	; (800985c <TIM_Base_SetConfig+0x12c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d00f      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a26      	ldr	r2, [pc, #152]	; (8009860 <TIM_Base_SetConfig+0x130>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d00b      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a25      	ldr	r2, [pc, #148]	; (8009864 <TIM_Base_SetConfig+0x134>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d007      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a24      	ldr	r2, [pc, #144]	; (8009868 <TIM_Base_SetConfig+0x138>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d003      	beq.n	80097e2 <TIM_Base_SetConfig+0xb2>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a23      	ldr	r2, [pc, #140]	; (800986c <TIM_Base_SetConfig+0x13c>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d108      	bne.n	80097f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a0a      	ldr	r2, [pc, #40]	; (8009844 <TIM_Base_SetConfig+0x114>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d003      	beq.n	8009828 <TIM_Base_SetConfig+0xf8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a0c      	ldr	r2, [pc, #48]	; (8009854 <TIM_Base_SetConfig+0x124>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d103      	bne.n	8009830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	691a      	ldr	r2, [r3, #16]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	615a      	str	r2, [r3, #20]
}
 8009836:	bf00      	nop
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	40010000 	.word	0x40010000
 8009848:	40000400 	.word	0x40000400
 800984c:	40000800 	.word	0x40000800
 8009850:	40000c00 	.word	0x40000c00
 8009854:	40010400 	.word	0x40010400
 8009858:	40014000 	.word	0x40014000
 800985c:	40014400 	.word	0x40014400
 8009860:	40014800 	.word	0x40014800
 8009864:	40001800 	.word	0x40001800
 8009868:	40001c00 	.word	0x40001c00
 800986c:	40002000 	.word	0x40002000

08009870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	f023 0201 	bic.w	r2, r3, #1
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800989a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	011b      	lsls	r3, r3, #4
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f023 030a 	bic.w	r3, r3, #10
 80098ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	621a      	str	r2, [r3, #32]
}
 80098c2:	bf00      	nop
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b087      	sub	sp, #28
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	f023 0210 	bic.w	r2, r3, #16
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	031b      	lsls	r3, r3, #12
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4313      	orrs	r3, r2
 8009902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800990a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	4313      	orrs	r3, r2
 8009914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	621a      	str	r2, [r3, #32]
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4313      	orrs	r3, r2
 800994c:	f043 0307 	orr.w	r3, r3, #7
 8009950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	609a      	str	r2, [r3, #8]
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800997e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	021a      	lsls	r2, r3, #8
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	431a      	orrs	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4313      	orrs	r3, r2
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	4313      	orrs	r3, r2
 8009990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	609a      	str	r2, [r3, #8]
}
 8009998:	bf00      	nop
 800999a:	371c      	adds	r7, #28
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d101      	bne.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099b8:	2302      	movs	r3, #2
 80099ba:	e05a      	b.n	8009a72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a21      	ldr	r2, [pc, #132]	; (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d022      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a08:	d01d      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a1d      	ldr	r2, [pc, #116]	; (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d018      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1b      	ldr	r2, [pc, #108]	; (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d013      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a1a      	ldr	r2, [pc, #104]	; (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00e      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a18      	ldr	r2, [pc, #96]	; (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d009      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a17      	ldr	r2, [pc, #92]	; (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d004      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a15      	ldr	r2, [pc, #84]	; (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d10c      	bne.n	8009a60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	40010000 	.word	0x40010000
 8009a84:	40000400 	.word	0x40000400
 8009a88:	40000800 	.word	0x40000800
 8009a8c:	40000c00 	.word	0x40000c00
 8009a90:	40010400 	.word	0x40010400
 8009a94:	40014000 	.word	0x40014000
 8009a98:	40001800 	.word	0x40001800

08009a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e03f      	b.n	8009b56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7f8 f866 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2224      	movs	r2, #36	; 0x24
 8009af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f829 	bl	8009b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	695a      	ldr	r2, [r3, #20]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	b085      	sub	sp, #20
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009ba2:	f023 030c 	bic.w	r3, r3, #12
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	6812      	ldr	r2, [r2, #0]
 8009baa:	68f9      	ldr	r1, [r7, #12]
 8009bac:	430b      	orrs	r3, r1
 8009bae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699a      	ldr	r2, [r3, #24]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bce:	f040 818b 	bne.w	8009ee8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4ac1      	ldr	r2, [pc, #772]	; (8009edc <UART_SetConfig+0x37c>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d005      	beq.n	8009be8 <UART_SetConfig+0x88>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4abf      	ldr	r2, [pc, #764]	; (8009ee0 <UART_SetConfig+0x380>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	f040 80bd 	bne.w	8009d62 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009be8:	f7fe fb5e 	bl	80082a8 <HAL_RCC_GetPCLK2Freq>
 8009bec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	461d      	mov	r5, r3
 8009bf2:	f04f 0600 	mov.w	r6, #0
 8009bf6:	46a8      	mov	r8, r5
 8009bf8:	46b1      	mov	r9, r6
 8009bfa:	eb18 0308 	adds.w	r3, r8, r8
 8009bfe:	eb49 0409 	adc.w	r4, r9, r9
 8009c02:	4698      	mov	r8, r3
 8009c04:	46a1      	mov	r9, r4
 8009c06:	eb18 0805 	adds.w	r8, r8, r5
 8009c0a:	eb49 0906 	adc.w	r9, r9, r6
 8009c0e:	f04f 0100 	mov.w	r1, #0
 8009c12:	f04f 0200 	mov.w	r2, #0
 8009c16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c22:	4688      	mov	r8, r1
 8009c24:	4691      	mov	r9, r2
 8009c26:	eb18 0005 	adds.w	r0, r8, r5
 8009c2a:	eb49 0106 	adc.w	r1, r9, r6
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	461d      	mov	r5, r3
 8009c34:	f04f 0600 	mov.w	r6, #0
 8009c38:	196b      	adds	r3, r5, r5
 8009c3a:	eb46 0406 	adc.w	r4, r6, r6
 8009c3e:	461a      	mov	r2, r3
 8009c40:	4623      	mov	r3, r4
 8009c42:	f7f6 fad5 	bl	80001f0 <__aeabi_uldivmod>
 8009c46:	4603      	mov	r3, r0
 8009c48:	460c      	mov	r4, r1
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	4ba5      	ldr	r3, [pc, #660]	; (8009ee4 <UART_SetConfig+0x384>)
 8009c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8009c52:	095b      	lsrs	r3, r3, #5
 8009c54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	461d      	mov	r5, r3
 8009c5c:	f04f 0600 	mov.w	r6, #0
 8009c60:	46a9      	mov	r9, r5
 8009c62:	46b2      	mov	sl, r6
 8009c64:	eb19 0309 	adds.w	r3, r9, r9
 8009c68:	eb4a 040a 	adc.w	r4, sl, sl
 8009c6c:	4699      	mov	r9, r3
 8009c6e:	46a2      	mov	sl, r4
 8009c70:	eb19 0905 	adds.w	r9, r9, r5
 8009c74:	eb4a 0a06 	adc.w	sl, sl, r6
 8009c78:	f04f 0100 	mov.w	r1, #0
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c8c:	4689      	mov	r9, r1
 8009c8e:	4692      	mov	sl, r2
 8009c90:	eb19 0005 	adds.w	r0, r9, r5
 8009c94:	eb4a 0106 	adc.w	r1, sl, r6
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	461d      	mov	r5, r3
 8009c9e:	f04f 0600 	mov.w	r6, #0
 8009ca2:	196b      	adds	r3, r5, r5
 8009ca4:	eb46 0406 	adc.w	r4, r6, r6
 8009ca8:	461a      	mov	r2, r3
 8009caa:	4623      	mov	r3, r4
 8009cac:	f7f6 faa0 	bl	80001f0 <__aeabi_uldivmod>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4b8b      	ldr	r3, [pc, #556]	; (8009ee4 <UART_SetConfig+0x384>)
 8009cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009cbc:	095b      	lsrs	r3, r3, #5
 8009cbe:	2164      	movs	r1, #100	; 0x64
 8009cc0:	fb01 f303 	mul.w	r3, r1, r3
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	3332      	adds	r3, #50	; 0x32
 8009cca:	4a86      	ldr	r2, [pc, #536]	; (8009ee4 <UART_SetConfig+0x384>)
 8009ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd0:	095b      	lsrs	r3, r3, #5
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009cd8:	4498      	add	r8, r3
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	461d      	mov	r5, r3
 8009cde:	f04f 0600 	mov.w	r6, #0
 8009ce2:	46a9      	mov	r9, r5
 8009ce4:	46b2      	mov	sl, r6
 8009ce6:	eb19 0309 	adds.w	r3, r9, r9
 8009cea:	eb4a 040a 	adc.w	r4, sl, sl
 8009cee:	4699      	mov	r9, r3
 8009cf0:	46a2      	mov	sl, r4
 8009cf2:	eb19 0905 	adds.w	r9, r9, r5
 8009cf6:	eb4a 0a06 	adc.w	sl, sl, r6
 8009cfa:	f04f 0100 	mov.w	r1, #0
 8009cfe:	f04f 0200 	mov.w	r2, #0
 8009d02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d0e:	4689      	mov	r9, r1
 8009d10:	4692      	mov	sl, r2
 8009d12:	eb19 0005 	adds.w	r0, r9, r5
 8009d16:	eb4a 0106 	adc.w	r1, sl, r6
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	461d      	mov	r5, r3
 8009d20:	f04f 0600 	mov.w	r6, #0
 8009d24:	196b      	adds	r3, r5, r5
 8009d26:	eb46 0406 	adc.w	r4, r6, r6
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	f7f6 fa5f 	bl	80001f0 <__aeabi_uldivmod>
 8009d32:	4603      	mov	r3, r0
 8009d34:	460c      	mov	r4, r1
 8009d36:	461a      	mov	r2, r3
 8009d38:	4b6a      	ldr	r3, [pc, #424]	; (8009ee4 <UART_SetConfig+0x384>)
 8009d3a:	fba3 1302 	umull	r1, r3, r3, r2
 8009d3e:	095b      	lsrs	r3, r3, #5
 8009d40:	2164      	movs	r1, #100	; 0x64
 8009d42:	fb01 f303 	mul.w	r3, r1, r3
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	3332      	adds	r3, #50	; 0x32
 8009d4c:	4a65      	ldr	r2, [pc, #404]	; (8009ee4 <UART_SetConfig+0x384>)
 8009d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	f003 0207 	and.w	r2, r3, #7
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4442      	add	r2, r8
 8009d5e:	609a      	str	r2, [r3, #8]
 8009d60:	e26f      	b.n	800a242 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d62:	f7fe fa8d 	bl	8008280 <HAL_RCC_GetPCLK1Freq>
 8009d66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	461d      	mov	r5, r3
 8009d6c:	f04f 0600 	mov.w	r6, #0
 8009d70:	46a8      	mov	r8, r5
 8009d72:	46b1      	mov	r9, r6
 8009d74:	eb18 0308 	adds.w	r3, r8, r8
 8009d78:	eb49 0409 	adc.w	r4, r9, r9
 8009d7c:	4698      	mov	r8, r3
 8009d7e:	46a1      	mov	r9, r4
 8009d80:	eb18 0805 	adds.w	r8, r8, r5
 8009d84:	eb49 0906 	adc.w	r9, r9, r6
 8009d88:	f04f 0100 	mov.w	r1, #0
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009d94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009d98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009d9c:	4688      	mov	r8, r1
 8009d9e:	4691      	mov	r9, r2
 8009da0:	eb18 0005 	adds.w	r0, r8, r5
 8009da4:	eb49 0106 	adc.w	r1, r9, r6
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	461d      	mov	r5, r3
 8009dae:	f04f 0600 	mov.w	r6, #0
 8009db2:	196b      	adds	r3, r5, r5
 8009db4:	eb46 0406 	adc.w	r4, r6, r6
 8009db8:	461a      	mov	r2, r3
 8009dba:	4623      	mov	r3, r4
 8009dbc:	f7f6 fa18 	bl	80001f0 <__aeabi_uldivmod>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4b47      	ldr	r3, [pc, #284]	; (8009ee4 <UART_SetConfig+0x384>)
 8009dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8009dcc:	095b      	lsrs	r3, r3, #5
 8009dce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	461d      	mov	r5, r3
 8009dd6:	f04f 0600 	mov.w	r6, #0
 8009dda:	46a9      	mov	r9, r5
 8009ddc:	46b2      	mov	sl, r6
 8009dde:	eb19 0309 	adds.w	r3, r9, r9
 8009de2:	eb4a 040a 	adc.w	r4, sl, sl
 8009de6:	4699      	mov	r9, r3
 8009de8:	46a2      	mov	sl, r4
 8009dea:	eb19 0905 	adds.w	r9, r9, r5
 8009dee:	eb4a 0a06 	adc.w	sl, sl, r6
 8009df2:	f04f 0100 	mov.w	r1, #0
 8009df6:	f04f 0200 	mov.w	r2, #0
 8009dfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009dfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e06:	4689      	mov	r9, r1
 8009e08:	4692      	mov	sl, r2
 8009e0a:	eb19 0005 	adds.w	r0, r9, r5
 8009e0e:	eb4a 0106 	adc.w	r1, sl, r6
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	461d      	mov	r5, r3
 8009e18:	f04f 0600 	mov.w	r6, #0
 8009e1c:	196b      	adds	r3, r5, r5
 8009e1e:	eb46 0406 	adc.w	r4, r6, r6
 8009e22:	461a      	mov	r2, r3
 8009e24:	4623      	mov	r3, r4
 8009e26:	f7f6 f9e3 	bl	80001f0 <__aeabi_uldivmod>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	461a      	mov	r2, r3
 8009e30:	4b2c      	ldr	r3, [pc, #176]	; (8009ee4 <UART_SetConfig+0x384>)
 8009e32:	fba3 1302 	umull	r1, r3, r3, r2
 8009e36:	095b      	lsrs	r3, r3, #5
 8009e38:	2164      	movs	r1, #100	; 0x64
 8009e3a:	fb01 f303 	mul.w	r3, r1, r3
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	3332      	adds	r3, #50	; 0x32
 8009e44:	4a27      	ldr	r2, [pc, #156]	; (8009ee4 <UART_SetConfig+0x384>)
 8009e46:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4a:	095b      	lsrs	r3, r3, #5
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e52:	4498      	add	r8, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	461d      	mov	r5, r3
 8009e58:	f04f 0600 	mov.w	r6, #0
 8009e5c:	46a9      	mov	r9, r5
 8009e5e:	46b2      	mov	sl, r6
 8009e60:	eb19 0309 	adds.w	r3, r9, r9
 8009e64:	eb4a 040a 	adc.w	r4, sl, sl
 8009e68:	4699      	mov	r9, r3
 8009e6a:	46a2      	mov	sl, r4
 8009e6c:	eb19 0905 	adds.w	r9, r9, r5
 8009e70:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e74:	f04f 0100 	mov.w	r1, #0
 8009e78:	f04f 0200 	mov.w	r2, #0
 8009e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e88:	4689      	mov	r9, r1
 8009e8a:	4692      	mov	sl, r2
 8009e8c:	eb19 0005 	adds.w	r0, r9, r5
 8009e90:	eb4a 0106 	adc.w	r1, sl, r6
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	461d      	mov	r5, r3
 8009e9a:	f04f 0600 	mov.w	r6, #0
 8009e9e:	196b      	adds	r3, r5, r5
 8009ea0:	eb46 0406 	adc.w	r4, r6, r6
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	4623      	mov	r3, r4
 8009ea8:	f7f6 f9a2 	bl	80001f0 <__aeabi_uldivmod>
 8009eac:	4603      	mov	r3, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <UART_SetConfig+0x384>)
 8009eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	2164      	movs	r1, #100	; 0x64
 8009ebc:	fb01 f303 	mul.w	r3, r1, r3
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	3332      	adds	r3, #50	; 0x32
 8009ec6:	4a07      	ldr	r2, [pc, #28]	; (8009ee4 <UART_SetConfig+0x384>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	f003 0207 	and.w	r2, r3, #7
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4442      	add	r2, r8
 8009ed8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009eda:	e1b2      	b.n	800a242 <UART_SetConfig+0x6e2>
 8009edc:	40011000 	.word	0x40011000
 8009ee0:	40011400 	.word	0x40011400
 8009ee4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4ad7      	ldr	r2, [pc, #860]	; (800a24c <UART_SetConfig+0x6ec>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d005      	beq.n	8009efe <UART_SetConfig+0x39e>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4ad6      	ldr	r2, [pc, #856]	; (800a250 <UART_SetConfig+0x6f0>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	f040 80d1 	bne.w	800a0a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009efe:	f7fe f9d3 	bl	80082a8 <HAL_RCC_GetPCLK2Freq>
 8009f02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	469a      	mov	sl, r3
 8009f08:	f04f 0b00 	mov.w	fp, #0
 8009f0c:	46d0      	mov	r8, sl
 8009f0e:	46d9      	mov	r9, fp
 8009f10:	eb18 0308 	adds.w	r3, r8, r8
 8009f14:	eb49 0409 	adc.w	r4, r9, r9
 8009f18:	4698      	mov	r8, r3
 8009f1a:	46a1      	mov	r9, r4
 8009f1c:	eb18 080a 	adds.w	r8, r8, sl
 8009f20:	eb49 090b 	adc.w	r9, r9, fp
 8009f24:	f04f 0100 	mov.w	r1, #0
 8009f28:	f04f 0200 	mov.w	r2, #0
 8009f2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009f30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009f34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009f38:	4688      	mov	r8, r1
 8009f3a:	4691      	mov	r9, r2
 8009f3c:	eb1a 0508 	adds.w	r5, sl, r8
 8009f40:	eb4b 0609 	adc.w	r6, fp, r9
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	f04f 0200 	mov.w	r2, #0
 8009f4e:	f04f 0300 	mov.w	r3, #0
 8009f52:	f04f 0400 	mov.w	r4, #0
 8009f56:	0094      	lsls	r4, r2, #2
 8009f58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f5c:	008b      	lsls	r3, r1, #2
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4623      	mov	r3, r4
 8009f62:	4628      	mov	r0, r5
 8009f64:	4631      	mov	r1, r6
 8009f66:	f7f6 f943 	bl	80001f0 <__aeabi_uldivmod>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	461a      	mov	r2, r3
 8009f70:	4bb8      	ldr	r3, [pc, #736]	; (800a254 <UART_SetConfig+0x6f4>)
 8009f72:	fba3 2302 	umull	r2, r3, r3, r2
 8009f76:	095b      	lsrs	r3, r3, #5
 8009f78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	469b      	mov	fp, r3
 8009f80:	f04f 0c00 	mov.w	ip, #0
 8009f84:	46d9      	mov	r9, fp
 8009f86:	46e2      	mov	sl, ip
 8009f88:	eb19 0309 	adds.w	r3, r9, r9
 8009f8c:	eb4a 040a 	adc.w	r4, sl, sl
 8009f90:	4699      	mov	r9, r3
 8009f92:	46a2      	mov	sl, r4
 8009f94:	eb19 090b 	adds.w	r9, r9, fp
 8009f98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f9c:	f04f 0100 	mov.w	r1, #0
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009fac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009fb0:	4689      	mov	r9, r1
 8009fb2:	4692      	mov	sl, r2
 8009fb4:	eb1b 0509 	adds.w	r5, fp, r9
 8009fb8:	eb4c 060a 	adc.w	r6, ip, sl
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	f04f 0300 	mov.w	r3, #0
 8009fca:	f04f 0400 	mov.w	r4, #0
 8009fce:	0094      	lsls	r4, r2, #2
 8009fd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009fd4:	008b      	lsls	r3, r1, #2
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4623      	mov	r3, r4
 8009fda:	4628      	mov	r0, r5
 8009fdc:	4631      	mov	r1, r6
 8009fde:	f7f6 f907 	bl	80001f0 <__aeabi_uldivmod>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	4b9a      	ldr	r3, [pc, #616]	; (800a254 <UART_SetConfig+0x6f4>)
 8009fea:	fba3 1302 	umull	r1, r3, r3, r2
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	2164      	movs	r1, #100	; 0x64
 8009ff2:	fb01 f303 	mul.w	r3, r1, r3
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	011b      	lsls	r3, r3, #4
 8009ffa:	3332      	adds	r3, #50	; 0x32
 8009ffc:	4a95      	ldr	r2, [pc, #596]	; (800a254 <UART_SetConfig+0x6f4>)
 8009ffe:	fba2 2303 	umull	r2, r3, r2, r3
 800a002:	095b      	lsrs	r3, r3, #5
 800a004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a008:	4498      	add	r8, r3
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	469b      	mov	fp, r3
 800a00e:	f04f 0c00 	mov.w	ip, #0
 800a012:	46d9      	mov	r9, fp
 800a014:	46e2      	mov	sl, ip
 800a016:	eb19 0309 	adds.w	r3, r9, r9
 800a01a:	eb4a 040a 	adc.w	r4, sl, sl
 800a01e:	4699      	mov	r9, r3
 800a020:	46a2      	mov	sl, r4
 800a022:	eb19 090b 	adds.w	r9, r9, fp
 800a026:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a02a:	f04f 0100 	mov.w	r1, #0
 800a02e:	f04f 0200 	mov.w	r2, #0
 800a032:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a036:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a03a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a03e:	4689      	mov	r9, r1
 800a040:	4692      	mov	sl, r2
 800a042:	eb1b 0509 	adds.w	r5, fp, r9
 800a046:	eb4c 060a 	adc.w	r6, ip, sl
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	4619      	mov	r1, r3
 800a050:	f04f 0200 	mov.w	r2, #0
 800a054:	f04f 0300 	mov.w	r3, #0
 800a058:	f04f 0400 	mov.w	r4, #0
 800a05c:	0094      	lsls	r4, r2, #2
 800a05e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a062:	008b      	lsls	r3, r1, #2
 800a064:	461a      	mov	r2, r3
 800a066:	4623      	mov	r3, r4
 800a068:	4628      	mov	r0, r5
 800a06a:	4631      	mov	r1, r6
 800a06c:	f7f6 f8c0 	bl	80001f0 <__aeabi_uldivmod>
 800a070:	4603      	mov	r3, r0
 800a072:	460c      	mov	r4, r1
 800a074:	461a      	mov	r2, r3
 800a076:	4b77      	ldr	r3, [pc, #476]	; (800a254 <UART_SetConfig+0x6f4>)
 800a078:	fba3 1302 	umull	r1, r3, r3, r2
 800a07c:	095b      	lsrs	r3, r3, #5
 800a07e:	2164      	movs	r1, #100	; 0x64
 800a080:	fb01 f303 	mul.w	r3, r1, r3
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	3332      	adds	r3, #50	; 0x32
 800a08a:	4a72      	ldr	r2, [pc, #456]	; (800a254 <UART_SetConfig+0x6f4>)
 800a08c:	fba2 2303 	umull	r2, r3, r2, r3
 800a090:	095b      	lsrs	r3, r3, #5
 800a092:	f003 020f 	and.w	r2, r3, #15
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4442      	add	r2, r8
 800a09c:	609a      	str	r2, [r3, #8]
 800a09e:	e0d0      	b.n	800a242 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0a0:	f7fe f8ee 	bl	8008280 <HAL_RCC_GetPCLK1Freq>
 800a0a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	469a      	mov	sl, r3
 800a0aa:	f04f 0b00 	mov.w	fp, #0
 800a0ae:	46d0      	mov	r8, sl
 800a0b0:	46d9      	mov	r9, fp
 800a0b2:	eb18 0308 	adds.w	r3, r8, r8
 800a0b6:	eb49 0409 	adc.w	r4, r9, r9
 800a0ba:	4698      	mov	r8, r3
 800a0bc:	46a1      	mov	r9, r4
 800a0be:	eb18 080a 	adds.w	r8, r8, sl
 800a0c2:	eb49 090b 	adc.w	r9, r9, fp
 800a0c6:	f04f 0100 	mov.w	r1, #0
 800a0ca:	f04f 0200 	mov.w	r2, #0
 800a0ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a0d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a0d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a0da:	4688      	mov	r8, r1
 800a0dc:	4691      	mov	r9, r2
 800a0de:	eb1a 0508 	adds.w	r5, sl, r8
 800a0e2:	eb4b 0609 	adc.w	r6, fp, r9
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	f04f 0200 	mov.w	r2, #0
 800a0f0:	f04f 0300 	mov.w	r3, #0
 800a0f4:	f04f 0400 	mov.w	r4, #0
 800a0f8:	0094      	lsls	r4, r2, #2
 800a0fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a0fe:	008b      	lsls	r3, r1, #2
 800a100:	461a      	mov	r2, r3
 800a102:	4623      	mov	r3, r4
 800a104:	4628      	mov	r0, r5
 800a106:	4631      	mov	r1, r6
 800a108:	f7f6 f872 	bl	80001f0 <__aeabi_uldivmod>
 800a10c:	4603      	mov	r3, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	461a      	mov	r2, r3
 800a112:	4b50      	ldr	r3, [pc, #320]	; (800a254 <UART_SetConfig+0x6f4>)
 800a114:	fba3 2302 	umull	r2, r3, r3, r2
 800a118:	095b      	lsrs	r3, r3, #5
 800a11a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	469b      	mov	fp, r3
 800a122:	f04f 0c00 	mov.w	ip, #0
 800a126:	46d9      	mov	r9, fp
 800a128:	46e2      	mov	sl, ip
 800a12a:	eb19 0309 	adds.w	r3, r9, r9
 800a12e:	eb4a 040a 	adc.w	r4, sl, sl
 800a132:	4699      	mov	r9, r3
 800a134:	46a2      	mov	sl, r4
 800a136:	eb19 090b 	adds.w	r9, r9, fp
 800a13a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a13e:	f04f 0100 	mov.w	r1, #0
 800a142:	f04f 0200 	mov.w	r2, #0
 800a146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a14a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a14e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a152:	4689      	mov	r9, r1
 800a154:	4692      	mov	sl, r2
 800a156:	eb1b 0509 	adds.w	r5, fp, r9
 800a15a:	eb4c 060a 	adc.w	r6, ip, sl
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	4619      	mov	r1, r3
 800a164:	f04f 0200 	mov.w	r2, #0
 800a168:	f04f 0300 	mov.w	r3, #0
 800a16c:	f04f 0400 	mov.w	r4, #0
 800a170:	0094      	lsls	r4, r2, #2
 800a172:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a176:	008b      	lsls	r3, r1, #2
 800a178:	461a      	mov	r2, r3
 800a17a:	4623      	mov	r3, r4
 800a17c:	4628      	mov	r0, r5
 800a17e:	4631      	mov	r1, r6
 800a180:	f7f6 f836 	bl	80001f0 <__aeabi_uldivmod>
 800a184:	4603      	mov	r3, r0
 800a186:	460c      	mov	r4, r1
 800a188:	461a      	mov	r2, r3
 800a18a:	4b32      	ldr	r3, [pc, #200]	; (800a254 <UART_SetConfig+0x6f4>)
 800a18c:	fba3 1302 	umull	r1, r3, r3, r2
 800a190:	095b      	lsrs	r3, r3, #5
 800a192:	2164      	movs	r1, #100	; 0x64
 800a194:	fb01 f303 	mul.w	r3, r1, r3
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	3332      	adds	r3, #50	; 0x32
 800a19e:	4a2d      	ldr	r2, [pc, #180]	; (800a254 <UART_SetConfig+0x6f4>)
 800a1a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a4:	095b      	lsrs	r3, r3, #5
 800a1a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1aa:	4498      	add	r8, r3
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	469b      	mov	fp, r3
 800a1b0:	f04f 0c00 	mov.w	ip, #0
 800a1b4:	46d9      	mov	r9, fp
 800a1b6:	46e2      	mov	sl, ip
 800a1b8:	eb19 0309 	adds.w	r3, r9, r9
 800a1bc:	eb4a 040a 	adc.w	r4, sl, sl
 800a1c0:	4699      	mov	r9, r3
 800a1c2:	46a2      	mov	sl, r4
 800a1c4:	eb19 090b 	adds.w	r9, r9, fp
 800a1c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a1cc:	f04f 0100 	mov.w	r1, #0
 800a1d0:	f04f 0200 	mov.w	r2, #0
 800a1d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a1dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a1e0:	4689      	mov	r9, r1
 800a1e2:	4692      	mov	sl, r2
 800a1e4:	eb1b 0509 	adds.w	r5, fp, r9
 800a1e8:	eb4c 060a 	adc.w	r6, ip, sl
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f04f 0200 	mov.w	r2, #0
 800a1f6:	f04f 0300 	mov.w	r3, #0
 800a1fa:	f04f 0400 	mov.w	r4, #0
 800a1fe:	0094      	lsls	r4, r2, #2
 800a200:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a204:	008b      	lsls	r3, r1, #2
 800a206:	461a      	mov	r2, r3
 800a208:	4623      	mov	r3, r4
 800a20a:	4628      	mov	r0, r5
 800a20c:	4631      	mov	r1, r6
 800a20e:	f7f5 ffef 	bl	80001f0 <__aeabi_uldivmod>
 800a212:	4603      	mov	r3, r0
 800a214:	460c      	mov	r4, r1
 800a216:	461a      	mov	r2, r3
 800a218:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <UART_SetConfig+0x6f4>)
 800a21a:	fba3 1302 	umull	r1, r3, r3, r2
 800a21e:	095b      	lsrs	r3, r3, #5
 800a220:	2164      	movs	r1, #100	; 0x64
 800a222:	fb01 f303 	mul.w	r3, r1, r3
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	011b      	lsls	r3, r3, #4
 800a22a:	3332      	adds	r3, #50	; 0x32
 800a22c:	4a09      	ldr	r2, [pc, #36]	; (800a254 <UART_SetConfig+0x6f4>)
 800a22e:	fba2 2303 	umull	r2, r3, r2, r3
 800a232:	095b      	lsrs	r3, r3, #5
 800a234:	f003 020f 	and.w	r2, r3, #15
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4442      	add	r2, r8
 800a23e:	609a      	str	r2, [r3, #8]
}
 800a240:	e7ff      	b.n	800a242 <UART_SetConfig+0x6e2>
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24c:	40011000 	.word	0x40011000
 800a250:	40011400 	.word	0x40011400
 800a254:	51eb851f 	.word	0x51eb851f

0800a258 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d029      	beq.n	800a2c6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a27e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a282:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a28c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a292:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a298:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a29e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a2a4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a2aa:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a2b0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a2b6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	e034      	b.n	800a330 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2d2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2dc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a2e2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a2f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2fa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a304:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a30a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a310:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a316:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a31c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	4313      	orrs	r3, r2
 800a322:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a33e:	b480      	push	{r7}
 800a340:	b087      	sub	sp, #28
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d02e      	beq.n	800a3b6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a364:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	3b01      	subs	r3, #1
 800a372:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a374:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a37e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	3b01      	subs	r3, #1
 800a386:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a388:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	3b01      	subs	r3, #1
 800a390:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a392:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	3b01      	subs	r3, #1
 800a39a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a39c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	609a      	str	r2, [r3, #8]
 800a3b4:	e03b      	b.n	800a42e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3c6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a3ec:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3fc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	3b01      	subs	r3, #1
 800a404:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a406:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a410:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	3b01      	subs	r3, #1
 800a418:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a41a:	4313      	orrs	r3, r2
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	371c      	adds	r7, #28
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a448:	2300      	movs	r3, #0
 800a44a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a458:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	3b01      	subs	r3, #1
 800a460:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a462:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a46a:	4313      	orrs	r3, r2
 800a46c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a474:	f7f9 fb12 	bl	8003a9c <HAL_GetTick>
 800a478:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a47a:	e010      	b.n	800a49e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d00c      	beq.n	800a49e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d007      	beq.n	800a49a <FMC_SDRAM_SendCommand+0x5e>
 800a48a:	f7f9 fb07 	bl	8003a9c <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	429a      	cmp	r2, r3
 800a498:	d201      	bcs.n	800a49e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e006      	b.n	800a4ac <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b20      	cmp	r3, #32
 800a4a8:	d0e8      	beq.n	800a47c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	695a      	ldr	r2, [r3, #20]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f043 0201 	orr.w	r2, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f023 0201 	bic.w	r2, r3, #1
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
	...

0800a520 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	019b      	lsls	r3, r3, #6
 800a532:	f043 0220 	orr.w	r2, r3, #32
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3301      	adds	r3, #1
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4a09      	ldr	r2, [pc, #36]	; (800a568 <USB_FlushTxFifo+0x48>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d901      	bls.n	800a54c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e006      	b.n	800a55a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b20      	cmp	r3, #32
 800a556:	d0f0      	beq.n	800a53a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	00030d40 	.word	0x00030d40

0800a56c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2210      	movs	r2, #16
 800a57c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3301      	adds	r3, #1
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	4a09      	ldr	r2, [pc, #36]	; (800a5ac <USB_FlushRxFifo+0x40>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d901      	bls.n	800a590 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e006      	b.n	800a59e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	f003 0310 	and.w	r3, r3, #16
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d0f0      	beq.n	800a57e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	00030d40 	.word	0x00030d40

0800a5b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b089      	sub	sp, #36	; 0x24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a5c6:	88fb      	ldrh	r3, [r7, #6]
 800a5c8:	3303      	adds	r3, #3
 800a5ca:	089b      	lsrs	r3, r3, #2
 800a5cc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	e00b      	b.n	800a5ec <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	69ba      	ldr	r2, [r7, #24]
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d3ef      	bcc.n	800a5d4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a5f4:	69fb      	ldr	r3, [r7, #28]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3724      	adds	r7, #36	; 0x24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a602:	b480      	push	{r7}
 800a604:	b085      	sub	sp, #20
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4013      	ands	r3, r2
 800a618:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a61a:	68fb      	ldr	r3, [r7, #12]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	695b      	ldr	r3, [r3, #20]
 800a634:	f003 0301 	and.w	r3, r3, #1
}
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a662:	f023 0303 	bic.w	r3, r3, #3
 800a666:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	f003 0303 	and.w	r3, r3, #3
 800a676:	68f9      	ldr	r1, [r7, #12]
 800a678:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a67c:	4313      	orrs	r3, r2
 800a67e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d107      	bne.n	800a696 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a68c:	461a      	mov	r2, r3
 800a68e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a692:	6053      	str	r3, [r2, #4]
 800a694:	e009      	b.n	800a6aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a696:	78fb      	ldrb	r3, [r7, #3]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d106      	bne.n	800a6aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f241 7370 	movw	r3, #6000	; 0x1770
 800a6a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	b29b      	uxth	r3, r3
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b087      	sub	sp, #28
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	0c9b      	lsrs	r3, r3, #18
 800a702:	f003 0303 	and.w	r3, r3, #3
 800a706:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <USB_HC_Halt+0x3a>
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d16c      	bne.n	800a7ee <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	0151      	lsls	r1, r2, #5
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	440a      	add	r2, r1
 800a72a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a72e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a732:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d143      	bne.n	800a7c8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	4413      	add	r3, r2
 800a748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	0151      	lsls	r1, r2, #5
 800a752:	693a      	ldr	r2, [r7, #16]
 800a754:	440a      	add	r2, r1
 800a756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a75a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a75e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	4413      	add	r3, r2
 800a768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	0151      	lsls	r1, r2, #5
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	440a      	add	r2, r1
 800a776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a77a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a77e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	4413      	add	r3, r2
 800a788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	0151      	lsls	r1, r2, #5
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	440a      	add	r2, r1
 800a796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a79a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a79e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	617b      	str	r3, [r7, #20]
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7ac:	d81d      	bhi.n	800a7ea <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7c4:	d0ec      	beq.n	800a7a0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a7c6:	e080      	b.n	800a8ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	0151      	lsls	r1, r2, #5
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	440a      	add	r2, r1
 800a7de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7e6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a7e8:	e06f      	b.n	800a8ca <USB_HC_Halt+0x1f0>
          break;
 800a7ea:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a7ec:	e06d      	b.n	800a8ca <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	0151      	lsls	r1, r2, #5
 800a800:	693a      	ldr	r2, [r7, #16]
 800a802:	440a      	add	r2, r1
 800a804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a80c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d143      	bne.n	800a8a6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	015a      	lsls	r2, r3, #5
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	4413      	add	r3, r2
 800a826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	0151      	lsls	r1, r2, #5
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	440a      	add	r2, r1
 800a834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a83c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	4413      	add	r3, r2
 800a846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	0151      	lsls	r1, r2, #5
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	440a      	add	r2, r1
 800a854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a85c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	4413      	add	r3, r2
 800a866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	0151      	lsls	r1, r2, #5
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	440a      	add	r2, r1
 800a874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a878:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a87c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	3301      	adds	r3, #1
 800a882:	617b      	str	r3, [r7, #20]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a88a:	d81d      	bhi.n	800a8c8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	4413      	add	r3, r2
 800a894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a89e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8a2:	d0ec      	beq.n	800a87e <USB_HC_Halt+0x1a4>
 800a8a4:	e011      	b.n	800a8ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	0151      	lsls	r1, r2, #5
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	e000      	b.n	800a8ca <USB_HC_Halt+0x1f0>
          break;
 800a8c8:	bf00      	nop
    }
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	371c      	adds	r7, #28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff fe07 	bl	800a4fc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a8ee:	2110      	movs	r1, #16
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff fe15 	bl	800a520 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff fe38 	bl	800a56c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	613b      	str	r3, [r7, #16]
 800a900:	e01f      	b.n	800a942 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a918:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a920:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a928:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4413      	add	r3, r2
 800a932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a936:	461a      	mov	r2, r3
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	3301      	adds	r3, #1
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b0f      	cmp	r3, #15
 800a946:	d9dc      	bls.n	800a902 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a948:	2300      	movs	r3, #0
 800a94a:	613b      	str	r3, [r7, #16]
 800a94c:	e034      	b.n	800a9b8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	4413      	add	r3, r2
 800a956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a964:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a96c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a974:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	015a      	lsls	r2, r3, #5
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4413      	add	r3, r2
 800a97e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a982:	461a      	mov	r2, r3
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	3301      	adds	r3, #1
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a994:	d80c      	bhi.n	800a9b0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9ac:	d0ec      	beq.n	800a988 <USB_StopHost+0xb0>
 800a9ae:	e000      	b.n	800a9b2 <USB_StopHost+0xda>
        break;
 800a9b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	613b      	str	r3, [r7, #16]
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	2b0f      	cmp	r3, #15
 800a9bc:	d9c7      	bls.n	800a94e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff fd80 	bl	800a4da <USB_EnableGlobalInt>

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f804 	bl	800aa08 <USBH_HandleSof>
}
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b0b      	cmp	r3, #11
 800aa18:	d10a      	bne.n	800aa30 <USBH_HandleSof+0x28>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d005      	beq.n	800aa30 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	4798      	blx	r3
  }
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	4619      	mov	r1, r3
 800aa60:	f000 f8ae 	bl	800abc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800aa64:	bf00      	nop
}
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aa7c:	bf00      	nop
}
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aabc:	2200      	movs	r2, #0
 800aabe:	4619      	mov	r1, r3
 800aac0:	f000 f87e 	bl	800abc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f001 f900 	bl	800bcf4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	791b      	ldrb	r3, [r3, #4]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f830 	bl	800ab60 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	795b      	ldrb	r3, [r3, #5]
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f82a 	bl	800ab60 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab20:	2200      	movs	r2, #0
 800ab22:	4619      	mov	r1, r3
 800ab24:	f000 f84c 	bl	800abc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b082      	sub	sp, #8
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4619      	mov	r1, r3
 800ab52:	f000 f835 	bl	800abc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	2b0a      	cmp	r3, #10
 800ab70:	d80d      	bhi.n	800ab8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	33e0      	adds	r3, #224	; 0xe0
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	78fb      	ldrb	r3, [r7, #3]
 800ab80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	33e0      	adds	r3, #224	; 0xe0
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	440b      	add	r3, r1
 800ab8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aba2:	f3ef 8305 	mrs	r3, IPSR
 800aba6:	607b      	str	r3, [r7, #4]
  return(result);
 800aba8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800abaa:	2b00      	cmp	r3, #0
 800abac:	bf14      	ite	ne
 800abae:	2301      	movne	r3, #1
 800abb0:	2300      	moveq	r3, #0
 800abb2:	b2db      	uxtb	r3, r3
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800abcc:	2300      	movs	r3, #0
 800abce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d101      	bne.n	800abde <osMessagePut+0x1e>
    ticks = 1;
 800abda:	2301      	movs	r3, #1
 800abdc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800abde:	f7ff ffdd 	bl	800ab9c <inHandlerMode>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d018      	beq.n	800ac1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800abe8:	f107 0210 	add.w	r2, r7, #16
 800abec:	f107 0108 	add.w	r1, r7, #8
 800abf0:	2300      	movs	r3, #0
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 f9a6 	bl	800af44 <xQueueGenericSendFromISR>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d001      	beq.n	800ac02 <osMessagePut+0x42>
      return osErrorOS;
 800abfe:	23ff      	movs	r3, #255	; 0xff
 800ac00:	e018      	b.n	800ac34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d014      	beq.n	800ac32 <osMessagePut+0x72>
 800ac08:	4b0c      	ldr	r3, [pc, #48]	; (800ac3c <osMessagePut+0x7c>)
 800ac0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac0e:	601a      	str	r2, [r3, #0]
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	e00b      	b.n	800ac32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ac1a:	f107 0108 	add.w	r1, r7, #8
 800ac1e:	2300      	movs	r3, #0
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f000 f894 	bl	800ad50 <xQueueGenericSend>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d001      	beq.n	800ac32 <osMessagePut+0x72>
      return osErrorOS;
 800ac2e:	23ff      	movs	r3, #255	; 0xff
 800ac30:	e000      	b.n	800ac34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3718      	adds	r7, #24
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	e000ed04 	.word	0xe000ed04

0800ac40 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	689a      	ldr	r2, [r3, #8]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	601a      	str	r2, [r3, #0]
}
 800ac7c:	bf00      	nop
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9e:	d103      	bne.n	800aca8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	e00c      	b.n	800acc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3308      	adds	r3, #8
 800acac:	60fb      	str	r3, [r7, #12]
 800acae:	e002      	b.n	800acb6 <vListInsert+0x2e>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	60fb      	str	r3, [r7, #12]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d2f6      	bcs.n	800acb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	601a      	str	r2, [r3, #0]
}
 800acee:	bf00      	nop
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800acfa:	b480      	push	{r7}
 800acfc:	b085      	sub	sp, #20
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	6892      	ldr	r2, [r2, #8]
 800ad10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	6852      	ldr	r2, [r2, #4]
 800ad1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d103      	bne.n	800ad2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689a      	ldr	r2, [r3, #8]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	1e5a      	subs	r2, r3, #1
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
	...

0800ad50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08e      	sub	sp, #56	; 0x38
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d109      	bne.n	800ad80 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad7e:	e7fe      	b.n	800ad7e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d103      	bne.n	800ad8e <xQueueGenericSend+0x3e>
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <xQueueGenericSend+0x42>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e000      	b.n	800ad94 <xQueueGenericSend+0x44>
 800ad92:	2300      	movs	r3, #0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d109      	bne.n	800adac <xQueueGenericSend+0x5c>
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	627b      	str	r3, [r7, #36]	; 0x24
 800adaa:	e7fe      	b.n	800adaa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d103      	bne.n	800adba <xQueueGenericSend+0x6a>
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d101      	bne.n	800adbe <xQueueGenericSend+0x6e>
 800adba:	2301      	movs	r3, #1
 800adbc:	e000      	b.n	800adc0 <xQueueGenericSend+0x70>
 800adbe:	2300      	movs	r3, #0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d109      	bne.n	800add8 <xQueueGenericSend+0x88>
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	623b      	str	r3, [r7, #32]
 800add6:	e7fe      	b.n	800add6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800add8:	f000 fd26 	bl	800b828 <xTaskGetSchedulerState>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <xQueueGenericSend+0x98>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <xQueueGenericSend+0x9c>
 800ade8:	2301      	movs	r3, #1
 800adea:	e000      	b.n	800adee <xQueueGenericSend+0x9e>
 800adec:	2300      	movs	r3, #0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d109      	bne.n	800ae06 <xQueueGenericSend+0xb6>
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	61fb      	str	r3, [r7, #28]
 800ae04:	e7fe      	b.n	800ae04 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae06:	f000 fe2f 	bl	800ba68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d302      	bcc.n	800ae1c <xQueueGenericSend+0xcc>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d129      	bne.n	800ae70 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae22:	f000 f923 	bl	800b06c <prvCopyDataToQueue>
 800ae26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	3324      	adds	r3, #36	; 0x24
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 fbf3 	bl	800b620 <xTaskRemoveFromEventList>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d013      	beq.n	800ae68 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae40:	4b3f      	ldr	r3, [pc, #252]	; (800af40 <xQueueGenericSend+0x1f0>)
 800ae42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	e00a      	b.n	800ae68 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d007      	beq.n	800ae68 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae58:	4b39      	ldr	r3, [pc, #228]	; (800af40 <xQueueGenericSend+0x1f0>)
 800ae5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae68:	f000 fe2c 	bl	800bac4 <vPortExitCritical>
				return pdPASS;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e063      	b.n	800af38 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d103      	bne.n	800ae7e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae76:	f000 fe25 	bl	800bac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e05c      	b.n	800af38 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d106      	bne.n	800ae92 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae84:	f107 0314 	add.w	r3, r7, #20
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 fc2b 	bl	800b6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae92:	f000 fe17 	bl	800bac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae96:	f000 f9bd 	bl	800b214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae9a:	f000 fde5 	bl	800ba68 <vPortEnterCritical>
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aea4:	b25b      	sxtb	r3, r3
 800aea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeaa:	d103      	bne.n	800aeb4 <xQueueGenericSend+0x164>
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeba:	b25b      	sxtb	r3, r3
 800aebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec0:	d103      	bne.n	800aeca <xQueueGenericSend+0x17a>
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeca:	f000 fdfb 	bl	800bac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aece:	1d3a      	adds	r2, r7, #4
 800aed0:	f107 0314 	add.w	r3, r7, #20
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 fc1a 	bl	800b710 <xTaskCheckForTimeOut>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d124      	bne.n	800af2c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aee4:	f000 f97e 	bl	800b1e4 <prvIsQueueFull>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d018      	beq.n	800af20 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	3310      	adds	r3, #16
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	4611      	mov	r1, r2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fb6e 	bl	800b5d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aefc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefe:	f000 f91f 	bl	800b140 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af02:	f000 f995 	bl	800b230 <xTaskResumeAll>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f47f af7c 	bne.w	800ae06 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800af0e:	4b0c      	ldr	r3, [pc, #48]	; (800af40 <xQueueGenericSend+0x1f0>)
 800af10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	e772      	b.n	800ae06 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af22:	f000 f90d 	bl	800b140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af26:	f000 f983 	bl	800b230 <xTaskResumeAll>
 800af2a:	e76c      	b.n	800ae06 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af2e:	f000 f907 	bl	800b140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af32:	f000 f97d 	bl	800b230 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3738      	adds	r7, #56	; 0x38
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	e000ed04 	.word	0xe000ed04

0800af44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08e      	sub	sp, #56	; 0x38
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <xQueueGenericSendFromISR+0x2c>
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
 800af6e:	e7fe      	b.n	800af6e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d103      	bne.n	800af7e <xQueueGenericSendFromISR+0x3a>
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <xQueueGenericSendFromISR+0x3e>
 800af7e:	2301      	movs	r3, #1
 800af80:	e000      	b.n	800af84 <xQueueGenericSendFromISR+0x40>
 800af82:	2300      	movs	r3, #0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d109      	bne.n	800af9c <xQueueGenericSendFromISR+0x58>
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	623b      	str	r3, [r7, #32]
 800af9a:	e7fe      	b.n	800af9a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d103      	bne.n	800afaa <xQueueGenericSendFromISR+0x66>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d101      	bne.n	800afae <xQueueGenericSendFromISR+0x6a>
 800afaa:	2301      	movs	r3, #1
 800afac:	e000      	b.n	800afb0 <xQueueGenericSendFromISR+0x6c>
 800afae:	2300      	movs	r3, #0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d109      	bne.n	800afc8 <xQueueGenericSendFromISR+0x84>
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	61fb      	str	r3, [r7, #28]
 800afc6:	e7fe      	b.n	800afc6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afc8:	f000 fdfe 	bl	800bbc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afcc:	f3ef 8211 	mrs	r2, BASEPRI
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	61ba      	str	r2, [r7, #24]
 800afe2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afe4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d302      	bcc.n	800affa <xQueueGenericSendFromISR+0xb6>
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d12c      	bne.n	800b054 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b00a:	f000 f82f 	bl	800b06c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b00e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b016:	d112      	bne.n	800b03e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d016      	beq.n	800b04e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	3324      	adds	r3, #36	; 0x24
 800b024:	4618      	mov	r0, r3
 800b026:	f000 fafb 	bl	800b620 <xTaskRemoveFromEventList>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00e      	beq.n	800b04e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00b      	beq.n	800b04e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	e007      	b.n	800b04e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b03e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b042:	3301      	adds	r3, #1
 800b044:	b2db      	uxtb	r3, r3
 800b046:	b25a      	sxtb	r2, r3
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b04e:	2301      	movs	r3, #1
 800b050:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b052:	e001      	b.n	800b058 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b054:	2300      	movs	r3, #0
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
 800b058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b064:	4618      	mov	r0, r3
 800b066:	3738      	adds	r7, #56	; 0x38
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b086      	sub	sp, #24
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b078:	2300      	movs	r3, #0
 800b07a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b080:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10d      	bne.n	800b0a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d14d      	bne.n	800b12e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	4618      	mov	r0, r3
 800b098:	f000 fbe4 	bl	800b864 <xTaskPriorityDisinherit>
 800b09c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	609a      	str	r2, [r3, #8]
 800b0a4:	e043      	b.n	800b12e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d119      	bne.n	800b0e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6858      	ldr	r0, [r3, #4]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	68b9      	ldr	r1, [r7, #8]
 800b0b8:	f000 fe9e 	bl	800bdf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c4:	441a      	add	r2, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d32b      	bcc.n	800b12e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	605a      	str	r2, [r3, #4]
 800b0de:	e026      	b.n	800b12e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	68d8      	ldr	r0, [r3, #12]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	68b9      	ldr	r1, [r7, #8]
 800b0ec:	f000 fe84 	bl	800bdf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	68da      	ldr	r2, [r3, #12]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f8:	425b      	negs	r3, r3
 800b0fa:	441a      	add	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	68da      	ldr	r2, [r3, #12]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d207      	bcs.n	800b11c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	689a      	ldr	r2, [r3, #8]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b114:	425b      	negs	r3, r3
 800b116:	441a      	add	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d105      	bne.n	800b12e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b136:	697b      	ldr	r3, [r7, #20]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b148:	f000 fc8e 	bl	800ba68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b152:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b154:	e011      	b.n	800b17a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d012      	beq.n	800b184 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3324      	adds	r3, #36	; 0x24
 800b162:	4618      	mov	r0, r3
 800b164:	f000 fa5c 	bl	800b620 <xTaskRemoveFromEventList>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b16e:	f000 fb2f 	bl	800b7d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	3b01      	subs	r3, #1
 800b176:	b2db      	uxtb	r3, r3
 800b178:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dce9      	bgt.n	800b156 <prvUnlockQueue+0x16>
 800b182:	e000      	b.n	800b186 <prvUnlockQueue+0x46>
					break;
 800b184:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	22ff      	movs	r2, #255	; 0xff
 800b18a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b18e:	f000 fc99 	bl	800bac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b192:	f000 fc69 	bl	800ba68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b19c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b19e:	e011      	b.n	800b1c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d012      	beq.n	800b1ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	3310      	adds	r3, #16
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 fa37 	bl	800b620 <xTaskRemoveFromEventList>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1b8:	f000 fb0a 	bl	800b7d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	dce9      	bgt.n	800b1a0 <prvUnlockQueue+0x60>
 800b1cc:	e000      	b.n	800b1d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	22ff      	movs	r2, #255	; 0xff
 800b1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1d8:	f000 fc74 	bl	800bac4 <vPortExitCritical>
}
 800b1dc:	bf00      	nop
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1ec:	f000 fc3c 	bl	800ba68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d102      	bne.n	800b202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	60fb      	str	r3, [r7, #12]
 800b200:	e001      	b.n	800b206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b206:	f000 fc5d 	bl	800bac4 <vPortExitCritical>

	return xReturn;
 800b20a:	68fb      	ldr	r3, [r7, #12]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b214:	b480      	push	{r7}
 800b216:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b218:	4b04      	ldr	r3, [pc, #16]	; (800b22c <vTaskSuspendAll+0x18>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3301      	adds	r3, #1
 800b21e:	4a03      	ldr	r2, [pc, #12]	; (800b22c <vTaskSuspendAll+0x18>)
 800b220:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b222:	bf00      	nop
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	200003a8 	.word	0x200003a8

0800b230 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b23e:	4b41      	ldr	r3, [pc, #260]	; (800b344 <xTaskResumeAll+0x114>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d109      	bne.n	800b25a <xTaskResumeAll+0x2a>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	e7fe      	b.n	800b258 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b25a:	f000 fc05 	bl	800ba68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b25e:	4b39      	ldr	r3, [pc, #228]	; (800b344 <xTaskResumeAll+0x114>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3b01      	subs	r3, #1
 800b264:	4a37      	ldr	r2, [pc, #220]	; (800b344 <xTaskResumeAll+0x114>)
 800b266:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b268:	4b36      	ldr	r3, [pc, #216]	; (800b344 <xTaskResumeAll+0x114>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d161      	bne.n	800b334 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b270:	4b35      	ldr	r3, [pc, #212]	; (800b348 <xTaskResumeAll+0x118>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d05d      	beq.n	800b334 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b278:	e02e      	b.n	800b2d8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b27a:	4b34      	ldr	r3, [pc, #208]	; (800b34c <xTaskResumeAll+0x11c>)
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3318      	adds	r3, #24
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fd37 	bl	800acfa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3304      	adds	r3, #4
 800b290:	4618      	mov	r0, r3
 800b292:	f7ff fd32 	bl	800acfa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29a:	2201      	movs	r2, #1
 800b29c:	409a      	lsls	r2, r3
 800b29e:	4b2c      	ldr	r3, [pc, #176]	; (800b350 <xTaskResumeAll+0x120>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	4a2a      	ldr	r2, [pc, #168]	; (800b350 <xTaskResumeAll+0x120>)
 800b2a6:	6013      	str	r3, [r2, #0]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4a27      	ldr	r2, [pc, #156]	; (800b354 <xTaskResumeAll+0x124>)
 800b2b6:	441a      	add	r2, r3
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	4619      	mov	r1, r3
 800b2be:	4610      	mov	r0, r2
 800b2c0:	f7ff fcbe 	bl	800ac40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c8:	4b23      	ldr	r3, [pc, #140]	; (800b358 <xTaskResumeAll+0x128>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d302      	bcc.n	800b2d8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b2d2:	4b22      	ldr	r3, [pc, #136]	; (800b35c <xTaskResumeAll+0x12c>)
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2d8:	4b1c      	ldr	r3, [pc, #112]	; (800b34c <xTaskResumeAll+0x11c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1cc      	bne.n	800b27a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2e6:	f000 fa7f 	bl	800b7e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b2ea:	4b1d      	ldr	r3, [pc, #116]	; (800b360 <xTaskResumeAll+0x130>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d010      	beq.n	800b318 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2f6:	f000 f837 	bl	800b368 <xTaskIncrementTick>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b300:	4b16      	ldr	r3, [pc, #88]	; (800b35c <xTaskResumeAll+0x12c>)
 800b302:	2201      	movs	r2, #1
 800b304:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3b01      	subs	r3, #1
 800b30a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1f1      	bne.n	800b2f6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b312:	4b13      	ldr	r3, [pc, #76]	; (800b360 <xTaskResumeAll+0x130>)
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b318:	4b10      	ldr	r3, [pc, #64]	; (800b35c <xTaskResumeAll+0x12c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d009      	beq.n	800b334 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b320:	2301      	movs	r3, #1
 800b322:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b324:	4b0f      	ldr	r3, [pc, #60]	; (800b364 <xTaskResumeAll+0x134>)
 800b326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b32a:	601a      	str	r2, [r3, #0]
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b334:	f000 fbc6 	bl	800bac4 <vPortExitCritical>

	return xAlreadyYielded;
 800b338:	68bb      	ldr	r3, [r7, #8]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	200003a8 	.word	0x200003a8
 800b348:	20000388 	.word	0x20000388
 800b34c:	20000360 	.word	0x20000360
 800b350:	20000390 	.word	0x20000390
 800b354:	200002cc 	.word	0x200002cc
 800b358:	200002c8 	.word	0x200002c8
 800b35c:	2000039c 	.word	0x2000039c
 800b360:	20000398 	.word	0x20000398
 800b364:	e000ed04 	.word	0xe000ed04

0800b368 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b36e:	2300      	movs	r3, #0
 800b370:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b372:	4b4e      	ldr	r3, [pc, #312]	; (800b4ac <xTaskIncrementTick+0x144>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	f040 8087 	bne.w	800b48a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b37c:	4b4c      	ldr	r3, [pc, #304]	; (800b4b0 <xTaskIncrementTick+0x148>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3301      	adds	r3, #1
 800b382:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b384:	4a4a      	ldr	r2, [pc, #296]	; (800b4b0 <xTaskIncrementTick+0x148>)
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d11f      	bne.n	800b3d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b390:	4b48      	ldr	r3, [pc, #288]	; (800b4b4 <xTaskIncrementTick+0x14c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d009      	beq.n	800b3ae <xTaskIncrementTick+0x46>
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	603b      	str	r3, [r7, #0]
 800b3ac:	e7fe      	b.n	800b3ac <xTaskIncrementTick+0x44>
 800b3ae:	4b41      	ldr	r3, [pc, #260]	; (800b4b4 <xTaskIncrementTick+0x14c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	60fb      	str	r3, [r7, #12]
 800b3b4:	4b40      	ldr	r3, [pc, #256]	; (800b4b8 <xTaskIncrementTick+0x150>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a3e      	ldr	r2, [pc, #248]	; (800b4b4 <xTaskIncrementTick+0x14c>)
 800b3ba:	6013      	str	r3, [r2, #0]
 800b3bc:	4a3e      	ldr	r2, [pc, #248]	; (800b4b8 <xTaskIncrementTick+0x150>)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	4b3e      	ldr	r3, [pc, #248]	; (800b4bc <xTaskIncrementTick+0x154>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	4a3c      	ldr	r2, [pc, #240]	; (800b4bc <xTaskIncrementTick+0x154>)
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	f000 fa0c 	bl	800b7e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3d0:	4b3b      	ldr	r3, [pc, #236]	; (800b4c0 <xTaskIncrementTick+0x158>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d348      	bcc.n	800b46c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3da:	4b36      	ldr	r3, [pc, #216]	; (800b4b4 <xTaskIncrementTick+0x14c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d104      	bne.n	800b3ee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3e4:	4b36      	ldr	r3, [pc, #216]	; (800b4c0 <xTaskIncrementTick+0x158>)
 800b3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ea:	601a      	str	r2, [r3, #0]
					break;
 800b3ec:	e03e      	b.n	800b46c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ee:	4b31      	ldr	r3, [pc, #196]	; (800b4b4 <xTaskIncrementTick+0x14c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	429a      	cmp	r2, r3
 800b404:	d203      	bcs.n	800b40e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b406:	4a2e      	ldr	r2, [pc, #184]	; (800b4c0 <xTaskIncrementTick+0x158>)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b40c:	e02e      	b.n	800b46c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	3304      	adds	r3, #4
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff fc71 	bl	800acfa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d004      	beq.n	800b42a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	3318      	adds	r3, #24
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fc68 	bl	800acfa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42e:	2201      	movs	r2, #1
 800b430:	409a      	lsls	r2, r3
 800b432:	4b24      	ldr	r3, [pc, #144]	; (800b4c4 <xTaskIncrementTick+0x15c>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4313      	orrs	r3, r2
 800b438:	4a22      	ldr	r2, [pc, #136]	; (800b4c4 <xTaskIncrementTick+0x15c>)
 800b43a:	6013      	str	r3, [r2, #0]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b440:	4613      	mov	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4a1f      	ldr	r2, [pc, #124]	; (800b4c8 <xTaskIncrementTick+0x160>)
 800b44a:	441a      	add	r2, r3
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	3304      	adds	r3, #4
 800b450:	4619      	mov	r1, r3
 800b452:	4610      	mov	r0, r2
 800b454:	f7ff fbf4 	bl	800ac40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45c:	4b1b      	ldr	r3, [pc, #108]	; (800b4cc <xTaskIncrementTick+0x164>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b462:	429a      	cmp	r2, r3
 800b464:	d3b9      	bcc.n	800b3da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b466:	2301      	movs	r3, #1
 800b468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b46a:	e7b6      	b.n	800b3da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b46c:	4b17      	ldr	r3, [pc, #92]	; (800b4cc <xTaskIncrementTick+0x164>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b472:	4915      	ldr	r1, [pc, #84]	; (800b4c8 <xTaskIncrementTick+0x160>)
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	440b      	add	r3, r1
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d907      	bls.n	800b494 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b484:	2301      	movs	r3, #1
 800b486:	617b      	str	r3, [r7, #20]
 800b488:	e004      	b.n	800b494 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b48a:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <xTaskIncrementTick+0x168>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	3301      	adds	r3, #1
 800b490:	4a0f      	ldr	r2, [pc, #60]	; (800b4d0 <xTaskIncrementTick+0x168>)
 800b492:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b494:	4b0f      	ldr	r3, [pc, #60]	; (800b4d4 <xTaskIncrementTick+0x16c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b49c:	2301      	movs	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b4a0:	697b      	ldr	r3, [r7, #20]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	200003a8 	.word	0x200003a8
 800b4b0:	2000038c 	.word	0x2000038c
 800b4b4:	20000358 	.word	0x20000358
 800b4b8:	2000035c 	.word	0x2000035c
 800b4bc:	200003a0 	.word	0x200003a0
 800b4c0:	200003a4 	.word	0x200003a4
 800b4c4:	20000390 	.word	0x20000390
 800b4c8:	200002cc 	.word	0x200002cc
 800b4cc:	200002c8 	.word	0x200002c8
 800b4d0:	20000398 	.word	0x20000398
 800b4d4:	2000039c 	.word	0x2000039c

0800b4d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b088      	sub	sp, #32
 800b4dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4de:	4b39      	ldr	r3, [pc, #228]	; (800b5c4 <vTaskSwitchContext+0xec>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d003      	beq.n	800b4ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4e6:	4b38      	ldr	r3, [pc, #224]	; (800b5c8 <vTaskSwitchContext+0xf0>)
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4ec:	e065      	b.n	800b5ba <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800b4ee:	4b36      	ldr	r3, [pc, #216]	; (800b5c8 <vTaskSwitchContext+0xf0>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b4f4:	4b35      	ldr	r3, [pc, #212]	; (800b5cc <vTaskSwitchContext+0xf4>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fa:	61fb      	str	r3, [r7, #28]
 800b4fc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b500:	61bb      	str	r3, [r7, #24]
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	69ba      	ldr	r2, [r7, #24]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d111      	bne.n	800b530 <vTaskSwitchContext+0x58>
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	3304      	adds	r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	429a      	cmp	r2, r3
 800b516:	d10b      	bne.n	800b530 <vTaskSwitchContext+0x58>
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	3308      	adds	r3, #8
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	429a      	cmp	r2, r3
 800b522:	d105      	bne.n	800b530 <vTaskSwitchContext+0x58>
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	330c      	adds	r3, #12
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d008      	beq.n	800b542 <vTaskSwitchContext+0x6a>
 800b530:	4b26      	ldr	r3, [pc, #152]	; (800b5cc <vTaskSwitchContext+0xf4>)
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	4b25      	ldr	r3, [pc, #148]	; (800b5cc <vTaskSwitchContext+0xf4>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3334      	adds	r3, #52	; 0x34
 800b53a:	4619      	mov	r1, r3
 800b53c:	4610      	mov	r0, r2
 800b53e:	f7f5 fa97 	bl	8000a70 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b542:	4b23      	ldr	r3, [pc, #140]	; (800b5d0 <vTaskSwitchContext+0xf8>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	fab3 f383 	clz	r3, r3
 800b54e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b550:	7afb      	ldrb	r3, [r7, #11]
 800b552:	f1c3 031f 	rsb	r3, r3, #31
 800b556:	617b      	str	r3, [r7, #20]
 800b558:	491e      	ldr	r1, [pc, #120]	; (800b5d4 <vTaskSwitchContext+0xfc>)
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	440b      	add	r3, r1
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d109      	bne.n	800b580 <vTaskSwitchContext+0xa8>
	__asm volatile
 800b56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b570:	f383 8811 	msr	BASEPRI, r3
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	607b      	str	r3, [r7, #4]
 800b57e:	e7fe      	b.n	800b57e <vTaskSwitchContext+0xa6>
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	4613      	mov	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	4a12      	ldr	r2, [pc, #72]	; (800b5d4 <vTaskSwitchContext+0xfc>)
 800b58c:	4413      	add	r3, r2
 800b58e:	613b      	str	r3, [r7, #16]
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	605a      	str	r2, [r3, #4]
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d104      	bne.n	800b5b0 <vTaskSwitchContext+0xd8>
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	605a      	str	r2, [r3, #4]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	4a05      	ldr	r2, [pc, #20]	; (800b5cc <vTaskSwitchContext+0xf4>)
 800b5b8:	6013      	str	r3, [r2, #0]
}
 800b5ba:	bf00      	nop
 800b5bc:	3720      	adds	r7, #32
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	200003a8 	.word	0x200003a8
 800b5c8:	2000039c 	.word	0x2000039c
 800b5cc:	200002c8 	.word	0x200002c8
 800b5d0:	20000390 	.word	0x20000390
 800b5d4:	200002cc 	.word	0x200002cc

0800b5d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d109      	bne.n	800b5fc <vTaskPlaceOnEventList+0x24>
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e7fe      	b.n	800b5fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5fc:	4b07      	ldr	r3, [pc, #28]	; (800b61c <vTaskPlaceOnEventList+0x44>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3318      	adds	r3, #24
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7ff fb3f 	bl	800ac88 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b60a:	2101      	movs	r1, #1
 800b60c:	6838      	ldr	r0, [r7, #0]
 800b60e:	f000 f9ad 	bl	800b96c <prvAddCurrentTaskToDelayedList>
}
 800b612:	bf00      	nop
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	200002c8 	.word	0x200002c8

0800b620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d109      	bne.n	800b64a <xTaskRemoveFromEventList+0x2a>
 800b636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	e7fe      	b.n	800b648 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	3318      	adds	r3, #24
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff fb53 	bl	800acfa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b654:	4b1d      	ldr	r3, [pc, #116]	; (800b6cc <xTaskRemoveFromEventList+0xac>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d11c      	bne.n	800b696 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	3304      	adds	r3, #4
 800b660:	4618      	mov	r0, r3
 800b662:	f7ff fb4a 	bl	800acfa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66a:	2201      	movs	r2, #1
 800b66c:	409a      	lsls	r2, r3
 800b66e:	4b18      	ldr	r3, [pc, #96]	; (800b6d0 <xTaskRemoveFromEventList+0xb0>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4313      	orrs	r3, r2
 800b674:	4a16      	ldr	r2, [pc, #88]	; (800b6d0 <xTaskRemoveFromEventList+0xb0>)
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4a13      	ldr	r2, [pc, #76]	; (800b6d4 <xTaskRemoveFromEventList+0xb4>)
 800b686:	441a      	add	r2, r3
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	3304      	adds	r3, #4
 800b68c:	4619      	mov	r1, r3
 800b68e:	4610      	mov	r0, r2
 800b690:	f7ff fad6 	bl	800ac40 <vListInsertEnd>
 800b694:	e005      	b.n	800b6a2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	3318      	adds	r3, #24
 800b69a:	4619      	mov	r1, r3
 800b69c:	480e      	ldr	r0, [pc, #56]	; (800b6d8 <xTaskRemoveFromEventList+0xb8>)
 800b69e:	f7ff facf 	bl	800ac40 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a6:	4b0d      	ldr	r3, [pc, #52]	; (800b6dc <xTaskRemoveFromEventList+0xbc>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d905      	bls.n	800b6bc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <xTaskRemoveFromEventList+0xc0>)
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	e001      	b.n	800b6c0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6c0:	697b      	ldr	r3, [r7, #20]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3718      	adds	r7, #24
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	200003a8 	.word	0x200003a8
 800b6d0:	20000390 	.word	0x20000390
 800b6d4:	200002cc 	.word	0x200002cc
 800b6d8:	20000360 	.word	0x20000360
 800b6dc:	200002c8 	.word	0x200002c8
 800b6e0:	2000039c 	.word	0x2000039c

0800b6e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6ec:	4b06      	ldr	r3, [pc, #24]	; (800b708 <vTaskInternalSetTimeOutState+0x24>)
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6f4:	4b05      	ldr	r3, [pc, #20]	; (800b70c <vTaskInternalSetTimeOutState+0x28>)
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	605a      	str	r2, [r3, #4]
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	200003a0 	.word	0x200003a0
 800b70c:	2000038c 	.word	0x2000038c

0800b710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <xTaskCheckForTimeOut+0x24>
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	613b      	str	r3, [r7, #16]
 800b732:	e7fe      	b.n	800b732 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <xTaskCheckForTimeOut+0x3e>
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	e7fe      	b.n	800b74c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b74e:	f000 f98b 	bl	800ba68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b752:	4b1d      	ldr	r3, [pc, #116]	; (800b7c8 <xTaskCheckForTimeOut+0xb8>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76a:	d102      	bne.n	800b772 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	61fb      	str	r3, [r7, #28]
 800b770:	e023      	b.n	800b7ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	4b15      	ldr	r3, [pc, #84]	; (800b7cc <xTaskCheckForTimeOut+0xbc>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d007      	beq.n	800b78e <xTaskCheckForTimeOut+0x7e>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	69ba      	ldr	r2, [r7, #24]
 800b784:	429a      	cmp	r2, r3
 800b786:	d302      	bcc.n	800b78e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b788:	2301      	movs	r3, #1
 800b78a:	61fb      	str	r3, [r7, #28]
 800b78c:	e015      	b.n	800b7ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	429a      	cmp	r2, r3
 800b796:	d20b      	bcs.n	800b7b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	1ad2      	subs	r2, r2, r3
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff ff9d 	bl	800b6e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	61fb      	str	r3, [r7, #28]
 800b7ae:	e004      	b.n	800b7ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7ba:	f000 f983 	bl	800bac4 <vPortExitCritical>

	return xReturn;
 800b7be:	69fb      	ldr	r3, [r7, #28]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3720      	adds	r7, #32
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	2000038c 	.word	0x2000038c
 800b7cc:	200003a0 	.word	0x200003a0

0800b7d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7d4:	4b03      	ldr	r3, [pc, #12]	; (800b7e4 <vTaskMissedYield+0x14>)
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	601a      	str	r2, [r3, #0]
}
 800b7da:	bf00      	nop
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	2000039c 	.word	0x2000039c

0800b7e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7ee:	4b0c      	ldr	r3, [pc, #48]	; (800b820 <prvResetNextTaskUnblockTime+0x38>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d104      	bne.n	800b802 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7f8:	4b0a      	ldr	r3, [pc, #40]	; (800b824 <prvResetNextTaskUnblockTime+0x3c>)
 800b7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b800:	e008      	b.n	800b814 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b802:	4b07      	ldr	r3, [pc, #28]	; (800b820 <prvResetNextTaskUnblockTime+0x38>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	4a04      	ldr	r2, [pc, #16]	; (800b824 <prvResetNextTaskUnblockTime+0x3c>)
 800b812:	6013      	str	r3, [r2, #0]
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	20000358 	.word	0x20000358
 800b824:	200003a4 	.word	0x200003a4

0800b828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b82e:	4b0b      	ldr	r3, [pc, #44]	; (800b85c <xTaskGetSchedulerState+0x34>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d102      	bne.n	800b83c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b836:	2301      	movs	r3, #1
 800b838:	607b      	str	r3, [r7, #4]
 800b83a:	e008      	b.n	800b84e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b83c:	4b08      	ldr	r3, [pc, #32]	; (800b860 <xTaskGetSchedulerState+0x38>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b844:	2302      	movs	r3, #2
 800b846:	607b      	str	r3, [r7, #4]
 800b848:	e001      	b.n	800b84e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b84a:	2300      	movs	r3, #0
 800b84c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b84e:	687b      	ldr	r3, [r7, #4]
	}
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	20000394 	.word	0x20000394
 800b860:	200003a8 	.word	0x200003a8

0800b864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b870:	2300      	movs	r3, #0
 800b872:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d06c      	beq.n	800b954 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b87a:	4b39      	ldr	r3, [pc, #228]	; (800b960 <xTaskPriorityDisinherit+0xfc>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	429a      	cmp	r2, r3
 800b882:	d009      	beq.n	800b898 <xTaskPriorityDisinherit+0x34>
 800b884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b888:	f383 8811 	msr	BASEPRI, r3
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	e7fe      	b.n	800b896 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d109      	bne.n	800b8b4 <xTaskPriorityDisinherit+0x50>
 800b8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	60bb      	str	r3, [r7, #8]
 800b8b2:	e7fe      	b.n	800b8b2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8b8:	1e5a      	subs	r2, r3, #1
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d044      	beq.n	800b954 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d140      	bne.n	800b954 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7ff fa0f 	bl	800acfa <uxListRemove>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d115      	bne.n	800b90e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e6:	491f      	ldr	r1, [pc, #124]	; (800b964 <xTaskPriorityDisinherit+0x100>)
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	440b      	add	r3, r1
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d10a      	bne.n	800b90e <xTaskPriorityDisinherit+0xaa>
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b902:	43da      	mvns	r2, r3
 800b904:	4b18      	ldr	r3, [pc, #96]	; (800b968 <xTaskPriorityDisinherit+0x104>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4013      	ands	r3, r2
 800b90a:	4a17      	ldr	r2, [pc, #92]	; (800b968 <xTaskPriorityDisinherit+0x104>)
 800b90c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91a:	f1c3 0207 	rsb	r2, r3, #7
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	2201      	movs	r2, #1
 800b928:	409a      	lsls	r2, r3
 800b92a:	4b0f      	ldr	r3, [pc, #60]	; (800b968 <xTaskPriorityDisinherit+0x104>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4313      	orrs	r3, r2
 800b930:	4a0d      	ldr	r2, [pc, #52]	; (800b968 <xTaskPriorityDisinherit+0x104>)
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b938:	4613      	mov	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4a08      	ldr	r2, [pc, #32]	; (800b964 <xTaskPriorityDisinherit+0x100>)
 800b942:	441a      	add	r2, r3
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	3304      	adds	r3, #4
 800b948:	4619      	mov	r1, r3
 800b94a:	4610      	mov	r0, r2
 800b94c:	f7ff f978 	bl	800ac40 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b950:	2301      	movs	r3, #1
 800b952:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b954:	697b      	ldr	r3, [r7, #20]
	}
 800b956:	4618      	mov	r0, r3
 800b958:	3718      	adds	r7, #24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	200002c8 	.word	0x200002c8
 800b964:	200002cc 	.word	0x200002cc
 800b968:	20000390 	.word	0x20000390

0800b96c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b976:	4b29      	ldr	r3, [pc, #164]	; (800ba1c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b97c:	4b28      	ldr	r3, [pc, #160]	; (800ba20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3304      	adds	r3, #4
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff f9b9 	bl	800acfa <uxListRemove>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10b      	bne.n	800b9a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b98e:	4b24      	ldr	r3, [pc, #144]	; (800ba20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b994:	2201      	movs	r2, #1
 800b996:	fa02 f303 	lsl.w	r3, r2, r3
 800b99a:	43da      	mvns	r2, r3
 800b99c:	4b21      	ldr	r3, [pc, #132]	; (800ba24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	4a20      	ldr	r2, [pc, #128]	; (800ba24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b9a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ac:	d10a      	bne.n	800b9c4 <prvAddCurrentTaskToDelayedList+0x58>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9b4:	4b1a      	ldr	r3, [pc, #104]	; (800ba20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	481a      	ldr	r0, [pc, #104]	; (800ba28 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b9be:	f7ff f93f 	bl	800ac40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9c2:	e026      	b.n	800ba12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9cc:	4b14      	ldr	r3, [pc, #80]	; (800ba20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d209      	bcs.n	800b9f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9dc:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	4b0f      	ldr	r3, [pc, #60]	; (800ba20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	4610      	mov	r0, r2
 800b9ea:	f7ff f94d 	bl	800ac88 <vListInsert>
}
 800b9ee:	e010      	b.n	800ba12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	; (800ba30 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	f7ff f943 	bl	800ac88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba02:	4b0c      	ldr	r3, [pc, #48]	; (800ba34 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d202      	bcs.n	800ba12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ba0c:	4a09      	ldr	r2, [pc, #36]	; (800ba34 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	6013      	str	r3, [r2, #0]
}
 800ba12:	bf00      	nop
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	2000038c 	.word	0x2000038c
 800ba20:	200002c8 	.word	0x200002c8
 800ba24:	20000390 	.word	0x20000390
 800ba28:	20000374 	.word	0x20000374
 800ba2c:	2000035c 	.word	0x2000035c
 800ba30:	20000358 	.word	0x20000358
 800ba34:	200003a4 	.word	0x200003a4
	...

0800ba40 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba40:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <pxCurrentTCBConst2>)
 800ba42:	6819      	ldr	r1, [r3, #0]
 800ba44:	6808      	ldr	r0, [r1, #0]
 800ba46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4a:	f380 8809 	msr	PSP, r0
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f04f 0000 	mov.w	r0, #0
 800ba56:	f380 8811 	msr	BASEPRI, r0
 800ba5a:	4770      	bx	lr
 800ba5c:	f3af 8000 	nop.w

0800ba60 <pxCurrentTCBConst2>:
 800ba60:	200002c8 	.word	0x200002c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba64:	bf00      	nop
 800ba66:	bf00      	nop

0800ba68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba80:	4b0e      	ldr	r3, [pc, #56]	; (800babc <vPortEnterCritical+0x54>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	3301      	adds	r3, #1
 800ba86:	4a0d      	ldr	r2, [pc, #52]	; (800babc <vPortEnterCritical+0x54>)
 800ba88:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba8a:	4b0c      	ldr	r3, [pc, #48]	; (800babc <vPortEnterCritical+0x54>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d10e      	bne.n	800bab0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba92:	4b0b      	ldr	r3, [pc, #44]	; (800bac0 <vPortEnterCritical+0x58>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d009      	beq.n	800bab0 <vPortEnterCritical+0x48>
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	603b      	str	r3, [r7, #0]
 800baae:	e7fe      	b.n	800baae <vPortEnterCritical+0x46>
	}
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	20000088 	.word	0x20000088
 800bac0:	e000ed04 	.word	0xe000ed04

0800bac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800baca:	4b11      	ldr	r3, [pc, #68]	; (800bb10 <vPortExitCritical+0x4c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d109      	bne.n	800bae6 <vPortExitCritical+0x22>
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	607b      	str	r3, [r7, #4]
 800bae4:	e7fe      	b.n	800bae4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bae6:	4b0a      	ldr	r3, [pc, #40]	; (800bb10 <vPortExitCritical+0x4c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3b01      	subs	r3, #1
 800baec:	4a08      	ldr	r2, [pc, #32]	; (800bb10 <vPortExitCritical+0x4c>)
 800baee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800baf0:	4b07      	ldr	r3, [pc, #28]	; (800bb10 <vPortExitCritical+0x4c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d104      	bne.n	800bb02 <vPortExitCritical+0x3e>
 800baf8:	2300      	movs	r3, #0
 800bafa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20000088 	.word	0x20000088
	...

0800bb20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb20:	f3ef 8009 	mrs	r0, PSP
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	4b15      	ldr	r3, [pc, #84]	; (800bb80 <pxCurrentTCBConst>)
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	f01e 0f10 	tst.w	lr, #16
 800bb30:	bf08      	it	eq
 800bb32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3a:	6010      	str	r0, [r2, #0]
 800bb3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb44:	f380 8811 	msr	BASEPRI, r0
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f7ff fcc2 	bl	800b4d8 <vTaskSwitchContext>
 800bb54:	f04f 0000 	mov.w	r0, #0
 800bb58:	f380 8811 	msr	BASEPRI, r0
 800bb5c:	bc09      	pop	{r0, r3}
 800bb5e:	6819      	ldr	r1, [r3, #0]
 800bb60:	6808      	ldr	r0, [r1, #0]
 800bb62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb66:	f01e 0f10 	tst.w	lr, #16
 800bb6a:	bf08      	it	eq
 800bb6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb70:	f380 8809 	msr	PSP, r0
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	f3af 8000 	nop.w

0800bb80 <pxCurrentTCBConst>:
 800bb80:	200002c8 	.word	0x200002c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb84:	bf00      	nop
 800bb86:	bf00      	nop

0800bb88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bba0:	f7ff fbe2 	bl	800b368 <xTaskIncrementTick>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbaa:	4b06      	ldr	r3, [pc, #24]	; (800bbc4 <SysTick_Handler+0x3c>)
 800bbac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bbbc:	bf00      	nop
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	e000ed04 	.word	0xe000ed04

0800bbc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbce:	f3ef 8305 	mrs	r3, IPSR
 800bbd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b0f      	cmp	r3, #15
 800bbd8:	d913      	bls.n	800bc02 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbda:	4a16      	ldr	r2, [pc, #88]	; (800bc34 <vPortValidateInterruptPriority+0x6c>)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4413      	add	r3, r2
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbe4:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <vPortValidateInterruptPriority+0x70>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	7afa      	ldrb	r2, [r7, #11]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d209      	bcs.n	800bc02 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	607b      	str	r3, [r7, #4]
 800bc00:	e7fe      	b.n	800bc00 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc02:	4b0e      	ldr	r3, [pc, #56]	; (800bc3c <vPortValidateInterruptPriority+0x74>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc0a:	4b0d      	ldr	r3, [pc, #52]	; (800bc40 <vPortValidateInterruptPriority+0x78>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d909      	bls.n	800bc26 <vPortValidateInterruptPriority+0x5e>
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	e7fe      	b.n	800bc24 <vPortValidateInterruptPriority+0x5c>
	}
 800bc26:	bf00      	nop
 800bc28:	3714      	adds	r7, #20
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	e000e3f0 	.word	0xe000e3f0
 800bc38:	200003ac 	.word	0x200003ac
 800bc3c:	e000ed0c 	.word	0xe000ed0c
 800bc40:	200003b0 	.word	0x200003b0

0800bc44 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fec6 	bl	800a9e4 <USBH_LL_IncTimer>
}
 800bc58:	bf00      	nop
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe ff0a 	bl	800aa88 <USBH_LL_Connect>
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fe ff1f 	bl	800aace <USBH_LL_Disconnect>
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	70fb      	strb	r3, [r7, #3]
 800bca4:	4613      	mov	r3, r2
 800bca6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fe ff3f 	bl	800ab32 <USBH_LL_NotifyURBChange>
#endif
}
 800bcb4:	bf00      	nop
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe feb4 	bl	800aa38 <USBH_LL_PortEnabled>
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fe fec0 	bl	800aa6c <USBH_LL_PortDisabled>
}
 800bcec:	bf00      	nop
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7f9 f91b 	bl	8004f46 <HAL_HCD_Stop>
 800bd10:	4603      	mov	r3, r0
 800bd12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
 800bd16:	4618      	mov	r0, r3
 800bd18:	f000 f808 	bl	800bd2c <USBH_Get_USB_Status>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd20:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd36:	2300      	movs	r3, #0
 800bd38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	2b03      	cmp	r3, #3
 800bd3e:	d817      	bhi.n	800bd70 <USBH_Get_USB_Status+0x44>
 800bd40:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <USBH_Get_USB_Status+0x1c>)
 800bd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd46:	bf00      	nop
 800bd48:	0800bd59 	.word	0x0800bd59
 800bd4c:	0800bd5f 	.word	0x0800bd5f
 800bd50:	0800bd65 	.word	0x0800bd65
 800bd54:	0800bd6b 	.word	0x0800bd6b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd5c:	e00b      	b.n	800bd76 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bd5e:	2302      	movs	r3, #2
 800bd60:	73fb      	strb	r3, [r7, #15]
    break;
 800bd62:	e008      	b.n	800bd76 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bd64:	2301      	movs	r3, #1
 800bd66:	73fb      	strb	r3, [r7, #15]
    break;
 800bd68:	e005      	b.n	800bd76 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6e:	e002      	b.n	800bd76 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bd70:	2302      	movs	r3, #2
 800bd72:	73fb      	strb	r3, [r7, #15]
    break;
 800bd74:	bf00      	nop
  }
  return usb_status;
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <__errno>:
 800bd84:	4b01      	ldr	r3, [pc, #4]	; (800bd8c <__errno+0x8>)
 800bd86:	6818      	ldr	r0, [r3, #0]
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	2000008c 	.word	0x2000008c

0800bd90 <__libc_init_array>:
 800bd90:	b570      	push	{r4, r5, r6, lr}
 800bd92:	4e0d      	ldr	r6, [pc, #52]	; (800bdc8 <__libc_init_array+0x38>)
 800bd94:	4c0d      	ldr	r4, [pc, #52]	; (800bdcc <__libc_init_array+0x3c>)
 800bd96:	1ba4      	subs	r4, r4, r6
 800bd98:	10a4      	asrs	r4, r4, #2
 800bd9a:	2500      	movs	r5, #0
 800bd9c:	42a5      	cmp	r5, r4
 800bd9e:	d109      	bne.n	800bdb4 <__libc_init_array+0x24>
 800bda0:	4e0b      	ldr	r6, [pc, #44]	; (800bdd0 <__libc_init_array+0x40>)
 800bda2:	4c0c      	ldr	r4, [pc, #48]	; (800bdd4 <__libc_init_array+0x44>)
 800bda4:	f000 f8f6 	bl	800bf94 <_init>
 800bda8:	1ba4      	subs	r4, r4, r6
 800bdaa:	10a4      	asrs	r4, r4, #2
 800bdac:	2500      	movs	r5, #0
 800bdae:	42a5      	cmp	r5, r4
 800bdb0:	d105      	bne.n	800bdbe <__libc_init_array+0x2e>
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdb8:	4798      	blx	r3
 800bdba:	3501      	adds	r5, #1
 800bdbc:	e7ee      	b.n	800bd9c <__libc_init_array+0xc>
 800bdbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdc2:	4798      	blx	r3
 800bdc4:	3501      	adds	r5, #1
 800bdc6:	e7f2      	b.n	800bdae <__libc_init_array+0x1e>
 800bdc8:	0800df60 	.word	0x0800df60
 800bdcc:	0800df60 	.word	0x0800df60
 800bdd0:	0800df60 	.word	0x0800df60
 800bdd4:	0800df64 	.word	0x0800df64

0800bdd8 <malloc>:
 800bdd8:	4b02      	ldr	r3, [pc, #8]	; (800bde4 <malloc+0xc>)
 800bdda:	4601      	mov	r1, r0
 800bddc:	6818      	ldr	r0, [r3, #0]
 800bdde:	f000 b86d 	b.w	800bebc <_malloc_r>
 800bde2:	bf00      	nop
 800bde4:	2000008c 	.word	0x2000008c

0800bde8 <free>:
 800bde8:	4b02      	ldr	r3, [pc, #8]	; (800bdf4 <free+0xc>)
 800bdea:	4601      	mov	r1, r0
 800bdec:	6818      	ldr	r0, [r3, #0]
 800bdee:	f000 b817 	b.w	800be20 <_free_r>
 800bdf2:	bf00      	nop
 800bdf4:	2000008c 	.word	0x2000008c

0800bdf8 <memcpy>:
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	1e43      	subs	r3, r0, #1
 800bdfc:	440a      	add	r2, r1
 800bdfe:	4291      	cmp	r1, r2
 800be00:	d100      	bne.n	800be04 <memcpy+0xc>
 800be02:	bd10      	pop	{r4, pc}
 800be04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be0c:	e7f7      	b.n	800bdfe <memcpy+0x6>

0800be0e <memset>:
 800be0e:	4402      	add	r2, r0
 800be10:	4603      	mov	r3, r0
 800be12:	4293      	cmp	r3, r2
 800be14:	d100      	bne.n	800be18 <memset+0xa>
 800be16:	4770      	bx	lr
 800be18:	f803 1b01 	strb.w	r1, [r3], #1
 800be1c:	e7f9      	b.n	800be12 <memset+0x4>
	...

0800be20 <_free_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4605      	mov	r5, r0
 800be24:	2900      	cmp	r1, #0
 800be26:	d045      	beq.n	800beb4 <_free_r+0x94>
 800be28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be2c:	1f0c      	subs	r4, r1, #4
 800be2e:	2b00      	cmp	r3, #0
 800be30:	bfb8      	it	lt
 800be32:	18e4      	addlt	r4, r4, r3
 800be34:	f000 f8ac 	bl	800bf90 <__malloc_lock>
 800be38:	4a1f      	ldr	r2, [pc, #124]	; (800beb8 <_free_r+0x98>)
 800be3a:	6813      	ldr	r3, [r2, #0]
 800be3c:	4610      	mov	r0, r2
 800be3e:	b933      	cbnz	r3, 800be4e <_free_r+0x2e>
 800be40:	6063      	str	r3, [r4, #4]
 800be42:	6014      	str	r4, [r2, #0]
 800be44:	4628      	mov	r0, r5
 800be46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be4a:	f000 b8a2 	b.w	800bf92 <__malloc_unlock>
 800be4e:	42a3      	cmp	r3, r4
 800be50:	d90c      	bls.n	800be6c <_free_r+0x4c>
 800be52:	6821      	ldr	r1, [r4, #0]
 800be54:	1862      	adds	r2, r4, r1
 800be56:	4293      	cmp	r3, r2
 800be58:	bf04      	itt	eq
 800be5a:	681a      	ldreq	r2, [r3, #0]
 800be5c:	685b      	ldreq	r3, [r3, #4]
 800be5e:	6063      	str	r3, [r4, #4]
 800be60:	bf04      	itt	eq
 800be62:	1852      	addeq	r2, r2, r1
 800be64:	6022      	streq	r2, [r4, #0]
 800be66:	6004      	str	r4, [r0, #0]
 800be68:	e7ec      	b.n	800be44 <_free_r+0x24>
 800be6a:	4613      	mov	r3, r2
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	b10a      	cbz	r2, 800be74 <_free_r+0x54>
 800be70:	42a2      	cmp	r2, r4
 800be72:	d9fa      	bls.n	800be6a <_free_r+0x4a>
 800be74:	6819      	ldr	r1, [r3, #0]
 800be76:	1858      	adds	r0, r3, r1
 800be78:	42a0      	cmp	r0, r4
 800be7a:	d10b      	bne.n	800be94 <_free_r+0x74>
 800be7c:	6820      	ldr	r0, [r4, #0]
 800be7e:	4401      	add	r1, r0
 800be80:	1858      	adds	r0, r3, r1
 800be82:	4282      	cmp	r2, r0
 800be84:	6019      	str	r1, [r3, #0]
 800be86:	d1dd      	bne.n	800be44 <_free_r+0x24>
 800be88:	6810      	ldr	r0, [r2, #0]
 800be8a:	6852      	ldr	r2, [r2, #4]
 800be8c:	605a      	str	r2, [r3, #4]
 800be8e:	4401      	add	r1, r0
 800be90:	6019      	str	r1, [r3, #0]
 800be92:	e7d7      	b.n	800be44 <_free_r+0x24>
 800be94:	d902      	bls.n	800be9c <_free_r+0x7c>
 800be96:	230c      	movs	r3, #12
 800be98:	602b      	str	r3, [r5, #0]
 800be9a:	e7d3      	b.n	800be44 <_free_r+0x24>
 800be9c:	6820      	ldr	r0, [r4, #0]
 800be9e:	1821      	adds	r1, r4, r0
 800bea0:	428a      	cmp	r2, r1
 800bea2:	bf04      	itt	eq
 800bea4:	6811      	ldreq	r1, [r2, #0]
 800bea6:	6852      	ldreq	r2, [r2, #4]
 800bea8:	6062      	str	r2, [r4, #4]
 800beaa:	bf04      	itt	eq
 800beac:	1809      	addeq	r1, r1, r0
 800beae:	6021      	streq	r1, [r4, #0]
 800beb0:	605c      	str	r4, [r3, #4]
 800beb2:	e7c7      	b.n	800be44 <_free_r+0x24>
 800beb4:	bd38      	pop	{r3, r4, r5, pc}
 800beb6:	bf00      	nop
 800beb8:	200003b4 	.word	0x200003b4

0800bebc <_malloc_r>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	1ccd      	adds	r5, r1, #3
 800bec0:	f025 0503 	bic.w	r5, r5, #3
 800bec4:	3508      	adds	r5, #8
 800bec6:	2d0c      	cmp	r5, #12
 800bec8:	bf38      	it	cc
 800beca:	250c      	movcc	r5, #12
 800becc:	2d00      	cmp	r5, #0
 800bece:	4606      	mov	r6, r0
 800bed0:	db01      	blt.n	800bed6 <_malloc_r+0x1a>
 800bed2:	42a9      	cmp	r1, r5
 800bed4:	d903      	bls.n	800bede <_malloc_r+0x22>
 800bed6:	230c      	movs	r3, #12
 800bed8:	6033      	str	r3, [r6, #0]
 800beda:	2000      	movs	r0, #0
 800bedc:	bd70      	pop	{r4, r5, r6, pc}
 800bede:	f000 f857 	bl	800bf90 <__malloc_lock>
 800bee2:	4a21      	ldr	r2, [pc, #132]	; (800bf68 <_malloc_r+0xac>)
 800bee4:	6814      	ldr	r4, [r2, #0]
 800bee6:	4621      	mov	r1, r4
 800bee8:	b991      	cbnz	r1, 800bf10 <_malloc_r+0x54>
 800beea:	4c20      	ldr	r4, [pc, #128]	; (800bf6c <_malloc_r+0xb0>)
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	b91b      	cbnz	r3, 800bef8 <_malloc_r+0x3c>
 800bef0:	4630      	mov	r0, r6
 800bef2:	f000 f83d 	bl	800bf70 <_sbrk_r>
 800bef6:	6020      	str	r0, [r4, #0]
 800bef8:	4629      	mov	r1, r5
 800befa:	4630      	mov	r0, r6
 800befc:	f000 f838 	bl	800bf70 <_sbrk_r>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d124      	bne.n	800bf4e <_malloc_r+0x92>
 800bf04:	230c      	movs	r3, #12
 800bf06:	6033      	str	r3, [r6, #0]
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f000 f842 	bl	800bf92 <__malloc_unlock>
 800bf0e:	e7e4      	b.n	800beda <_malloc_r+0x1e>
 800bf10:	680b      	ldr	r3, [r1, #0]
 800bf12:	1b5b      	subs	r3, r3, r5
 800bf14:	d418      	bmi.n	800bf48 <_malloc_r+0x8c>
 800bf16:	2b0b      	cmp	r3, #11
 800bf18:	d90f      	bls.n	800bf3a <_malloc_r+0x7e>
 800bf1a:	600b      	str	r3, [r1, #0]
 800bf1c:	50cd      	str	r5, [r1, r3]
 800bf1e:	18cc      	adds	r4, r1, r3
 800bf20:	4630      	mov	r0, r6
 800bf22:	f000 f836 	bl	800bf92 <__malloc_unlock>
 800bf26:	f104 000b 	add.w	r0, r4, #11
 800bf2a:	1d23      	adds	r3, r4, #4
 800bf2c:	f020 0007 	bic.w	r0, r0, #7
 800bf30:	1ac3      	subs	r3, r0, r3
 800bf32:	d0d3      	beq.n	800bedc <_malloc_r+0x20>
 800bf34:	425a      	negs	r2, r3
 800bf36:	50e2      	str	r2, [r4, r3]
 800bf38:	e7d0      	b.n	800bedc <_malloc_r+0x20>
 800bf3a:	428c      	cmp	r4, r1
 800bf3c:	684b      	ldr	r3, [r1, #4]
 800bf3e:	bf16      	itet	ne
 800bf40:	6063      	strne	r3, [r4, #4]
 800bf42:	6013      	streq	r3, [r2, #0]
 800bf44:	460c      	movne	r4, r1
 800bf46:	e7eb      	b.n	800bf20 <_malloc_r+0x64>
 800bf48:	460c      	mov	r4, r1
 800bf4a:	6849      	ldr	r1, [r1, #4]
 800bf4c:	e7cc      	b.n	800bee8 <_malloc_r+0x2c>
 800bf4e:	1cc4      	adds	r4, r0, #3
 800bf50:	f024 0403 	bic.w	r4, r4, #3
 800bf54:	42a0      	cmp	r0, r4
 800bf56:	d005      	beq.n	800bf64 <_malloc_r+0xa8>
 800bf58:	1a21      	subs	r1, r4, r0
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f000 f808 	bl	800bf70 <_sbrk_r>
 800bf60:	3001      	adds	r0, #1
 800bf62:	d0cf      	beq.n	800bf04 <_malloc_r+0x48>
 800bf64:	6025      	str	r5, [r4, #0]
 800bf66:	e7db      	b.n	800bf20 <_malloc_r+0x64>
 800bf68:	200003b4 	.word	0x200003b4
 800bf6c:	200003b8 	.word	0x200003b8

0800bf70 <_sbrk_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4c06      	ldr	r4, [pc, #24]	; (800bf8c <_sbrk_r+0x1c>)
 800bf74:	2300      	movs	r3, #0
 800bf76:	4605      	mov	r5, r0
 800bf78:	4608      	mov	r0, r1
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	f7f5 fd36 	bl	80019ec <_sbrk>
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d102      	bne.n	800bf8a <_sbrk_r+0x1a>
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	b103      	cbz	r3, 800bf8a <_sbrk_r+0x1a>
 800bf88:	602b      	str	r3, [r5, #0]
 800bf8a:	bd38      	pop	{r3, r4, r5, pc}
 800bf8c:	20000a14 	.word	0x20000a14

0800bf90 <__malloc_lock>:
 800bf90:	4770      	bx	lr

0800bf92 <__malloc_unlock>:
 800bf92:	4770      	bx	lr

0800bf94 <_init>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	bf00      	nop
 800bf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9a:	bc08      	pop	{r3}
 800bf9c:	469e      	mov	lr, r3
 800bf9e:	4770      	bx	lr

0800bfa0 <_fini>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr
