
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000206c  08010f2c  08010f2c  00020f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f98  08012f98  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08012f98  08012f98  00022f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fa0  08012fa0  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fa0  08012fa0  00022fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fa4  08012fa4  00022fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08012fa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000900c  20000110  080130b8  00030110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000911c  080130b8  0003911c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000435b2  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007af8  00000000  00000000  000736f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000028b8  00000000  00000000  0007b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002570  00000000  00000000  0007daa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030e69  00000000  00000000  00080018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b441  00000000  00000000  000b0e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f76fe  00000000  00000000  000dc2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d39c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa24  00000000  00000000  001d3a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010f14 	.word	0x08010f14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	08010f14 	.word	0x08010f14

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_CRC_Init+0x20>)
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <MX_CRC_Init+0x24>)
 80004f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_CRC_Init+0x20>)
 80004fc:	f003 fe86 	bl	800420c <HAL_CRC_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000506:	f000 ff4f 	bl	80013a8 <Error_Handler>
  }

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200086d8 	.word	0x200086d8
 8000514:	40023000 	.word	0x40023000

08000518 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_CRC_MspInit+0x3c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d10d      	bne.n	8000546 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_CRC_MspInit+0x40>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023000 	.word	0x40023000
 8000558:	40023800 	.word	0x40023800

0800055c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <MX_DMA2D_Init+0x60>)
 8000564:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000586:	2200      	movs	r2, #0
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000592:	f004 f813 	bl	80045bc <HAL_DMA2D_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800059c:	f000 ff04 	bl	80013a8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005a0:	2101      	movs	r1, #1
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 80005a4:	f004 fa78 	bl	8004a98 <HAL_DMA2D_ConfigLayer>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005ae:	f000 fefb 	bl	80013a8 <Error_Handler>
  }

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200086e0 	.word	0x200086e0
 80005bc:	4002b000 	.word	0x4002b000

080005c0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_DMA2D_MspInit+0x48>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d115      	bne.n	80005fe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2105      	movs	r1, #5
 80005f2:	205a      	movs	r0, #90	; 0x5a
 80005f4:	f003 fde0 	bl	80041b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005f8:	205a      	movs	r0, #90	; 0x5a
 80005fa:	f003 fdf9 	bl	80041f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	4002b000 	.word	0x4002b000
 800060c:	40023800 	.word	0x40023800

08000610 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_FMC_Init+0x98>)
 800062a:	4a20      	ldr	r2, [pc, #128]	; (80006ac <MX_FMC_Init+0x9c>)
 800062c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_FMC_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_FMC_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_FMC_Init+0x98>)
 800063c:	2204      	movs	r2, #4
 800063e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_FMC_Init+0x98>)
 8000642:	2210      	movs	r2, #16
 8000644:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_FMC_Init+0x98>)
 8000648:	2240      	movs	r2, #64	; 0x40
 800064a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_FMC_Init+0x98>)
 800064e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000652:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_FMC_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_FMC_Init+0x98>)
 800065c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000660:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_FMC_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_FMC_Init+0x98>)
 800066a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_FMC_Init+0x98>)
 8000692:	f008 fdbb 	bl	800920c <HAL_SDRAM_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800069c:	f000 fe84 	bl	80013a8 <Error_Handler>
  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20008720 	.word	0x20008720
 80006ac:	a0000140 	.word	0xa0000140

080006b0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d16f      	bne.n	80007ac <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006cc:	4b39      	ldr	r3, [pc, #228]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	4a37      	ldr	r2, [pc, #220]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006f2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000700:	230c      	movs	r3, #12
 8000702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	482c      	ldr	r0, [pc, #176]	; (80007bc <HAL_FMC_MspInit+0x10c>)
 800070a:	f004 faf3 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800071e:	230c      	movs	r3, #12
 8000720:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <HAL_FMC_MspInit+0x110>)
 8000728:	f004 fae4 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800072c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000730:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800073e:	230c      	movs	r3, #12
 8000740:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <HAL_FMC_MspInit+0x114>)
 8000748:	f004 fad4 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800074c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000750:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800075e:	230c      	movs	r3, #12
 8000760:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <HAL_FMC_MspInit+0x118>)
 8000768:	f004 fac4 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800076c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000770:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077e:	230c      	movs	r3, #12
 8000780:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <HAL_FMC_MspInit+0x11c>)
 8000788:	f004 fab4 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800078c:	2360      	movs	r3, #96	; 0x60
 800078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <HAL_FMC_MspInit+0x120>)
 80007a6:	f004 faa5 	bl	8004cf4 <HAL_GPIO_Init>
 80007aa:	e000      	b.n	80007ae <HAL_FMC_MspInit+0xfe>
    return;
 80007ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000012c 	.word	0x2000012c
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40021400 	.word	0x40021400
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40021800 	.word	0x40021800
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	40020400 	.word	0x40020400

080007d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007dc:	f7ff ff68 	bl	80006b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4a07      	ldr	r2, [pc, #28]	; (8000848 <vApplicationGetIdleTaskMemory+0x2c>)
 800082c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <vApplicationGetIdleTaskMemory+0x30>)
 8000832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000130 	.word	0x20000130
 800084c:	20000188 	.word	0x20000188

08000850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000850:	b5b0      	push	{r4, r5, r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_FREERTOS_Init+0x30>)
 8000858:	1d3c      	adds	r4, r7, #4
 800085a:	461d      	mov	r5, r3
 800085c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000860:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000864:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f00d fcb6 	bl	800e1de <osThreadCreate>
 8000872:	4602      	mov	r2, r0
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <MX_FREERTOS_Init+0x34>)
 8000876:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bdb0      	pop	{r4, r5, r7, pc}
 8000880:	08010f38 	.word	0x08010f38
 8000884:	20008754 	.word	0x20008754

08000888 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000890:	f00f fed8 	bl	8010644 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f00d fcee 	bl	800e276 <osDelay>
 800089a:	e7fb      	b.n	8000894 <StartDefaultTask+0xc>

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	; 0x38
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	4b7a      	ldr	r3, [pc, #488]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a79      	ldr	r2, [pc, #484]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b77      	ldr	r3, [pc, #476]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	623b      	str	r3, [r7, #32]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	4b73      	ldr	r3, [pc, #460]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a72      	ldr	r2, [pc, #456]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b70      	ldr	r3, [pc, #448]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	61fb      	str	r3, [r7, #28]
 80008e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a6b      	ldr	r2, [pc, #428]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b69      	ldr	r3, [pc, #420]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	4b65      	ldr	r3, [pc, #404]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a64      	ldr	r2, [pc, #400]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a5d      	ldr	r2, [pc, #372]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b54      	ldr	r3, [pc, #336]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4f      	ldr	r2, [pc, #316]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b4d      	ldr	r3, [pc, #308]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a48      	ldr	r2, [pc, #288]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2116      	movs	r1, #22
 8000996:	4843      	ldr	r0, [pc, #268]	; (8000aa4 <MX_GPIO_Init+0x208>)
 8000998:	f004 fc60 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	4841      	ldr	r0, [pc, #260]	; (8000aa8 <MX_GPIO_Init+0x20c>)
 80009a2:	f004 fc5b 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009ac:	483f      	ldr	r0, [pc, #252]	; (8000aac <MX_GPIO_Init+0x210>)
 80009ae:	f004 fc55 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009b8:	483d      	ldr	r0, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x214>)
 80009ba:	f004 fc4f 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009be:	2316      	movs	r3, #22
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4833      	ldr	r0, [pc, #204]	; (8000aa4 <MX_GPIO_Init+0x208>)
 80009d6:	f004 f98d 	bl	8004cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009da:	f248 0307 	movw	r3, #32775	; 0x8007
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <MX_GPIO_Init+0x218>)
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0x20c>)
 80009f0:	f004 f980 	bl	8004cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <MX_GPIO_Init+0x20c>)
 8000a0c:	f004 f972 	bl	8004cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a10:	2320      	movs	r3, #32
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0x218>)
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0x208>)
 8000a24:	f004 f966 	bl	8004cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0x21c>)
 8000a3c:	f004 f95a 	bl	8004cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <MX_GPIO_Init+0x210>)
 8000a56:	f004 f94d 	bl	8004cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_GPIO_Init+0x210>)
 8000a74:	f004 f93e 	bl	8004cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000a78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_GPIO_Init+0x214>)
 8000a92:	f004 f92f 	bl	8004cf4 <HAL_GPIO_Init>

}
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40021800 	.word	0x40021800
 8000ab4:	10120000 	.word	0x10120000
 8000ab8:	40020400 	.word	0x40020400

08000abc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <MX_I2C3_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <MX_I2C3_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000afa:	f006 f8b9 	bl	8006c70 <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 fc50 	bl	80013a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4809      	ldr	r0, [pc, #36]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000b0c:	f007 f8a1 	bl	8007c52 <HAL_I2CEx_ConfigAnalogFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b16:	f000 fc47 	bl	80013a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000b1e:	f007 f8d4 	bl	8007cca <HAL_I2CEx_ConfigDigitalFilter>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b28:	f000 fc3e 	bl	80013a8 <Error_Handler>
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20008758 	.word	0x20008758
 8000b34:	40005c00 	.word	0x40005c00
 8000b38:	000186a0 	.word	0x000186a0

08000b3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a29      	ldr	r2, [pc, #164]	; (8000c00 <HAL_I2C_MspInit+0xc4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d14b      	bne.n	8000bf6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9c:	2312      	movs	r3, #18
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4815      	ldr	r0, [pc, #84]	; (8000c08 <HAL_I2C_MspInit+0xcc>)
 8000bb4:	f004 f89e 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <HAL_I2C_MspInit+0xd0>)
 8000bd6:	f004 f88d 	bl	8004cf4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40005c00 	.word	0x40005c00
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_I2C_MspDeInit+0x3c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10f      	bne.n	8000c42 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_I2C_MspDeInit+0x40>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_I2C_MspDeInit+0x40>)
 8000c28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <HAL_I2C_MspDeInit+0x44>)
 8000c34:	f004 fa08 	bl	8005048 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <HAL_I2C_MspDeInit+0x48>)
 8000c3e:	f004 fa03 	bl	8005048 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40005c00 	.word	0x40005c00
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020000 	.word	0x40020000

08000c5c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09a      	sub	sp, #104	; 0x68
 8000c60:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c66:	2234      	movs	r2, #52	; 0x34
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f010 f851 	bl	8010d12 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2234      	movs	r2, #52	; 0x34
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f010 f84b 	bl	8010d12 <memset>

  hltdc.Instance = LTDC;
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c7e:	4a50      	ldr	r2, [pc, #320]	; (8000dc0 <MX_LTDC_Init+0x164>)
 8000c80:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c94:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c9c:	2209      	movs	r2, #9
 8000c9e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000ca0:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000ca6:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000ca8:	221d      	movs	r2, #29
 8000caa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000cb2:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cb4:	f240 120d 	movw	r2, #269	; 0x10d
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000cba:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cbc:	f240 1243 	movw	r2, #323	; 0x143
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000cc2:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cc4:	f240 1217 	movw	r2, #279	; 0x117
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000ccc:	f240 1247 	movw	r2, #327	; 0x147
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cd2:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cea:	4834      	ldr	r0, [pc, #208]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cec:	f007 f82c 	bl	8007d48 <HAL_LTDC_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000cf6:	f000 fb57 	bl	80013a8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000cfe:	23f0      	movs	r3, #240	; 0xf0
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000d06:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000d10:	23ff      	movs	r3, #255	; 0xff
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d1c:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000d22:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000d26:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8000d28:	23f0      	movs	r3, #240	; 0xf0
 8000d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8000d2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d30:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481b      	ldr	r0, [pc, #108]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000d4e:	f007 f98d 	bl	800806c <HAL_LTDC_ConfigLayer>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8000d58:	f000 fb26 	bl	80013a8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d78:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000da4:	f007 f962 	bl	800806c <HAL_LTDC_ConfigLayer>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000dae:	f000 fafb 	bl	80013a8 <Error_Handler>
  }

}
 8000db2:	bf00      	nop
 8000db4:	3768      	adds	r7, #104	; 0x68
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200087ac 	.word	0x200087ac
 8000dc0:	40016800 	.word	0x40016800

08000dc4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	; 0x38
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a7b      	ldr	r2, [pc, #492]	; (8000fd0 <HAL_LTDC_MspInit+0x20c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	f040 80f0 	bne.w	8000fc8 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	4b79      	ldr	r3, [pc, #484]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	4a78      	ldr	r2, [pc, #480]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000df6:	6453      	str	r3, [r2, #68]	; 0x44
 8000df8:	4b76      	ldr	r3, [pc, #472]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e00:	623b      	str	r3, [r7, #32]
 8000e02:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4a71      	ldr	r2, [pc, #452]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
 8000e14:	4b6f      	ldr	r3, [pc, #444]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a6a      	ldr	r2, [pc, #424]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b68      	ldr	r3, [pc, #416]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a63      	ldr	r2, [pc, #396]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b61      	ldr	r3, [pc, #388]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a5c      	ldr	r2, [pc, #368]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
 8000e68:	4b5a      	ldr	r3, [pc, #360]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a55      	ldr	r2, [pc, #340]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
 8000e84:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ebe:	230e      	movs	r3, #14
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4843      	ldr	r0, [pc, #268]	; (8000fd8 <HAL_LTDC_MspInit+0x214>)
 8000eca:	f003 ff13 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000ece:	f641 0358 	movw	r3, #6232	; 0x1858
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ee0:	230e      	movs	r3, #14
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	483c      	ldr	r0, [pc, #240]	; (8000fdc <HAL_LTDC_MspInit+0x218>)
 8000eec:	f003 ff02 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f00:	2309      	movs	r3, #9
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4835      	ldr	r0, [pc, #212]	; (8000fe0 <HAL_LTDC_MspInit+0x21c>)
 8000f0c:	f003 fef2 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000f10:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f22:	230e      	movs	r3, #14
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	482c      	ldr	r0, [pc, #176]	; (8000fe0 <HAL_LTDC_MspInit+0x21c>)
 8000f2e:	f003 fee1 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f32:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f44:	230e      	movs	r3, #14
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4825      	ldr	r0, [pc, #148]	; (8000fe4 <HAL_LTDC_MspInit+0x220>)
 8000f50:	f003 fed0 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000f54:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f66:	230e      	movs	r3, #14
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481d      	ldr	r0, [pc, #116]	; (8000fe8 <HAL_LTDC_MspInit+0x224>)
 8000f72:	f003 febf 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000f76:	2348      	movs	r3, #72	; 0x48
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f86:	230e      	movs	r3, #14
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4816      	ldr	r0, [pc, #88]	; (8000fec <HAL_LTDC_MspInit+0x228>)
 8000f92:	f003 feaf 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000f96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fa8:	2309      	movs	r3, #9
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <HAL_LTDC_MspInit+0x220>)
 8000fb4:	f003 fe9e 	bl	8004cf4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2105      	movs	r1, #5
 8000fbc:	2058      	movs	r0, #88	; 0x58
 8000fbe:	f003 f8fb 	bl	80041b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000fc2:	2058      	movs	r0, #88	; 0x58
 8000fc4:	f003 f914 	bl	80041f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3738      	adds	r7, #56	; 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40016800 	.word	0x40016800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40021400 	.word	0x40021400
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40021800 	.word	0x40021800
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b08d      	sub	sp, #52	; 0x34
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f002 ffc3 	bl	8003f80 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f93f 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f7ff fc4d 	bl	800089c <MX_GPIO_Init>
  MX_CRC_Init();
 8001002:	f7ff fa75 	bl	80004f0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001006:	f7ff faa9 	bl	800055c <MX_DMA2D_Init>
  MX_FMC_Init();
 800100a:	f7ff fb01 	bl	8000610 <MX_FMC_Init>
  MX_I2C3_Init();
 800100e:	f7ff fd55 	bl	8000abc <MX_I2C3_Init>
  MX_LTDC_Init();
 8001012:	f7ff fe23 	bl	8000c5c <MX_LTDC_Init>
  MX_SPI5_Init();
 8001016:	f000 f9cf 	bl	80013b8 <MX_SPI5_Init>
  MX_TIM1_Init();
 800101a:	f000 fb7d 	bl	8001718 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800101e:	f000 fde1 	bl	8001be4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char buffer [sizeof(int)*8+1];
  int polozenie_x;
  int polozenie_y=10;
 8001022:	230a      	movs	r3, #10
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28

  BSP_LCD_Init();
 8001026:	f001 fe15 	bl	8002c54 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 800102a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800102e:	2001      	movs	r0, #1
 8001030:	f001 fe92 	bl	8002d58 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f001 fef3 	bl	8002e20 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 800103a:	4887      	ldr	r0, [pc, #540]	; (8001258 <main+0x268>)
 800103c:	f001 ff9e 	bl	8002f7c <BSP_LCD_Clear>
  //HAL_Delay(1000);
  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	2001      	movs	r0, #1
 8001046:	f001 ff39 	bl	8002ebc <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 800104a:	2100      	movs	r1, #0
 800104c:	2001      	movs	r0, #1
 800104e:	f001 fef7 	bl	8002e40 <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8001052:	4982      	ldr	r1, [pc, #520]	; (800125c <main+0x26c>)
 8001054:	2000      	movs	r0, #0
 8001056:	f001 fe7f 	bl	8002d58 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800105a:	2000      	movs	r0, #0
 800105c:	f001 fee0 	bl	8002e20 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001060:	f002 fada 	bl	8003618 <BSP_LCD_DisplayOn>

  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f001 ff88 	bl	8002f7c <BSP_LCD_Clear>

  BSP_LCD_SetFont(&Font12);
 800106c:	487c      	ldr	r0, [pc, #496]	; (8001260 <main+0x270>)
 800106e:	f001 ff6b 	bl	8002f48 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001072:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001076:	f001 ff35 	bl	8002ee4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800107a:	f04f 30ff 	mov.w	r0, #4294967295
 800107e:	f001 ff49 	bl	8002f14 <BSP_LCD_SetBackColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"STATUS OK", CENTER_MODE);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen is initialized", CENTER_MODE);
  }*/
  Touchscreen_Calibration();
 8001082:	f000 fbbb 	bl	80017fc <Touchscreen_Calibration>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001086:	f001 fe4f 	bl	8002d28 <BSP_LCD_GetXSize>
 800108a:	4603      	mov	r3, r0
 800108c:	b29c      	uxth	r4, r3
 800108e:	f001 fe57 	bl	8002d40 <BSP_LCD_GetYSize>
 8001092:	4603      	mov	r3, r0
 8001094:	b29b      	uxth	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	4620      	mov	r0, r4
 800109a:	f002 fe85 	bl	8003da8 <BSP_TS_Init>
  BSP_LCD_Clear(LCD_COLOR_GREEN); //
 800109e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80010a2:	f001 ff6b 	bl	8002f7c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80010a6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010aa:	f001 ff33 	bl	8002f14 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80010ae:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80010b2:	f001 ff17 	bl	8002ee4 <BSP_LCD_SetTextColor>
  polozenie_x=BSP_LCD_GetXSize()/2;
 80010b6:	f001 fe37 	bl	8002d28 <BSP_LCD_GetXSize>
 80010ba:	4603      	mov	r3, r0
 80010bc:	085b      	lsrs	r3, r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80010c0:	f7ff fbc6 	bl	8000850 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80010c4:	f00d f884 	bl	800e1d0 <osKernelStart>
  while (1)
  {

	  static uint32_t x = 0, y = 0;
	  static TS_StateTypeDef  TS_State;
	  BSP_TS_GetState(&TS_State);
 80010c8:	4866      	ldr	r0, [pc, #408]	; (8001264 <main+0x274>)
 80010ca:	f002 fea7 	bl	8003e1c <BSP_TS_GetState>
	  x = Calibration_GetX(TS_State.X);
 80010ce:	4b65      	ldr	r3, [pc, #404]	; (8001264 <main+0x274>)
 80010d0:	885b      	ldrh	r3, [r3, #2]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd3e 	bl	8001b54 <Calibration_GetX>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b62      	ldr	r3, [pc, #392]	; (8001268 <main+0x278>)
 80010de:	601a      	str	r2, [r3, #0]
	  y = Calibration_GetY(TS_State.Y);
 80010e0:	4b60      	ldr	r3, [pc, #384]	; (8001264 <main+0x274>)
 80010e2:	889b      	ldrh	r3, [r3, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fd59 	bl	8001b9c <Calibration_GetY>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <main+0x27c>)
 80010f0:	601a      	str	r2, [r3, #0]


	  if (TS_State.TouchDetected){
 80010f2:	4b5c      	ldr	r3, [pc, #368]	; (8001264 <main+0x274>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 80aa 	beq.w	8001250 <main+0x260>
		  //BSP_LCD_SelectLayer(0);
		  //BSP_LCD_Clear(LCD_COLOR_BLUE);
		  //BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	  if ((TS_State.TouchDetected) & ( x > 0 ) & ( x < BSP_LCD_GetXSize()/2)){
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <main+0x274>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b59      	ldr	r3, [pc, #356]	; (8001268 <main+0x278>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	ea02 0403 	and.w	r4, r2, r3
 8001114:	f001 fe08 	bl	8002d28 <BSP_LCD_GetXSize>
 8001118:	4603      	mov	r3, r0
 800111a:	085a      	lsrs	r2, r3, #1
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <main+0x278>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	bf8c      	ite	hi
 8001124:	2301      	movhi	r3, #1
 8001126:	2300      	movls	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4023      	ands	r3, r4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01a      	beq.n	8001166 <main+0x176>
		  //BSP_LCD_FillRect(BSP_LCD_GetXSize()/4, BSP_LCD_GetYSize()/2, BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize());
		  //BSP_LCD_FillRect((x), (y), 20, 10);
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001130:	484f      	ldr	r0, [pc, #316]	; (8001270 <main+0x280>)
 8001132:	f001 fed7 	bl	8002ee4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect((polozenie_x), (polozenie_y), 20, 10);
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	b298      	uxth	r0, r3
 800113a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113c:	b299      	uxth	r1, r3
 800113e:	230a      	movs	r3, #10
 8001140:	2214      	movs	r2, #20
 8001142:	f002 f96f 	bl	8003424 <BSP_LCD_FillRect>
		  polozenie_x--;
 8001146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001148:	3b01      	subs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f001 fec8 	bl	8002ee4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect((polozenie_x), (polozenie_y), 20, 10);
 8001154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001156:	b298      	uxth	r0, r3
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	b299      	uxth	r1, r3
 800115c:	230a      	movs	r3, #10
 800115e:	2214      	movs	r2, #20
 8001160:	f002 f960 	bl	8003424 <BSP_LCD_FillRect>
 8001164:	e035      	b.n	80011d2 <main+0x1e2>

	  }
	  else if ((TS_State.TouchDetected) & ( x > BSP_LCD_GetXSize()/2 ) & ( x < BSP_LCD_GetXSize())){
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <main+0x274>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	461c      	mov	r4, r3
 800116c:	f001 fddc 	bl	8002d28 <BSP_LCD_GetXSize>
 8001170:	4603      	mov	r3, r0
 8001172:	085a      	lsrs	r2, r3, #1
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <main+0x278>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	bf34      	ite	cc
 800117c:	2301      	movcc	r3, #1
 800117e:	2300      	movcs	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	401c      	ands	r4, r3
 8001184:	f001 fdd0 	bl	8002d28 <BSP_LCD_GetXSize>
 8001188:	4602      	mov	r2, r0
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <main+0x278>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	bf8c      	ite	hi
 8001192:	2301      	movhi	r3, #1
 8001194:	2300      	movls	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4023      	ands	r3, r4
 800119a:	2b00      	cmp	r3, #0
 800119c:	d019      	beq.n	80011d2 <main+0x1e2>
		  //BSP_LCD_FillRect((3*(BSP_LCD_GetXSize())/4), BSP_LCD_GetYSize()/2, BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize());
		  //BSP_LCD_FillRect((x), (y), 10, 20);
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800119e:	4834      	ldr	r0, [pc, #208]	; (8001270 <main+0x280>)
 80011a0:	f001 fea0 	bl	8002ee4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect((polozenie_x), (polozenie_y), 20, 10);
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a6:	b298      	uxth	r0, r3
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	b299      	uxth	r1, r3
 80011ac:	230a      	movs	r3, #10
 80011ae:	2214      	movs	r2, #20
 80011b0:	f002 f938 	bl	8003424 <BSP_LCD_FillRect>
		  polozenie_x++;
 80011b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b6:	3301      	adds	r3, #1
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	f001 fe91 	bl	8002ee4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect((polozenie_x), (polozenie_y), 20, 10);
 80011c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c4:	b298      	uxth	r0, r3
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	b299      	uxth	r1, r3
 80011ca:	230a      	movs	r3, #10
 80011cc:	2214      	movs	r2, #20
 80011ce:	f002 f929 	bl	8003424 <BSP_LCD_FillRect>

	  }
	  BSP_LCD_SelectLayer(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f001 fe24 	bl	8002e20 <BSP_LCD_SelectLayer>
	  itoa(x,buffer,10);
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <main+0x278>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	220a      	movs	r2, #10
 80011e2:	4619      	mov	r1, r3
 80011e4:	f00f fd78 	bl	8010cd8 <itoa>
	  	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"X:", LEFT_MODE);
 80011e8:	f001 fdaa 	bl	8002d40 <BSP_LCD_GetYSize>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	3b50      	subs	r3, #80	; 0x50
 80011f2:	b299      	uxth	r1, r3
 80011f4:	2303      	movs	r3, #3
 80011f6:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <main+0x284>)
 80011f8:	2000      	movs	r0, #0
 80011fa:	f001 ff2b 	bl	8003054 <BSP_LCD_DisplayStringAt>
	  	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)buffer, CENTER_MODE);
 80011fe:	f001 fd9f 	bl	8002d40 <BSP_LCD_GetYSize>
 8001202:	4603      	mov	r3, r0
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b50      	subs	r3, #80	; 0x50
 8001208:	b299      	uxth	r1, r3
 800120a:	1d3a      	adds	r2, r7, #4
 800120c:	2301      	movs	r3, #1
 800120e:	2000      	movs	r0, #0
 8001210:	f001 ff20 	bl	8003054 <BSP_LCD_DisplayStringAt>
	  	  itoa (y,buffer,10);
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <main+0x27c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	220a      	movs	r2, #10
 800121e:	4619      	mov	r1, r3
 8001220:	f00f fd5a 	bl	8010cd8 <itoa>
	  	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 112, (uint8_t*)"Y:", LEFT_MODE);
 8001224:	f001 fd8c 	bl	8002d40 <BSP_LCD_GetYSize>
 8001228:	4603      	mov	r3, r0
 800122a:	b29b      	uxth	r3, r3
 800122c:	3b70      	subs	r3, #112	; 0x70
 800122e:	b299      	uxth	r1, r3
 8001230:	2303      	movs	r3, #3
 8001232:	4a11      	ldr	r2, [pc, #68]	; (8001278 <main+0x288>)
 8001234:	2000      	movs	r0, #0
 8001236:	f001 ff0d 	bl	8003054 <BSP_LCD_DisplayStringAt>
	  	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 112, (uint8_t*)buffer, CENTER_MODE);
 800123a:	f001 fd81 	bl	8002d40 <BSP_LCD_GetYSize>
 800123e:	4603      	mov	r3, r0
 8001240:	b29b      	uxth	r3, r3
 8001242:	3b70      	subs	r3, #112	; 0x70
 8001244:	b299      	uxth	r1, r3
 8001246:	1d3a      	adds	r2, r7, #4
 8001248:	2301      	movs	r3, #1
 800124a:	2000      	movs	r0, #0
 800124c:	f001 ff02 	bl	8003054 <BSP_LCD_DisplayStringAt>
	  }

	  HAL_Delay(5);
 8001250:	2005      	movs	r0, #5
 8001252:	f002 fed7 	bl	8004004 <HAL_Delay>
  {
 8001256:	e737      	b.n	80010c8 <main+0xd8>
 8001258:	ff0000ff 	.word	0xff0000ff
 800125c:	d0130000 	.word	0xd0130000
 8001260:	20000074 	.word	0x20000074
 8001264:	20000388 	.word	0x20000388
 8001268:	20000390 	.word	0x20000390
 800126c:	20000394 	.word	0x20000394
 8001270:	ffff0000 	.word	0xffff0000
 8001274:	08010f54 	.word	0x08010f54
 8001278:	08010f58 	.word	0x08010f58

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0a0      	sub	sp, #128	; 0x80
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f00f fd41 	bl	8010d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2230      	movs	r2, #48	; 0x30
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00f fd32 	bl	8010d12 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b32      	ldr	r3, [pc, #200]	; (800137c <SystemClock_Config+0x100>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a31      	ldr	r2, [pc, #196]	; (800137c <SystemClock_Config+0x100>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <SystemClock_Config+0x100>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <SystemClock_Config+0x104>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012d6:	4a2a      	ldr	r2, [pc, #168]	; (8001380 <SystemClock_Config+0x104>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <SystemClock_Config+0x104>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ea:	2301      	movs	r3, #1
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012fe:	2304      	movs	r3, #4
 8001300:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001302:	2348      	movs	r3, #72	; 0x48
 8001304:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001306:	2302      	movs	r3, #2
 8001308:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800130a:	2303      	movs	r3, #3
 800130c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001312:	4618      	mov	r0, r3
 8001314:	f007 f928 	bl	8008568 <HAL_RCC_OscConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800131e:	f000 f843 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	230f      	movs	r3, #15
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001326:	2302      	movs	r3, #2
 8001328:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001338:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800133c:	2102      	movs	r1, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f007 fb82 	bl	8008a48 <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800134a:	f000 f82d 	bl	80013a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800134e:	2308      	movs	r3, #8
 8001350:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001352:	2332      	movs	r3, #50	; 0x32
 8001354:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4618      	mov	r0, r3
 8001364:	f007 fd94 	bl	8008e90 <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800136e:	f000 f81b 	bl	80013a8 <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	3780      	adds	r7, #128	; 0x80
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001396:	f002 fe15 	bl	8003fc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40001000 	.word	0x40001000

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_SPI5_Init+0x64>)
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <MX_SPI5_Init+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_SPI5_Init+0x64>)
 80013c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_SPI5_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_SPI5_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_SPI5_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_SPI5_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_SPI5_Init+0x64>)
 80013e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_SPI5_Init+0x64>)
 80013ec:	2218      	movs	r2, #24
 80013ee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_SPI5_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_SPI5_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <MX_SPI5_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_SPI5_Init+0x64>)
 8001404:	220a      	movs	r2, #10
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_SPI5_Init+0x64>)
 800140a:	f007 ff7e 	bl	800930a <HAL_SPI_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001414:	f7ff ffc8 	bl	80013a8 <Error_Handler>
  }

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20008854 	.word	0x20008854
 8001420:	40015000 	.word	0x40015000

08001424 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_SPI_MspInit+0x84>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d12c      	bne.n	80014a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_SPI_MspInit+0x88>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_SPI_MspInit+0x88>)
 8001450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_SPI_MspInit+0x88>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_SPI_MspInit+0x88>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <HAL_SPI_MspInit+0x88>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_SPI_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800147e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001490:	2305      	movs	r3, #5
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <HAL_SPI_MspInit+0x8c>)
 800149c:	f003 fc2a 	bl	8004cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40015000 	.word	0x40015000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40021400 	.word	0x40021400

080014b4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_SPI_MspDeInit+0x30>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10a      	bne.n	80014dc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_SPI_MspDeInit+0x34>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_SPI_MspDeInit+0x34>)
 80014cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80014d2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_SPI_MspDeInit+0x38>)
 80014d8:	f003 fdb6 	bl	8005048 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40015000 	.word	0x40015000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40021400 	.word	0x40021400

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_MspInit+0x54>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a11      	ldr	r2, [pc, #68]	; (8001544 <HAL_MspInit+0x54>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_MspInit+0x54>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_MspInit+0x54>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_MspInit+0x54>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_MspInit+0x54>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	210f      	movs	r1, #15
 8001532:	f06f 0001 	mvn.w	r0, #1
 8001536:	f002 fe3f 	bl	80041b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	; 0x30
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	2036      	movs	r0, #54	; 0x36
 800155e:	f002 fe2b 	bl	80041b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001562:	2036      	movs	r0, #54	; 0x36
 8001564:	f002 fe44 	bl	80041f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_InitTick+0xa4>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <HAL_InitTick+0xa4>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_InitTick+0xa4>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001584:	f107 0210 	add.w	r2, r7, #16
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f007 fc4c 	bl	8008e2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001594:	f007 fc22 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <HAL_InitTick+0xa8>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0c9b      	lsrs	r3, r3, #18
 80015a8:	3b01      	subs	r3, #1
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_InitTick+0xac>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <HAL_InitTick+0xb0>)
 80015b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_InitTick+0xac>)
 80015b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_InitTick+0xac>)
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_InitTick+0xac>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_InitTick+0xac>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <HAL_InitTick+0xac>)
 80015ce:	f008 fc27 	bl	8009e20 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d104      	bne.n	80015e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <HAL_InitTick+0xac>)
 80015da:	f008 fc4c 	bl	8009e76 <HAL_TIM_Base_Start_IT>
 80015de:	4603      	mov	r3, r0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3730      	adds	r7, #48	; 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	431bde83 	.word	0x431bde83
 80015f4:	200088ac 	.word	0x200088ac
 80015f8:	40001000 	.word	0x40001000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <TIM6_DAC_IRQHandler+0x10>)
 8001636:	f008 fc42 	bl	8009ebe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200088ac 	.word	0x200088ac

08001644 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <OTG_HS_IRQHandler+0x10>)
 800164a:	f004 f8af 	bl	80057ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20008e54 	.word	0x20008e54

08001658 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <LTDC_IRQHandler+0x10>)
 800165e:	f006 fc43 	bl	8007ee8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200087ac 	.word	0x200087ac

0800166c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA2D_IRQHandler+0x10>)
 8001672:	f003 f900 	bl	8004876 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200086e0 	.word	0x200086e0

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f00f fad0 	bl	8010c54 <__errno>
 80016b4:	4602      	mov	r2, r0
 80016b6:	230c      	movs	r3, #12
 80016b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20030000 	.word	0x20030000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	20000398 	.word	0x20000398
 80016e8:	20009120 	.word	0x20009120

080016ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <SystemInit+0x28>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f6:	4a07      	ldr	r2, [pc, #28]	; (8001714 <SystemInit+0x28>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SystemInit+0x28>)
 8001702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001706:	609a      	str	r2, [r3, #8]
#endif
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001736:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <MX_TIM1_Init+0x9c>)
 8001738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <MX_TIM1_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_TIM1_Init+0x98>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001760:	4813      	ldr	r0, [pc, #76]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001762:	f008 fb5d 	bl	8009e20 <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800176c:	f7ff fe1c 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	4619      	mov	r1, r3
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <MX_TIM1_Init+0x98>)
 800177e:	f008 fca6 	bl	800a0ce <HAL_TIM_ConfigClockSource>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001788:	f7ff fe0e 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_TIM1_Init+0x98>)
 800179a:	f008 feb1 	bl	800a500 <HAL_TIMEx_MasterConfigSynchronization>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017a4:	f7ff fe00 	bl	80013a8 <Error_Handler>
  }

}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200088ec 	.word	0x200088ec
 80017b4:	40010000 	.word	0x40010000

080017b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_TIM_Base_MspInit+0x3c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10d      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_TIM_Base_MspInit+0x40>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_TIM_Base_MspInit+0x40>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <HAL_TIM_Base_MspInit+0x40>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40010000 	.word	0x40010000
 80017f8:	40023800 	.word	0x40023800

080017fc <Touchscreen_Calibration>:
  * @brief  Performs the TS calibration
  * @param  None
  * @retval None
  */
void Touchscreen_Calibration(void)
{ 
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	71fb      	strb	r3, [r7, #7]

  TouchscreenCalibration_SetHint();
 800180a:	f000 f8f1 	bl	80019f0 <TouchscreenCalibration_SetHint>
  
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800180e:	f001 fa8b 	bl	8002d28 <BSP_LCD_GetXSize>
 8001812:	4603      	mov	r3, r0
 8001814:	b29c      	uxth	r4, r3
 8001816:	f001 fa93 	bl	8002d40 <BSP_LCD_GetYSize>
 800181a:	4603      	mov	r3, r0
 800181c:	b29b      	uxth	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	4620      	mov	r0, r4
 8001822:	f002 fac1 	bl	8003da8 <BSP_TS_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	71bb      	strb	r3, [r7, #6]
  
  if (status != TS_OK)
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01c      	beq.n	800186a <Touchscreen_Calibration+0x6e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f001 fb6e 	bl	8002f14 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001838:	4861      	ldr	r0, [pc, #388]	; (80019c0 <Touchscreen_Calibration+0x1c4>)
 800183a:	f001 fb53 	bl	8002ee4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 800183e:	f001 fa7f 	bl	8002d40 <BSP_LCD_GetYSize>
 8001842:	4603      	mov	r3, r0
 8001844:	b29b      	uxth	r3, r3
 8001846:	3b5f      	subs	r3, #95	; 0x5f
 8001848:	b299      	uxth	r1, r3
 800184a:	2301      	movs	r3, #1
 800184c:	4a5d      	ldr	r2, [pc, #372]	; (80019c4 <Touchscreen_Calibration+0x1c8>)
 800184e:	2000      	movs	r0, #0
 8001850:	f001 fc00 	bl	8003054 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 8001854:	f001 fa74 	bl	8002d40 <BSP_LCD_GetYSize>
 8001858:	4603      	mov	r3, r0
 800185a:	b29b      	uxth	r3, r3
 800185c:	3b50      	subs	r3, #80	; 0x50
 800185e:	b299      	uxth	r1, r3
 8001860:	2301      	movs	r3, #1
 8001862:	4a59      	ldr	r2, [pc, #356]	; (80019c8 <Touchscreen_Calibration+0x1cc>)
 8001864:	2000      	movs	r0, #0
 8001866:	f001 fbf5 	bl	8003054 <BSP_LCD_DisplayStringAt>
  }
  
  while (1)
  {
    if (status == TS_OK)
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 80a0 	bne.w	80019b2 <Touchscreen_Calibration+0x1b6>
    {
      aLogX[0] = 15;
 8001872:	4b56      	ldr	r3, [pc, #344]	; (80019cc <Touchscreen_Calibration+0x1d0>)
 8001874:	220f      	movs	r2, #15
 8001876:	801a      	strh	r2, [r3, #0]
      aLogY[0] = 15;
 8001878:	4b55      	ldr	r3, [pc, #340]	; (80019d0 <Touchscreen_Calibration+0x1d4>)
 800187a:	220f      	movs	r2, #15
 800187c:	801a      	strh	r2, [r3, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 800187e:	f001 fa53 	bl	8002d28 <BSP_LCD_GetXSize>
 8001882:	4603      	mov	r3, r0
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b0f      	subs	r3, #15
 8001888:	b29b      	uxth	r3, r3
 800188a:	b21a      	sxth	r2, r3
 800188c:	4b4f      	ldr	r3, [pc, #316]	; (80019cc <Touchscreen_Calibration+0x1d0>)
 800188e:	805a      	strh	r2, [r3, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 8001890:	f001 fa56 	bl	8002d40 <BSP_LCD_GetYSize>
 8001894:	4603      	mov	r3, r0
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b0f      	subs	r3, #15
 800189a:	b29b      	uxth	r3, r3
 800189c:	b21a      	sxth	r2, r3
 800189e:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <Touchscreen_Calibration+0x1d4>)
 80018a0:	805a      	strh	r2, [r3, #2]
      
      for (i = 0; i < 2; i++) 
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]
 80018a6:	e015      	b.n	80018d4 <Touchscreen_Calibration+0xd8>
      {
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4a48      	ldr	r2, [pc, #288]	; (80019cc <Touchscreen_Calibration+0x1d0>)
 80018ac:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <Touchscreen_Calibration+0x1d4>)
 80018b4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4a45      	ldr	r2, [pc, #276]	; (80019d4 <Touchscreen_Calibration+0x1d8>)
 80018be:	189c      	adds	r4, r3, r2
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4a44      	ldr	r2, [pc, #272]	; (80019d8 <Touchscreen_Calibration+0x1dc>)
 80018c6:	4413      	add	r3, r2
 80018c8:	4622      	mov	r2, r4
 80018ca:	f000 f8d1 	bl	8001a70 <GetPhysValues>
      for (i = 0; i < 2; i++) 
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	3301      	adds	r3, #1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d9e6      	bls.n	80018a8 <Touchscreen_Calibration+0xac>
      }
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 80018da:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <Touchscreen_Calibration+0x1d0>)
 80018dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <Touchscreen_Calibration+0x1d0>)
 80018e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ee:	fb02 f203 	mul.w	r2, r2, r3
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <Touchscreen_Calibration+0x1d8>)
 80018f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <Touchscreen_Calibration+0x1d8>)
 80018fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001900:	1acb      	subs	r3, r1, r3
 8001902:	fb92 f3f3 	sdiv	r3, r2, r3
 8001906:	b21a      	sxth	r2, r3
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <Touchscreen_Calibration+0x1e0>)
 800190a:	801a      	strh	r2, [r3, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <Touchscreen_Calibration+0x1d0>)
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	b29b      	uxth	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	0152      	lsls	r2, r2, #5
 8001918:	1ad2      	subs	r2, r2, r3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <Touchscreen_Calibration+0x1d8>)
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	b299      	uxth	r1, r3
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <Touchscreen_Calibration+0x1e0>)
 800192c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001930:	b29b      	uxth	r3, r3
 8001932:	fb11 f303 	smulbb	r3, r1, r3
 8001936:	b29b      	uxth	r3, r3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	b29b      	uxth	r3, r3
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <Touchscreen_Calibration+0x1e4>)
 8001940:	801a      	strh	r2, [r3, #0]
      
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <Touchscreen_Calibration+0x1d4>)
 8001944:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001948:	461a      	mov	r2, r3
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <Touchscreen_Calibration+0x1d4>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001956:	fb02 f203 	mul.w	r2, r2, r3
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <Touchscreen_Calibration+0x1dc>)
 800195c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001960:	4619      	mov	r1, r3
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <Touchscreen_Calibration+0x1dc>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	1acb      	subs	r3, r1, r3
 800196a:	fb92 f3f3 	sdiv	r3, r2, r3
 800196e:	b21a      	sxth	r2, r3
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <Touchscreen_Calibration+0x1e8>)
 8001972:	801a      	strh	r2, [r3, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <Touchscreen_Calibration+0x1d4>)
 8001976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	0152      	lsls	r2, r2, #5
 8001980:	1ad2      	subs	r2, r2, r3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <Touchscreen_Calibration+0x1dc>)
 800198c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001990:	b299      	uxth	r1, r3
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <Touchscreen_Calibration+0x1e8>)
 8001994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001998:	b29b      	uxth	r3, r3
 800199a:	fb11 f303 	smulbb	r3, r1, r3
 800199e:	b29b      	uxth	r3, r3
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <Touchscreen_Calibration+0x1ec>)
 80019a8:	801a      	strh	r2, [r3, #0]
      
      Calibration_Done = 1;
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <Touchscreen_Calibration+0x1f0>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
      return;
 80019b0:	e003      	b.n	80019ba <Touchscreen_Calibration+0x1be>
    }
   
    HAL_Delay(5);
 80019b2:	2005      	movs	r0, #5
 80019b4:	f002 fb26 	bl	8004004 <HAL_Delay>
    if (status == TS_OK)
 80019b8:	e757      	b.n	800186a <Touchscreen_Calibration+0x6e>
  }
}
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	ffff0000 	.word	0xffff0000
 80019c4:	08010f5c 	.word	0x08010f5c
 80019c8:	08010f64 	.word	0x08010f64
 80019cc:	200003b8 	.word	0x200003b8
 80019d0:	200003bc 	.word	0x200003bc
 80019d4:	200003b0 	.word	0x200003b0
 80019d8:	200003b4 	.word	0x200003b4
 80019dc:	200003a6 	.word	0x200003a6
 80019e0:	200003aa 	.word	0x200003aa
 80019e4:	200003a8 	.word	0x200003a8
 80019e8:	200003ac 	.word	0x200003ac
 80019ec:	200003a4 	.word	0x200003a4

080019f0 <TouchscreenCalibration_SetHint>:
  * @brief  Display calibration hint
  * @param  None
  * @retval None
  */
static void TouchscreenCalibration_SetHint(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f001 fac0 	bl	8002f7c <BSP_LCD_Clear>
  
  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80019fc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a00:	f001 fa70 	bl	8002ee4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f001 fa84 	bl	8002f14 <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font12);
 8001a0c:	4814      	ldr	r0, [pc, #80]	; (8001a60 <TouchscreenCalibration_SetHint+0x70>)
 8001a0e:	f001 fa9b 	bl	8002f48 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 8001a12:	f001 f995 	bl	8002d40 <BSP_LCD_GetYSize>
 8001a16:	4603      	mov	r3, r0
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3b1b      	subs	r3, #27
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	2301      	movs	r3, #1
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <TouchscreenCalibration_SetHint+0x74>)
 8001a24:	2000      	movs	r0, #0
 8001a26:	f001 fb15 	bl	8003054 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 8001a2a:	f001 f989 	bl	8002d40 <BSP_LCD_GetYSize>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b0c      	subs	r3, #12
 8001a36:	b299      	uxth	r1, r3
 8001a38:	2301      	movs	r3, #1
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <TouchscreenCalibration_SetHint+0x78>)
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f001 fb09 	bl	8003054 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 8001a42:	f001 f97d 	bl	8002d40 <BSP_LCD_GetYSize>
 8001a46:	4603      	mov	r3, r0
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3303      	adds	r3, #3
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	2301      	movs	r3, #1
 8001a52:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <TouchscreenCalibration_SetHint+0x7c>)
 8001a54:	2000      	movs	r0, #0
 8001a56:	f001 fafd 	bl	8003054 <BSP_LCD_DisplayStringAt>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000074 	.word	0x20000074
 8001a64:	08010f88 	.word	0x08010f88
 8001a68:	08010fa8 	.word	0x08010fa8
 8001a6c:	08010fc4 	.word	0x08010fc4

08001a70 <GetPhysValues>:
  * @param  pPhysX : Physical X position
  * @param  pPhysY : Physical Y position
  * @retval None
  */
static void GetPhysValues(int16_t LogX, int16_t LogY, int16_t * pPhysX, int16_t * pPhysY) 
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	81fb      	strh	r3, [r7, #14]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a82:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a86:	f001 fa2d 	bl	8002ee4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8001a8a:	89fb      	ldrh	r3, [r7, #14]
 8001a8c:	89b9      	ldrh	r1, [r7, #12]
 8001a8e:	2205      	movs	r2, #5
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fd21 	bl	80034d8 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001a96:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9a:	f001 fa23 	bl	8002ee4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 8001a9e:	89fb      	ldrh	r3, [r7, #14]
 8001aa0:	89b9      	ldrh	r1, [r7, #12]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f001 fd17 	bl	80034d8 <BSP_LCD_FillCircle>
  
  /* Wait until touch is pressed */
  WaitForPressedState(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 f820 	bl	8001af0 <WaitForPressedState>
  
  BSP_TS_GetState(&TS_State);
 8001ab0:	480e      	ldr	r0, [pc, #56]	; (8001aec <GetPhysValues+0x7c>)
 8001ab2:	f002 f9b3 	bl	8003e1c <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <GetPhysValues+0x7c>)
 8001ab8:	885b      	ldrh	r3, [r3, #2]
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.Y; 
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <GetPhysValues+0x7c>)
 8001ac2:	889b      	ldrh	r3, [r3, #4]
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	801a      	strh	r2, [r3, #0]
  
  /* Wait until touch is released */
  WaitForPressedState(0);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 f810 	bl	8001af0 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f001 fa06 	bl	8002ee4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	89b9      	ldrh	r1, [r7, #12]
 8001adc:	2205      	movs	r2, #5
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 fcfa 	bl	80034d8 <BSP_LCD_FillCircle>
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000039c 	.word	0x2000039c

08001af0 <WaitForPressedState>:
  * @brief  Wait For Pressed State
  * @param  Pressed: Pressed State
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed) 
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef  State;
  
  do 
  {
    BSP_TS_GetState(&State);
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 f98c 	bl	8003e1c <BSP_TS_GetState>
    HAL_Delay(10);
 8001b04:	200a      	movs	r0, #10
 8001b06:	f002 fa7d 	bl	8004004 <HAL_Delay>
    if (State.TouchDetected == Pressed) 
 8001b0a:	89ba      	ldrh	r2, [r7, #12]
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1f2      	bne.n	8001afa <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 8001b14:	f002 fa6a 	bl	8003fec <HAL_GetTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	82fb      	strh	r3, [r7, #22]
      do {
        BSP_TS_GetState(&State);      
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 f97b 	bl	8003e1c <BSP_TS_GetState>
        HAL_Delay(10);
 8001b26:	200a      	movs	r0, #10
 8001b28:	f002 fa6c 	bl	8004004 <HAL_Delay>
        if (State.TouchDetected != Pressed) 
 8001b2c:	89ba      	ldrh	r2, [r7, #12]
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d108      	bne.n	8001b48 <WaitForPressedState+0x58>
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 8001b36:	f002 fa59 	bl	8003fec <HAL_GetTick>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001b40:	8afb      	ldrh	r3, [r7, #22]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d802      	bhi.n	8001b4c <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);      
 8001b46:	e7e9      	b.n	8001b1c <WaitForPressedState+0x2c>
          break;
 8001b48:	bf00      	nop
    BSP_TS_GetState(&State);
 8001b4a:	e7d6      	b.n	8001afa <WaitForPressedState+0xa>
        {
          return;
 8001b4c:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <Calibration_GetX>:
  * @brief  Calibrate X position
  * @param  x: X position
  * @retval calibrated x
  */
uint16_t Calibration_GetX(uint16_t x)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
  return (((A1 * x) + B1)/1000);
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <Calibration_GetX+0x3c>)
 8001b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b64:	461a      	mov	r2, r3
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	fb03 f302 	mul.w	r3, r3, r2
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <Calibration_GetX+0x40>)
 8001b6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <Calibration_GetX+0x44>)
 8001b76:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7a:	1192      	asrs	r2, r2, #6
 8001b7c:	17db      	asrs	r3, r3, #31
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b29b      	uxth	r3, r3
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200003a6 	.word	0x200003a6
 8001b94:	200003aa 	.word	0x200003aa
 8001b98:	10624dd3 	.word	0x10624dd3

08001b9c <Calibration_GetY>:
  * @brief  Calibrate Y position
  * @param  y: Y position
  * @retval calibrated y
  */
uint16_t Calibration_GetY(uint16_t y)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  return (((A2 * y) + B2)/1000);
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <Calibration_GetY+0x3c>)
 8001ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bac:	461a      	mov	r2, r3
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	fb03 f302 	mul.w	r3, r3, r2
 8001bb4:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <Calibration_GetY+0x40>)
 8001bb6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <Calibration_GetY+0x44>)
 8001bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc2:	1192      	asrs	r2, r2, #6
 8001bc4:	17db      	asrs	r3, r3, #31
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	b29b      	uxth	r3, r3
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200003a8 	.word	0x200003a8
 8001bdc:	200003ac 	.word	0x200003ac
 8001be0:	10624dd3 	.word	0x10624dd3

08001be4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <MX_USART1_UART_Init+0x50>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001c1c:	f008 fd00 	bl	800a620 <HAL_UART_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c26:	f7ff fbbf 	bl	80013a8 <Error_Handler>
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000892c 	.word	0x2000892c
 8001c34:	40011000 	.word	0x40011000

08001c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_UART_MspInit+0x84>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d12c      	bne.n	8001cb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_UART_MspInit+0x88>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_UART_MspInit+0x88>)
 8001c64:	f043 0310 	orr.w	r3, r3, #16
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_UART_MspInit+0x88>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_UART_MspInit+0x88>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_UART_MspInit+0x88>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_UART_MspInit+0x88>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_UART_MspInit+0x8c>)
 8001cb0:	f003 f820 	bl	8004cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3728      	adds	r7, #40	; 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40011000 	.word	0x40011000
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000

08001cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d00 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ccc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cce:	e003      	b.n	8001cd8 <LoopCopyDataInit>

08001cd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cd6:	3104      	adds	r1, #4

08001cd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cd8:	480b      	ldr	r0, [pc, #44]	; (8001d08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ce0:	d3f6      	bcc.n	8001cd0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ce4:	e002      	b.n	8001cec <LoopFillZerobss>

08001ce6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ce6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ce8:	f842 3b04 	str.w	r3, [r2], #4

08001cec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cf0:	d3f9      	bcc.n	8001ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cf2:	f7ff fcfb 	bl	80016ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f00e ffb3 	bl	8010c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff f979 	bl	8000ff0 <main>
  bx  lr    
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d00:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001d04:	08012fa8 	.word	0x08012fa8
  ldr  r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d0c:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8001d10:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8001d14:	2000911c 	.word	0x2000911c

08001d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC_IRQHandler>

08001d1a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001d1e:	f000 fe4b 	bl	80029b8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001d22:	20ca      	movs	r0, #202	; 0xca
 8001d24:	f000 f95d 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001d28:	20c3      	movs	r0, #195	; 0xc3
 8001d2a:	f000 f967 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001d2e:	2008      	movs	r0, #8
 8001d30:	f000 f964 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001d34:	2050      	movs	r0, #80	; 0x50
 8001d36:	f000 f961 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001d3a:	20cf      	movs	r0, #207	; 0xcf
 8001d3c:	f000 f951 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f000 f95b 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001d46:	20c1      	movs	r0, #193	; 0xc1
 8001d48:	f000 f958 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001d4c:	2030      	movs	r0, #48	; 0x30
 8001d4e:	f000 f955 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001d52:	20ed      	movs	r0, #237	; 0xed
 8001d54:	f000 f945 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001d58:	2064      	movs	r0, #100	; 0x64
 8001d5a:	f000 f94f 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f000 f94c 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001d64:	2012      	movs	r0, #18
 8001d66:	f000 f949 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001d6a:	2081      	movs	r0, #129	; 0x81
 8001d6c:	f000 f946 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001d70:	20e8      	movs	r0, #232	; 0xe8
 8001d72:	f000 f936 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001d76:	2085      	movs	r0, #133	; 0x85
 8001d78:	f000 f940 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 f93d 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d82:	2078      	movs	r0, #120	; 0x78
 8001d84:	f000 f93a 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001d88:	20cb      	movs	r0, #203	; 0xcb
 8001d8a:	f000 f92a 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001d8e:	2039      	movs	r0, #57	; 0x39
 8001d90:	f000 f934 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001d94:	202c      	movs	r0, #44	; 0x2c
 8001d96:	f000 f931 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f92e 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001da0:	2034      	movs	r0, #52	; 0x34
 8001da2:	f000 f92b 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001da6:	2002      	movs	r0, #2
 8001da8:	f000 f928 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001dac:	20f7      	movs	r0, #247	; 0xf7
 8001dae:	f000 f918 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001db2:	2020      	movs	r0, #32
 8001db4:	f000 f922 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001db8:	20ea      	movs	r0, #234	; 0xea
 8001dba:	f000 f912 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f000 f91c 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f000 f919 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001dca:	20b1      	movs	r0, #177	; 0xb1
 8001dcc:	f000 f909 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f000 f913 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001dd6:	201b      	movs	r0, #27
 8001dd8:	f000 f910 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001ddc:	20b6      	movs	r0, #182	; 0xb6
 8001dde:	f000 f900 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001de2:	200a      	movs	r0, #10
 8001de4:	f000 f90a 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001de8:	20a2      	movs	r0, #162	; 0xa2
 8001dea:	f000 f907 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001dee:	20c0      	movs	r0, #192	; 0xc0
 8001df0:	f000 f8f7 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001df4:	2010      	movs	r0, #16
 8001df6:	f000 f901 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001dfa:	20c1      	movs	r0, #193	; 0xc1
 8001dfc:	f000 f8f1 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001e00:	2010      	movs	r0, #16
 8001e02:	f000 f8fb 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001e06:	20c5      	movs	r0, #197	; 0xc5
 8001e08:	f000 f8eb 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001e0c:	2045      	movs	r0, #69	; 0x45
 8001e0e:	f000 f8f5 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001e12:	2015      	movs	r0, #21
 8001e14:	f000 f8f2 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001e18:	20c7      	movs	r0, #199	; 0xc7
 8001e1a:	f000 f8e2 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001e1e:	2090      	movs	r0, #144	; 0x90
 8001e20:	f000 f8ec 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001e24:	2036      	movs	r0, #54	; 0x36
 8001e26:	f000 f8dc 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001e2a:	20c8      	movs	r0, #200	; 0xc8
 8001e2c:	f000 f8e6 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001e30:	20f2      	movs	r0, #242	; 0xf2
 8001e32:	f000 f8d6 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 f8e0 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001e3c:	20b0      	movs	r0, #176	; 0xb0
 8001e3e:	f000 f8d0 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001e42:	20c2      	movs	r0, #194	; 0xc2
 8001e44:	f000 f8da 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001e48:	20b6      	movs	r0, #182	; 0xb6
 8001e4a:	f000 f8ca 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001e4e:	200a      	movs	r0, #10
 8001e50:	f000 f8d4 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001e54:	20a7      	movs	r0, #167	; 0xa7
 8001e56:	f000 f8d1 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001e5a:	2027      	movs	r0, #39	; 0x27
 8001e5c:	f000 f8ce 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e60:	2004      	movs	r0, #4
 8001e62:	f000 f8cb 	bl	8001ffc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001e66:	202a      	movs	r0, #42	; 0x2a
 8001e68:	f000 f8bb 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 f8c5 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e72:	2000      	movs	r0, #0
 8001e74:	f000 f8c2 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f000 f8bf 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001e7e:	20ef      	movs	r0, #239	; 0xef
 8001e80:	f000 f8bc 	bl	8001ffc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001e84:	202b      	movs	r0, #43	; 0x2b
 8001e86:	f000 f8ac 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 f8b6 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 f8b3 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f000 f8b0 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001e9c:	203f      	movs	r0, #63	; 0x3f
 8001e9e:	f000 f8ad 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001ea2:	20f6      	movs	r0, #246	; 0xf6
 8001ea4:	f000 f89d 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f000 f8a7 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f000 f8a4 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001eb4:	2006      	movs	r0, #6
 8001eb6:	f000 f8a1 	bl	8001ffc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001eba:	202c      	movs	r0, #44	; 0x2c
 8001ebc:	f000 f891 	bl	8001fe2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001ec0:	20c8      	movs	r0, #200	; 0xc8
 8001ec2:	f000 fe67 	bl	8002b94 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001ec6:	2026      	movs	r0, #38	; 0x26
 8001ec8:	f000 f88b 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f000 f895 	bl	8001ffc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001ed2:	20e0      	movs	r0, #224	; 0xe0
 8001ed4:	f000 f885 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001ed8:	200f      	movs	r0, #15
 8001eda:	f000 f88f 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001ede:	2029      	movs	r0, #41	; 0x29
 8001ee0:	f000 f88c 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001ee4:	2024      	movs	r0, #36	; 0x24
 8001ee6:	f000 f889 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001eea:	200c      	movs	r0, #12
 8001eec:	f000 f886 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001ef0:	200e      	movs	r0, #14
 8001ef2:	f000 f883 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ef6:	2009      	movs	r0, #9
 8001ef8:	f000 f880 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001efc:	204e      	movs	r0, #78	; 0x4e
 8001efe:	f000 f87d 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f02:	2078      	movs	r0, #120	; 0x78
 8001f04:	f000 f87a 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001f08:	203c      	movs	r0, #60	; 0x3c
 8001f0a:	f000 f877 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001f0e:	2009      	movs	r0, #9
 8001f10:	f000 f874 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001f14:	2013      	movs	r0, #19
 8001f16:	f000 f871 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f1a:	2005      	movs	r0, #5
 8001f1c:	f000 f86e 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001f20:	2017      	movs	r0, #23
 8001f22:	f000 f86b 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f26:	2011      	movs	r0, #17
 8001f28:	f000 f868 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 f865 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001f32:	20e1      	movs	r0, #225	; 0xe1
 8001f34:	f000 f855 	bl	8001fe2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 f85f 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001f3e:	2016      	movs	r0, #22
 8001f40:	f000 f85c 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001f44:	201b      	movs	r0, #27
 8001f46:	f000 f859 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001f4a:	2004      	movs	r0, #4
 8001f4c:	f000 f856 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f50:	2011      	movs	r0, #17
 8001f52:	f000 f853 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001f56:	2007      	movs	r0, #7
 8001f58:	f000 f850 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001f5c:	2031      	movs	r0, #49	; 0x31
 8001f5e:	f000 f84d 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001f62:	2033      	movs	r0, #51	; 0x33
 8001f64:	f000 f84a 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001f68:	2042      	movs	r0, #66	; 0x42
 8001f6a:	f000 f847 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f6e:	2005      	movs	r0, #5
 8001f70:	f000 f844 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f74:	200c      	movs	r0, #12
 8001f76:	f000 f841 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001f7a:	200a      	movs	r0, #10
 8001f7c:	f000 f83e 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001f80:	2028      	movs	r0, #40	; 0x28
 8001f82:	f000 f83b 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001f86:	202f      	movs	r0, #47	; 0x2f
 8001f88:	f000 f838 	bl	8001ffc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001f8c:	200f      	movs	r0, #15
 8001f8e:	f000 f835 	bl	8001ffc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001f92:	2011      	movs	r0, #17
 8001f94:	f000 f825 	bl	8001fe2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001f98:	20c8      	movs	r0, #200	; 0xc8
 8001f9a:	f000 fdfb 	bl	8002b94 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f9e:	2029      	movs	r0, #41	; 0x29
 8001fa0:	f000 f81f 	bl	8001fe2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001fa4:	202c      	movs	r0, #44	; 0x2c
 8001fa6:	f000 f81c 	bl	8001fe2 <ili9341_WriteReg>
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}

08001fae <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001fb2:	f000 fd01 	bl	80029b8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	20d3      	movs	r0, #211	; 0xd3
 8001fba:	f000 f82c 	bl	8002016 <ili9341_ReadData>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b29b      	uxth	r3, r3
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001fca:	2029      	movs	r0, #41	; 0x29
 8001fcc:	f000 f809 	bl	8001fe2 <ili9341_WriteReg>
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001fd8:	2028      	movs	r0, #40	; 0x28
 8001fda:	f000 f802 	bl	8001fe2 <ili9341_WriteReg>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fd7c 	bl	8002aec <LCD_IO_WriteReg>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fd4d 	bl	8002aa8 <LCD_IO_WriteData>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	460a      	mov	r2, r1
 8002020:	80fb      	strh	r3, [r7, #6]
 8002022:	4613      	mov	r3, r2
 8002024:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002026:	797a      	ldrb	r2, [r7, #5]
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fd7f 	bl	8002b30 <LCD_IO_ReadData>
 8002032:	4603      	mov	r3, r0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002040:	23f0      	movs	r3, #240	; 0xf0
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002050:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fa59 	bl	8002524 <stmpe811_GetInstance>
 8002072:	4603      	mov	r3, r0
 8002074:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2bff      	cmp	r3, #255	; 0xff
 800207a:	d112      	bne.n	80020a2 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800207c:	2000      	movs	r0, #0
 800207e:	f000 fa51 	bl	8002524 <stmpe811_GetInstance>
 8002082:	4603      	mov	r3, r0
 8002084:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002086:	7bbb      	ldrb	r3, [r7, #14]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d80a      	bhi.n	80020a2 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800208c:	7bbb      	ldrb	r3, [r7, #14]
 800208e:	88fa      	ldrh	r2, [r7, #6]
 8002090:	b2d1      	uxtb	r1, r2
 8002092:	4a06      	ldr	r2, [pc, #24]	; (80020ac <stmpe811_Init+0x4c>)
 8002094:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002096:	f000 fd88 	bl	8002baa <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	4618      	mov	r0, r3
 800209e:	f000 f807 	bl	80020b0 <stmpe811_Reset>
    }
  }
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200003c0 	.word	0x200003c0

080020b0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2202      	movs	r2, #2
 80020c0:	2103      	movs	r1, #3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fd7d 	bl	8002bc2 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80020c8:	200a      	movs	r0, #10
 80020ca:	f000 fdb7 	bl	8002c3c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	2103      	movs	r1, #3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fd73 	bl	8002bc2 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80020dc:	2002      	movs	r0, #2
 80020de:	f000 fdad 	bl	8002c3c <IOE_Delay>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80020ea:	b590      	push	{r4, r7, lr}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80020f4:	f000 fd59 	bl	8002baa <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fd72 	bl	8002be8 <IOE_Read>
 8002104:	4603      	mov	r3, r0
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2101      	movs	r1, #1
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fd69 	bl	8002be8 <IOE_Read>
 8002116:	4603      	mov	r3, r0
 8002118:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800211a:	4323      	orrs	r3, r4
 800211c:	b21b      	sxth	r3, r3
 800211e:	b29b      	uxth	r3, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bd90      	pop	{r4, r7, pc}

08002128 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2109      	movs	r1, #9
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fd53 	bl	8002be8 <IOE_Read>
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	2109      	movs	r1, #9
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fd33 	bl	8002bc2 <IOE_Write>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2109      	movs	r1, #9
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fd35 	bl	8002be8 <IOE_Read>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	2109      	movs	r1, #9
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fd15 	bl	8002bc2 <IOE_Write>
    
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	460a      	mov	r2, r1
 80021aa:	80fb      	strh	r3, [r7, #6]
 80021ac:	4613      	mov	r3, r2
 80021ae:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	210a      	movs	r1, #10
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fd14 	bl	8002be8 <IOE_Read>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	797b      	ldrb	r3, [r7, #5]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	210a      	movs	r1, #10
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fcf4 	bl	8002bc2 <IOE_Write>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	460a      	mov	r2, r1
 80021ec:	80fb      	strh	r3, [r7, #6]
 80021ee:	4613      	mov	r3, r2
 80021f0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	210a      	movs	r1, #10
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fcf3 	bl	8002be8 <IOE_Read>
 8002202:	4603      	mov	r3, r0
 8002204:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002206:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800220a:	43db      	mvns	r3, r3
 800220c:	b25a      	sxtb	r2, r3
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4013      	ands	r3, r2
 8002214:	b25b      	sxtb	r3, r3
 8002216:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	210a      	movs	r1, #10
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fcce 	bl	8002bc2 <IOE_Write>
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	460a      	mov	r2, r1
 8002238:	80fb      	strh	r3, [r7, #6]
 800223a:	4613      	mov	r3, r2
 800223c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	210b      	movs	r1, #11
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fccf 	bl	8002be8 <IOE_Read>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	797b      	ldrb	r3, [r7, #5]
 8002250:	4013      	ands	r3, r2
 8002252:	b2db      	uxtb	r3, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	460a      	mov	r2, r1
 8002266:	80fb      	strh	r3, [r7, #6]
 8002268:	4613      	mov	r3, r2
 800226a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	797a      	ldrb	r2, [r7, #5]
 8002272:	210b      	movs	r1, #11
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fca4 	bl	8002bc2 <IOE_Write>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	6039      	str	r1, [r7, #0]
 800228c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2117      	movs	r1, #23
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fca5 	bl	8002be8 <IOE_Read>
 800229e:	4603      	mov	r3, r0
 80022a0:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b25b      	sxtb	r3, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	b25a      	sxtb	r2, r3
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4013      	ands	r3, r2
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	2117      	movs	r1, #23
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fc80 	bl	8002bc2 <IOE_Write>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2104      	movs	r1, #4
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fc84 	bl	8002be8 <IOE_Read>
 80022e0:	4603      	mov	r3, r0
 80022e2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	2104      	movs	r1, #4
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fc64 	bl	8002bc2 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	21f0      	movs	r1, #240	; 0xf0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ffbf 	bl	8002282 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	2104      	movs	r1, #4
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fc54 	bl	8002bc2 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2249      	movs	r2, #73	; 0x49
 8002320:	2120      	movs	r1, #32
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fc4d 	bl	8002bc2 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002328:	2002      	movs	r0, #2
 800232a:	f000 fc87 	bl	8002c3c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2201      	movs	r2, #1
 8002334:	2121      	movs	r1, #33	; 0x21
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fc43 	bl	8002bc2 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	229a      	movs	r2, #154	; 0x9a
 8002342:	2141      	movs	r1, #65	; 0x41
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fc3c 	bl	8002bc2 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2201      	movs	r2, #1
 8002350:	214a      	movs	r1, #74	; 0x4a
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fc35 	bl	8002bc2 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2201      	movs	r2, #1
 800235e:	214b      	movs	r1, #75	; 0x4b
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fc2e 	bl	8002bc2 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2200      	movs	r2, #0
 800236c:	214b      	movs	r1, #75	; 0x4b
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fc27 	bl	8002bc2 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2201      	movs	r2, #1
 800237a:	2156      	movs	r1, #86	; 0x56
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fc20 	bl	8002bc2 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2201      	movs	r2, #1
 8002388:	2158      	movs	r1, #88	; 0x58
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fc19 	bl	8002bc2 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2201      	movs	r2, #1
 8002396:	2140      	movs	r1, #64	; 0x40
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fc12 	bl	8002bc2 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	210b      	movs	r1, #11
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fc0b 	bl	8002bc2 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80023ac:	2002      	movs	r0, #2
 80023ae:	f000 fc45 	bl	8002c3c <IOE_Delay>
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2140      	movs	r1, #64	; 0x40
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fc0a 	bl	8002be8 <IOE_Read>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	2b80      	cmp	r3, #128	; 0x80
 80023dc:	bf0c      	ite	eq
 80023de:	2301      	moveq	r3, #1
 80023e0:	2300      	movne	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80023e6:	7bbb      	ldrb	r3, [r7, #14]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	214c      	movs	r1, #76	; 0x4c
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fbf8 	bl	8002be8 <IOE_Read>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d010      	beq.n	8002420 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e00d      	b.n	8002420 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2201      	movs	r2, #1
 800240a:	214b      	movs	r1, #75	; 0x4b
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fbd8 	bl	8002bc2 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2200      	movs	r2, #0
 8002418:	214b      	movs	r1, #75	; 0x4b
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fbd1 	bl	8002bc2 <IOE_Write>
  }
  
  return ret;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	b2d8      	uxtb	r0, r3
 800243c:	f107 0210 	add.w	r2, r7, #16
 8002440:	2304      	movs	r3, #4
 8002442:	21d7      	movs	r1, #215	; 0xd7
 8002444:	f000 fbe3 	bl	8002c0e <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002448:	7c3b      	ldrb	r3, [r7, #16]
 800244a:	061a      	lsls	r2, r3, #24
 800244c:	7c7b      	ldrb	r3, [r7, #17]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	431a      	orrs	r2, r3
 8002452:	7cbb      	ldrb	r3, [r7, #18]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	4313      	orrs	r3, r2
 8002458:	7cfa      	ldrb	r2, [r7, #19]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	0d1b      	lsrs	r3, r3, #20
 8002462:	b29a      	uxth	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	b29b      	uxth	r3, r3
 800246e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002472:	b29a      	uxth	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002478:	89fb      	ldrh	r3, [r7, #14]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2201      	movs	r2, #1
 800247e:	214b      	movs	r1, #75	; 0x4b
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fb9e 	bl	8002bc2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2200      	movs	r2, #0
 800248c:	214b      	movs	r1, #75	; 0x4b
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fb97 	bl	8002bc2 <IOE_Write>
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80024a6:	f000 fb86 	bl	8002bb6 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	211f      	movs	r1, #31
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fe76 	bl	80021a0 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fe36 	bl	8002128 <stmpe811_EnableGlobalIT>
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fe47 	bl	8002164 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	211f      	movs	r1, #31
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fe81 	bl	80021e2 <stmpe811_DisableITSource>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	211f      	movs	r1, #31
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fe99 	bl	800222e <stmpe811_ReadGITStatus>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	211f      	movs	r1, #31
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fea1 	bl	800225c <stmpe811_ClearGlobalIT>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e00b      	b.n	8002550 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <stmpe811_GetInstance+0x40>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	b29b      	uxth	r3, r3
 8002540:	88fa      	ldrh	r2, [r7, #6]
 8002542:	429a      	cmp	r2, r3
 8002544:	d101      	bne.n	800254a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	e006      	b.n	8002558 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	3301      	adds	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d9f0      	bls.n	8002538 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002556:	23ff      	movs	r3, #255	; 0xff
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	200003c0 	.word	0x200003c0

08002568 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a33      	ldr	r2, [pc, #204]	; (8002644 <I2Cx_MspInit+0xdc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d15f      	bne.n	800263a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <I2Cx_MspInit+0xe0>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a31      	ldr	r2, [pc, #196]	; (8002648 <I2Cx_MspInit+0xe0>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <I2Cx_MspInit+0xe0>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <I2Cx_MspInit+0xe0>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a2a      	ldr	r2, [pc, #168]	; (8002648 <I2Cx_MspInit+0xe0>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <I2Cx_MspInit+0xe0>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80025b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80025b8:	2312      	movs	r3, #18
 80025ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80025c4:	2304      	movs	r3, #4
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	481f      	ldr	r0, [pc, #124]	; (800264c <I2Cx_MspInit+0xe4>)
 80025d0:	f002 fb90 	bl	8004cf4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80025d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	481b      	ldr	r0, [pc, #108]	; (8002650 <I2Cx_MspInit+0xe8>)
 80025e2:	f002 fb87 	bl	8004cf4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <I2Cx_MspInit+0xe0>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a16      	ldr	r2, [pc, #88]	; (8002648 <I2Cx_MspInit+0xe0>)
 80025f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <I2Cx_MspInit+0xe0>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <I2Cx_MspInit+0xe0>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <I2Cx_MspInit+0xe0>)
 8002608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800260c:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <I2Cx_MspInit+0xe0>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <I2Cx_MspInit+0xe0>)
 8002614:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002618:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	210f      	movs	r1, #15
 800261e:	2048      	movs	r0, #72	; 0x48
 8002620:	f001 fdca 	bl	80041b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002624:	2048      	movs	r0, #72	; 0x48
 8002626:	f001 fde3 	bl	80041f0 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	210f      	movs	r1, #15
 800262e:	2049      	movs	r0, #73	; 0x49
 8002630:	f001 fdc2 	bl	80041b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002634:	2049      	movs	r0, #73	; 0x49
 8002636:	f001 fddb 	bl	80041f0 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800263a:	bf00      	nop
 800263c:	3728      	adds	r7, #40	; 0x28
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40005c00 	.word	0x40005c00
 8002648:	40023800 	.word	0x40023800
 800264c:	40020000 	.word	0x40020000
 8002650:	40020800 	.word	0x40020800

08002654 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002658:	4814      	ldr	r0, [pc, #80]	; (80026ac <I2Cx_Init+0x58>)
 800265a:	f004 ff91 	bl	8007580 <HAL_I2C_GetState>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d121      	bne.n	80026a8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <I2Cx_Init+0x58>)
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <I2Cx_Init+0x5c>)
 8002668:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <I2Cx_Init+0x58>)
 800266c:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <I2Cx_Init+0x60>)
 800266e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <I2Cx_Init+0x58>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <I2Cx_Init+0x58>)
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <I2Cx_Init+0x58>)
 800267e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002682:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <I2Cx_Init+0x58>)
 8002686:	2200      	movs	r2, #0
 8002688:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <I2Cx_Init+0x58>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <I2Cx_Init+0x58>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <I2Cx_Init+0x58>)
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800269c:	4803      	ldr	r0, [pc, #12]	; (80026ac <I2Cx_Init+0x58>)
 800269e:	f7ff ff63 	bl	8002568 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80026a2:	4802      	ldr	r0, [pc, #8]	; (80026ac <I2Cx_Init+0x58>)
 80026a4:	f004 fae4 	bl	8006c70 <HAL_I2C_Init>
  }
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	2000896c 	.word	0x2000896c
 80026b0:	40005c00 	.word	0x40005c00
 80026b4:	000186a0 	.word	0x000186a0

080026b8 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <I2Cx_ITConfig+0x58>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <I2Cx_ITConfig+0x58>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <I2Cx_ITConfig+0x58>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80026da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80026e0:	2301      	movs	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <I2Cx_ITConfig+0x5c>)
 80026ea:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4809      	ldr	r0, [pc, #36]	; (8002718 <I2Cx_ITConfig+0x60>)
 80026f2:	f002 faff 	bl	8004cf4 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80026f6:	2200      	movs	r2, #0
 80026f8:	210f      	movs	r1, #15
 80026fa:	2028      	movs	r0, #40	; 0x28
 80026fc:	f001 fd5c 	bl	80041b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002700:	2028      	movs	r0, #40	; 0x28
 8002702:	f001 fd75 	bl	80041f0 <HAL_NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	10210000 	.word	0x10210000
 8002718:	40020000 	.word	0x40020000

0800271c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af04      	add	r7, sp, #16
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
 8002726:	460b      	mov	r3, r1
 8002728:	71bb      	strb	r3, [r7, #6]
 800272a:	4613      	mov	r3, r2
 800272c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	b299      	uxth	r1, r3
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <I2Cx_WriteData+0x4c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	2301      	movs	r3, #1
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	1d7b      	adds	r3, r7, #5
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2301      	movs	r3, #1
 800274a:	4808      	ldr	r0, [pc, #32]	; (800276c <I2Cx_WriteData+0x50>)
 800274c:	f004 fbf8 	bl	8006f40 <HAL_I2C_Mem_Write>
 8002750:	4603      	mov	r3, r0
 8002752:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800275a:	f000 f863 	bl	8002824 <I2Cx_Error>
  }        
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000064 	.word	0x20000064
 800276c:	2000896c 	.word	0x2000896c

08002770 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af04      	add	r7, sp, #16
 8002776:	4603      	mov	r3, r0
 8002778:	460a      	mov	r2, r1
 800277a:	71fb      	strb	r3, [r7, #7]
 800277c:	4613      	mov	r3, r2
 800277e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	b299      	uxth	r1, r3
 800278c:	79bb      	ldrb	r3, [r7, #6]
 800278e:	b29a      	uxth	r2, r3
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <I2Cx_ReadData+0x50>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	9302      	str	r3, [sp, #8]
 8002796:	2301      	movs	r3, #1
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	f107 030e 	add.w	r3, r7, #14
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2301      	movs	r3, #1
 80027a2:	4808      	ldr	r0, [pc, #32]	; (80027c4 <I2Cx_ReadData+0x54>)
 80027a4:	f004 fcc6 	bl	8007134 <HAL_I2C_Mem_Read>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80027b2:	f000 f837 	bl	8002824 <I2Cx_Error>
  
  }
  return value;
 80027b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000064 	.word	0x20000064
 80027c4:	2000896c 	.word	0x2000896c

080027c8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af04      	add	r7, sp, #16
 80027ce:	603a      	str	r2, [r7, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	460b      	mov	r3, r1
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	4613      	mov	r3, r2
 80027dc:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	b299      	uxth	r1, r3
 80027e6:	79bb      	ldrb	r3, [r7, #6]
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <I2Cx_ReadBuffer+0x54>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	88bb      	ldrh	r3, [r7, #4]
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	4809      	ldr	r0, [pc, #36]	; (8002820 <I2Cx_ReadBuffer+0x58>)
 80027fc:	f004 fc9a 	bl	8007134 <HAL_I2C_Mem_Read>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800280a:	2300      	movs	r3, #0
 800280c:	e002      	b.n	8002814 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800280e:	f000 f809 	bl	8002824 <I2Cx_Error>

    return 1;
 8002812:	2301      	movs	r3, #1
  }
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000064 	.word	0x20000064
 8002820:	2000896c 	.word	0x2000896c

08002824 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002828:	4803      	ldr	r0, [pc, #12]	; (8002838 <I2Cx_Error+0x14>)
 800282a:	f004 fb59 	bl	8006ee0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800282e:	f7ff ff11 	bl	8002654 <I2Cx_Init>
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000896c 	.word	0x2000896c

0800283c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002840:	4819      	ldr	r0, [pc, #100]	; (80028a8 <SPIx_Init+0x6c>)
 8002842:	f007 f9cd 	bl	8009be0 <HAL_SPI_GetState>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d12b      	bne.n	80028a4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800284c:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <SPIx_Init+0x6c>)
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <SPIx_Init+0x70>)
 8002850:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <SPIx_Init+0x6c>)
 8002854:	2218      	movs	r2, #24
 8002856:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <SPIx_Init+0x6c>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <SPIx_Init+0x6c>)
 8002860:	2200      	movs	r2, #0
 8002862:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <SPIx_Init+0x6c>)
 8002866:	2200      	movs	r2, #0
 8002868:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <SPIx_Init+0x6c>)
 800286c:	2200      	movs	r2, #0
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <SPIx_Init+0x6c>)
 8002872:	2207      	movs	r2, #7
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <SPIx_Init+0x6c>)
 8002878:	2200      	movs	r2, #0
 800287a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <SPIx_Init+0x6c>)
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <SPIx_Init+0x6c>)
 8002884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002888:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <SPIx_Init+0x6c>)
 800288c:	2200      	movs	r2, #0
 800288e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <SPIx_Init+0x6c>)
 8002892:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002896:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002898:	4803      	ldr	r0, [pc, #12]	; (80028a8 <SPIx_Init+0x6c>)
 800289a:	f000 f853 	bl	8002944 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800289e:	4802      	ldr	r0, [pc, #8]	; (80028a8 <SPIx_Init+0x6c>)
 80028a0:	f006 fd33 	bl	800930a <HAL_SPI_Init>
  } 
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200003c4 	.word	0x200003c4
 80028ac:	40015000 	.word	0x40015000

080028b0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <SPIx_Read+0x38>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f107 0108 	add.w	r1, r7, #8
 80028ca:	4808      	ldr	r0, [pc, #32]	; (80028ec <SPIx_Read+0x3c>)
 80028cc:	f006 fedd 	bl	800968a <HAL_SPI_Receive>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80028da:	f000 f827 	bl	800292c <SPIx_Error>
  }
  
  return readvalue;
 80028de:	68bb      	ldr	r3, [r7, #8]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000068 	.word	0x20000068
 80028ec:	200003c4 	.word	0x200003c4

080028f0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <SPIx_Write+0x34>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	1db9      	adds	r1, r7, #6
 8002904:	2201      	movs	r2, #1
 8002906:	4808      	ldr	r0, [pc, #32]	; (8002928 <SPIx_Write+0x38>)
 8002908:	f006 fd8b 	bl	8009422 <HAL_SPI_Transmit>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002916:	f000 f809 	bl	800292c <SPIx_Error>
  }
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000068 	.word	0x20000068
 8002928:	200003c4 	.word	0x200003c4

0800292c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002930:	4803      	ldr	r0, [pc, #12]	; (8002940 <SPIx_Error+0x14>)
 8002932:	f006 fd4e 	bl	80093d2 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002936:	f7ff ff81 	bl	800283c <SPIx_Init>
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200003c4 	.word	0x200003c4

08002944 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800294c:	2300      	movs	r3, #0
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <SPIx_MspInit+0x6c>)
 8002952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002954:	4a16      	ldr	r2, [pc, #88]	; (80029b0 <SPIx_MspInit+0x6c>)
 8002956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295a:	6453      	str	r3, [r2, #68]	; 0x44
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <SPIx_MspInit+0x6c>)
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <SPIx_MspInit+0x6c>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <SPIx_MspInit+0x6c>)
 8002972:	f043 0320 	orr.w	r3, r3, #32
 8002976:	6313      	str	r3, [r2, #48]	; 0x30
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <SPIx_MspInit+0x6c>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002984:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002988:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800298e:	2302      	movs	r3, #2
 8002990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002992:	2301      	movs	r3, #1
 8002994:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002996:	2305      	movs	r3, #5
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4804      	ldr	r0, [pc, #16]	; (80029b4 <SPIx_MspInit+0x70>)
 80029a2:	f002 f9a7 	bl	8004cf4 <HAL_GPIO_Init>
}
 80029a6:	bf00      	nop
 80029a8:	3728      	adds	r7, #40	; 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40021400 	.word	0x40021400

080029b8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <LCD_IO_Init+0xe0>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d164      	bne.n	8002a90 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <LCD_IO_Init+0xe0>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <LCD_IO_Init+0xe4>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <LCD_IO_Init+0xe4>)
 80029d6:	f043 0308 	orr.w	r3, r3, #8
 80029da:	6313      	str	r3, [r2, #48]	; 0x30
 80029dc:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <LCD_IO_Init+0xe4>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80029e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029f6:	2302      	movs	r3, #2
 80029f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	4619      	mov	r1, r3
 8002a00:	4827      	ldr	r0, [pc, #156]	; (8002aa0 <LCD_IO_Init+0xe8>)
 8002a02:	f002 f977 	bl	8004cf4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <LCD_IO_Init+0xe4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <LCD_IO_Init+0xe4>)
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <LCD_IO_Init+0xe4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002a30:	2302      	movs	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4819      	ldr	r0, [pc, #100]	; (8002aa0 <LCD_IO_Init+0xe8>)
 8002a3c:	f002 f95a 	bl	8004cf4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <LCD_IO_Init+0xe4>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <LCD_IO_Init+0xe4>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <LCD_IO_Init+0xe4>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002a60:	2301      	movs	r3, #1
 8002a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	4619      	mov	r1, r3
 8002a72:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <LCD_IO_Init+0xec>)
 8002a74:	f002 f93e 	bl	8004cf4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <LCD_IO_Init+0xec>)
 8002a7e:	f002 fbed 	bl	800525c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002a82:	2201      	movs	r2, #1
 8002a84:	2104      	movs	r1, #4
 8002a86:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <LCD_IO_Init+0xec>)
 8002a88:	f002 fbe8 	bl	800525c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002a8c:	f7ff fed6 	bl	800283c <SPIx_Init>
  }
}
 8002a90:	bf00      	nop
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2000041c 	.word	0x2000041c
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40020800 	.word	0x40020800

08002aa8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ab8:	480a      	ldr	r0, [pc, #40]	; (8002ae4 <LCD_IO_WriteData+0x3c>)
 8002aba:	f002 fbcf 	bl	800525c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	4809      	ldr	r0, [pc, #36]	; (8002ae8 <LCD_IO_WriteData+0x40>)
 8002ac4:	f002 fbca 	bl	800525c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff10 	bl	80028f0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <LCD_IO_WriteData+0x40>)
 8002ad6:	f002 fbc1 	bl	800525c <HAL_GPIO_WritePin>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40020c00 	.word	0x40020c00
 8002ae8:	40020800 	.word	0x40020800

08002aec <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002af6:	2200      	movs	r2, #0
 8002af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002afc:	480a      	ldr	r0, [pc, #40]	; (8002b28 <LCD_IO_WriteReg+0x3c>)
 8002afe:	f002 fbad 	bl	800525c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002b02:	2200      	movs	r2, #0
 8002b04:	2104      	movs	r1, #4
 8002b06:	4809      	ldr	r0, [pc, #36]	; (8002b2c <LCD_IO_WriteReg+0x40>)
 8002b08:	f002 fba8 	bl	800525c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff feed 	bl	80028f0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002b16:	2201      	movs	r2, #1
 8002b18:	2104      	movs	r1, #4
 8002b1a:	4804      	ldr	r0, [pc, #16]	; (8002b2c <LCD_IO_WriteReg+0x40>)
 8002b1c:	f002 fb9e 	bl	800525c <HAL_GPIO_WritePin>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40020800 	.word	0x40020800

08002b30 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	460a      	mov	r2, r1
 8002b3a:	80fb      	strh	r3, [r7, #6]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002b44:	2200      	movs	r2, #0
 8002b46:	2104      	movs	r1, #4
 8002b48:	4810      	ldr	r0, [pc, #64]	; (8002b8c <LCD_IO_ReadData+0x5c>)
 8002b4a:	f002 fb87 	bl	800525c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b54:	480e      	ldr	r0, [pc, #56]	; (8002b90 <LCD_IO_ReadData+0x60>)
 8002b56:	f002 fb81 	bl	800525c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fec7 	bl	80028f0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002b62:	797b      	ldrb	r3, [r7, #5]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fea3 	bl	80028b0 <SPIx_Read>
 8002b6a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b72:	4807      	ldr	r0, [pc, #28]	; (8002b90 <LCD_IO_ReadData+0x60>)
 8002b74:	f002 fb72 	bl	800525c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002b78:	2201      	movs	r2, #1
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	4803      	ldr	r0, [pc, #12]	; (8002b8c <LCD_IO_ReadData+0x5c>)
 8002b7e:	f002 fb6d 	bl	800525c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40020800 	.word	0x40020800
 8002b90:	40020c00 	.word	0x40020c00

08002b94 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f001 fa31 	bl	8004004 <HAL_Delay>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002bae:	f7ff fd51 	bl	8002654 <I2Cx_Init>
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002bba:	f7ff fd7d 	bl	80026b8 <I2Cx_ITConfig>
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	71fb      	strb	r3, [r7, #7]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	71bb      	strb	r3, [r7, #6]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002bd4:	797a      	ldrb	r2, [r7, #5]
 8002bd6:	79b9      	ldrb	r1, [r7, #6]
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fd9e 	bl	800271c <I2Cx_WriteData>
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	71fb      	strb	r3, [r7, #7]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002bf8:	79ba      	ldrb	r2, [r7, #6]
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fdb6 	bl	8002770 <I2Cx_ReadData>
 8002c04:	4603      	mov	r3, r0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	603a      	str	r2, [r7, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	4603      	mov	r3, r0
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	71bb      	strb	r3, [r7, #6]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002c24:	88bb      	ldrh	r3, [r7, #4]
 8002c26:	79b9      	ldrb	r1, [r7, #6]
 8002c28:	79f8      	ldrb	r0, [r7, #7]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	f7ff fdcc 	bl	80027c8 <I2Cx_ReadBuffer>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b29b      	uxth	r3, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f001 f9dd 	bl	8004004 <HAL_Delay>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002c58:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <BSP_LCD_Init+0xc0>)
 8002c5c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c60:	2209      	movs	r2, #9
 8002c62:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002c64:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002c6a:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c6c:	221d      	movs	r2, #29
 8002c6e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c72:	2203      	movs	r2, #3
 8002c74:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002c76:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c78:	f240 120d 	movw	r2, #269	; 0x10d
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002c7e:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c80:	f240 1243 	movw	r2, #323	; 0x143
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c88:	f240 1217 	movw	r2, #279	; 0x117
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c90:	f240 1247 	movw	r2, #327	; 0x147
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002c96:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002c9e:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <BSP_LCD_Init+0xc4>)
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <BSP_LCD_Init+0xc4>)
 8002cb6:	22c0      	movs	r2, #192	; 0xc0
 8002cb8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <BSP_LCD_Init+0xc4>)
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <BSP_LCD_Init+0xc4>)
 8002cc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002cc8:	4813      	ldr	r0, [pc, #76]	; (8002d18 <BSP_LCD_Init+0xc4>)
 8002cca:	f006 f8e1 	bl	8008e90 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002ce6:	f000 fca7 	bl	8003638 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002cea:	4809      	ldr	r0, [pc, #36]	; (8002d10 <BSP_LCD_Init+0xbc>)
 8002cec:	f005 f82c 	bl	8007d48 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <BSP_LCD_Init+0xc8>)
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <BSP_LCD_Init+0xcc>)
 8002cf4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <BSP_LCD_Init+0xc8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002cfe:	f000 fe89 	bl	8003a14 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002d02:	4808      	ldr	r0, [pc, #32]	; (8002d24 <BSP_LCD_Init+0xd0>)
 8002d04:	f000 f920 	bl	8002f48 <BSP_LCD_SetFont>

  return LCD_OK;
 8002d08:	2300      	movs	r3, #0
}  
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200089c0 	.word	0x200089c0
 8002d14:	40016800 	.word	0x40016800
 8002d18:	20000460 	.word	0x20000460
 8002d1c:	20008a68 	.word	0x20008a68
 8002d20:	20000004 	.word	0x20000004
 8002d24:	2000006c 	.word	0x2000006c

08002d28 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <BSP_LCD_GetXSize+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	4798      	blx	r3
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20008a68 	.word	0x20008a68

08002d40 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <BSP_LCD_GetYSize+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	4798      	blx	r3
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20008a68 	.word	0x20008a68

08002d58 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b090      	sub	sp, #64	; 0x40
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002d68:	f7ff ffde 	bl	8002d28 <BSP_LCD_GetXSize>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002d74:	f7ff ffe4 	bl	8002d40 <BSP_LCD_GetYSize>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002d84:	23ff      	movs	r3, #255	; 0xff
 8002d86:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002d9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002da4:	2307      	movs	r3, #7
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002da8:	f7ff ffbe 	bl	8002d28 <BSP_LCD_GetXSize>
 8002dac:	4603      	mov	r3, r0
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002db0:	f7ff ffc6 	bl	8002d40 <BSP_LCD_GetYSize>
 8002db4:	4603      	mov	r3, r0
 8002db6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4814      	ldr	r0, [pc, #80]	; (8002e14 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002dc2:	f005 f953 	bl	800806c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	4913      	ldr	r1, [pc, #76]	; (8002e18 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dda:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	490e      	ldr	r1, [pc, #56]	; (8002e18 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3308      	adds	r3, #8
 8002dec:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <BSP_LCD_LayerDefaultInit+0xc4>)
 8002dee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	4909      	ldr	r1, [pc, #36]	; (8002e18 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002e02:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002e04:	4803      	ldr	r0, [pc, #12]	; (8002e14 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e06:	f005 f9ed 	bl	80081e4 <HAL_LTDC_EnableDither>
}
 8002e0a:	bf00      	nop
 8002e0c:	3740      	adds	r7, #64	; 0x40
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200089c0 	.word	0x200089c0
 8002e18:	20000494 	.word	0x20000494
 8002e1c:	2000006c 	.word	0x2000006c

08002e20 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <BSP_LCD_SelectLayer+0x1c>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6013      	str	r3, [r2, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000490 	.word	0x20000490

08002e40 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d112      	bne.n	8002e78 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <BSP_LCD_SetLayerVisible+0x78>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	01db      	lsls	r3, r3, #7
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3384      	adds	r3, #132	; 0x84
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <BSP_LCD_SetLayerVisible+0x78>)
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	4611      	mov	r1, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	01d2      	lsls	r2, r2, #7
 8002e6c:	440a      	add	r2, r1
 8002e6e:	3284      	adds	r2, #132	; 0x84
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e011      	b.n	8002e9c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <BSP_LCD_SetLayerVisible+0x78>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	01db      	lsls	r3, r3, #7
 8002e82:	4413      	add	r3, r2
 8002e84:	3384      	adds	r3, #132	; 0x84
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <BSP_LCD_SetLayerVisible+0x78>)
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	01d2      	lsls	r2, r2, #7
 8002e92:	440a      	add	r2, r1
 8002e94:	3284      	adds	r2, #132	; 0x84
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <BSP_LCD_SetLayerVisible+0x78>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <BSP_LCD_SetLayerVisible+0x78>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	200089c0 	.word	0x200089c0

08002ebc <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6839      	ldr	r1, [r7, #0]
 8002eca:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <BSP_LCD_SetColorKeying+0x24>)
 8002ecc:	f005 f90c 	bl	80080e8 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <BSP_LCD_SetColorKeying+0x24>)
 8002ed4:	f005 f94c 	bl	8008170 <HAL_LTDC_EnableColorKeying>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200089c0 	.word	0x200089c0

08002ee4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <BSP_LCD_SetTextColor+0x28>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4907      	ldr	r1, [pc, #28]	; (8002f10 <BSP_LCD_SetTextColor+0x2c>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	20000490 	.word	0x20000490
 8002f10:	20000494 	.word	0x20000494

08002f14 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <BSP_LCD_SetBackColor+0x2c>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4908      	ldr	r1, [pc, #32]	; (8002f44 <BSP_LCD_SetBackColor+0x30>)
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	601a      	str	r2, [r3, #0]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000490 	.word	0x20000490
 8002f44:	20000494 	.word	0x20000494

08002f48 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <BSP_LCD_SetFont+0x2c>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4908      	ldr	r1, [pc, #32]	; (8002f78 <BSP_LCD_SetFont+0x30>)
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	3308      	adds	r3, #8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000490 	.word	0x20000490
 8002f78:	20000494 	.word	0x20000494

08002f7c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <BSP_LCD_Clear+0x48>)
 8002f86:	681c      	ldr	r4, [r3, #0]
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <BSP_LCD_Clear+0x48>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <BSP_LCD_Clear+0x4c>)
 8002f8e:	2134      	movs	r1, #52	; 0x34
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	335c      	adds	r3, #92	; 0x5c
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	f7ff fec4 	bl	8002d28 <BSP_LCD_GetXSize>
 8002fa0:	4606      	mov	r6, r0
 8002fa2:	f7ff fecd 	bl	8002d40 <BSP_LCD_GetYSize>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	2300      	movs	r3, #0
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f000 fcf4 	bl	80039a4 <FillBuffer>
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc4:	20000490 	.word	0x20000490
 8002fc8:	200089c0 	.word	0x200089c0

08002fcc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	80fb      	strh	r3, [r7, #6]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	80bb      	strh	r3, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <BSP_LCD_DisplayChar+0x80>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	491b      	ldr	r1, [pc, #108]	; (8003050 <BSP_LCD_DisplayChar+0x84>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3308      	adds	r3, #8
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <BSP_LCD_DisplayChar+0x80>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4c14      	ldr	r4, [pc, #80]	; (8003050 <BSP_LCD_DisplayChar+0x84>)
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4423      	add	r3, r4
 800300a:	3308      	adds	r3, #8
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003010:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <BSP_LCD_DisplayChar+0x80>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4c0d      	ldr	r4, [pc, #52]	; (8003050 <BSP_LCD_DisplayChar+0x84>)
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4423      	add	r3, r4
 8003024:	3308      	adds	r3, #8
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	889b      	ldrh	r3, [r3, #4]
 800302a:	3307      	adds	r3, #7
 800302c:	2b00      	cmp	r3, #0
 800302e:	da00      	bge.n	8003032 <BSP_LCD_DisplayChar+0x66>
 8003030:	3307      	adds	r3, #7
 8003032:	10db      	asrs	r3, r3, #3
 8003034:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003038:	18ca      	adds	r2, r1, r3
 800303a:	88b9      	ldrh	r1, [r7, #4]
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fbf6 	bl	8003830 <DrawChar>
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	20000490 	.word	0x20000490
 8003050:	20000494 	.word	0x20000494

08003054 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	60ba      	str	r2, [r7, #8]
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	81fb      	strh	r3, [r7, #14]
 8003062:	460b      	mov	r3, r1
 8003064:	81bb      	strh	r3, [r7, #12]
 8003066:	4613      	mov	r3, r2
 8003068:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800306a:	2301      	movs	r3, #1
 800306c:	83fb      	strh	r3, [r7, #30]
 800306e:	2300      	movs	r3, #0
 8003070:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800307e:	e002      	b.n	8003086 <BSP_LCD_DisplayStringAt+0x32>
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	3301      	adds	r3, #1
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	617a      	str	r2, [r7, #20]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f6      	bne.n	8003080 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003092:	f7ff fe49 	bl	8002d28 <BSP_LCD_GetXSize>
 8003096:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	494a      	ldr	r1, [pc, #296]	; (80031c4 <BSP_LCD_DisplayStringAt+0x170>)
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3308      	adds	r3, #8
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	889b      	ldrh	r3, [r3, #4]
 80030ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b0:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d01c      	beq.n	80030f2 <BSP_LCD_DisplayStringAt+0x9e>
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d017      	beq.n	80030ec <BSP_LCD_DisplayStringAt+0x98>
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d12e      	bne.n	800311e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad1      	subs	r1, r2, r3
 80030c6:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <BSP_LCD_DisplayStringAt+0x16c>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	483e      	ldr	r0, [pc, #248]	; (80031c4 <BSP_LCD_DisplayStringAt+0x170>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4403      	add	r3, r0
 80030d6:	3308      	adds	r3, #8
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	889b      	ldrh	r3, [r3, #4]
 80030dc:	fb03 f301 	mul.w	r3, r3, r1
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	89fb      	ldrh	r3, [r7, #14]
 80030e6:	4413      	add	r3, r2
 80030e8:	83fb      	strh	r3, [r7, #30]
      break;
 80030ea:	e01b      	b.n	8003124 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80030ec:	89fb      	ldrh	r3, [r7, #14]
 80030ee:	83fb      	strh	r3, [r7, #30]
      break;
 80030f0:	e018      	b.n	8003124 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	b299      	uxth	r1, r3
 80030fa:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <BSP_LCD_DisplayStringAt+0x16c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4831      	ldr	r0, [pc, #196]	; (80031c4 <BSP_LCD_DisplayStringAt+0x170>)
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4403      	add	r3, r0
 800310a:	3308      	adds	r3, #8
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	889b      	ldrh	r3, [r3, #4]
 8003110:	fb11 f303 	smulbb	r3, r1, r3
 8003114:	b29a      	uxth	r2, r3
 8003116:	89fb      	ldrh	r3, [r7, #14]
 8003118:	4413      	add	r3, r2
 800311a:	83fb      	strh	r3, [r7, #30]
      break;
 800311c:	e002      	b.n	8003124 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 800311e:	89fb      	ldrh	r3, [r7, #14]
 8003120:	83fb      	strh	r3, [r7, #30]
      break;
 8003122:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003124:	e01a      	b.n	800315c <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	89b9      	ldrh	r1, [r7, #12]
 800312c:	8bfb      	ldrh	r3, [r7, #30]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff4c 	bl	8002fcc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4922      	ldr	r1, [pc, #136]	; (80031c4 <BSP_LCD_DisplayStringAt+0x170>)
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3308      	adds	r3, #8
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	889a      	ldrh	r2, [r3, #4]
 800314a:	8bfb      	ldrh	r3, [r7, #30]
 800314c:	4413      	add	r3, r2
 800314e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3301      	adds	r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
    i++;
 8003156:	8bbb      	ldrh	r3, [r7, #28]
 8003158:	3301      	adds	r3, #1
 800315a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2dc      	uxtb	r4, r3
 800316a:	f7ff fddd 	bl	8002d28 <BSP_LCD_GetXSize>
 800316e:	4605      	mov	r5, r0
 8003170:	8bb9      	ldrh	r1, [r7, #28]
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4813      	ldr	r0, [pc, #76]	; (80031c4 <BSP_LCD_DisplayStringAt+0x170>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4403      	add	r3, r0
 8003182:	3308      	adds	r3, #8
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	889b      	ldrh	r3, [r3, #4]
 8003188:	fb03 f301 	mul.w	r3, r3, r1
 800318c:	1aeb      	subs	r3, r5, r3
 800318e:	b299      	uxth	r1, r3
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	480b      	ldr	r0, [pc, #44]	; (80031c4 <BSP_LCD_DisplayStringAt+0x170>)
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4403      	add	r3, r0
 80031a0:	3308      	adds	r3, #8
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	889b      	ldrh	r3, [r3, #4]
 80031a6:	4299      	cmp	r1, r3
 80031a8:	bf2c      	ite	cs
 80031aa:	2301      	movcs	r3, #1
 80031ac:	2300      	movcc	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	4023      	ands	r3, r4
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1b6      	bne.n	8003126 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80031b8:	bf00      	nop
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bdb0      	pop	{r4, r5, r7, pc}
 80031c0:	20000490 	.word	0x20000490
 80031c4:	20000494 	.word	0x20000494

080031c8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80031c8:	b5b0      	push	{r4, r5, r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	4603      	mov	r3, r0
 80031d0:	80fb      	strh	r3, [r7, #6]
 80031d2:	460b      	mov	r3, r1
 80031d4:	80bb      	strh	r3, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <BSP_LCD_DrawHLine+0x70>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a16      	ldr	r2, [pc, #88]	; (800323c <BSP_LCD_DrawHLine+0x74>)
 80031e4:	2134      	movs	r1, #52	; 0x34
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	335c      	adds	r3, #92	; 0x5c
 80031ee:	681c      	ldr	r4, [r3, #0]
 80031f0:	f7ff fd9a 	bl	8002d28 <BSP_LCD_GetXSize>
 80031f4:	4602      	mov	r2, r0
 80031f6:	88bb      	ldrh	r3, [r7, #4]
 80031f8:	fb03 f202 	mul.w	r2, r3, r2
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4423      	add	r3, r4
 8003204:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <BSP_LCD_DrawHLine+0x70>)
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	68fc      	ldr	r4, [r7, #12]
 800320c:	887d      	ldrh	r5, [r7, #2]
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <BSP_LCD_DrawHLine+0x70>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	490b      	ldr	r1, [pc, #44]	; (8003240 <BSP_LCD_DrawHLine+0x78>)
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	2300      	movs	r3, #0
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2301      	movs	r3, #1
 8003228:	462a      	mov	r2, r5
 800322a:	4621      	mov	r1, r4
 800322c:	f000 fbba 	bl	80039a4 <FillBuffer>
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bdb0      	pop	{r4, r5, r7, pc}
 8003238:	20000490 	.word	0x20000490
 800323c:	200089c0 	.word	0x200089c0
 8003240:	20000494 	.word	0x20000494

08003244 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
 800324e:	460b      	mov	r3, r1
 8003250:	80bb      	strh	r3, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003256:	887b      	ldrh	r3, [r7, #2]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	f1c3 0303 	rsb	r3, r3, #3
 800325e:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003268:	e0cf      	b.n	800340a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	b29a      	uxth	r2, r3
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	4413      	add	r3, r2
 8003272:	b298      	uxth	r0, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	b29b      	uxth	r3, r3
 8003278:	88ba      	ldrh	r2, [r7, #4]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	b29c      	uxth	r4, r3
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <BSP_LCD_DrawCircle+0x1d8>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4967      	ldr	r1, [pc, #412]	; (8003420 <BSP_LCD_DrawCircle+0x1dc>)
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4621      	mov	r1, r4
 8003294:	f000 faa6 	bl	80037e4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	b29b      	uxth	r3, r3
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	b298      	uxth	r0, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	88ba      	ldrh	r2, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	b29c      	uxth	r4, r3
 80032ac:	4b5b      	ldr	r3, [pc, #364]	; (800341c <BSP_LCD_DrawCircle+0x1d8>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	495b      	ldr	r1, [pc, #364]	; (8003420 <BSP_LCD_DrawCircle+0x1dc>)
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	4621      	mov	r1, r4
 80032c2:	f000 fa8f 	bl	80037e4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	4413      	add	r3, r2
 80032ce:	b298      	uxth	r0, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	88ba      	ldrh	r2, [r7, #4]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	b29c      	uxth	r4, r3
 80032da:	4b50      	ldr	r3, [pc, #320]	; (800341c <BSP_LCD_DrawCircle+0x1d8>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4950      	ldr	r1, [pc, #320]	; (8003420 <BSP_LCD_DrawCircle+0x1dc>)
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	4621      	mov	r1, r4
 80032f0:	f000 fa78 	bl	80037e4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	88fa      	ldrh	r2, [r7, #6]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	b298      	uxth	r0, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	b29b      	uxth	r3, r3
 8003302:	88ba      	ldrh	r2, [r7, #4]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	b29c      	uxth	r4, r3
 8003308:	4b44      	ldr	r3, [pc, #272]	; (800341c <BSP_LCD_DrawCircle+0x1d8>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4944      	ldr	r1, [pc, #272]	; (8003420 <BSP_LCD_DrawCircle+0x1dc>)
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	4621      	mov	r1, r4
 800331e:	f000 fa61 	bl	80037e4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	b29a      	uxth	r2, r3
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	4413      	add	r3, r2
 800332a:	b298      	uxth	r0, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	b29a      	uxth	r2, r3
 8003330:	88bb      	ldrh	r3, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	b29c      	uxth	r4, r3
 8003336:	4b39      	ldr	r3, [pc, #228]	; (800341c <BSP_LCD_DrawCircle+0x1d8>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4939      	ldr	r1, [pc, #228]	; (8003420 <BSP_LCD_DrawCircle+0x1dc>)
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4621      	mov	r1, r4
 800334c:	f000 fa4a 	bl	80037e4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	b29b      	uxth	r3, r3
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	b298      	uxth	r0, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	b29a      	uxth	r2, r3
 800335e:	88bb      	ldrh	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	b29c      	uxth	r4, r3
 8003364:	4b2d      	ldr	r3, [pc, #180]	; (800341c <BSP_LCD_DrawCircle+0x1d8>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	492d      	ldr	r1, [pc, #180]	; (8003420 <BSP_LCD_DrawCircle+0x1dc>)
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	4621      	mov	r1, r4
 800337a:	f000 fa33 	bl	80037e4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	b29a      	uxth	r2, r3
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	4413      	add	r3, r2
 8003386:	b298      	uxth	r0, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	b29a      	uxth	r2, r3
 800338c:	88bb      	ldrh	r3, [r7, #4]
 800338e:	4413      	add	r3, r2
 8003390:	b29c      	uxth	r4, r3
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <BSP_LCD_DrawCircle+0x1d8>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4922      	ldr	r1, [pc, #136]	; (8003420 <BSP_LCD_DrawCircle+0x1dc>)
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	4621      	mov	r1, r4
 80033a8:	f000 fa1c 	bl	80037e4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	b298      	uxth	r0, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	88bb      	ldrh	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	b29c      	uxth	r4, r3
 80033c0:	4b16      	ldr	r3, [pc, #88]	; (800341c <BSP_LCD_DrawCircle+0x1d8>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4916      	ldr	r1, [pc, #88]	; (8003420 <BSP_LCD_DrawCircle+0x1dc>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	4621      	mov	r1, r4
 80033d6:	f000 fa05 	bl	80037e4 <BSP_LCD_DrawPixel>

    if (d < 0)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	da06      	bge.n	80033ee <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	009a      	lsls	r2, r3, #2
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4413      	add	r3, r2
 80033e8:	3306      	adds	r3, #6
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e00a      	b.n	8003404 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	009a      	lsls	r2, r3, #2
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4413      	add	r3, r2
 80033fa:	330a      	adds	r3, #10
 80033fc:	617b      	str	r3, [r7, #20]
      cury--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3b01      	subs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3301      	adds	r3, #1
 8003408:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	429a      	cmp	r2, r3
 8003410:	f67f af2b 	bls.w	800326a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	bd90      	pop	{r4, r7, pc}
 800341c:	20000490 	.word	0x20000490
 8003420:	20000494 	.word	0x20000494

08003424 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af02      	add	r7, sp, #8
 800342c:	4604      	mov	r4, r0
 800342e:	4608      	mov	r0, r1
 8003430:	4611      	mov	r1, r2
 8003432:	461a      	mov	r2, r3
 8003434:	4623      	mov	r3, r4
 8003436:	80fb      	strh	r3, [r7, #6]
 8003438:	4603      	mov	r3, r0
 800343a:	80bb      	strh	r3, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
 8003440:	4613      	mov	r3, r2
 8003442:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003448:	4b20      	ldr	r3, [pc, #128]	; (80034cc <BSP_LCD_FillRect+0xa8>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4920      	ldr	r1, [pc, #128]	; (80034d0 <BSP_LCD_FillRect+0xac>)
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fd42 	bl	8002ee4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <BSP_LCD_FillRect+0xa8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <BSP_LCD_FillRect+0xb0>)
 8003466:	2134      	movs	r1, #52	; 0x34
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	335c      	adds	r3, #92	; 0x5c
 8003470:	681c      	ldr	r4, [r3, #0]
 8003472:	f7ff fc59 	bl	8002d28 <BSP_LCD_GetXSize>
 8003476:	4602      	mov	r2, r0
 8003478:	88bb      	ldrh	r3, [r7, #4]
 800347a:	fb03 f202 	mul.w	r2, r3, r2
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4423      	add	r3, r4
 8003486:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <BSP_LCD_FillRect+0xa8>)
 800348a:	681c      	ldr	r4, [r3, #0]
 800348c:	68fd      	ldr	r5, [r7, #12]
 800348e:	887e      	ldrh	r6, [r7, #2]
 8003490:	f8b7 8000 	ldrh.w	r8, [r7]
 8003494:	f7ff fc48 	bl	8002d28 <BSP_LCD_GetXSize>
 8003498:	4602      	mov	r2, r0
 800349a:	887b      	ldrh	r3, [r7, #2]
 800349c:	1ad1      	subs	r1, r2, r3
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <BSP_LCD_FillRect+0xa8>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	480b      	ldr	r0, [pc, #44]	; (80034d0 <BSP_LCD_FillRect+0xac>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4403      	add	r3, r0
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	9100      	str	r1, [sp, #0]
 80034b4:	4643      	mov	r3, r8
 80034b6:	4632      	mov	r2, r6
 80034b8:	4629      	mov	r1, r5
 80034ba:	4620      	mov	r0, r4
 80034bc:	f000 fa72 	bl	80039a4 <FillBuffer>
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ca:	bf00      	nop
 80034cc:	20000490 	.word	0x20000490
 80034d0:	20000494 	.word	0x20000494
 80034d4:	200089c0 	.word	0x200089c0

080034d8 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	80fb      	strh	r3, [r7, #6]
 80034e2:	460b      	mov	r3, r1
 80034e4:	80bb      	strh	r3, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	f1c3 0303 	rsb	r3, r3, #3
 80034f2:	617b      	str	r3, [r7, #20]

  curx = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80034f8:	887b      	ldrh	r3, [r7, #2]
 80034fa:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80034fc:	4b44      	ldr	r3, [pc, #272]	; (8003610 <BSP_LCD_FillCircle+0x138>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4944      	ldr	r1, [pc, #272]	; (8003614 <BSP_LCD_FillCircle+0x13c>)
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fce8 	bl	8002ee4 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003514:	e061      	b.n	80035da <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d021      	beq.n	8003560 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	b29b      	uxth	r3, r3
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	b298      	uxth	r0, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	b29a      	uxth	r2, r3
 800352a:	88bb      	ldrh	r3, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	b299      	uxth	r1, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	b29b      	uxth	r3, r3
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	f7ff fe45 	bl	80031c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	b29b      	uxth	r3, r3
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	b298      	uxth	r0, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	b29b      	uxth	r3, r3
 800354c:	88ba      	ldrh	r2, [r7, #4]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	b299      	uxth	r1, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	b29b      	uxth	r3, r3
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	b29b      	uxth	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	f7ff fe34 	bl	80031c8 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d021      	beq.n	80035aa <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	b29b      	uxth	r3, r3
 800356a:	88fa      	ldrh	r2, [r7, #6]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	b298      	uxth	r0, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	b29b      	uxth	r3, r3
 8003574:	88ba      	ldrh	r2, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	b299      	uxth	r1, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	b29b      	uxth	r3, r3
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	b29b      	uxth	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	f7ff fe20 	bl	80031c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	b29b      	uxth	r3, r3
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	b298      	uxth	r0, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	b29a      	uxth	r2, r3
 8003596:	88bb      	ldrh	r3, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	b299      	uxth	r1, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	f7ff fe0f 	bl	80031c8 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da06      	bge.n	80035be <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	4413      	add	r3, r2
 80035b8:	3306      	adds	r3, #6
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e00a      	b.n	80035d4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	009a      	lsls	r2, r3, #2
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	4413      	add	r3, r2
 80035ca:	330a      	adds	r3, #10
 80035cc:	617b      	str	r3, [r7, #20]
      cury--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	3301      	adds	r3, #1
 80035d8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d999      	bls.n	8003516 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <BSP_LCD_FillCircle+0x138>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	490b      	ldr	r1, [pc, #44]	; (8003614 <BSP_LCD_FillCircle+0x13c>)
 80035e8:	4613      	mov	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fc75 	bl	8002ee4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	88b9      	ldrh	r1, [r7, #4]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fe1f 	bl	8003244 <BSP_LCD_DrawCircle>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000490 	.word	0x20000490
 8003614:	20000494 	.word	0x20000494

08003618 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <BSP_LCD_DisplayOn+0x1c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003626:	4b03      	ldr	r3, [pc, #12]	; (8003634 <BSP_LCD_DisplayOn+0x1c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4798      	blx	r3
  }
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20008a68 	.word	0x20008a68

08003638 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08e      	sub	sp, #56	; 0x38
 800363c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	4b61      	ldr	r3, [pc, #388]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	4a60      	ldr	r2, [pc, #384]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003648:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800364c:	6453      	str	r3, [r2, #68]	; 0x44
 800364e:	4b5e      	ldr	r3, [pc, #376]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	4b5a      	ldr	r3, [pc, #360]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a59      	ldr	r2, [pc, #356]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003664:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b57      	ldr	r3, [pc, #348]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	4a52      	ldr	r2, [pc, #328]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6313      	str	r3, [r2, #48]	; 0x30
 8003686:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	4b4c      	ldr	r3, [pc, #304]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a4b      	ldr	r2, [pc, #300]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b49      	ldr	r3, [pc, #292]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	4b45      	ldr	r3, [pc, #276]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a44      	ldr	r2, [pc, #272]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4b3e      	ldr	r3, [pc, #248]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	4a3d      	ldr	r2, [pc, #244]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036d4:	f043 0308 	orr.w	r3, r3, #8
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a36      	ldr	r2, [pc, #216]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036f0:	f043 0320 	orr.w	r3, r3, #32
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 800370c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <BSP_LCD_MspInit+0x190>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800371e:	f641 0358 	movw	r3, #6232	; 0x1858
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800372c:	2302      	movs	r3, #2
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003730:	230e      	movs	r3, #14
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003738:	4619      	mov	r1, r3
 800373a:	4824      	ldr	r0, [pc, #144]	; (80037cc <BSP_LCD_MspInit+0x194>)
 800373c:	f001 fada 	bl	8004cf4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003740:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374a:	4619      	mov	r1, r3
 800374c:	4820      	ldr	r0, [pc, #128]	; (80037d0 <BSP_LCD_MspInit+0x198>)
 800374e:	f001 fad1 	bl	8004cf4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003752:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800375c:	4619      	mov	r1, r3
 800375e:	481d      	ldr	r0, [pc, #116]	; (80037d4 <BSP_LCD_MspInit+0x19c>)
 8003760:	f001 fac8 	bl	8004cf4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003764:	2348      	movs	r3, #72	; 0x48
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376c:	4619      	mov	r1, r3
 800376e:	481a      	ldr	r0, [pc, #104]	; (80037d8 <BSP_LCD_MspInit+0x1a0>)
 8003770:	f001 fac0 	bl	8004cf4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800377a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800377e:	4619      	mov	r1, r3
 8003780:	4816      	ldr	r0, [pc, #88]	; (80037dc <BSP_LCD_MspInit+0x1a4>)
 8003782:	f001 fab7 	bl	8004cf4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003786:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800378c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003790:	4619      	mov	r1, r3
 8003792:	4813      	ldr	r0, [pc, #76]	; (80037e0 <BSP_LCD_MspInit+0x1a8>)
 8003794:	f001 faae 	bl	8004cf4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003798:	2303      	movs	r3, #3
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800379c:	2309      	movs	r3, #9
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80037a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a4:	4619      	mov	r1, r3
 80037a6:	480a      	ldr	r0, [pc, #40]	; (80037d0 <BSP_LCD_MspInit+0x198>)
 80037a8:	f001 faa4 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80037ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80037b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037b6:	4619      	mov	r1, r3
 80037b8:	4809      	ldr	r0, [pc, #36]	; (80037e0 <BSP_LCD_MspInit+0x1a8>)
 80037ba:	f001 fa9b 	bl	8004cf4 <HAL_GPIO_Init>
}
 80037be:	bf00      	nop
 80037c0:	3738      	adds	r7, #56	; 0x38
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40020000 	.word	0x40020000
 80037d0:	40020400 	.word	0x40020400
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020c00 	.word	0x40020c00
 80037dc:	40021400 	.word	0x40021400
 80037e0:	40021800 	.word	0x40021800

080037e4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80037e4:	b5b0      	push	{r4, r5, r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	603a      	str	r2, [r7, #0]
 80037ee:	80fb      	strh	r3, [r7, #6]
 80037f0:	460b      	mov	r3, r1
 80037f2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <BSP_LCD_DrawPixel+0x44>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0c      	ldr	r2, [pc, #48]	; (800382c <BSP_LCD_DrawPixel+0x48>)
 80037fa:	2134      	movs	r1, #52	; 0x34
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	335c      	adds	r3, #92	; 0x5c
 8003804:	681c      	ldr	r4, [r3, #0]
 8003806:	88bd      	ldrh	r5, [r7, #4]
 8003808:	f7ff fa8e 	bl	8002d28 <BSP_LCD_GetXSize>
 800380c:	4603      	mov	r3, r0
 800380e:	fb03 f205 	mul.w	r2, r3, r5
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4423      	add	r3, r4
 800381a:	461a      	mov	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bdb0      	pop	{r4, r5, r7, pc}
 8003828:	20000490 	.word	0x20000490
 800382c:	200089c0 	.word	0x200089c0

08003830 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	603a      	str	r2, [r7, #0]
 800383a:	80fb      	strh	r3, [r7, #6]
 800383c:	460b      	mov	r3, r1
 800383e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <DrawChar+0x16c>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4953      	ldr	r1, [pc, #332]	; (80039a0 <DrawChar+0x170>)
 8003852:	4613      	mov	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3308      	adds	r3, #8
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	88db      	ldrh	r3, [r3, #6]
 8003862:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <DrawChar+0x16c>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	494d      	ldr	r1, [pc, #308]	; (80039a0 <DrawChar+0x170>)
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	3308      	adds	r3, #8
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	889b      	ldrh	r3, [r3, #4]
 800387a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800387c:	8a3b      	ldrh	r3, [r7, #16]
 800387e:	3307      	adds	r3, #7
 8003880:	2b00      	cmp	r3, #0
 8003882:	da00      	bge.n	8003886 <DrawChar+0x56>
 8003884:	3307      	adds	r3, #7
 8003886:	10db      	asrs	r3, r3, #3
 8003888:	b2db      	uxtb	r3, r3
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	b2da      	uxtb	r2, r3
 800388e:	8a3b      	ldrh	r3, [r7, #16]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	e076      	b.n	800398a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800389c:	8a3b      	ldrh	r3, [r7, #16]
 800389e:	3307      	adds	r3, #7
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da00      	bge.n	80038a6 <DrawChar+0x76>
 80038a4:	3307      	adds	r3, #7
 80038a6:	10db      	asrs	r3, r3, #3
 80038a8:	461a      	mov	r2, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fb03 f302 	mul.w	r3, r3, r2
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80038b6:	8a3b      	ldrh	r3, [r7, #16]
 80038b8:	3307      	adds	r3, #7
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da00      	bge.n	80038c0 <DrawChar+0x90>
 80038be:	3307      	adds	r3, #7
 80038c0:	10db      	asrs	r3, r3, #3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d002      	beq.n	80038cc <DrawChar+0x9c>
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d004      	beq.n	80038d4 <DrawChar+0xa4>
 80038ca:	e00c      	b.n	80038e6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	617b      	str	r3, [r7, #20]
      break;
 80038d2:	e016      	b.n	8003902 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	3201      	adds	r2, #1
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
      break;
 80038e4:	e00d      	b.n	8003902 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	041a      	lsls	r2, r3, #16
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3301      	adds	r3, #1
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	4313      	orrs	r3, r2
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	3202      	adds	r2, #2
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
      break;
 8003900:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	e036      	b.n	8003976 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003908:	8a3a      	ldrh	r2, [r7, #16]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	1ad2      	subs	r2, r2, r3
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	4413      	add	r3, r2
 8003912:	3b01      	subs	r3, #1
 8003914:	2201      	movs	r2, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	461a      	mov	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d012      	beq.n	800394a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	b29a      	uxth	r2, r3
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	4413      	add	r3, r2
 800392c:	b298      	uxth	r0, r3
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <DrawChar+0x16c>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	491b      	ldr	r1, [pc, #108]	; (80039a0 <DrawChar+0x170>)
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	88bb      	ldrh	r3, [r7, #4]
 8003942:	4619      	mov	r1, r3
 8003944:	f7ff ff4e 	bl	80037e4 <BSP_LCD_DrawPixel>
 8003948:	e012      	b.n	8003970 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	b29a      	uxth	r2, r3
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	4413      	add	r3, r2
 8003952:	b298      	uxth	r0, r3
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <DrawChar+0x16c>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4911      	ldr	r1, [pc, #68]	; (80039a0 <DrawChar+0x170>)
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3304      	adds	r3, #4
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	88bb      	ldrh	r3, [r7, #4]
 800396a:	4619      	mov	r1, r3
 800396c:	f7ff ff3a 	bl	80037e4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	3301      	adds	r3, #1
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	8a3b      	ldrh	r3, [r7, #16]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	429a      	cmp	r2, r3
 800397c:	d3c4      	bcc.n	8003908 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800397e:	88bb      	ldrh	r3, [r7, #4]
 8003980:	3301      	adds	r3, #1
 8003982:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	3301      	adds	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	8a7b      	ldrh	r3, [r7, #18]
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	429a      	cmp	r2, r3
 8003990:	d384      	bcc.n	800389c <DrawChar+0x6c>
  }
}
 8003992:	bf00      	nop
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000490 	.word	0x20000490
 80039a0:	20000494 	.word	0x20000494

080039a4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <FillBuffer+0x68>)
 80039b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039b8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <FillBuffer+0x68>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <FillBuffer+0x68>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80039c6:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <FillBuffer+0x68>)
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <FillBuffer+0x6c>)
 80039ca:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80039cc:	480f      	ldr	r0, [pc, #60]	; (8003a0c <FillBuffer+0x68>)
 80039ce:	f000 fdf5 	bl	80045bc <HAL_DMA2D_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d115      	bne.n	8003a04 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	480c      	ldr	r0, [pc, #48]	; (8003a0c <FillBuffer+0x68>)
 80039dc:	f001 f85c 	bl	8004a98 <HAL_DMA2D_ConfigLayer>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69f9      	ldr	r1, [r7, #28]
 80039f0:	4806      	ldr	r0, [pc, #24]	; (8003a0c <FillBuffer+0x68>)
 80039f2:	f000 fe2c 	bl	800464e <HAL_DMA2D_Start>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80039fc:	210a      	movs	r1, #10
 80039fe:	4803      	ldr	r0, [pc, #12]	; (8003a0c <FillBuffer+0x68>)
 8003a00:	f000 fe50 	bl	80046a4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000420 	.word	0x20000420
 8003a10:	4002b000 	.word	0x4002b000

08003a14 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003a18:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <BSP_SDRAM_Init+0xb0>)
 8003a1c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a20:	2202      	movs	r2, #2
 8003a22:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a26:	2207      	movs	r2, #7
 8003a28:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003a2a:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a32:	2207      	movs	r2, #7
 8003a34:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a38:	2202      	movs	r2, #2
 8003a3a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003a3c:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a3e:	2202      	movs	r2, #2
 8003a40:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a44:	2202      	movs	r2, #2
 8003a46:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a56:	2204      	movs	r2, #4
 8003a58:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003a5a:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a68:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003a6c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003a6e:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003a74:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a7a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	480c      	ldr	r0, [pc, #48]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a8e:	f000 f87f 	bl	8003b90 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003a92:	490d      	ldr	r1, [pc, #52]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a94:	480a      	ldr	r0, [pc, #40]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a96:	f005 fbb9 	bl	800920c <HAL_SDRAM_Init>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <BSP_SDRAM_Init+0xb8>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e002      	b.n	8003aae <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <BSP_SDRAM_Init+0xb8>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003aae:	f240 506a 	movw	r0, #1386	; 0x56a
 8003ab2:	f000 f80d 	bl	8003ad0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003ab6:	4b05      	ldr	r3, [pc, #20]	; (8003acc <BSP_SDRAM_Init+0xb8>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200004ac 	.word	0x200004ac
 8003ac4:	a0000140 	.word	0xa0000140
 8003ac8:	200004e0 	.word	0x200004e0
 8003acc:	2000007c 	.word	0x2000007c

08003ad0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003ae2:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003aee:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af8:	4923      	ldr	r1, [pc, #140]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003afa:	4824      	ldr	r0, [pc, #144]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003afc:	f005 fbba 	bl	8009274 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003b00:	2001      	movs	r0, #1
 8003b02:	f000 fa7f 	bl	8004004 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b08:	2202      	movs	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b0c:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b0e:	2208      	movs	r2, #8
 8003b10:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b22:	4919      	ldr	r1, [pc, #100]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b24:	4819      	ldr	r0, [pc, #100]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b26:	f005 fba5 	bl	8009274 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003b2a:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b30:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b32:	2208      	movs	r2, #8
 8003b34:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003b36:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b38:	2204      	movs	r2, #4
 8003b3a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b46:	4910      	ldr	r1, [pc, #64]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b48:	4810      	ldr	r0, [pc, #64]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b4a:	f005 fb93 	bl	8009274 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003b4e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003b52:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b56:	2204      	movs	r2, #4
 8003b58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b6a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b70:	4905      	ldr	r1, [pc, #20]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b72:	4806      	ldr	r0, [pc, #24]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b74:	f005 fb7e 	bl	8009274 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4804      	ldr	r0, [pc, #16]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b7c:	f005 fba5 	bl	80092ca <HAL_SDRAM_ProgramRefreshRate>
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	200004fc 	.word	0x200004fc
 8003b8c:	200004ac 	.word	0x200004ac

08003b90 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b090      	sub	sp, #64	; 0x40
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80ec 	beq.w	8003d7a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba6:	4b77      	ldr	r3, [pc, #476]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	4a76      	ldr	r2, [pc, #472]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6393      	str	r3, [r2, #56]	; 0x38
 8003bb2:	4b74      	ldr	r3, [pc, #464]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	4b70      	ldr	r3, [pc, #448]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	4a6f      	ldr	r2, [pc, #444]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003bc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bce:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	623b      	str	r3, [r7, #32]
 8003bde:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	4a68      	ldr	r2, [pc, #416]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bea:	4b66      	ldr	r3, [pc, #408]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	623b      	str	r3, [r7, #32]
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	4b62      	ldr	r3, [pc, #392]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a61      	ldr	r2, [pc, #388]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	4b5b      	ldr	r3, [pc, #364]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	4a5a      	ldr	r2, [pc, #360]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c1c:	f043 0308 	orr.w	r3, r3, #8
 8003c20:	6313      	str	r3, [r2, #48]	; 0x30
 8003c22:	4b58      	ldr	r3, [pc, #352]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	4b54      	ldr	r3, [pc, #336]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	4a53      	ldr	r2, [pc, #332]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c38:	f043 0310 	orr.w	r3, r3, #16
 8003c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3e:	4b51      	ldr	r3, [pc, #324]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	4b4d      	ldr	r3, [pc, #308]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	4a4c      	ldr	r2, [pc, #304]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c54:	f043 0320 	orr.w	r3, r3, #32
 8003c58:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5a:	4b4a      	ldr	r3, [pc, #296]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	4a45      	ldr	r2, [pc, #276]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c74:	6313      	str	r3, [r2, #48]	; 0x30
 8003c76:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <BSP_SDRAM_MspInit+0x1f4>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003c82:	2302      	movs	r3, #2
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003c86:	2302      	movs	r3, #2
 8003c88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003c8e:	230c      	movs	r3, #12
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003c92:	2360      	movs	r3, #96	; 0x60
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	483a      	ldr	r0, [pc, #232]	; (8003d88 <BSP_SDRAM_MspInit+0x1f8>)
 8003c9e:	f001 f829 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003caa:	4619      	mov	r1, r3
 8003cac:	4837      	ldr	r0, [pc, #220]	; (8003d8c <BSP_SDRAM_MspInit+0x1fc>)
 8003cae:	f001 f821 	bl	8004cf4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003cb2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4834      	ldr	r0, [pc, #208]	; (8003d90 <BSP_SDRAM_MspInit+0x200>)
 8003cc0:	f001 f818 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003cc4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4830      	ldr	r0, [pc, #192]	; (8003d94 <BSP_SDRAM_MspInit+0x204>)
 8003cd2:	f001 f80f 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003cd6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	482d      	ldr	r0, [pc, #180]	; (8003d98 <BSP_SDRAM_MspInit+0x208>)
 8003ce4:	f001 f806 	bl	8004cf4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003ce8:	f248 1333 	movw	r3, #33075	; 0x8133
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4829      	ldr	r0, [pc, #164]	; (8003d9c <BSP_SDRAM_MspInit+0x20c>)
 8003cf6:	f000 fffd 	bl	8004cf4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003d00:	4b27      	ldr	r3, [pc, #156]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d14:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d1c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d24:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d32:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003d3a:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003d46:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <BSP_SDRAM_MspInit+0x214>)
 8003d50:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
 8003d58:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003d5e:	4810      	ldr	r0, [pc, #64]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d60:	f000 fb1e 	bl	80043a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003d64:	480e      	ldr	r0, [pc, #56]	; (8003da0 <BSP_SDRAM_MspInit+0x210>)
 8003d66:	f000 fa6d 	bl	8004244 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	210f      	movs	r1, #15
 8003d6e:	2038      	movs	r0, #56	; 0x38
 8003d70:	f000 fa22 	bl	80041b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003d74:	2038      	movs	r0, #56	; 0x38
 8003d76:	f000 fa3b 	bl	80041f0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003d7a:	bf00      	nop
 8003d7c:	3740      	adds	r7, #64	; 0x40
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40020400 	.word	0x40020400
 8003d8c:	40020800 	.word	0x40020800
 8003d90:	40020c00 	.word	0x40020c00
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40021400 	.word	0x40021400
 8003d9c:	40021800 	.word	0x40021800
 8003da0:	2000050c 	.word	0x2000050c
 8003da4:	40026410 	.word	0x40026410

08003da8 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	460a      	mov	r2, r1
 8003db2:	80fb      	strh	r3, [r7, #6]
 8003db4:	4613      	mov	r3, r2
 8003db6:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003dbc:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <BSP_TS_Init+0x64>)
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003dc2:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <BSP_TS_Init+0x68>)
 8003dc4:	88bb      	ldrh	r3, [r7, #4]
 8003dc6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <BSP_TS_Init+0x6c>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2082      	movs	r0, #130	; 0x82
 8003dce:	4798      	blx	r3
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f640 0311 	movw	r3, #2065	; 0x811
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d104      	bne.n	8003de6 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <BSP_TS_Init+0x70>)
 8003dde:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <BSP_TS_Init+0x6c>)
 8003de0:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <BSP_TS_Init+0x70>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2082      	movs	r0, #130	; 0x82
 8003df4:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <BSP_TS_Init+0x70>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2082      	movs	r0, #130	; 0x82
 8003dfe:	4798      	blx	r3
  }

  return ret;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000570 	.word	0x20000570
 8003e10:	20000572 	.word	0x20000572
 8003e14:	2000003c 	.word	0x2000003c
 8003e18:	2000056c 	.word	0x2000056c

08003e1c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003e24:	4b4f      	ldr	r3, [pc, #316]	; (8003f64 <BSP_TS_GetState+0x148>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2082      	movs	r0, #130	; 0x82
 8003e2c:	4798      	blx	r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 808d 	beq.w	8003f5a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003e40:	4b48      	ldr	r3, [pc, #288]	; (8003f64 <BSP_TS_GetState+0x148>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f107 020c 	add.w	r2, r7, #12
 8003e4a:	f107 010e 	add.w	r1, r7, #14
 8003e4e:	2082      	movs	r0, #130	; 0x82
 8003e50:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003e52:	89bb      	ldrh	r3, [r7, #12]
 8003e54:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003e5c:	89bb      	ldrh	r3, [r7, #12]
 8003e5e:	4a42      	ldr	r2, [pc, #264]	; (8003f68 <BSP_TS_GetState+0x14c>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003e68:	8abb      	ldrh	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	82bb      	strh	r3, [r7, #20]
 8003e72:	e008      	b.n	8003e86 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003e74:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <BSP_TS_GetState+0x150>)
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	8aba      	ldrh	r2, [r7, #20]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d903      	bls.n	8003e86 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <BSP_TS_GetState+0x150>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003e86:	8abb      	ldrh	r3, [r7, #20]
 8003e88:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d806      	bhi.n	8003ea2 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003e94:	89fb      	ldrh	r3, [r7, #14]
 8003e96:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003e9a:	330e      	adds	r3, #14
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	81fb      	strh	r3, [r7, #14]
 8003ea0:	e005      	b.n	8003eae <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003ea2:	89fb      	ldrh	r3, [r7, #14]
 8003ea4:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003eae:	89fb      	ldrh	r3, [r7, #14]
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <BSP_TS_GetState+0x154>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	08db      	lsrs	r3, r3, #3
 8003eb8:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003eba:	8afb      	ldrh	r3, [r7, #22]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	82fb      	strh	r3, [r7, #22]
 8003ec4:	e008      	b.n	8003ed8 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <BSP_TS_GetState+0x158>)
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	8afa      	ldrh	r2, [r7, #22]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d903      	bls.n	8003ed8 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003ed0:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <BSP_TS_GetState+0x158>)
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003ed8:	8afb      	ldrh	r3, [r7, #22]
 8003eda:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003edc:	89fb      	ldrh	r3, [r7, #14]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <BSP_TS_GetState+0x15c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d906      	bls.n	8003ef6 <BSP_TS_GetState+0xda>
 8003ee8:	89fa      	ldrh	r2, [r7, #14]
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <BSP_TS_GetState+0x15c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	e005      	b.n	8003f02 <BSP_TS_GetState+0xe6>
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <BSP_TS_GetState+0x15c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	89fb      	ldrh	r3, [r7, #14]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003f04:	89bb      	ldrh	r3, [r7, #12]
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <BSP_TS_GetState+0x160>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d906      	bls.n	8003f1e <BSP_TS_GetState+0x102>
 8003f10:	89ba      	ldrh	r2, [r7, #12]
 8003f12:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <BSP_TS_GetState+0x160>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	e005      	b.n	8003f2a <BSP_TS_GetState+0x10e>
 8003f1e:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <BSP_TS_GetState+0x160>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	89bb      	ldrh	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003f2c:	8a7a      	ldrh	r2, [r7, #18]
 8003f2e:	8a3b      	ldrh	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	dd07      	ble.n	8003f46 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003f36:	89fb      	ldrh	r3, [r7, #14]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <BSP_TS_GetState+0x15c>)
 8003f3c:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003f3e:	89bb      	ldrh	r3, [r7, #12]
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <BSP_TS_GetState+0x160>)
 8003f44:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <BSP_TS_GetState+0x15c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <BSP_TS_GetState+0x160>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	809a      	strh	r2, [r3, #4]
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000056c 	.word	0x2000056c
 8003f68:	ba2e8ba3 	.word	0xba2e8ba3
 8003f6c:	20000572 	.word	0x20000572
 8003f70:	88888889 	.word	0x88888889
 8003f74:	20000570 	.word	0x20000570
 8003f78:	20000574 	.word	0x20000574
 8003f7c:	20000578 	.word	0x20000578

08003f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <HAL_Init+0x40>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <HAL_Init+0x40>)
 8003f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_Init+0x40>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <HAL_Init+0x40>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_Init+0x40>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_Init+0x40>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa8:	2003      	movs	r0, #3
 8003faa:	f000 f8fa 	bl	80041a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f7fd faca 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fb4:	f7fd fa9c 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023c00 	.word	0x40023c00

08003fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_IncTick+0x20>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_IncTick+0x24>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <HAL_IncTick+0x24>)
 8003fd6:	6013      	str	r3, [r2, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20000084 	.word	0x20000084
 8003fe8:	20008a6c 	.word	0x20008a6c

08003fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <HAL_GetTick+0x14>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20008a6c 	.word	0x20008a6c

08004004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800400c:	f7ff ffee 	bl	8003fec <HAL_GetTick>
 8004010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d005      	beq.n	800402a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800401e:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_Delay+0x40>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800402a:	bf00      	nop
 800402c:	f7ff ffde 	bl	8003fec <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	429a      	cmp	r2, r3
 800403a:	d8f7      	bhi.n	800402c <HAL_Delay+0x28>
  {
  }
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000084 	.word	0x20000084

08004048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004064:	4013      	ands	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800407a:	4a04      	ldr	r2, [pc, #16]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	60d3      	str	r3, [r2, #12]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 0307 	and.w	r3, r3, #7
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db0b      	blt.n	80040d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4907      	ldr	r1, [pc, #28]	; (80040e4 <__NVIC_EnableIRQ+0x38>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2001      	movs	r0, #1
 80040ce:	fa00 f202 	lsl.w	r2, r0, r2
 80040d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000e100 	.word	0xe000e100

080040e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	db0a      	blt.n	8004112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	490c      	ldr	r1, [pc, #48]	; (8004134 <__NVIC_SetPriority+0x4c>)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	0112      	lsls	r2, r2, #4
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	440b      	add	r3, r1
 800410c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004110:	e00a      	b.n	8004128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4908      	ldr	r1, [pc, #32]	; (8004138 <__NVIC_SetPriority+0x50>)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	3b04      	subs	r3, #4
 8004120:	0112      	lsls	r2, r2, #4
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	440b      	add	r3, r1
 8004126:	761a      	strb	r2, [r3, #24]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000e100 	.word	0xe000e100
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f1c3 0307 	rsb	r3, r3, #7
 8004156:	2b04      	cmp	r3, #4
 8004158:	bf28      	it	cs
 800415a:	2304      	movcs	r3, #4
 800415c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3304      	adds	r3, #4
 8004162:	2b06      	cmp	r3, #6
 8004164:	d902      	bls.n	800416c <NVIC_EncodePriority+0x30>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3b03      	subs	r3, #3
 800416a:	e000      	b.n	800416e <NVIC_EncodePriority+0x32>
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004170:	f04f 32ff 	mov.w	r2, #4294967295
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	401a      	ands	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004184:	f04f 31ff 	mov.w	r1, #4294967295
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	43d9      	mvns	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004194:	4313      	orrs	r3, r2
         );
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ff4c 	bl	8004048 <__NVIC_SetPriorityGrouping>
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041ca:	f7ff ff61 	bl	8004090 <__NVIC_GetPriorityGrouping>
 80041ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	6978      	ldr	r0, [r7, #20]
 80041d6:	f7ff ffb1 	bl	800413c <NVIC_EncodePriority>
 80041da:	4602      	mov	r2, r0
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff80 	bl	80040e8 <__NVIC_SetPriority>
}
 80041e8:	bf00      	nop
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff ff54 	bl	80040ac <__NVIC_EnableIRQ>
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e00e      	b.n	800423c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	795b      	ldrb	r3, [r3, #5]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc f972 	bl	8000518 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004250:	f7ff fecc 	bl	8003fec <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e099      	b.n	8004394 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004280:	e00f      	b.n	80042a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004282:	f7ff feb3 	bl	8003fec <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b05      	cmp	r3, #5
 800428e:	d908      	bls.n	80042a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2203      	movs	r2, #3
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e078      	b.n	8004394 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e8      	bne.n	8004282 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_DMA_Init+0x158>)
 80042bc:	4013      	ands	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d107      	bne.n	800430c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	4313      	orrs	r3, r2
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0307 	bic.w	r3, r3, #7
 8004322:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	2b04      	cmp	r3, #4
 8004334:	d117      	bne.n	8004366 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00e      	beq.n	8004366 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f8bd 	bl	80044c8 <DMA_CheckFifoParam>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2240      	movs	r2, #64	; 0x40
 8004358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004362:	2301      	movs	r3, #1
 8004364:	e016      	b.n	8004394 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f874 	bl	800445c <DMA_CalcBaseAndBitshift>
 8004374:	4603      	mov	r3, r0
 8004376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	223f      	movs	r2, #63	; 0x3f
 800437e:	409a      	lsls	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	f010803f 	.word	0xf010803f

080043a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e050      	b.n	8004454 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d101      	bne.n	80043c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80043be:	2302      	movs	r3, #2
 80043c0:	e048      	b.n	8004454 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2200      	movs	r2, #0
 80043f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2221      	movs	r2, #33	; 0x21
 8004400:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f82a 	bl	800445c <DMA_CalcBaseAndBitshift>
 8004408:	4603      	mov	r3, r0
 800440a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	223f      	movs	r2, #63	; 0x3f
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	3b10      	subs	r3, #16
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <DMA_CalcBaseAndBitshift+0x64>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004476:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d909      	bls.n	800449e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	1d1a      	adds	r2, r3, #4
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	659a      	str	r2, [r3, #88]	; 0x58
 800449c:	e007      	b.n	80044ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	aaaaaaab 	.word	0xaaaaaaab
 80044c4:	08012f68 	.word	0x08012f68

080044c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11f      	bne.n	8004522 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d855      	bhi.n	8004594 <DMA_CheckFifoParam+0xcc>
 80044e8:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <DMA_CheckFifoParam+0x28>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004501 	.word	0x08004501
 80044f4:	08004513 	.word	0x08004513
 80044f8:	08004501 	.word	0x08004501
 80044fc:	08004595 	.word	0x08004595
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d045      	beq.n	8004598 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004510:	e042      	b.n	8004598 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800451a:	d13f      	bne.n	800459c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004520:	e03c      	b.n	800459c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800452a:	d121      	bne.n	8004570 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d836      	bhi.n	80045a0 <DMA_CheckFifoParam+0xd8>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <DMA_CheckFifoParam+0x70>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	08004549 	.word	0x08004549
 800453c:	0800454f 	.word	0x0800454f
 8004540:	08004549 	.word	0x08004549
 8004544:	08004561 	.word	0x08004561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
      break;
 800454c:	e02f      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d024      	beq.n	80045a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455e:	e021      	b.n	80045a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004568:	d11e      	bne.n	80045a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800456e:	e01b      	b.n	80045a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d902      	bls.n	800457c <DMA_CheckFifoParam+0xb4>
 8004576:	2b03      	cmp	r3, #3
 8004578:	d003      	beq.n	8004582 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800457a:	e018      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      break;
 8004580:	e015      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00e      	beq.n	80045ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      break;
 8004592:	e00b      	b.n	80045ac <DMA_CheckFifoParam+0xe4>
      break;
 8004594:	bf00      	nop
 8004596:	e00a      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
      break;
 8004598:	bf00      	nop
 800459a:	e008      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
      break;
 800459c:	bf00      	nop
 800459e:	e006      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
      break;
 80045a0:	bf00      	nop
 80045a2:	e004      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
      break;
 80045a4:	bf00      	nop
 80045a6:	e002      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
      break;   
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
      break;
 80045ac:	bf00      	nop
    }
  } 
  
  return status; 
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e03b      	b.n	8004646 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fb ffec 	bl	80005c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	f023 0107 	bic.w	r1, r3, #7
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004626:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68d1      	ldr	r1, [r2, #12]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	430b      	orrs	r3, r1
 8004634:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af02      	add	r7, sp, #8
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_DMA2D_Start+0x1c>
 8004666:	2302      	movs	r3, #2
 8004668:	e018      	b.n	800469c <HAL_DMA2D_Start+0x4e>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fa99 	bl	8004bbc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d056      	beq.n	800476e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80046c0:	f7ff fc94 	bl	8003fec <HAL_GetTick>
 80046c4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80046c6:	e04b      	b.n	8004760 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d023      	beq.n	8004722 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	f043 0202 	orr.w	r2, r3, #2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	f043 0201 	orr.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2221      	movs	r2, #33	; 0x21
 800470c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2204      	movs	r2, #4
 8004712:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0a5      	b.n	800486e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d01a      	beq.n	8004760 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800472a:	f7ff fc5f 	bl	8003fec <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <HAL_DMA2D_PollForTransfer+0x9c>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10f      	bne.n	8004760 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2203      	movs	r2, #3
 8004750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e086      	b.n	800486e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0ac      	beq.n	80046c8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d061      	beq.n	8004854 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004790:	f7ff fc2c 	bl	8003fec <HAL_GetTick>
 8004794:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004796:	e056      	b.n	8004846 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d02e      	beq.n	8004808 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b8:	f043 0204 	orr.w	r2, r3, #4
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	f043 0202 	orr.w	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	f043 0201 	orr.w	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2229      	movs	r2, #41	; 0x29
 80047f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2204      	movs	r2, #4
 80047f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e032      	b.n	800486e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d01a      	beq.n	8004846 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004810:	f7ff fbec 	bl	8003fec <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d302      	bcc.n	8004826 <HAL_DMA2D_PollForTransfer+0x182>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	f043 0220 	orr.w	r2, r3, #32
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2203      	movs	r2, #3
 8004836:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e013      	b.n	800486e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0a1      	beq.n	8004798 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2212      	movs	r2, #18
 800485a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d026      	beq.n	80048e6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d021      	beq.n	80048e6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	f043 0201 	orr.w	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2201      	movs	r2, #1
 80048c4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2204      	movs	r2, #4
 80048ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d026      	beq.n	800493e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d021      	beq.n	800493e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004908:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2220      	movs	r2, #32
 8004910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	f043 0202 	orr.w	r2, r3, #2
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2204      	movs	r2, #4
 8004922:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d026      	beq.n	8004996 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494e:	2b00      	cmp	r3, #0
 8004950:	d021      	beq.n	8004996 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004960:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2208      	movs	r2, #8
 8004968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2204      	movs	r2, #4
 800497a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d013      	beq.n	80049c8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00e      	beq.n	80049c8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2204      	movs	r2, #4
 80049c0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f853 	bl	8004a6e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d024      	beq.n	8004a1c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01f      	beq.n	8004a1c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049ea:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2202      	movs	r2, #2
 80049f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01f      	beq.n	8004a66 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01a      	beq.n	8004a66 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a3e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2210      	movs	r2, #16
 8004a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f80e 	bl	8004a82 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_DMA2D_ConfigLayer+0x20>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e079      	b.n	8004bac <HAL_DMA2D_ConfigLayer+0x114>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	3318      	adds	r3, #24
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004ae2:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004ae4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b0a      	cmp	r3, #10
 8004aec:	d003      	beq.n	8004af6 <HAL_DMA2D_ConfigLayer+0x5e>
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b09      	cmp	r3, #9
 8004af4:	d107      	bne.n	8004b06 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e005      	b.n	8004b12 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	061b      	lsls	r3, r3, #24
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d120      	bne.n	8004b5a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	ea02 0103 	and.w	r1, r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b0a      	cmp	r3, #10
 8004b40:	d003      	beq.n	8004b4a <HAL_DMA2D_ConfigLayer+0xb2>
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d127      	bne.n	8004b9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28
 8004b58:	e01f      	b.n	8004b9a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	43db      	mvns	r3, r3
 8004b64:	ea02 0103 	and.w	r1, r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b0a      	cmp	r3, #10
 8004b82:	d003      	beq.n	8004b8c <HAL_DMA2D_ConfigLayer+0xf4>
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b09      	cmp	r3, #9
 8004b8a:	d106      	bne.n	8004b9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004b98:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	ff03000f 	.word	0xff03000f

08004bbc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b08b      	sub	sp, #44	; 0x2c
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	041a      	lsls	r2, r3, #16
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bf4:	d174      	bne.n	8004ce0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bfc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c04:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c0c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d108      	bne.n	8004c2e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	431a      	orrs	r2, r3
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2c:	e053      	b.n	8004cd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d106      	bne.n	8004c44 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
 8004c42:	e048      	b.n	8004cd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d111      	bne.n	8004c70 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	0cdb      	lsrs	r3, r3, #19
 8004c50:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	0a9b      	lsrs	r3, r3, #10
 8004c56:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	08db      	lsrs	r3, r3, #3
 8004c5c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	02db      	lsls	r3, r3, #11
 8004c66:	4313      	orrs	r3, r2
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6e:	e032      	b.n	8004cd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d117      	bne.n	8004ca8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	0fdb      	lsrs	r3, r3, #31
 8004c7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	0cdb      	lsrs	r3, r3, #19
 8004c82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	0adb      	lsrs	r3, r3, #11
 8004c88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	08db      	lsrs	r3, r3, #3
 8004c8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	029b      	lsls	r3, r3, #10
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	03db      	lsls	r3, r3, #15
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca6:	e016      	b.n	8004cd6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	0f1b      	lsrs	r3, r3, #28
 8004cac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	0d1b      	lsrs	r3, r3, #20
 8004cb2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	0b1b      	lsrs	r3, r3, #12
 8004cb8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	011a      	lsls	r2, r3, #4
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	031b      	lsls	r3, r3, #12
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004cde:	e003      	b.n	8004ce8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	60da      	str	r2, [r3, #12]
}
 8004ce8:	bf00      	nop
 8004cea:	372c      	adds	r7, #44	; 0x2c
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b089      	sub	sp, #36	; 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e177      	b.n	8005000 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d10:	2201      	movs	r2, #1
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	f040 8166 	bne.w	8004ffa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d00b      	beq.n	8004d4e <HAL_GPIO_Init+0x5a>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d007      	beq.n	8004d4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d42:	2b11      	cmp	r3, #17
 8004d44:	d003      	beq.n	8004d4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b12      	cmp	r3, #18
 8004d4c:	d130      	bne.n	8004db0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	2203      	movs	r2, #3
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4013      	ands	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d84:	2201      	movs	r2, #1
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 0201 	and.w	r2, r3, #1
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2203      	movs	r2, #3
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d003      	beq.n	8004df0 <HAL_GPIO_Init+0xfc>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b12      	cmp	r3, #18
 8004dee:	d123      	bne.n	8004e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	08da      	lsrs	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3208      	adds	r2, #8
 8004df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	220f      	movs	r2, #15
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	08da      	lsrs	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3208      	adds	r2, #8
 8004e32:	69b9      	ldr	r1, [r7, #24]
 8004e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	2203      	movs	r2, #3
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 0203 	and.w	r2, r3, #3
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80c0 	beq.w	8004ffa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	4b65      	ldr	r3, [pc, #404]	; (8005014 <HAL_GPIO_Init+0x320>)
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	4a64      	ldr	r2, [pc, #400]	; (8005014 <HAL_GPIO_Init+0x320>)
 8004e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e88:	6453      	str	r3, [r2, #68]	; 0x44
 8004e8a:	4b62      	ldr	r3, [pc, #392]	; (8005014 <HAL_GPIO_Init+0x320>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e96:	4a60      	ldr	r2, [pc, #384]	; (8005018 <HAL_GPIO_Init+0x324>)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	089b      	lsrs	r3, r3, #2
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	220f      	movs	r2, #15
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a57      	ldr	r2, [pc, #348]	; (800501c <HAL_GPIO_Init+0x328>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d037      	beq.n	8004f32 <HAL_GPIO_Init+0x23e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a56      	ldr	r2, [pc, #344]	; (8005020 <HAL_GPIO_Init+0x32c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d031      	beq.n	8004f2e <HAL_GPIO_Init+0x23a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a55      	ldr	r2, [pc, #340]	; (8005024 <HAL_GPIO_Init+0x330>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d02b      	beq.n	8004f2a <HAL_GPIO_Init+0x236>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a54      	ldr	r2, [pc, #336]	; (8005028 <HAL_GPIO_Init+0x334>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d025      	beq.n	8004f26 <HAL_GPIO_Init+0x232>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a53      	ldr	r2, [pc, #332]	; (800502c <HAL_GPIO_Init+0x338>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01f      	beq.n	8004f22 <HAL_GPIO_Init+0x22e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a52      	ldr	r2, [pc, #328]	; (8005030 <HAL_GPIO_Init+0x33c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d019      	beq.n	8004f1e <HAL_GPIO_Init+0x22a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a51      	ldr	r2, [pc, #324]	; (8005034 <HAL_GPIO_Init+0x340>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <HAL_GPIO_Init+0x226>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a50      	ldr	r2, [pc, #320]	; (8005038 <HAL_GPIO_Init+0x344>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00d      	beq.n	8004f16 <HAL_GPIO_Init+0x222>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a4f      	ldr	r2, [pc, #316]	; (800503c <HAL_GPIO_Init+0x348>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <HAL_GPIO_Init+0x21e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a4e      	ldr	r2, [pc, #312]	; (8005040 <HAL_GPIO_Init+0x34c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_GPIO_Init+0x21a>
 8004f0a:	2309      	movs	r3, #9
 8004f0c:	e012      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f0e:	230a      	movs	r3, #10
 8004f10:	e010      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f12:	2308      	movs	r3, #8
 8004f14:	e00e      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f16:	2307      	movs	r3, #7
 8004f18:	e00c      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	e00a      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f1e:	2305      	movs	r3, #5
 8004f20:	e008      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f22:	2304      	movs	r3, #4
 8004f24:	e006      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f26:	2303      	movs	r3, #3
 8004f28:	e004      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e002      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_GPIO_Init+0x240>
 8004f32:	2300      	movs	r3, #0
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	f002 0203 	and.w	r2, r2, #3
 8004f3a:	0092      	lsls	r2, r2, #2
 8004f3c:	4093      	lsls	r3, r2
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f44:	4934      	ldr	r1, [pc, #208]	; (8005018 <HAL_GPIO_Init+0x324>)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f52:	4b3c      	ldr	r3, [pc, #240]	; (8005044 <HAL_GPIO_Init+0x350>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f76:	4a33      	ldr	r2, [pc, #204]	; (8005044 <HAL_GPIO_Init+0x350>)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f7c:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_GPIO_Init+0x350>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fa0:	4a28      	ldr	r2, [pc, #160]	; (8005044 <HAL_GPIO_Init+0x350>)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fa6:	4b27      	ldr	r3, [pc, #156]	; (8005044 <HAL_GPIO_Init+0x350>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fca:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <HAL_GPIO_Init+0x350>)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fd0:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <HAL_GPIO_Init+0x350>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <HAL_GPIO_Init+0x350>)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	f67f ae84 	bls.w	8004d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005008:	bf00      	nop
 800500a:	3724      	adds	r7, #36	; 0x24
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40023800 	.word	0x40023800
 8005018:	40013800 	.word	0x40013800
 800501c:	40020000 	.word	0x40020000
 8005020:	40020400 	.word	0x40020400
 8005024:	40020800 	.word	0x40020800
 8005028:	40020c00 	.word	0x40020c00
 800502c:	40021000 	.word	0x40021000
 8005030:	40021400 	.word	0x40021400
 8005034:	40021800 	.word	0x40021800
 8005038:	40021c00 	.word	0x40021c00
 800503c:	40022000 	.word	0x40022000
 8005040:	40022400 	.word	0x40022400
 8005044:	40013c00 	.word	0x40013c00

08005048 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e0d9      	b.n	8005218 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005064:	2201      	movs	r2, #1
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4013      	ands	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	429a      	cmp	r2, r3
 800507c:	f040 80c9 	bne.w	8005212 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005080:	4a6a      	ldr	r2, [pc, #424]	; (800522c <HAL_GPIO_DeInit+0x1e4>)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	3302      	adds	r3, #2
 8005088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	220f      	movs	r2, #15
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	4013      	ands	r3, r2
 80050a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a62      	ldr	r2, [pc, #392]	; (8005230 <HAL_GPIO_DeInit+0x1e8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d037      	beq.n	800511a <HAL_GPIO_DeInit+0xd2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a61      	ldr	r2, [pc, #388]	; (8005234 <HAL_GPIO_DeInit+0x1ec>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d031      	beq.n	8005116 <HAL_GPIO_DeInit+0xce>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a60      	ldr	r2, [pc, #384]	; (8005238 <HAL_GPIO_DeInit+0x1f0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d02b      	beq.n	8005112 <HAL_GPIO_DeInit+0xca>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a5f      	ldr	r2, [pc, #380]	; (800523c <HAL_GPIO_DeInit+0x1f4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d025      	beq.n	800510e <HAL_GPIO_DeInit+0xc6>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a5e      	ldr	r2, [pc, #376]	; (8005240 <HAL_GPIO_DeInit+0x1f8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01f      	beq.n	800510a <HAL_GPIO_DeInit+0xc2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a5d      	ldr	r2, [pc, #372]	; (8005244 <HAL_GPIO_DeInit+0x1fc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d019      	beq.n	8005106 <HAL_GPIO_DeInit+0xbe>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a5c      	ldr	r2, [pc, #368]	; (8005248 <HAL_GPIO_DeInit+0x200>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_GPIO_DeInit+0xba>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a5b      	ldr	r2, [pc, #364]	; (800524c <HAL_GPIO_DeInit+0x204>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00d      	beq.n	80050fe <HAL_GPIO_DeInit+0xb6>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a5a      	ldr	r2, [pc, #360]	; (8005250 <HAL_GPIO_DeInit+0x208>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d007      	beq.n	80050fa <HAL_GPIO_DeInit+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a59      	ldr	r2, [pc, #356]	; (8005254 <HAL_GPIO_DeInit+0x20c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <HAL_GPIO_DeInit+0xae>
 80050f2:	2309      	movs	r3, #9
 80050f4:	e012      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 80050f6:	230a      	movs	r3, #10
 80050f8:	e010      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 80050fa:	2308      	movs	r3, #8
 80050fc:	e00e      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 80050fe:	2307      	movs	r3, #7
 8005100:	e00c      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 8005102:	2306      	movs	r3, #6
 8005104:	e00a      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 8005106:	2305      	movs	r3, #5
 8005108:	e008      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 800510a:	2304      	movs	r3, #4
 800510c:	e006      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 800510e:	2303      	movs	r3, #3
 8005110:	e004      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 8005112:	2302      	movs	r3, #2
 8005114:	e002      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_GPIO_DeInit+0xd4>
 800511a:	2300      	movs	r3, #0
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	f002 0203 	and.w	r2, r2, #3
 8005122:	0092      	lsls	r2, r2, #2
 8005124:	4093      	lsls	r3, r2
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	429a      	cmp	r2, r3
 800512a:	d132      	bne.n	8005192 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800512c:	4b4a      	ldr	r3, [pc, #296]	; (8005258 <HAL_GPIO_DeInit+0x210>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	43db      	mvns	r3, r3
 8005134:	4948      	ldr	r1, [pc, #288]	; (8005258 <HAL_GPIO_DeInit+0x210>)
 8005136:	4013      	ands	r3, r2
 8005138:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_GPIO_DeInit+0x210>)
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	43db      	mvns	r3, r3
 8005142:	4945      	ldr	r1, [pc, #276]	; (8005258 <HAL_GPIO_DeInit+0x210>)
 8005144:	4013      	ands	r3, r2
 8005146:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005148:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_GPIO_DeInit+0x210>)
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	43db      	mvns	r3, r3
 8005150:	4941      	ldr	r1, [pc, #260]	; (8005258 <HAL_GPIO_DeInit+0x210>)
 8005152:	4013      	ands	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005156:	4b40      	ldr	r3, [pc, #256]	; (8005258 <HAL_GPIO_DeInit+0x210>)
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	43db      	mvns	r3, r3
 800515e:	493e      	ldr	r1, [pc, #248]	; (8005258 <HAL_GPIO_DeInit+0x210>)
 8005160:	4013      	ands	r3, r2
 8005162:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005174:	4a2d      	ldr	r2, [pc, #180]	; (800522c <HAL_GPIO_DeInit+0x1e4>)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	3302      	adds	r3, #2
 800517c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	43da      	mvns	r2, r3
 8005184:	4829      	ldr	r0, [pc, #164]	; (800522c <HAL_GPIO_DeInit+0x1e4>)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	400a      	ands	r2, r1
 800518c:	3302      	adds	r3, #2
 800518e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	2103      	movs	r1, #3
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	401a      	ands	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	08da      	lsrs	r2, r3, #3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3208      	adds	r2, #8
 80051b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	220f      	movs	r2, #15
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43db      	mvns	r3, r3
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	08d2      	lsrs	r2, r2, #3
 80051c8:	4019      	ands	r1, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	2103      	movs	r1, #3
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	401a      	ands	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	2101      	movs	r1, #1
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	401a      	ands	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	2103      	movs	r1, #3
 8005206:	fa01 f303 	lsl.w	r3, r1, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	401a      	ands	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	3301      	adds	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b0f      	cmp	r3, #15
 800521c:	f67f af22 	bls.w	8005064 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005220:	bf00      	nop
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	40013800 	.word	0x40013800
 8005230:	40020000 	.word	0x40020000
 8005234:	40020400 	.word	0x40020400
 8005238:	40020800 	.word	0x40020800
 800523c:	40020c00 	.word	0x40020c00
 8005240:	40021000 	.word	0x40021000
 8005244:	40021400 	.word	0x40021400
 8005248:	40021800 	.word	0x40021800
 800524c:	40021c00 	.word	0x40021c00
 8005250:	40022000 	.word	0x40022000
 8005254:	40022400 	.word	0x40022400
 8005258:	40013c00 	.word	0x40013c00

0800525c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	807b      	strh	r3, [r7, #2]
 8005268:	4613      	mov	r3, r2
 800526a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800526c:	787b      	ldrb	r3, [r7, #1]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005272:	887a      	ldrh	r2, [r7, #2]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005278:	e003      	b.n	8005282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800527a:	887b      	ldrh	r3, [r7, #2]
 800527c:	041a      	lsls	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	619a      	str	r2, [r3, #24]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800528e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005290:	b08f      	sub	sp, #60	; 0x3c
 8005292:	af0a      	add	r7, sp, #40	; 0x28
 8005294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e054      	b.n	800534a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f00b fa16 	bl	80106ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2203      	movs	r2, #3
 80052c4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f005 ff1b 	bl	800b11a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	687e      	ldr	r6, [r7, #4]
 80052ec:	466d      	mov	r5, sp
 80052ee:	f106 0410 	add.w	r4, r6, #16
 80052f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005302:	1d33      	adds	r3, r6, #4
 8005304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005306:	6838      	ldr	r0, [r7, #0]
 8005308:	f005 fe95 	bl	800b036 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f005 ff12 	bl	800b13c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	603b      	str	r3, [r7, #0]
 800531e:	687e      	ldr	r6, [r7, #4]
 8005320:	466d      	mov	r5, sp
 8005322:	f106 0410 	add.w	r4, r6, #16
 8005326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800532a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800532c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800532e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005332:	e885 0003 	stmia.w	r5, {r0, r1}
 8005336:	1d33      	adds	r3, r6, #4
 8005338:	cb0e      	ldmia	r3, {r1, r2, r3}
 800533a:	6838      	ldr	r0, [r7, #0]
 800533c:	f006 f824 	bl	800b388 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005352 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005352:	b590      	push	{r4, r7, lr}
 8005354:	b089      	sub	sp, #36	; 0x24
 8005356:	af04      	add	r7, sp, #16
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	4608      	mov	r0, r1
 800535c:	4611      	mov	r1, r2
 800535e:	461a      	mov	r2, r3
 8005360:	4603      	mov	r3, r0
 8005362:	70fb      	strb	r3, [r7, #3]
 8005364:	460b      	mov	r3, r1
 8005366:	70bb      	strb	r3, [r7, #2]
 8005368:	4613      	mov	r3, r2
 800536a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_HCD_HC_Init+0x28>
 8005376:	2302      	movs	r3, #2
 8005378:	e07f      	b.n	800547a <HAL_HCD_HC_Init+0x128>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	440b      	add	r3, r1
 8005390:	333d      	adds	r3, #61	; 0x3d
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	440b      	add	r3, r1
 80053a4:	3338      	adds	r3, #56	; 0x38
 80053a6:	787a      	ldrb	r2, [r7, #1]
 80053a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	440b      	add	r3, r1
 80053b8:	3340      	adds	r3, #64	; 0x40
 80053ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053bc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	440b      	add	r3, r1
 80053cc:	3339      	adds	r3, #57	; 0x39
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	440b      	add	r3, r1
 80053e0:	333f      	adds	r3, #63	; 0x3f
 80053e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80053e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	78bb      	ldrb	r3, [r7, #2]
 80053ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f0:	b2d8      	uxtb	r0, r3
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	440b      	add	r3, r1
 80053fe:	333a      	adds	r3, #58	; 0x3a
 8005400:	4602      	mov	r2, r0
 8005402:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005404:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005408:	2b00      	cmp	r3, #0
 800540a:	da0a      	bge.n	8005422 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	440b      	add	r3, r1
 800541a:	333b      	adds	r3, #59	; 0x3b
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e009      	b.n	8005436 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	440b      	add	r3, r1
 8005430:	333b      	adds	r3, #59	; 0x3b
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005436:	78fa      	ldrb	r2, [r7, #3]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	333c      	adds	r3, #60	; 0x3c
 8005446:	f897 2020 	ldrb.w	r2, [r7, #32]
 800544a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	787c      	ldrb	r4, [r7, #1]
 8005452:	78ba      	ldrb	r2, [r7, #2]
 8005454:	78f9      	ldrb	r1, [r7, #3]
 8005456:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005458:	9302      	str	r3, [sp, #8]
 800545a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	4623      	mov	r3, r4
 8005468:	f006 f910 	bl	800b68c <USB_HC_Init>
 800546c:	4603      	mov	r3, r0
 800546e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bd90      	pop	{r4, r7, pc}

08005482 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_HCD_HC_Halt+0x1e>
 800549c:	2302      	movs	r3, #2
 800549e:	e00f      	b.n	80054c0 <HAL_HCD_HC_Halt+0x3e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f006 fb4c 	bl	800bb4e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	4608      	mov	r0, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	461a      	mov	r2, r3
 80054d6:	4603      	mov	r3, r0
 80054d8:	70fb      	strb	r3, [r7, #3]
 80054da:	460b      	mov	r3, r1
 80054dc:	70bb      	strb	r3, [r7, #2]
 80054de:	4613      	mov	r3, r2
 80054e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	440b      	add	r3, r1
 80054f0:	333b      	adds	r3, #59	; 0x3b
 80054f2:	78ba      	ldrb	r2, [r7, #2]
 80054f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	440b      	add	r3, r1
 8005504:	333f      	adds	r3, #63	; 0x3f
 8005506:	787a      	ldrb	r2, [r7, #1]
 8005508:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800550a:	7c3b      	ldrb	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d114      	bne.n	800553a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	440b      	add	r3, r1
 800551e:	3342      	adds	r3, #66	; 0x42
 8005520:	2203      	movs	r2, #3
 8005522:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	440b      	add	r3, r1
 8005532:	333d      	adds	r3, #61	; 0x3d
 8005534:	7f3a      	ldrb	r2, [r7, #28]
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e009      	b.n	800554e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	440b      	add	r3, r1
 8005548:	3342      	adds	r3, #66	; 0x42
 800554a:	2202      	movs	r2, #2
 800554c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800554e:	787b      	ldrb	r3, [r7, #1]
 8005550:	2b03      	cmp	r3, #3
 8005552:	f200 80d6 	bhi.w	8005702 <HAL_HCD_HC_SubmitRequest+0x23a>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <HAL_HCD_HC_SubmitRequest+0x94>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	0800556d 	.word	0x0800556d
 8005560:	080056ed 	.word	0x080056ed
 8005564:	080055d9 	.word	0x080055d9
 8005568:	08005663 	.word	0x08005663
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800556c:	7c3b      	ldrb	r3, [r7, #16]
 800556e:	2b01      	cmp	r3, #1
 8005570:	f040 80c9 	bne.w	8005706 <HAL_HCD_HC_SubmitRequest+0x23e>
 8005574:	78bb      	ldrb	r3, [r7, #2]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 80c5 	bne.w	8005706 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800557c:	8b3b      	ldrh	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	440b      	add	r3, r1
 8005590:	3351      	adds	r3, #81	; 0x51
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	440b      	add	r3, r1
 80055a4:	3351      	adds	r3, #81	; 0x51
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	440b      	add	r3, r1
 80055ba:	3342      	adds	r3, #66	; 0x42
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80055c0:	e0a1      	b.n	8005706 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	440b      	add	r3, r1
 80055d0:	3342      	adds	r3, #66	; 0x42
 80055d2:	2202      	movs	r2, #2
 80055d4:	701a      	strb	r2, [r3, #0]
      break;
 80055d6:	e096      	b.n	8005706 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80055d8:	78bb      	ldrb	r3, [r7, #2]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d120      	bne.n	8005620 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	440b      	add	r3, r1
 80055ec:	3351      	adds	r3, #81	; 0x51
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	440b      	add	r3, r1
 8005602:	3342      	adds	r3, #66	; 0x42
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005608:	e07e      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	3342      	adds	r3, #66	; 0x42
 800561a:	2202      	movs	r2, #2
 800561c:	701a      	strb	r2, [r3, #0]
      break;
 800561e:	e073      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	440b      	add	r3, r1
 800562e:	3350      	adds	r3, #80	; 0x50
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	440b      	add	r3, r1
 8005644:	3342      	adds	r3, #66	; 0x42
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
      break;
 800564a:	e05d      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	440b      	add	r3, r1
 800565a:	3342      	adds	r3, #66	; 0x42
 800565c:	2202      	movs	r2, #2
 800565e:	701a      	strb	r2, [r3, #0]
      break;
 8005660:	e052      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005662:	78bb      	ldrb	r3, [r7, #2]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d120      	bne.n	80056aa <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005668:	78fa      	ldrb	r2, [r7, #3]
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	440b      	add	r3, r1
 8005676:	3351      	adds	r3, #81	; 0x51
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	440b      	add	r3, r1
 800568c:	3342      	adds	r3, #66	; 0x42
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005692:	e039      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005694:	78fa      	ldrb	r2, [r7, #3]
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	440b      	add	r3, r1
 80056a2:	3342      	adds	r3, #66	; 0x42
 80056a4:	2202      	movs	r2, #2
 80056a6:	701a      	strb	r2, [r3, #0]
      break;
 80056a8:	e02e      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	440b      	add	r3, r1
 80056b8:	3350      	adds	r3, #80	; 0x50
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	440b      	add	r3, r1
 80056ce:	3342      	adds	r3, #66	; 0x42
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
      break;
 80056d4:	e018      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056d6:	78fa      	ldrb	r2, [r7, #3]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	440b      	add	r3, r1
 80056e4:	3342      	adds	r3, #66	; 0x42
 80056e6:	2202      	movs	r2, #2
 80056e8:	701a      	strb	r2, [r3, #0]
      break;
 80056ea:	e00d      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	440b      	add	r3, r1
 80056fa:	3342      	adds	r3, #66	; 0x42
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
      break;
 8005700:	e002      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005706:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	440b      	add	r3, r1
 8005716:	3344      	adds	r3, #68	; 0x44
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800571c:	78fa      	ldrb	r2, [r7, #3]
 800571e:	8b39      	ldrh	r1, [r7, #24]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	4403      	add	r3, r0
 800572c:	3348      	adds	r3, #72	; 0x48
 800572e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	440b      	add	r3, r1
 800573e:	335c      	adds	r3, #92	; 0x5c
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005744:	78fa      	ldrb	r2, [r7, #3]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	334c      	adds	r3, #76	; 0x4c
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	440b      	add	r3, r1
 8005766:	3339      	adds	r3, #57	; 0x39
 8005768:	78fa      	ldrb	r2, [r7, #3]
 800576a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800576c:	78fa      	ldrb	r2, [r7, #3]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	440b      	add	r3, r1
 800577a:	335d      	adds	r3, #93	; 0x5d
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	78fa      	ldrb	r2, [r7, #3]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	3338      	adds	r3, #56	; 0x38
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	18d1      	adds	r1, r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	f006 f880 	bl	800b8a0 <USB_HC_StartXfer>
 80057a0:	4603      	mov	r3, r0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop

080057ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f005 fd9d 	bl	800b302 <USB_GetMode>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	f040 80ef 	bne.w	80059ae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f005 fd81 	bl	800b2dc <USB_ReadInterrupts>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80e5 	beq.w	80059ac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f005 fd78 	bl	800b2dc <USB_ReadInterrupts>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f6:	d104      	bne.n	8005802 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005800:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f005 fd68 	bl	800b2dc <USB_ReadInterrupts>
 800580c:	4603      	mov	r3, r0
 800580e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005816:	d104      	bne.n	8005822 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005820:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f005 fd58 	bl	800b2dc <USB_ReadInterrupts>
 800582c:	4603      	mov	r3, r0
 800582e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005836:	d104      	bne.n	8005842 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005840:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f005 fd48 	bl	800b2dc <USB_ReadInterrupts>
 800584c:	4603      	mov	r3, r0
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b02      	cmp	r3, #2
 8005854:	d103      	bne.n	800585e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2202      	movs	r2, #2
 800585c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f005 fd3a 	bl	800b2dc <USB_ReadInterrupts>
 8005868:	4603      	mov	r3, r0
 800586a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800586e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005872:	d115      	bne.n	80058a0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800587c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d108      	bne.n	80058a0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f00a ffa6 	bl	80107e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2101      	movs	r1, #1
 800589a:	4618      	mov	r0, r3
 800589c:	f005 fe30 	bl	800b500 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f005 fd19 	bl	800b2dc <USB_ReadInterrupts>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058b4:	d102      	bne.n	80058bc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 f966 	bl	8006b88 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f005 fd0b 	bl	800b2dc <USB_ReadInterrupts>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d106      	bne.n	80058de <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f00a ff69 	bl	80107a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2208      	movs	r2, #8
 80058dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f005 fcfa 	bl	800b2dc <USB_ReadInterrupts>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058f2:	d138      	bne.n	8005966 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f006 f917 	bl	800bb2c <USB_HC_ReadInterrupt>
 80058fe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e025      	b.n	8005952 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	fa22 f303 	lsr.w	r3, r2, r3
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d018      	beq.n	800594c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	d106      	bne.n	8005940 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f8cf 	bl	8005adc <HCD_HC_IN_IRQHandler>
 800593e:	e005      	b.n	800594c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fcfd 	bl	8006346 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	3301      	adds	r3, #1
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	429a      	cmp	r2, r3
 800595a:	d3d4      	bcc.n	8005906 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f005 fcb6 	bl	800b2dc <USB_ReadInterrupts>
 8005970:	4603      	mov	r3, r0
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b10      	cmp	r3, #16
 8005978:	d101      	bne.n	800597e <HAL_HCD_IRQHandler+0x1d2>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <HAL_HCD_IRQHandler+0x1d4>
 800597e:	2300      	movs	r3, #0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d014      	beq.n	80059ae <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0210 	bic.w	r2, r2, #16
 8005992:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f001 f84b 	bl	8006a30 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0210 	orr.w	r2, r2, #16
 80059a8:	619a      	str	r2, [r3, #24]
 80059aa:	e000      	b.n	80059ae <HAL_HCD_IRQHandler+0x202>
      return;
 80059ac:	bf00      	nop
    }
  }
}
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_HCD_Start+0x16>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e013      	b.n	80059f2 <HAL_HCD_Start+0x3e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f005 fb8e 	bl	800b0f8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2101      	movs	r1, #1
 80059e2:	4618      	mov	r0, r3
 80059e4:	f005 fdf0 	bl	800b5c8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_HCD_Stop+0x16>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e00d      	b.n	8005a2c <HAL_HCD_Stop+0x32>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f006 f9d1 	bl	800bdc4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f005 fd97 	bl	800b574 <USB_ResetPort>
 8005a46:	4603      	mov	r3, r0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	440b      	add	r3, r1
 8005a6a:	335c      	adds	r3, #92	; 0x5c
 8005a6c:	781b      	ldrb	r3, [r3, #0]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	460b      	mov	r3, r1
 8005a84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	334c      	adds	r3, #76	; 0x4c
 8005a96:	681b      	ldr	r3, [r3, #0]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f005 fdd9 	bl	800b668 <USB_GetCurrentFrame>
 8005ab6:	4603      	mov	r3, r0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f005 fdb4 	bl	800b63a <USB_GetHostSpeed>
 8005ad2:	4603      	mov	r3, r0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d119      	bne.n	8005b40 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b18:	461a      	mov	r2, r3
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b38:	f043 0302 	orr.w	r3, r3, #2
 8005b3c:	60d3      	str	r3, [r2, #12]
 8005b3e:	e0ce      	b.n	8005cde <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b56:	d12c      	bne.n	8005bb2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b64:	461a      	mov	r2, r3
 8005b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	440b      	add	r3, r1
 8005b7a:	335d      	adds	r3, #93	; 0x5d
 8005b7c:	2207      	movs	r2, #7
 8005b7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9a:	f043 0302 	orr.w	r3, r3, #2
 8005b9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f005 ffcf 	bl	800bb4e <USB_HC_Halt>
 8005bb0:	e095      	b.n	8005cde <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d109      	bne.n	8005bdc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2320      	movs	r3, #32
 8005bd8:	6093      	str	r3, [r2, #8]
 8005bda:	e080      	b.n	8005cde <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d134      	bne.n	8005c5c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c0c:	f043 0302 	orr.w	r3, r3, #2
 8005c10:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	440b      	add	r3, r1
 8005c20:	335d      	adds	r3, #93	; 0x5d
 8005c22:	2205      	movs	r2, #5
 8005c24:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	461a      	mov	r2, r3
 8005c34:	2310      	movs	r3, #16
 8005c36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c44:	461a      	mov	r2, r3
 8005c46:	2308      	movs	r3, #8
 8005c48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f005 ff7a 	bl	800bb4e <USB_HC_Halt>
 8005c5a:	e040      	b.n	8005cde <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c72:	d134      	bne.n	8005cde <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c8e:	f043 0302 	orr.w	r3, r3, #2
 8005c92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f005 ff55 	bl	800bb4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	440b      	add	r3, r1
 8005cc4:	335d      	adds	r3, #93	; 0x5d
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cdc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf4:	d122      	bne.n	8005d3c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d10:	f043 0302 	orr.w	r3, r3, #2
 8005d14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f005 ff14 	bl	800bb4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d32:	461a      	mov	r2, r3
 8005d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d38:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005d3a:	e300      	b.n	800633e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	f040 80fd 	bne.w	8005f4e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01b      	beq.n	8005d94 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	440b      	add	r3, r1
 8005d6a:	3348      	adds	r3, #72	; 0x48
 8005d6c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	0159      	lsls	r1, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	440b      	add	r3, r1
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005d80:	1ad1      	subs	r1, r2, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4403      	add	r3, r0
 8005d90:	334c      	adds	r3, #76	; 0x4c
 8005d92:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	440b      	add	r3, r1
 8005da2:	335d      	adds	r3, #93	; 0x5d
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	440b      	add	r3, r1
 8005db6:	3358      	adds	r3, #88	; 0x58
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2301      	movs	r3, #1
 8005dcc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	440b      	add	r3, r1
 8005ddc:	333f      	adds	r3, #63	; 0x3f
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	440b      	add	r3, r1
 8005df2:	333f      	adds	r3, #63	; 0x3f
 8005df4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d121      	bne.n	8005e3e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e14:	f043 0302 	orr.w	r3, r3, #2
 8005e18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	4611      	mov	r1, r2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f005 fe92 	bl	800bb4e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e36:	461a      	mov	r2, r3
 8005e38:	2310      	movs	r3, #16
 8005e3a:	6093      	str	r3, [r2, #8]
 8005e3c:	e070      	b.n	8005f20 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	333f      	adds	r3, #63	; 0x3f
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d12a      	bne.n	8005eaa <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e72:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	440b      	add	r3, r1
 8005e82:	335c      	adds	r3, #92	; 0x5c
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	b2d8      	uxtb	r0, r3
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	440b      	add	r3, r1
 8005e9a:	335c      	adds	r3, #92	; 0x5c
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	4601      	mov	r1, r0
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f00a fcaa 	bl	80107fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ea8:	e03a      	b.n	8005f20 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	440b      	add	r3, r1
 8005eb8:	333f      	adds	r3, #63	; 0x3f
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d12f      	bne.n	8005f20 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	440b      	add	r3, r1
 8005ece:	335c      	adds	r3, #92	; 0x5c
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3350      	adds	r3, #80	; 0x50
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	f083 0301 	eor.w	r3, r3, #1
 8005eea:	b2d8      	uxtb	r0, r3
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	440b      	add	r3, r1
 8005efa:	3350      	adds	r3, #80	; 0x50
 8005efc:	4602      	mov	r2, r0
 8005efe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	b2d8      	uxtb	r0, r3
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	440b      	add	r3, r1
 8005f12:	335c      	adds	r3, #92	; 0x5c
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	4601      	mov	r1, r0
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f00a fc6e 	bl	80107fc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	440b      	add	r3, r1
 8005f2e:	3350      	adds	r3, #80	; 0x50
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	f083 0301 	eor.w	r3, r3, #1
 8005f36:	b2d8      	uxtb	r0, r3
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	440b      	add	r3, r1
 8005f46:	3350      	adds	r3, #80	; 0x50
 8005f48:	4602      	mov	r2, r0
 8005f4a:	701a      	strb	r2, [r3, #0]
}
 8005f4c:	e1f7      	b.n	800633e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	f040 811a 	bne.w	800619a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f80:	f023 0302 	bic.w	r3, r3, #2
 8005f84:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	440b      	add	r3, r1
 8005f94:	335d      	adds	r3, #93	; 0x5d
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d10a      	bne.n	8005fb2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	440b      	add	r3, r1
 8005faa:	335c      	adds	r3, #92	; 0x5c
 8005fac:	2201      	movs	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	e0d9      	b.n	8006166 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	440b      	add	r3, r1
 8005fc0:	335d      	adds	r3, #93	; 0x5d
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d10a      	bne.n	8005fde <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	440b      	add	r3, r1
 8005fd6:	335c      	adds	r3, #92	; 0x5c
 8005fd8:	2205      	movs	r2, #5
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e0c3      	b.n	8006166 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	440b      	add	r3, r1
 8005fec:	335d      	adds	r3, #93	; 0x5d
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b06      	cmp	r3, #6
 8005ff2:	d00a      	beq.n	800600a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	440b      	add	r3, r1
 8006002:	335d      	adds	r3, #93	; 0x5d
 8006004:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006006:	2b08      	cmp	r3, #8
 8006008:	d156      	bne.n	80060b8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	440b      	add	r3, r1
 8006018:	3358      	adds	r3, #88	; 0x58
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	1c59      	adds	r1, r3, #1
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4403      	add	r3, r0
 800602c:	3358      	adds	r3, #88	; 0x58
 800602e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	440b      	add	r3, r1
 800603e:	3358      	adds	r3, #88	; 0x58
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b03      	cmp	r3, #3
 8006044:	d914      	bls.n	8006070 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	440b      	add	r3, r1
 8006054:	3358      	adds	r3, #88	; 0x58
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	440b      	add	r3, r1
 8006068:	335c      	adds	r3, #92	; 0x5c
 800606a:	2204      	movs	r2, #4
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	e009      	b.n	8006084 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	335c      	adds	r3, #92	; 0x5c
 8006080:	2202      	movs	r2, #2
 8006082:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800609a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b0:	461a      	mov	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	e056      	b.n	8006166 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	440b      	add	r3, r1
 80060c6:	335d      	adds	r3, #93	; 0x5d
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d123      	bne.n	8006116 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	440b      	add	r3, r1
 80060dc:	335c      	adds	r3, #92	; 0x5c
 80060de:	2202      	movs	r2, #2
 80060e0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060f8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006100:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	461a      	mov	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	e027      	b.n	8006166 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	440b      	add	r3, r1
 8006124:	335d      	adds	r3, #93	; 0x5d
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b07      	cmp	r3, #7
 800612a:	d11c      	bne.n	8006166 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	440b      	add	r3, r1
 800613a:	3358      	adds	r3, #88	; 0x58
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	1c59      	adds	r1, r3, #1
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4403      	add	r3, r0
 800614e:	3358      	adds	r3, #88	; 0x58
 8006150:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	440b      	add	r3, r1
 8006160:	335c      	adds	r3, #92	; 0x5c
 8006162:	2204      	movs	r2, #4
 8006164:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006172:	461a      	mov	r2, r3
 8006174:	2302      	movs	r3, #2
 8006176:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	b2d8      	uxtb	r0, r3
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	440b      	add	r3, r1
 800618a:	335c      	adds	r3, #92	; 0x5c
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	4601      	mov	r1, r0
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f00a fb32 	bl	80107fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006198:	e0d1      	b.n	800633e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d13e      	bne.n	800622e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ca:	f043 0302 	orr.w	r3, r3, #2
 80061ce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	440b      	add	r3, r1
 80061de:	3358      	adds	r3, #88	; 0x58
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	1c59      	adds	r1, r3, #1
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4403      	add	r3, r0
 80061f2:	3358      	adds	r3, #88	; 0x58
 80061f4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	440b      	add	r3, r1
 8006204:	335d      	adds	r3, #93	; 0x5d
 8006206:	2206      	movs	r2, #6
 8006208:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	4611      	mov	r1, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f005 fc9a 	bl	800bb4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	461a      	mov	r2, r3
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	6093      	str	r3, [r2, #8]
}
 800622c:	e087      	b.n	800633e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4413      	add	r3, r2
 8006236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b10      	cmp	r3, #16
 8006242:	d17c      	bne.n	800633e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	440b      	add	r3, r1
 8006252:	333f      	adds	r3, #63	; 0x3f
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b03      	cmp	r3, #3
 8006258:	d122      	bne.n	80062a0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	440b      	add	r3, r1
 8006268:	3358      	adds	r3, #88	; 0x58
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	440a      	add	r2, r1
 8006284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f005 fc58 	bl	800bb4e <USB_HC_Halt>
 800629e:	e045      	b.n	800632c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	440b      	add	r3, r1
 80062ae:	333f      	adds	r3, #63	; 0x3f
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	440b      	add	r3, r1
 80062c4:	333f      	adds	r3, #63	; 0x3f
 80062c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d12f      	bne.n	800632c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	440b      	add	r3, r1
 80062da:	3358      	adds	r3, #88	; 0x58
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d121      	bne.n	800632c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	440b      	add	r3, r1
 80062f6:	335d      	adds	r3, #93	; 0x5d
 80062f8:	2203      	movs	r2, #3
 80062fa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	4413      	add	r3, r2
 8006304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	440a      	add	r2, r1
 8006312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006316:	f043 0302 	orr.w	r3, r3, #2
 800631a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f005 fc11 	bl	800bb4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4413      	add	r3, r2
 8006334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006338:	461a      	mov	r2, r3
 800633a:	2310      	movs	r3, #16
 800633c:	6093      	str	r3, [r2, #8]
}
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b086      	sub	sp, #24
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	460b      	mov	r3, r1
 8006350:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b04      	cmp	r3, #4
 8006374:	d119      	bne.n	80063aa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	4413      	add	r3, r2
 800637e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006382:	461a      	mov	r2, r3
 8006384:	2304      	movs	r3, #4
 8006386:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	440a      	add	r2, r1
 800639e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80063a8:	e33e      	b.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d141      	bne.n	8006444 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063cc:	461a      	mov	r2, r3
 80063ce:	2320      	movs	r3, #32
 80063d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	440b      	add	r3, r1
 80063e0:	333d      	adds	r3, #61	; 0x3d
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	f040 831f 	bne.w	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	440b      	add	r3, r1
 80063f8:	333d      	adds	r3, #61	; 0x3d
 80063fa:	2200      	movs	r2, #0
 80063fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	440b      	add	r3, r1
 800640c:	335c      	adds	r3, #92	; 0x5c
 800640e:	2202      	movs	r2, #2
 8006410:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	440a      	add	r2, r1
 8006428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	4611      	mov	r1, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f005 fb86 	bl	800bb4e <USB_HC_Halt>
}
 8006442:	e2f1      	b.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4413      	add	r3, r2
 800644c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d13f      	bne.n	80064da <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	440b      	add	r3, r1
 8006468:	335d      	adds	r3, #93	; 0x5d
 800646a:	2204      	movs	r2, #4
 800646c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	440b      	add	r3, r1
 800647c:	333d      	adds	r3, #61	; 0x3d
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	440b      	add	r3, r1
 8006490:	3358      	adds	r3, #88	; 0x58
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f005 fb44 	bl	800bb4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d2:	461a      	mov	r2, r3
 80064d4:	2340      	movs	r3, #64	; 0x40
 80064d6:	6093      	str	r3, [r2, #8]
}
 80064d8:	e2a6      	b.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f0:	d122      	bne.n	8006538 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	440a      	add	r2, r1
 8006508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800650c:	f043 0302 	orr.w	r3, r3, #2
 8006510:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	4611      	mov	r1, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f005 fb16 	bl	800bb4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	4413      	add	r3, r2
 800652a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652e:	461a      	mov	r2, r3
 8006530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006534:	6093      	str	r3, [r2, #8]
}
 8006536:	e277      	b.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	d135      	bne.n	80065ba <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	440b      	add	r3, r1
 800655c:	3358      	adds	r3, #88	; 0x58
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	0151      	lsls	r1, r2, #5
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	440a      	add	r2, r1
 8006578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657c:	f043 0302 	orr.w	r3, r3, #2
 8006580:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	4611      	mov	r1, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f005 fade 	bl	800bb4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659e:	461a      	mov	r2, r3
 80065a0:	2301      	movs	r3, #1
 80065a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	440b      	add	r3, r1
 80065b2:	335d      	adds	r3, #93	; 0x5d
 80065b4:	2201      	movs	r2, #1
 80065b6:	701a      	strb	r2, [r3, #0]
}
 80065b8:	e236      	b.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d12b      	bne.n	8006628 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065dc:	461a      	mov	r2, r3
 80065de:	2308      	movs	r3, #8
 80065e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	4611      	mov	r1, r2
 800660c:	4618      	mov	r0, r3
 800660e:	f005 fa9e 	bl	800bb4e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	440b      	add	r3, r1
 8006620:	335d      	adds	r3, #93	; 0x5d
 8006622:	2205      	movs	r2, #5
 8006624:	701a      	strb	r2, [r3, #0]
}
 8006626:	e1ff      	b.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	4413      	add	r3, r2
 8006630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0310 	and.w	r3, r3, #16
 800663a:	2b10      	cmp	r3, #16
 800663c:	d155      	bne.n	80066ea <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	440b      	add	r3, r1
 800664c:	3358      	adds	r3, #88	; 0x58
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	440b      	add	r3, r1
 8006660:	335d      	adds	r3, #93	; 0x5d
 8006662:	2203      	movs	r2, #3
 8006664:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	333d      	adds	r3, #61	; 0x3d
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d114      	bne.n	80066a6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	440b      	add	r3, r1
 800668a:	333c      	adds	r3, #60	; 0x3c
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	440b      	add	r3, r1
 80066a0:	333d      	adds	r3, #61	; 0x3d
 80066a2:	2201      	movs	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c0:	f043 0302 	orr.w	r3, r3, #2
 80066c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	4611      	mov	r1, r2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f005 fa3c 	bl	800bb4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	461a      	mov	r2, r3
 80066e4:	2310      	movs	r3, #16
 80066e6:	6093      	str	r3, [r2, #8]
}
 80066e8:	e19e      	b.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	2b80      	cmp	r3, #128	; 0x80
 80066fe:	d12b      	bne.n	8006758 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	4413      	add	r3, r2
 8006708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	440a      	add	r2, r1
 8006716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800671a:	f043 0302 	orr.w	r3, r3, #2
 800671e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	4611      	mov	r1, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f005 fa0f 	bl	800bb4e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	440b      	add	r3, r1
 800673e:	335d      	adds	r3, #93	; 0x5d
 8006740:	2206      	movs	r2, #6
 8006742:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006750:	461a      	mov	r2, r3
 8006752:	2380      	movs	r3, #128	; 0x80
 8006754:	6093      	str	r3, [r2, #8]
}
 8006756:	e167      	b.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800676e:	d135      	bne.n	80067dc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4413      	add	r3, r2
 8006778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	440a      	add	r2, r1
 8006786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678a:	f043 0302 	orr.w	r3, r3, #2
 800678e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	4611      	mov	r1, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f005 f9d7 	bl	800bb4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ac:	461a      	mov	r2, r3
 80067ae:	2310      	movs	r3, #16
 80067b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067be:	461a      	mov	r2, r3
 80067c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	440b      	add	r3, r1
 80067d4:	335d      	adds	r3, #93	; 0x5d
 80067d6:	2208      	movs	r2, #8
 80067d8:	701a      	strb	r2, [r3, #0]
}
 80067da:	e125      	b.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	f040 811a 	bne.w	8006a28 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	440a      	add	r2, r1
 800680a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800680e:	f023 0302 	bic.w	r3, r3, #2
 8006812:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	440b      	add	r3, r1
 8006822:	335d      	adds	r3, #93	; 0x5d
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d137      	bne.n	800689a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	440b      	add	r3, r1
 8006838:	335c      	adds	r3, #92	; 0x5c
 800683a:	2201      	movs	r2, #1
 800683c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	440b      	add	r3, r1
 800684c:	333f      	adds	r3, #63	; 0x3f
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d00b      	beq.n	800686c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	440b      	add	r3, r1
 8006862:	333f      	adds	r3, #63	; 0x3f
 8006864:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006866:	2b03      	cmp	r3, #3
 8006868:	f040 80c5 	bne.w	80069f6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	440b      	add	r3, r1
 800687a:	3351      	adds	r3, #81	; 0x51
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f083 0301 	eor.w	r3, r3, #1
 8006882:	b2d8      	uxtb	r0, r3
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	440b      	add	r3, r1
 8006892:	3351      	adds	r3, #81	; 0x51
 8006894:	4602      	mov	r2, r0
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	e0ad      	b.n	80069f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	440b      	add	r3, r1
 80068a8:	335d      	adds	r3, #93	; 0x5d
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d10a      	bne.n	80068c6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	440b      	add	r3, r1
 80068be:	335c      	adds	r3, #92	; 0x5c
 80068c0:	2202      	movs	r2, #2
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	e097      	b.n	80069f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	440b      	add	r3, r1
 80068d4:	335d      	adds	r3, #93	; 0x5d
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d10a      	bne.n	80068f2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	440b      	add	r3, r1
 80068ea:	335c      	adds	r3, #92	; 0x5c
 80068ec:	2202      	movs	r2, #2
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	e081      	b.n	80069f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	440b      	add	r3, r1
 8006900:	335d      	adds	r3, #93	; 0x5d
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b05      	cmp	r3, #5
 8006906:	d10a      	bne.n	800691e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	440b      	add	r3, r1
 8006916:	335c      	adds	r3, #92	; 0x5c
 8006918:	2205      	movs	r2, #5
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	e06b      	b.n	80069f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	440b      	add	r3, r1
 800692c:	335d      	adds	r3, #93	; 0x5d
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b06      	cmp	r3, #6
 8006932:	d00a      	beq.n	800694a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	440b      	add	r3, r1
 8006942:	335d      	adds	r3, #93	; 0x5d
 8006944:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006946:	2b08      	cmp	r3, #8
 8006948:	d155      	bne.n	80069f6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	440b      	add	r3, r1
 8006958:	3358      	adds	r3, #88	; 0x58
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	1c59      	adds	r1, r3, #1
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	4403      	add	r3, r0
 800696c:	3358      	adds	r3, #88	; 0x58
 800696e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	440b      	add	r3, r1
 800697e:	3358      	adds	r3, #88	; 0x58
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d914      	bls.n	80069b0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	440b      	add	r3, r1
 8006994:	3358      	adds	r3, #88	; 0x58
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	440b      	add	r3, r1
 80069a8:	335c      	adds	r3, #92	; 0x5c
 80069aa:	2204      	movs	r2, #4
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	e009      	b.n	80069c4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	440b      	add	r3, r1
 80069be:	335c      	adds	r3, #92	; 0x5c
 80069c0:	2202      	movs	r2, #2
 80069c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f0:	461a      	mov	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a02:	461a      	mov	r2, r3
 8006a04:	2302      	movs	r3, #2
 8006a06:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	b2d8      	uxtb	r0, r3
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	440b      	add	r3, r1
 8006a1a:	335c      	adds	r3, #92	; 0x5c
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	4601      	mov	r1, r0
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f009 feea 	bl	80107fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006a28:	bf00      	nop
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	0c5b      	lsrs	r3, r3, #17
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	091b      	lsrs	r3, r3, #4
 8006a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a64:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d003      	beq.n	8006a74 <HCD_RXQLVL_IRQHandler+0x44>
 8006a6c:	2b05      	cmp	r3, #5
 8006a6e:	f000 8082 	beq.w	8006b76 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006a72:	e083      	b.n	8006b7c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d07f      	beq.n	8006b7a <HCD_RXQLVL_IRQHandler+0x14a>
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	440b      	add	r3, r1
 8006a88:	3344      	adds	r3, #68	; 0x44
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d074      	beq.n	8006b7a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	440b      	add	r3, r1
 8006aa2:	3344      	adds	r3, #68	; 0x44
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	b292      	uxth	r2, r2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f004 fbed 	bl	800b28a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	440b      	add	r3, r1
 8006abe:	3344      	adds	r3, #68	; 0x44
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	18d1      	adds	r1, r2, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	4403      	add	r3, r0
 8006ad4:	3344      	adds	r3, #68	; 0x44
 8006ad6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	440b      	add	r3, r1
 8006ae6:	334c      	adds	r3, #76	; 0x4c
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	18d1      	adds	r1, r2, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	4403      	add	r3, r0
 8006afc:	334c      	adds	r3, #76	; 0x4c
 8006afe:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <HCD_RXQLVL_IRQHandler+0x154>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d031      	beq.n	8006b7a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b2c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b34:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b42:	461a      	mov	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	440b      	add	r3, r1
 8006b56:	3350      	adds	r3, #80	; 0x50
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f083 0301 	eor.w	r3, r3, #1
 8006b5e:	b2d8      	uxtb	r0, r3
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	440b      	add	r3, r1
 8006b6e:	3350      	adds	r3, #80	; 0x50
 8006b70:	4602      	mov	r2, r0
 8006b72:	701a      	strb	r2, [r3, #0]
      break;
 8006b74:	e001      	b.n	8006b7a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006b76:	bf00      	nop
 8006b78:	e000      	b.n	8006b7c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006b7a:	bf00      	nop
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3728      	adds	r7, #40	; 0x28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	1ff80000 	.word	0x1ff80000

08006b88 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006bb4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d10b      	bne.n	8006bd8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d102      	bne.n	8006bd0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f009 fdfa 	bl	80107c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f043 0302 	orr.w	r3, r3, #2
 8006bd6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d132      	bne.n	8006c48 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f043 0308 	orr.w	r3, r3, #8
 8006be8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d126      	bne.n	8006c42 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d113      	bne.n	8006c24 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006c02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c06:	d106      	bne.n	8006c16 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f004 fc76 	bl	800b500 <USB_InitFSLSPClkSel>
 8006c14:	e011      	b.n	8006c3a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f004 fc6f 	bl	800b500 <USB_InitFSLSPClkSel>
 8006c22:	e00a      	b.n	8006c3a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d106      	bne.n	8006c3a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c32:	461a      	mov	r2, r3
 8006c34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006c38:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f009 fdf0 	bl	8010820 <HAL_HCD_PortEnabled_Callback>
 8006c40:	e002      	b.n	8006c48 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f009 fdfa 	bl	801083c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d103      	bne.n	8006c5a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f043 0320 	orr.w	r3, r3, #32
 8006c58:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c60:	461a      	mov	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6013      	str	r3, [r2, #0]
}
 8006c66:	bf00      	nop
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e11f      	b.n	8006ec2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7f9 ff50 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2224      	movs	r2, #36	; 0x24
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006cd4:	f002 f882 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 8006cd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	4a7b      	ldr	r2, [pc, #492]	; (8006ecc <HAL_I2C_Init+0x25c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d807      	bhi.n	8006cf4 <HAL_I2C_Init+0x84>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a7a      	ldr	r2, [pc, #488]	; (8006ed0 <HAL_I2C_Init+0x260>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	bf94      	ite	ls
 8006cec:	2301      	movls	r3, #1
 8006cee:	2300      	movhi	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e006      	b.n	8006d02 <HAL_I2C_Init+0x92>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4a77      	ldr	r2, [pc, #476]	; (8006ed4 <HAL_I2C_Init+0x264>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	bf94      	ite	ls
 8006cfc:	2301      	movls	r3, #1
 8006cfe:	2300      	movhi	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e0db      	b.n	8006ec2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4a72      	ldr	r2, [pc, #456]	; (8006ed8 <HAL_I2C_Init+0x268>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	0c9b      	lsrs	r3, r3, #18
 8006d14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4a64      	ldr	r2, [pc, #400]	; (8006ecc <HAL_I2C_Init+0x25c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d802      	bhi.n	8006d44 <HAL_I2C_Init+0xd4>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3301      	adds	r3, #1
 8006d42:	e009      	b.n	8006d58 <HAL_I2C_Init+0xe8>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d4a:	fb02 f303 	mul.w	r3, r2, r3
 8006d4e:	4a63      	ldr	r2, [pc, #396]	; (8006edc <HAL_I2C_Init+0x26c>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	099b      	lsrs	r3, r3, #6
 8006d56:	3301      	adds	r3, #1
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006d6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	4956      	ldr	r1, [pc, #344]	; (8006ecc <HAL_I2C_Init+0x25c>)
 8006d74:	428b      	cmp	r3, r1
 8006d76:	d80d      	bhi.n	8006d94 <HAL_I2C_Init+0x124>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	1e59      	subs	r1, r3, #1
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d86:	3301      	adds	r3, #1
 8006d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	bf38      	it	cc
 8006d90:	2304      	movcc	r3, #4
 8006d92:	e04f      	b.n	8006e34 <HAL_I2C_Init+0x1c4>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d111      	bne.n	8006dc0 <HAL_I2C_Init+0x150>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	1e58      	subs	r0, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6859      	ldr	r1, [r3, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	005b      	lsls	r3, r3, #1
 8006da8:	440b      	add	r3, r1
 8006daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dae:	3301      	adds	r3, #1
 8006db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bf0c      	ite	eq
 8006db8:	2301      	moveq	r3, #1
 8006dba:	2300      	movne	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	e012      	b.n	8006de6 <HAL_I2C_Init+0x176>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1e58      	subs	r0, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6859      	ldr	r1, [r3, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	0099      	lsls	r1, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bf0c      	ite	eq
 8006de0:	2301      	moveq	r3, #1
 8006de2:	2300      	movne	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <HAL_I2C_Init+0x17e>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e022      	b.n	8006e34 <HAL_I2C_Init+0x1c4>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10e      	bne.n	8006e14 <HAL_I2C_Init+0x1a4>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1e58      	subs	r0, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6859      	ldr	r1, [r3, #4]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	440b      	add	r3, r1
 8006e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e12:	e00f      	b.n	8006e34 <HAL_I2C_Init+0x1c4>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	1e58      	subs	r0, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6859      	ldr	r1, [r3, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	0099      	lsls	r1, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	6809      	ldr	r1, [r1, #0]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69da      	ldr	r2, [r3, #28]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6911      	ldr	r1, [r2, #16]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	68d2      	ldr	r2, [r2, #12]
 8006e6e:	4311      	orrs	r1, r2
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	000186a0 	.word	0x000186a0
 8006ed0:	001e847f 	.word	0x001e847f
 8006ed4:	003d08ff 	.word	0x003d08ff
 8006ed8:	431bde83 	.word	0x431bde83
 8006edc:	10624dd3 	.word	0x10624dd3

08006ee0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e021      	b.n	8006f36 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2224      	movs	r2, #36	; 0x24
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7f9 fe80 	bl	8000c10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4603      	mov	r3, r0
 8006f50:	817b      	strh	r3, [r7, #10]
 8006f52:	460b      	mov	r3, r1
 8006f54:	813b      	strh	r3, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f5a:	f7fd f847 	bl	8003fec <HAL_GetTick>
 8006f5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	f040 80d9 	bne.w	8007120 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	2319      	movs	r3, #25
 8006f74:	2201      	movs	r2, #1
 8006f76:	496d      	ldr	r1, [pc, #436]	; (800712c <HAL_I2C_Mem_Write+0x1ec>)
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fc8d 	bl	8007898 <I2C_WaitOnFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006f84:	2302      	movs	r3, #2
 8006f86:	e0cc      	b.n	8007122 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_I2C_Mem_Write+0x56>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e0c5      	b.n	8007122 <HAL_I2C_Mem_Write+0x1e2>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d007      	beq.n	8006fbc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2221      	movs	r2, #33	; 0x21
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2240      	movs	r2, #64	; 0x40
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a3a      	ldr	r2, [r7, #32]
 8006fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4a4d      	ldr	r2, [pc, #308]	; (8007130 <HAL_I2C_Mem_Write+0x1f0>)
 8006ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ffe:	88f8      	ldrh	r0, [r7, #6]
 8007000:	893a      	ldrh	r2, [r7, #8]
 8007002:	8979      	ldrh	r1, [r7, #10]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	4603      	mov	r3, r0
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fac4 	bl	800759c <I2C_RequestMemoryWrite>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d052      	beq.n	80070c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e081      	b.n	8007122 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 fd0e 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00d      	beq.n	800704a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	2b04      	cmp	r3, #4
 8007034:	d107      	bne.n	8007046 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007044:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e06b      	b.n	8007122 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b04      	cmp	r3, #4
 8007086:	d11b      	bne.n	80070c0 <HAL_I2C_Mem_Write+0x180>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708c:	2b00      	cmp	r3, #0
 800708e:	d017      	beq.n	80070c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1aa      	bne.n	800701e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fcfa 	bl	8007ac6 <I2C_WaitOnBTFFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00d      	beq.n	80070f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d107      	bne.n	80070f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e016      	b.n	8007122 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	e000      	b.n	8007122 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007120:	2302      	movs	r3, #2
  }
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	00100002 	.word	0x00100002
 8007130:	ffff0000 	.word	0xffff0000

08007134 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08c      	sub	sp, #48	; 0x30
 8007138:	af02      	add	r7, sp, #8
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	461a      	mov	r2, r3
 8007142:	4603      	mov	r3, r0
 8007144:	817b      	strh	r3, [r7, #10]
 8007146:	460b      	mov	r3, r1
 8007148:	813b      	strh	r3, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800714e:	f7fc ff4d 	bl	8003fec <HAL_GetTick>
 8007152:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b20      	cmp	r3, #32
 800715e:	f040 8208 	bne.w	8007572 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	2319      	movs	r3, #25
 8007168:	2201      	movs	r2, #1
 800716a:	497b      	ldr	r1, [pc, #492]	; (8007358 <HAL_I2C_Mem_Read+0x224>)
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 fb93 	bl	8007898 <I2C_WaitOnFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007178:	2302      	movs	r3, #2
 800717a:	e1fb      	b.n	8007574 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_I2C_Mem_Read+0x56>
 8007186:	2302      	movs	r3, #2
 8007188:	e1f4      	b.n	8007574 <HAL_I2C_Mem_Read+0x440>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b01      	cmp	r3, #1
 800719e:	d007      	beq.n	80071b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2222      	movs	r2, #34	; 0x22
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2240      	movs	r2, #64	; 0x40
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80071e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a5b      	ldr	r2, [pc, #364]	; (800735c <HAL_I2C_Mem_Read+0x228>)
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071f2:	88f8      	ldrh	r0, [r7, #6]
 80071f4:	893a      	ldrh	r2, [r7, #8]
 80071f6:	8979      	ldrh	r1, [r7, #10]
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	4603      	mov	r3, r0
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fa60 	bl	80076c8 <I2C_RequestMemoryRead>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e1b0      	b.n	8007574 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d113      	bne.n	8007242 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800721a:	2300      	movs	r3, #0
 800721c:	623b      	str	r3, [r7, #32]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	623b      	str	r3, [r7, #32]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	623b      	str	r3, [r7, #32]
 800722e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e184      	b.n	800754c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007246:	2b01      	cmp	r3, #1
 8007248:	d11b      	bne.n	8007282 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	e164      	b.n	800754c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007286:	2b02      	cmp	r3, #2
 8007288:	d11b      	bne.n	80072c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007298:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072aa:	2300      	movs	r3, #0
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	e144      	b.n	800754c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80072d8:	e138      	b.n	800754c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072de:	2b03      	cmp	r3, #3
 80072e0:	f200 80f1 	bhi.w	80074c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d123      	bne.n	8007334 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 fc29 	bl	8007b48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e139      	b.n	8007574 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007332:	e10b      	b.n	800754c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007338:	2b02      	cmp	r3, #2
 800733a:	d14e      	bne.n	80073da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	2200      	movs	r2, #0
 8007344:	4906      	ldr	r1, [pc, #24]	; (8007360 <HAL_I2C_Mem_Read+0x22c>)
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 faa6 	bl	8007898 <I2C_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d008      	beq.n	8007364 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e10e      	b.n	8007574 <HAL_I2C_Mem_Read+0x440>
 8007356:	bf00      	nop
 8007358:	00100002 	.word	0x00100002
 800735c:	ffff0000 	.word	0xffff0000
 8007360:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	3b01      	subs	r3, #1
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073d8:	e0b8      	b.n	800754c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	2200      	movs	r2, #0
 80073e2:	4966      	ldr	r1, [pc, #408]	; (800757c <HAL_I2C_Mem_Read+0x448>)
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fa57 	bl	8007898 <I2C_WaitOnFlagUntilTimeout>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0bf      	b.n	8007574 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691a      	ldr	r2, [r3, #16]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007420:	3b01      	subs	r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	b29a      	uxth	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743c:	2200      	movs	r2, #0
 800743e:	494f      	ldr	r1, [pc, #316]	; (800757c <HAL_I2C_Mem_Read+0x448>)
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fa29 	bl	8007898 <I2C_WaitOnFlagUntilTimeout>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e091      	b.n	8007574 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007488:	b29b      	uxth	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	b29a      	uxth	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691a      	ldr	r2, [r3, #16]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074c4:	e042      	b.n	800754c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fb3c 	bl	8007b48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e04c      	b.n	8007574 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691a      	ldr	r2, [r3, #16]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007502:	b29b      	uxth	r3, r3
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b04      	cmp	r3, #4
 8007518:	d118      	bne.n	800754c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007550:	2b00      	cmp	r3, #0
 8007552:	f47f aec2 	bne.w	80072da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	e000      	b.n	8007574 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
  }
}
 8007574:	4618      	mov	r0, r3
 8007576:	3728      	adds	r7, #40	; 0x28
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	00010004 	.word	0x00010004

08007580 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800758e:	b2db      	uxtb	r3, r3
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af02      	add	r7, sp, #8
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	4608      	mov	r0, r1
 80075a6:	4611      	mov	r1, r2
 80075a8:	461a      	mov	r2, r3
 80075aa:	4603      	mov	r3, r0
 80075ac:	817b      	strh	r3, [r7, #10]
 80075ae:	460b      	mov	r3, r1
 80075b0:	813b      	strh	r3, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 f960 	bl	8007898 <I2C_WaitOnFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ec:	d103      	bne.n	80075f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e05f      	b.n	80076ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075fa:	897b      	ldrh	r3, [r7, #10]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007608:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	6a3a      	ldr	r2, [r7, #32]
 800760e:	492d      	ldr	r1, [pc, #180]	; (80076c4 <I2C_RequestMemoryWrite+0x128>)
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 f998 	bl	8007946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e04c      	b.n	80076ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007638:	6a39      	ldr	r1, [r7, #32]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 fa02 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00d      	beq.n	8007662 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	2b04      	cmp	r3, #4
 800764c:	d107      	bne.n	800765e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800765c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e02b      	b.n	80076ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d105      	bne.n	8007674 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007668:	893b      	ldrh	r3, [r7, #8]
 800766a:	b2da      	uxtb	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	611a      	str	r2, [r3, #16]
 8007672:	e021      	b.n	80076b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007674:	893b      	ldrh	r3, [r7, #8]
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	b29b      	uxth	r3, r3
 800767a:	b2da      	uxtb	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007684:	6a39      	ldr	r1, [r7, #32]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f9dc 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00d      	beq.n	80076ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	2b04      	cmp	r3, #4
 8007698:	d107      	bne.n	80076aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e005      	b.n	80076ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076ae:	893b      	ldrh	r3, [r7, #8]
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	00010002 	.word	0x00010002

080076c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	4608      	mov	r0, r1
 80076d2:	4611      	mov	r1, r2
 80076d4:	461a      	mov	r2, r3
 80076d6:	4603      	mov	r3, r0
 80076d8:	817b      	strh	r3, [r7, #10]
 80076da:	460b      	mov	r3, r1
 80076dc:	813b      	strh	r3, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007700:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2200      	movs	r2, #0
 800770a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 f8c2 	bl	8007898 <I2C_WaitOnFlagUntilTimeout>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00d      	beq.n	8007736 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007728:	d103      	bne.n	8007732 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007730:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e0aa      	b.n	800788c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007736:	897b      	ldrh	r3, [r7, #10]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007744:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	4952      	ldr	r1, [pc, #328]	; (8007894 <I2C_RequestMemoryRead+0x1cc>)
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f8fa 	bl	8007946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e097      	b.n	800788c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007774:	6a39      	ldr	r1, [r7, #32]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 f964 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00d      	beq.n	800779e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	2b04      	cmp	r3, #4
 8007788:	d107      	bne.n	800779a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007798:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e076      	b.n	800788c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d105      	bne.n	80077b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077a4:	893b      	ldrh	r3, [r7, #8]
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	611a      	str	r2, [r3, #16]
 80077ae:	e021      	b.n	80077f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077b0:	893b      	ldrh	r3, [r7, #8]
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c0:	6a39      	ldr	r1, [r7, #32]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f93e 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00d      	beq.n	80077ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d107      	bne.n	80077e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e050      	b.n	800788c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077ea:	893b      	ldrh	r3, [r7, #8]
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f6:	6a39      	ldr	r1, [r7, #32]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f923 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00d      	beq.n	8007820 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	2b04      	cmp	r3, #4
 800780a:	d107      	bne.n	800781c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800781a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e035      	b.n	800788c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800782e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	2200      	movs	r2, #0
 8007838:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 f82b 	bl	8007898 <I2C_WaitOnFlagUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00d      	beq.n	8007864 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007856:	d103      	bne.n	8007860 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800785e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e013      	b.n	800788c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007864:	897b      	ldrh	r3, [r7, #10]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f043 0301 	orr.w	r3, r3, #1
 800786c:	b2da      	uxtb	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	4906      	ldr	r1, [pc, #24]	; (8007894 <I2C_RequestMemoryRead+0x1cc>)
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 f863 	bl	8007946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	00010002 	.word	0x00010002

08007898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078a8:	e025      	b.n	80078f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d021      	beq.n	80078f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b2:	f7fc fb9b 	bl	8003fec <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d302      	bcc.n	80078c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d116      	bne.n	80078f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	f043 0220 	orr.w	r2, r3, #32
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e023      	b.n	800793e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	0c1b      	lsrs	r3, r3, #16
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d10d      	bne.n	800791c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	43da      	mvns	r2, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4013      	ands	r3, r2
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	bf0c      	ite	eq
 8007912:	2301      	moveq	r3, #1
 8007914:	2300      	movne	r3, #0
 8007916:	b2db      	uxtb	r3, r3
 8007918:	461a      	mov	r2, r3
 800791a:	e00c      	b.n	8007936 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	43da      	mvns	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	4013      	ands	r3, r2
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	bf0c      	ite	eq
 800792e:	2301      	moveq	r3, #1
 8007930:	2300      	movne	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	429a      	cmp	r2, r3
 800793a:	d0b6      	beq.n	80078aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007954:	e051      	b.n	80079fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007964:	d123      	bne.n	80079ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007974:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800797e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2220      	movs	r2, #32
 800798a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f043 0204 	orr.w	r2, r3, #4
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e046      	b.n	8007a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b4:	d021      	beq.n	80079fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079b6:	f7fc fb19 	bl	8003fec <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d302      	bcc.n	80079cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d116      	bne.n	80079fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f043 0220 	orr.w	r2, r3, #32
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e020      	b.n	8007a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	0c1b      	lsrs	r3, r3, #16
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d10c      	bne.n	8007a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	43da      	mvns	r2, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bf14      	ite	ne
 8007a16:	2301      	movne	r3, #1
 8007a18:	2300      	moveq	r3, #0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	e00b      	b.n	8007a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	43da      	mvns	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf14      	ite	ne
 8007a30:	2301      	movne	r3, #1
 8007a32:	2300      	moveq	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d18d      	bne.n	8007956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a50:	e02d      	b.n	8007aae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 f8ce 	bl	8007bf4 <I2C_IsAcknowledgeFailed>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e02d      	b.n	8007abe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d021      	beq.n	8007aae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6a:	f7fc fabf 	bl	8003fec <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d302      	bcc.n	8007a80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d116      	bne.n	8007aae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	f043 0220 	orr.w	r2, r3, #32
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e007      	b.n	8007abe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab8:	2b80      	cmp	r3, #128	; 0x80
 8007aba:	d1ca      	bne.n	8007a52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ad2:	e02d      	b.n	8007b30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f88d 	bl	8007bf4 <I2C_IsAcknowledgeFailed>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e02d      	b.n	8007b40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d021      	beq.n	8007b30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aec:	f7fc fa7e 	bl	8003fec <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d302      	bcc.n	8007b02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d116      	bne.n	8007b30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1c:	f043 0220 	orr.w	r2, r3, #32
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e007      	b.n	8007b40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d1ca      	bne.n	8007ad4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b54:	e042      	b.n	8007bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	d119      	bne.n	8007b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0210 	mvn.w	r2, #16
 8007b6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e029      	b.n	8007bec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b98:	f7fc fa28 	bl	8003fec <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d302      	bcc.n	8007bae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d116      	bne.n	8007bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc8:	f043 0220 	orr.w	r2, r3, #32
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e007      	b.n	8007bec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be6:	2b40      	cmp	r3, #64	; 0x40
 8007be8:	d1b5      	bne.n	8007b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c0a:	d11b      	bne.n	8007c44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c30:	f043 0204 	orr.w	r2, r3, #4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d129      	bne.n	8007cbc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2224      	movs	r2, #36	; 0x24
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0210 	bic.w	r2, r2, #16
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e000      	b.n	8007cbe <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007cbc:	2302      	movs	r3, #2
  }
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	d12a      	bne.n	8007d3a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2224      	movs	r2, #36	; 0x24
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0201 	bic.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007d04:	89fb      	ldrh	r3, [r7, #14]
 8007d06:	f023 030f 	bic.w	r3, r3, #15
 8007d0a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	89fb      	ldrh	r3, [r7, #14]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	89fa      	ldrh	r2, [r7, #14]
 8007d1c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f042 0201 	orr.w	r2, r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e000      	b.n	8007d3c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007d3a:	2302      	movs	r3, #2
  }
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e0bf      	b.n	8007eda <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7f9 f828 	bl	8000dc4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007d8a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6999      	ldr	r1, [r3, #24]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007da0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6899      	ldr	r1, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b4a      	ldr	r3, [pc, #296]	; (8007ee4 <HAL_LTDC_Init+0x19c>)
 8007dbc:	400b      	ands	r3, r1
 8007dbe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	041b      	lsls	r3, r3, #16
 8007dc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6899      	ldr	r1, [r3, #8]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68d9      	ldr	r1, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	4b3e      	ldr	r3, [pc, #248]	; (8007ee4 <HAL_LTDC_Init+0x19c>)
 8007dea:	400b      	ands	r3, r1
 8007dec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	041b      	lsls	r3, r3, #16
 8007df4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68d9      	ldr	r1, [r3, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a1a      	ldr	r2, [r3, #32]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6919      	ldr	r1, [r3, #16]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4b33      	ldr	r3, [pc, #204]	; (8007ee4 <HAL_LTDC_Init+0x19c>)
 8007e18:	400b      	ands	r3, r1
 8007e1a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	041b      	lsls	r3, r3, #16
 8007e22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6919      	ldr	r1, [r3, #16]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6959      	ldr	r1, [r3, #20]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	4b27      	ldr	r3, [pc, #156]	; (8007ee4 <HAL_LTDC_Init+0x19c>)
 8007e46:	400b      	ands	r3, r1
 8007e48:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6959      	ldr	r1, [r3, #20]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007e78:	041b      	lsls	r3, r3, #16
 8007e7a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0206 	orr.w	r2, r2, #6
 8007eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0201 	orr.w	r2, r2, #1
 8007ec6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	f000f800 	.word	0xf000f800

08007ee8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d023      	beq.n	8007f52 <HAL_LTDC_IRQHandler+0x6a>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01e      	beq.n	8007f52 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0204 	bic.w	r2, r2, #4
 8007f22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2204      	movs	r2, #4
 8007f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f32:	f043 0201 	orr.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2204      	movs	r2, #4
 8007f40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f86f 	bl	8008030 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d023      	beq.n	8007fa4 <HAL_LTDC_IRQHandler+0xbc>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01e      	beq.n	8007fa4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0202 	bic.w	r2, r2, #2
 8007f74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f84:	f043 0202 	orr.w	r2, r3, #2
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2204      	movs	r2, #4
 8007f92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f846 	bl	8008030 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01b      	beq.n	8007fe6 <HAL_LTDC_IRQHandler+0xfe>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d016      	beq.n	8007fe6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0201 	bic.w	r2, r2, #1
 8007fc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f82f 	bl	8008044 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d01b      	beq.n	8008028 <HAL_LTDC_IRQHandler+0x140>
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f003 0308 	and.w	r3, r3, #8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d016      	beq.n	8008028 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0208 	bic.w	r2, r2, #8
 8008008:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2208      	movs	r2, #8
 8008010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f818 	bl	8008058 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008028:	bf00      	nop
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800806c:	b5b0      	push	{r4, r5, r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_LTDC_ConfigLayer+0x1a>
 8008082:	2302      	movs	r3, #2
 8008084:	e02c      	b.n	80080e0 <HAL_LTDC_ConfigLayer+0x74>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2134      	movs	r1, #52	; 0x34
 800809c:	fb01 f303 	mul.w	r3, r1, r3
 80080a0:	4413      	add	r3, r2
 80080a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	4614      	mov	r4, r2
 80080aa:	461d      	mov	r5, r3
 80080ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 f8b9 	bl	8008238 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2201      	movs	r2, #1
 80080cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bdb0      	pop	{r4, r5, r7, pc}

080080e8 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_LTDC_ConfigColorKeying+0x1a>
 80080fe:	2302      	movs	r3, #2
 8008100:	e030      	b.n	8008164 <HAL_LTDC_ConfigColorKeying+0x7c>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2202      	movs	r2, #2
 800810e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	01db      	lsls	r3, r3, #7
 800811c:	4413      	add	r3, r2
 800811e:	3384      	adds	r3, #132	; 0x84
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	4611      	mov	r1, r2
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	01d2      	lsls	r2, r2, #7
 800812c:	440a      	add	r2, r1
 800812e:	3284      	adds	r2, #132	; 0x84
 8008130:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008134:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	01db      	lsls	r3, r3, #7
 8008140:	4413      	add	r3, r2
 8008142:	3384      	adds	r3, #132	; 0x84
 8008144:	461a      	mov	r2, r3
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2201      	movs	r2, #1
 8008150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008180:	2b01      	cmp	r3, #1
 8008182:	d101      	bne.n	8008188 <HAL_LTDC_EnableColorKeying+0x18>
 8008184:	2302      	movs	r3, #2
 8008186:	e026      	b.n	80081d6 <HAL_LTDC_EnableColorKeying+0x66>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	01db      	lsls	r3, r3, #7
 80081a2:	4413      	add	r3, r2
 80081a4:	3384      	adds	r3, #132	; 0x84
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	4611      	mov	r1, r2
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	01d2      	lsls	r2, r2, #7
 80081b2:	440a      	add	r2, r1
 80081b4:	3284      	adds	r2, #132	; 0x84
 80081b6:	f043 0302 	orr.w	r3, r3, #2
 80081ba:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2201      	movs	r2, #1
 80081c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d101      	bne.n	80081fa <HAL_LTDC_EnableDither+0x16>
 80081f6:	2302      	movs	r3, #2
 80081f8:	e016      	b.n	8008228 <HAL_LTDC_EnableDither+0x44>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800820a:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <HAL_LTDC_EnableDither+0x50>)
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	4a09      	ldr	r2, [pc, #36]	; (8008234 <HAL_LTDC_EnableDither+0x50>)
 8008210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008214:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	40016800 	.word	0x40016800

08008238 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008238:	b480      	push	{r7}
 800823a:	b089      	sub	sp, #36	; 0x24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	0c1b      	lsrs	r3, r3, #16
 8008250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008254:	4413      	add	r3, r2
 8008256:	041b      	lsls	r3, r3, #16
 8008258:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	01db      	lsls	r3, r3, #7
 8008264:	4413      	add	r3, r2
 8008266:	3384      	adds	r3, #132	; 0x84
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	4611      	mov	r1, r2
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	01d2      	lsls	r2, r2, #7
 8008274:	440a      	add	r2, r1
 8008276:	3284      	adds	r2, #132	; 0x84
 8008278:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800827c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	0c1b      	lsrs	r3, r3, #16
 800828a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800828e:	4413      	add	r3, r2
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4619      	mov	r1, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	01db      	lsls	r3, r3, #7
 800829c:	440b      	add	r3, r1
 800829e:	3384      	adds	r3, #132	; 0x84
 80082a0:	4619      	mov	r1, r3
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082b6:	4413      	add	r3, r2
 80082b8:	041b      	lsls	r3, r3, #16
 80082ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	01db      	lsls	r3, r3, #7
 80082c6:	4413      	add	r3, r2
 80082c8:	3384      	adds	r3, #132	; 0x84
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	6812      	ldr	r2, [r2, #0]
 80082d0:	4611      	mov	r1, r2
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	01d2      	lsls	r2, r2, #7
 80082d6:	440a      	add	r2, r1
 80082d8:	3284      	adds	r2, #132	; 0x84
 80082da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80082de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082ee:	4413      	add	r3, r2
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4619      	mov	r1, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	01db      	lsls	r3, r3, #7
 80082fc:	440b      	add	r3, r1
 80082fe:	3384      	adds	r3, #132	; 0x84
 8008300:	4619      	mov	r1, r3
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	4313      	orrs	r3, r2
 8008306:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	01db      	lsls	r3, r3, #7
 8008312:	4413      	add	r3, r2
 8008314:	3384      	adds	r3, #132	; 0x84
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	4611      	mov	r1, r2
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	01d2      	lsls	r2, r2, #7
 8008322:	440a      	add	r2, r1
 8008324:	3284      	adds	r2, #132	; 0x84
 8008326:	f023 0307 	bic.w	r3, r3, #7
 800832a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	01db      	lsls	r3, r3, #7
 8008336:	4413      	add	r3, r2
 8008338:	3384      	adds	r3, #132	; 0x84
 800833a:	461a      	mov	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008352:	041b      	lsls	r3, r3, #16
 8008354:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	061b      	lsls	r3, r3, #24
 800835c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	01db      	lsls	r3, r3, #7
 8008368:	4413      	add	r3, r2
 800836a:	3384      	adds	r3, #132	; 0x84
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	01db      	lsls	r3, r3, #7
 8008378:	4413      	add	r3, r2
 800837a:	3384      	adds	r3, #132	; 0x84
 800837c:	461a      	mov	r2, r3
 800837e:	2300      	movs	r3, #0
 8008380:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008388:	461a      	mov	r2, r3
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	431a      	orrs	r2, r3
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	431a      	orrs	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4619      	mov	r1, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	01db      	lsls	r3, r3, #7
 800839c:	440b      	add	r3, r1
 800839e:	3384      	adds	r3, #132	; 0x84
 80083a0:	4619      	mov	r1, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	461a      	mov	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	01db      	lsls	r3, r3, #7
 80083b2:	4413      	add	r3, r2
 80083b4:	3384      	adds	r3, #132	; 0x84
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	6812      	ldr	r2, [r2, #0]
 80083bc:	4611      	mov	r1, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	01d2      	lsls	r2, r2, #7
 80083c2:	440a      	add	r2, r1
 80083c4:	3284      	adds	r2, #132	; 0x84
 80083c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	01db      	lsls	r3, r3, #7
 80083d6:	4413      	add	r3, r2
 80083d8:	3384      	adds	r3, #132	; 0x84
 80083da:	461a      	mov	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	01db      	lsls	r3, r3, #7
 80083ec:	4413      	add	r3, r2
 80083ee:	3384      	adds	r3, #132	; 0x84
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	6812      	ldr	r2, [r2, #0]
 80083f6:	4611      	mov	r1, r2
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	01d2      	lsls	r2, r2, #7
 80083fc:	440a      	add	r2, r1
 80083fe:	3284      	adds	r2, #132	; 0x84
 8008400:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008404:	f023 0307 	bic.w	r3, r3, #7
 8008408:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	69da      	ldr	r2, [r3, #28]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	68f9      	ldr	r1, [r7, #12]
 8008414:	6809      	ldr	r1, [r1, #0]
 8008416:	4608      	mov	r0, r1
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	01c9      	lsls	r1, r1, #7
 800841c:	4401      	add	r1, r0
 800841e:	3184      	adds	r1, #132	; 0x84
 8008420:	4313      	orrs	r3, r2
 8008422:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	01db      	lsls	r3, r3, #7
 800842e:	4413      	add	r3, r2
 8008430:	3384      	adds	r3, #132	; 0x84
 8008432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	01db      	lsls	r3, r3, #7
 800843e:	4413      	add	r3, r2
 8008440:	3384      	adds	r3, #132	; 0x84
 8008442:	461a      	mov	r2, r3
 8008444:	2300      	movs	r3, #0
 8008446:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	01db      	lsls	r3, r3, #7
 8008452:	4413      	add	r3, r2
 8008454:	3384      	adds	r3, #132	; 0x84
 8008456:	461a      	mov	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008466:	2304      	movs	r3, #4
 8008468:	61fb      	str	r3, [r7, #28]
 800846a:	e01b      	b.n	80084a4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d102      	bne.n	800847a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008474:	2303      	movs	r3, #3
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	e014      	b.n	80084a4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	2b04      	cmp	r3, #4
 8008480:	d00b      	beq.n	800849a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008486:	2b02      	cmp	r3, #2
 8008488:	d007      	beq.n	800849a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800848e:	2b03      	cmp	r3, #3
 8008490:	d003      	beq.n	800849a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008496:	2b07      	cmp	r3, #7
 8008498:	d102      	bne.n	80084a0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800849a:	2302      	movs	r3, #2
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	e001      	b.n	80084a4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80084a0:	2301      	movs	r3, #1
 80084a2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	01db      	lsls	r3, r3, #7
 80084ae:	4413      	add	r3, r2
 80084b0:	3384      	adds	r3, #132	; 0x84
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	6812      	ldr	r2, [r2, #0]
 80084b8:	4611      	mov	r1, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	01d2      	lsls	r2, r2, #7
 80084be:	440a      	add	r2, r1
 80084c0:	3284      	adds	r2, #132	; 0x84
 80084c2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80084c6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	69fa      	ldr	r2, [r7, #28]
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
 80084d2:	041a      	lsls	r2, r3, #16
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	6859      	ldr	r1, [r3, #4]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	1acb      	subs	r3, r1, r3
 80084de:	69f9      	ldr	r1, [r7, #28]
 80084e0:	fb01 f303 	mul.w	r3, r1, r3
 80084e4:	3303      	adds	r3, #3
 80084e6:	68f9      	ldr	r1, [r7, #12]
 80084e8:	6809      	ldr	r1, [r1, #0]
 80084ea:	4608      	mov	r0, r1
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	01c9      	lsls	r1, r1, #7
 80084f0:	4401      	add	r1, r0
 80084f2:	3184      	adds	r1, #132	; 0x84
 80084f4:	4313      	orrs	r3, r2
 80084f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	01db      	lsls	r3, r3, #7
 8008502:	4413      	add	r3, r2
 8008504:	3384      	adds	r3, #132	; 0x84
 8008506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	6812      	ldr	r2, [r2, #0]
 800850c:	4611      	mov	r1, r2
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	01d2      	lsls	r2, r2, #7
 8008512:	440a      	add	r2, r1
 8008514:	3284      	adds	r2, #132	; 0x84
 8008516:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800851a:	f023 0307 	bic.w	r3, r3, #7
 800851e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	01db      	lsls	r3, r3, #7
 800852a:	4413      	add	r3, r2
 800852c:	3384      	adds	r3, #132	; 0x84
 800852e:	461a      	mov	r2, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	01db      	lsls	r3, r3, #7
 8008540:	4413      	add	r3, r2
 8008542:	3384      	adds	r3, #132	; 0x84
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	6812      	ldr	r2, [r2, #0]
 800854a:	4611      	mov	r1, r2
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	01d2      	lsls	r2, r2, #7
 8008550:	440a      	add	r2, r1
 8008552:	3284      	adds	r2, #132	; 0x84
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	6013      	str	r3, [r2, #0]
}
 800855a:	bf00      	nop
 800855c:	3724      	adds	r7, #36	; 0x24
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
	...

08008568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e25b      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	d075      	beq.n	8008672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008586:	4ba3      	ldr	r3, [pc, #652]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f003 030c 	and.w	r3, r3, #12
 800858e:	2b04      	cmp	r3, #4
 8008590:	d00c      	beq.n	80085ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008592:	4ba0      	ldr	r3, [pc, #640]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800859a:	2b08      	cmp	r3, #8
 800859c:	d112      	bne.n	80085c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800859e:	4b9d      	ldr	r3, [pc, #628]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085aa:	d10b      	bne.n	80085c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085ac:	4b99      	ldr	r3, [pc, #612]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d05b      	beq.n	8008670 <HAL_RCC_OscConfig+0x108>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d157      	bne.n	8008670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e236      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085cc:	d106      	bne.n	80085dc <HAL_RCC_OscConfig+0x74>
 80085ce:	4b91      	ldr	r3, [pc, #580]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a90      	ldr	r2, [pc, #576]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	e01d      	b.n	8008618 <HAL_RCC_OscConfig+0xb0>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085e4:	d10c      	bne.n	8008600 <HAL_RCC_OscConfig+0x98>
 80085e6:	4b8b      	ldr	r3, [pc, #556]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a8a      	ldr	r2, [pc, #552]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	4b88      	ldr	r3, [pc, #544]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a87      	ldr	r2, [pc, #540]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80085f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	e00b      	b.n	8008618 <HAL_RCC_OscConfig+0xb0>
 8008600:	4b84      	ldr	r3, [pc, #528]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a83      	ldr	r2, [pc, #524]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	4b81      	ldr	r3, [pc, #516]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a80      	ldr	r2, [pc, #512]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d013      	beq.n	8008648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008620:	f7fb fce4 	bl	8003fec <HAL_GetTick>
 8008624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008626:	e008      	b.n	800863a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008628:	f7fb fce0 	bl	8003fec <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b64      	cmp	r3, #100	; 0x64
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e1fb      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800863a:	4b76      	ldr	r3, [pc, #472]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f0      	beq.n	8008628 <HAL_RCC_OscConfig+0xc0>
 8008646:	e014      	b.n	8008672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008648:	f7fb fcd0 	bl	8003fec <HAL_GetTick>
 800864c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800864e:	e008      	b.n	8008662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008650:	f7fb fccc 	bl	8003fec <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b64      	cmp	r3, #100	; 0x64
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e1e7      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008662:	4b6c      	ldr	r3, [pc, #432]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1f0      	bne.n	8008650 <HAL_RCC_OscConfig+0xe8>
 800866e:	e000      	b.n	8008672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d063      	beq.n	8008746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800867e:	4b65      	ldr	r3, [pc, #404]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f003 030c 	and.w	r3, r3, #12
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00b      	beq.n	80086a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800868a:	4b62      	ldr	r3, [pc, #392]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008692:	2b08      	cmp	r3, #8
 8008694:	d11c      	bne.n	80086d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008696:	4b5f      	ldr	r3, [pc, #380]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d116      	bne.n	80086d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086a2:	4b5c      	ldr	r3, [pc, #368]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d005      	beq.n	80086ba <HAL_RCC_OscConfig+0x152>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d001      	beq.n	80086ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e1bb      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086ba:	4b56      	ldr	r3, [pc, #344]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	4952      	ldr	r1, [pc, #328]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ce:	e03a      	b.n	8008746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d020      	beq.n	800871a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086d8:	4b4f      	ldr	r3, [pc, #316]	; (8008818 <HAL_RCC_OscConfig+0x2b0>)
 80086da:	2201      	movs	r2, #1
 80086dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086de:	f7fb fc85 	bl	8003fec <HAL_GetTick>
 80086e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086e4:	e008      	b.n	80086f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086e6:	f7fb fc81 	bl	8003fec <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d901      	bls.n	80086f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e19c      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086f8:	4b46      	ldr	r3, [pc, #280]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0f0      	beq.n	80086e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008704:	4b43      	ldr	r3, [pc, #268]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	4940      	ldr	r1, [pc, #256]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 8008714:	4313      	orrs	r3, r2
 8008716:	600b      	str	r3, [r1, #0]
 8008718:	e015      	b.n	8008746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800871a:	4b3f      	ldr	r3, [pc, #252]	; (8008818 <HAL_RCC_OscConfig+0x2b0>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008720:	f7fb fc64 	bl	8003fec <HAL_GetTick>
 8008724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008726:	e008      	b.n	800873a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008728:	f7fb fc60 	bl	8003fec <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d901      	bls.n	800873a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e17b      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800873a:	4b36      	ldr	r3, [pc, #216]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1f0      	bne.n	8008728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0308 	and.w	r3, r3, #8
 800874e:	2b00      	cmp	r3, #0
 8008750:	d030      	beq.n	80087b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d016      	beq.n	8008788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800875a:	4b30      	ldr	r3, [pc, #192]	; (800881c <HAL_RCC_OscConfig+0x2b4>)
 800875c:	2201      	movs	r2, #1
 800875e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008760:	f7fb fc44 	bl	8003fec <HAL_GetTick>
 8008764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008768:	f7fb fc40 	bl	8003fec <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e15b      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800877a:	4b26      	ldr	r3, [pc, #152]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 800877c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0f0      	beq.n	8008768 <HAL_RCC_OscConfig+0x200>
 8008786:	e015      	b.n	80087b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008788:	4b24      	ldr	r3, [pc, #144]	; (800881c <HAL_RCC_OscConfig+0x2b4>)
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800878e:	f7fb fc2d 	bl	8003fec <HAL_GetTick>
 8008792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008796:	f7fb fc29 	bl	8003fec <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e144      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087a8:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f0      	bne.n	8008796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 80a0 	beq.w	8008902 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087c6:	4b13      	ldr	r3, [pc, #76]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10f      	bne.n	80087f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087d2:	2300      	movs	r3, #0
 80087d4:	60bb      	str	r3, [r7, #8]
 80087d6:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	4a0e      	ldr	r2, [pc, #56]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087e0:	6413      	str	r3, [r2, #64]	; 0x40
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <HAL_RCC_OscConfig+0x2ac>)
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ea:	60bb      	str	r3, [r7, #8]
 80087ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087ee:	2301      	movs	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <HAL_RCC_OscConfig+0x2b8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d121      	bne.n	8008842 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <HAL_RCC_OscConfig+0x2b8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a07      	ldr	r2, [pc, #28]	; (8008820 <HAL_RCC_OscConfig+0x2b8>)
 8008804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800880a:	f7fb fbef 	bl	8003fec <HAL_GetTick>
 800880e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008810:	e011      	b.n	8008836 <HAL_RCC_OscConfig+0x2ce>
 8008812:	bf00      	nop
 8008814:	40023800 	.word	0x40023800
 8008818:	42470000 	.word	0x42470000
 800881c:	42470e80 	.word	0x42470e80
 8008820:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008824:	f7fb fbe2 	bl	8003fec <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e0fd      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008836:	4b81      	ldr	r3, [pc, #516]	; (8008a3c <HAL_RCC_OscConfig+0x4d4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f0      	beq.n	8008824 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d106      	bne.n	8008858 <HAL_RCC_OscConfig+0x2f0>
 800884a:	4b7d      	ldr	r3, [pc, #500]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 800884c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884e:	4a7c      	ldr	r2, [pc, #496]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 8008850:	f043 0301 	orr.w	r3, r3, #1
 8008854:	6713      	str	r3, [r2, #112]	; 0x70
 8008856:	e01c      	b.n	8008892 <HAL_RCC_OscConfig+0x32a>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b05      	cmp	r3, #5
 800885e:	d10c      	bne.n	800887a <HAL_RCC_OscConfig+0x312>
 8008860:	4b77      	ldr	r3, [pc, #476]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 8008862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008864:	4a76      	ldr	r2, [pc, #472]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 8008866:	f043 0304 	orr.w	r3, r3, #4
 800886a:	6713      	str	r3, [r2, #112]	; 0x70
 800886c:	4b74      	ldr	r3, [pc, #464]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 800886e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008870:	4a73      	ldr	r2, [pc, #460]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 8008872:	f043 0301 	orr.w	r3, r3, #1
 8008876:	6713      	str	r3, [r2, #112]	; 0x70
 8008878:	e00b      	b.n	8008892 <HAL_RCC_OscConfig+0x32a>
 800887a:	4b71      	ldr	r3, [pc, #452]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 800887c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887e:	4a70      	ldr	r2, [pc, #448]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	6713      	str	r3, [r2, #112]	; 0x70
 8008886:	4b6e      	ldr	r3, [pc, #440]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 8008888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888a:	4a6d      	ldr	r2, [pc, #436]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 800888c:	f023 0304 	bic.w	r3, r3, #4
 8008890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d015      	beq.n	80088c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800889a:	f7fb fba7 	bl	8003fec <HAL_GetTick>
 800889e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088a0:	e00a      	b.n	80088b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088a2:	f7fb fba3 	bl	8003fec <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d901      	bls.n	80088b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e0bc      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088b8:	4b61      	ldr	r3, [pc, #388]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 80088ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0ee      	beq.n	80088a2 <HAL_RCC_OscConfig+0x33a>
 80088c4:	e014      	b.n	80088f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088c6:	f7fb fb91 	bl	8003fec <HAL_GetTick>
 80088ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088cc:	e00a      	b.n	80088e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088ce:	f7fb fb8d 	bl	8003fec <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088dc:	4293      	cmp	r3, r2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e0a6      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088e4:	4b56      	ldr	r3, [pc, #344]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 80088e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1ee      	bne.n	80088ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d105      	bne.n	8008902 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088f6:	4b52      	ldr	r3, [pc, #328]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	4a51      	ldr	r2, [pc, #324]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 80088fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 8092 	beq.w	8008a30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800890c:	4b4c      	ldr	r3, [pc, #304]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	f003 030c 	and.w	r3, r3, #12
 8008914:	2b08      	cmp	r3, #8
 8008916:	d05c      	beq.n	80089d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d141      	bne.n	80089a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008920:	4b48      	ldr	r3, [pc, #288]	; (8008a44 <HAL_RCC_OscConfig+0x4dc>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008926:	f7fb fb61 	bl	8003fec <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800892c:	e008      	b.n	8008940 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800892e:	f7fb fb5d 	bl	8003fec <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e078      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008940:	4b3f      	ldr	r3, [pc, #252]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f0      	bne.n	800892e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	431a      	orrs	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	019b      	lsls	r3, r3, #6
 800895c:	431a      	orrs	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	3b01      	subs	r3, #1
 8008966:	041b      	lsls	r3, r3, #16
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	061b      	lsls	r3, r3, #24
 8008970:	4933      	ldr	r1, [pc, #204]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 8008972:	4313      	orrs	r3, r2
 8008974:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008976:	4b33      	ldr	r3, [pc, #204]	; (8008a44 <HAL_RCC_OscConfig+0x4dc>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800897c:	f7fb fb36 	bl	8003fec <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008982:	e008      	b.n	8008996 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008984:	f7fb fb32 	bl	8003fec <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e04d      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008996:	4b2a      	ldr	r3, [pc, #168]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0f0      	beq.n	8008984 <HAL_RCC_OscConfig+0x41c>
 80089a2:	e045      	b.n	8008a30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089a4:	4b27      	ldr	r3, [pc, #156]	; (8008a44 <HAL_RCC_OscConfig+0x4dc>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089aa:	f7fb fb1f 	bl	8003fec <HAL_GetTick>
 80089ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b0:	e008      	b.n	80089c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089b2:	f7fb fb1b 	bl	8003fec <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d901      	bls.n	80089c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e036      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089c4:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1f0      	bne.n	80089b2 <HAL_RCC_OscConfig+0x44a>
 80089d0:	e02e      	b.n	8008a30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e029      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089de:	4b18      	ldr	r3, [pc, #96]	; (8008a40 <HAL_RCC_OscConfig+0x4d8>)
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d11c      	bne.n	8008a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d115      	bne.n	8008a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a06:	4013      	ands	r3, r2
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d10d      	bne.n	8008a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d106      	bne.n	8008a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d001      	beq.n	8008a30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e000      	b.n	8008a32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40007000 	.word	0x40007000
 8008a40:	40023800 	.word	0x40023800
 8008a44:	42470060 	.word	0x42470060

08008a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e0cc      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a5c:	4b68      	ldr	r3, [pc, #416]	; (8008c00 <HAL_RCC_ClockConfig+0x1b8>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 030f 	and.w	r3, r3, #15
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d90c      	bls.n	8008a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a6a:	4b65      	ldr	r3, [pc, #404]	; (8008c00 <HAL_RCC_ClockConfig+0x1b8>)
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	b2d2      	uxtb	r2, r2
 8008a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a72:	4b63      	ldr	r3, [pc, #396]	; (8008c00 <HAL_RCC_ClockConfig+0x1b8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d001      	beq.n	8008a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e0b8      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d020      	beq.n	8008ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a9c:	4b59      	ldr	r3, [pc, #356]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	4a58      	ldr	r2, [pc, #352]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0308 	and.w	r3, r3, #8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ab4:	4b53      	ldr	r3, [pc, #332]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	4a52      	ldr	r2, [pc, #328]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ac0:	4b50      	ldr	r3, [pc, #320]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	494d      	ldr	r1, [pc, #308]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d044      	beq.n	8008b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d107      	bne.n	8008af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ae6:	4b47      	ldr	r3, [pc, #284]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d119      	bne.n	8008b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e07f      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d003      	beq.n	8008b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d107      	bne.n	8008b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b06:	4b3f      	ldr	r3, [pc, #252]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d109      	bne.n	8008b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e06f      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b16:	4b3b      	ldr	r3, [pc, #236]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e067      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b26:	4b37      	ldr	r3, [pc, #220]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f023 0203 	bic.w	r2, r3, #3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	4934      	ldr	r1, [pc, #208]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b38:	f7fb fa58 	bl	8003fec <HAL_GetTick>
 8008b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b3e:	e00a      	b.n	8008b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b40:	f7fb fa54 	bl	8003fec <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e04f      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b56:	4b2b      	ldr	r3, [pc, #172]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 020c 	and.w	r2, r3, #12
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d1eb      	bne.n	8008b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b68:	4b25      	ldr	r3, [pc, #148]	; (8008c00 <HAL_RCC_ClockConfig+0x1b8>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d20c      	bcs.n	8008b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b76:	4b22      	ldr	r3, [pc, #136]	; (8008c00 <HAL_RCC_ClockConfig+0x1b8>)
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b7e:	4b20      	ldr	r3, [pc, #128]	; (8008c00 <HAL_RCC_ClockConfig+0x1b8>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 030f 	and.w	r3, r3, #15
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d001      	beq.n	8008b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e032      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d008      	beq.n	8008bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b9c:	4b19      	ldr	r3, [pc, #100]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	4916      	ldr	r1, [pc, #88]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008baa:	4313      	orrs	r3, r2
 8008bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0308 	and.w	r3, r3, #8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d009      	beq.n	8008bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bba:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	490e      	ldr	r1, [pc, #56]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008bce:	f000 f821 	bl	8008c14 <HAL_RCC_GetSysClockFreq>
 8008bd2:	4601      	mov	r1, r0
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	; (8008c04 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	091b      	lsrs	r3, r3, #4
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	4a0a      	ldr	r2, [pc, #40]	; (8008c08 <HAL_RCC_ClockConfig+0x1c0>)
 8008be0:	5cd3      	ldrb	r3, [r2, r3]
 8008be2:	fa21 f303 	lsr.w	r3, r1, r3
 8008be6:	4a09      	ldr	r2, [pc, #36]	; (8008c0c <HAL_RCC_ClockConfig+0x1c4>)
 8008be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <HAL_RCC_ClockConfig+0x1c8>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f8 fcaa 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	40023c00 	.word	0x40023c00
 8008c04:	40023800 	.word	0x40023800
 8008c08:	08011024 	.word	0x08011024
 8008c0c:	20000000 	.word	0x20000000
 8008c10:	20000080 	.word	0x20000080

08008c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	607b      	str	r3, [r7, #4]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	2300      	movs	r3, #0
 8008c24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c2a:	4b63      	ldr	r3, [pc, #396]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 030c 	and.w	r3, r3, #12
 8008c32:	2b04      	cmp	r3, #4
 8008c34:	d007      	beq.n	8008c46 <HAL_RCC_GetSysClockFreq+0x32>
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d008      	beq.n	8008c4c <HAL_RCC_GetSysClockFreq+0x38>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 80b4 	bne.w	8008da8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c40:	4b5e      	ldr	r3, [pc, #376]	; (8008dbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008c42:	60bb      	str	r3, [r7, #8]
       break;
 8008c44:	e0b3      	b.n	8008dae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c46:	4b5e      	ldr	r3, [pc, #376]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008c48:	60bb      	str	r3, [r7, #8]
      break;
 8008c4a:	e0b0      	b.n	8008dae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c4c:	4b5a      	ldr	r3, [pc, #360]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c56:	4b58      	ldr	r3, [pc, #352]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d04a      	beq.n	8008cf8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c62:	4b55      	ldr	r3, [pc, #340]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	099b      	lsrs	r3, r3, #6
 8008c68:	f04f 0400 	mov.w	r4, #0
 8008c6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	ea03 0501 	and.w	r5, r3, r1
 8008c78:	ea04 0602 	and.w	r6, r4, r2
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	4632      	mov	r2, r6
 8008c80:	f04f 0300 	mov.w	r3, #0
 8008c84:	f04f 0400 	mov.w	r4, #0
 8008c88:	0154      	lsls	r4, r2, #5
 8008c8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c8e:	014b      	lsls	r3, r1, #5
 8008c90:	4619      	mov	r1, r3
 8008c92:	4622      	mov	r2, r4
 8008c94:	1b49      	subs	r1, r1, r5
 8008c96:	eb62 0206 	sbc.w	r2, r2, r6
 8008c9a:	f04f 0300 	mov.w	r3, #0
 8008c9e:	f04f 0400 	mov.w	r4, #0
 8008ca2:	0194      	lsls	r4, r2, #6
 8008ca4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008ca8:	018b      	lsls	r3, r1, #6
 8008caa:	1a5b      	subs	r3, r3, r1
 8008cac:	eb64 0402 	sbc.w	r4, r4, r2
 8008cb0:	f04f 0100 	mov.w	r1, #0
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	00e2      	lsls	r2, r4, #3
 8008cba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008cbe:	00d9      	lsls	r1, r3, #3
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	195b      	adds	r3, r3, r5
 8008cc6:	eb44 0406 	adc.w	r4, r4, r6
 8008cca:	f04f 0100 	mov.w	r1, #0
 8008cce:	f04f 0200 	mov.w	r2, #0
 8008cd2:	0262      	lsls	r2, r4, #9
 8008cd4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008cd8:	0259      	lsls	r1, r3, #9
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4614      	mov	r4, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f04f 0400 	mov.w	r4, #0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4623      	mov	r3, r4
 8008cec:	f7f7 fa80 	bl	80001f0 <__aeabi_uldivmod>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	e049      	b.n	8008d8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cf8:	4b2f      	ldr	r3, [pc, #188]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	099b      	lsrs	r3, r3, #6
 8008cfe:	f04f 0400 	mov.w	r4, #0
 8008d02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d06:	f04f 0200 	mov.w	r2, #0
 8008d0a:	ea03 0501 	and.w	r5, r3, r1
 8008d0e:	ea04 0602 	and.w	r6, r4, r2
 8008d12:	4629      	mov	r1, r5
 8008d14:	4632      	mov	r2, r6
 8008d16:	f04f 0300 	mov.w	r3, #0
 8008d1a:	f04f 0400 	mov.w	r4, #0
 8008d1e:	0154      	lsls	r4, r2, #5
 8008d20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d24:	014b      	lsls	r3, r1, #5
 8008d26:	4619      	mov	r1, r3
 8008d28:	4622      	mov	r2, r4
 8008d2a:	1b49      	subs	r1, r1, r5
 8008d2c:	eb62 0206 	sbc.w	r2, r2, r6
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	f04f 0400 	mov.w	r4, #0
 8008d38:	0194      	lsls	r4, r2, #6
 8008d3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d3e:	018b      	lsls	r3, r1, #6
 8008d40:	1a5b      	subs	r3, r3, r1
 8008d42:	eb64 0402 	sbc.w	r4, r4, r2
 8008d46:	f04f 0100 	mov.w	r1, #0
 8008d4a:	f04f 0200 	mov.w	r2, #0
 8008d4e:	00e2      	lsls	r2, r4, #3
 8008d50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008d54:	00d9      	lsls	r1, r3, #3
 8008d56:	460b      	mov	r3, r1
 8008d58:	4614      	mov	r4, r2
 8008d5a:	195b      	adds	r3, r3, r5
 8008d5c:	eb44 0406 	adc.w	r4, r4, r6
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	02a2      	lsls	r2, r4, #10
 8008d6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008d6e:	0299      	lsls	r1, r3, #10
 8008d70:	460b      	mov	r3, r1
 8008d72:	4614      	mov	r4, r2
 8008d74:	4618      	mov	r0, r3
 8008d76:	4621      	mov	r1, r4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f04f 0400 	mov.w	r4, #0
 8008d7e:	461a      	mov	r2, r3
 8008d80:	4623      	mov	r3, r4
 8008d82:	f7f7 fa35 	bl	80001f0 <__aeabi_uldivmod>
 8008d86:	4603      	mov	r3, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	0c1b      	lsrs	r3, r3, #16
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	3301      	adds	r3, #1
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da4:	60bb      	str	r3, [r7, #8]
      break;
 8008da6:	e002      	b.n	8008dae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008da8:	4b04      	ldr	r3, [pc, #16]	; (8008dbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008daa:	60bb      	str	r3, [r7, #8]
      break;
 8008dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dae:	68bb      	ldr	r3, [r7, #8]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db8:	40023800 	.word	0x40023800
 8008dbc:	00f42400 	.word	0x00f42400
 8008dc0:	007a1200 	.word	0x007a1200

08008dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dc8:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dca:	681b      	ldr	r3, [r3, #0]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000000 	.word	0x20000000

08008ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008de0:	f7ff fff0 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 8008de4:	4601      	mov	r1, r0
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	0a9b      	lsrs	r3, r3, #10
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	4a03      	ldr	r2, [pc, #12]	; (8008e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008df2:	5cd3      	ldrb	r3, [r2, r3]
 8008df4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	08011034 	.word	0x08011034

08008e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e08:	f7ff ffdc 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 8008e0c:	4601      	mov	r1, r0
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	0b5b      	lsrs	r3, r3, #13
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	4a03      	ldr	r2, [pc, #12]	; (8008e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e1a:	5cd3      	ldrb	r3, [r2, r3]
 8008e1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	40023800 	.word	0x40023800
 8008e28:	08011034 	.word	0x08011034

08008e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	220f      	movs	r2, #15
 8008e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e3c:	4b12      	ldr	r3, [pc, #72]	; (8008e88 <HAL_RCC_GetClockConfig+0x5c>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f003 0203 	and.w	r2, r3, #3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <HAL_RCC_GetClockConfig+0x5c>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e54:	4b0c      	ldr	r3, [pc, #48]	; (8008e88 <HAL_RCC_GetClockConfig+0x5c>)
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008e60:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <HAL_RCC_GetClockConfig+0x5c>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	08db      	lsrs	r3, r3, #3
 8008e66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e6e:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <HAL_RCC_GetClockConfig+0x60>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 020f 	and.w	r2, r3, #15
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	601a      	str	r2, [r3, #0]
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40023800 	.word	0x40023800
 8008e8c:	40023c00 	.word	0x40023c00

08008e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10b      	bne.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d105      	bne.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d075      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ec4:	4bad      	ldr	r3, [pc, #692]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008eca:	f7fb f88f 	bl	8003fec <HAL_GetTick>
 8008ece:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ed0:	e008      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008ed2:	f7fb f88b 	bl	8003fec <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d901      	bls.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e18b      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ee4:	4ba6      	ldr	r3, [pc, #664]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1f0      	bne.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d009      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	019a      	lsls	r2, r3, #6
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	071b      	lsls	r3, r3, #28
 8008f08:	499d      	ldr	r1, [pc, #628]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0302 	and.w	r3, r3, #2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d01f      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f1c:	4b98      	ldr	r3, [pc, #608]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f22:	0f1b      	lsrs	r3, r3, #28
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	019a      	lsls	r2, r3, #6
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	061b      	lsls	r3, r3, #24
 8008f36:	431a      	orrs	r2, r3
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	071b      	lsls	r3, r3, #28
 8008f3c:	4990      	ldr	r1, [pc, #576]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008f44:	4b8e      	ldr	r3, [pc, #568]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f4a:	f023 021f 	bic.w	r2, r3, #31
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	498a      	ldr	r1, [pc, #552]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00d      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	019a      	lsls	r2, r3, #6
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	061b      	lsls	r3, r3, #24
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	071b      	lsls	r3, r3, #28
 8008f7c:	4980      	ldr	r1, [pc, #512]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008f84:	4b7d      	ldr	r3, [pc, #500]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008f86:	2201      	movs	r2, #1
 8008f88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f8a:	f7fb f82f 	bl	8003fec <HAL_GetTick>
 8008f8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f90:	e008      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f92:	f7fb f82b 	bl	8003fec <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d901      	bls.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e12b      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fa4:	4b76      	ldr	r3, [pc, #472]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0f0      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d105      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d079      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008fc8:	4b6e      	ldr	r3, [pc, #440]	; (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fce:	f7fb f80d 	bl	8003fec <HAL_GetTick>
 8008fd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008fd4:	e008      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008fd6:	f7fb f809 	bl	8003fec <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e109      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008fe8:	4b65      	ldr	r3, [pc, #404]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff4:	d0ef      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0304 	and.w	r3, r3, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d020      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009002:	4b5f      	ldr	r3, [pc, #380]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009008:	0f1b      	lsrs	r3, r3, #28
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	019a      	lsls	r2, r3, #6
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	061b      	lsls	r3, r3, #24
 800901c:	431a      	orrs	r2, r3
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	071b      	lsls	r3, r3, #28
 8009022:	4957      	ldr	r1, [pc, #348]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800902a:	4b55      	ldr	r3, [pc, #340]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800902c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009030:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	3b01      	subs	r3, #1
 800903a:	021b      	lsls	r3, r3, #8
 800903c:	4950      	ldr	r1, [pc, #320]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800903e:	4313      	orrs	r3, r2
 8009040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0308 	and.w	r3, r3, #8
 800904c:	2b00      	cmp	r3, #0
 800904e:	d01e      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009050:	4b4b      	ldr	r3, [pc, #300]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009056:	0e1b      	lsrs	r3, r3, #24
 8009058:	f003 030f 	and.w	r3, r3, #15
 800905c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	019a      	lsls	r2, r3, #6
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	061b      	lsls	r3, r3, #24
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	071b      	lsls	r3, r3, #28
 8009070:	4943      	ldr	r1, [pc, #268]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009072:	4313      	orrs	r3, r2
 8009074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009078:	4b41      	ldr	r3, [pc, #260]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800907a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800907e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	493e      	ldr	r1, [pc, #248]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009088:	4313      	orrs	r3, r2
 800908a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800908e:	4b3d      	ldr	r3, [pc, #244]	; (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009090:	2201      	movs	r2, #1
 8009092:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009094:	f7fa ffaa 	bl	8003fec <HAL_GetTick>
 8009098:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800909a:	e008      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800909c:	f7fa ffa6 	bl	8003fec <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d901      	bls.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e0a6      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80090ae:	4b34      	ldr	r3, [pc, #208]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ba:	d1ef      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 808d 	beq.w	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	4b2c      	ldr	r3, [pc, #176]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d2:	4a2b      	ldr	r2, [pc, #172]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090d8:	6413      	str	r3, [r2, #64]	; 0x40
 80090da:	4b29      	ldr	r3, [pc, #164]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80090e6:	4b28      	ldr	r3, [pc, #160]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a27      	ldr	r2, [pc, #156]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80090ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090f2:	f7fa ff7b 	bl	8003fec <HAL_GetTick>
 80090f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80090f8:	e008      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80090fa:	f7fa ff77 	bl	8003fec <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d901      	bls.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e077      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800910c:	4b1e      	ldr	r3, [pc, #120]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0f0      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009118:	4b19      	ldr	r3, [pc, #100]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800911a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009120:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d039      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	429a      	cmp	r2, r3
 8009134:	d032      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009136:	4b12      	ldr	r3, [pc, #72]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800913e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009140:	4b12      	ldr	r3, [pc, #72]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009142:	2201      	movs	r2, #1
 8009144:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009146:	4b11      	ldr	r3, [pc, #68]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800914c:	4a0c      	ldr	r2, [pc, #48]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009152:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b01      	cmp	r3, #1
 800915c:	d11e      	bne.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800915e:	f7fa ff45 	bl	8003fec <HAL_GetTick>
 8009162:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009164:	e014      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009166:	f7fa ff41 	bl	8003fec <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	f241 3288 	movw	r2, #5000	; 0x1388
 8009174:	4293      	cmp	r3, r2
 8009176:	d90b      	bls.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e03f      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800917c:	42470068 	.word	0x42470068
 8009180:	40023800 	.word	0x40023800
 8009184:	42470070 	.word	0x42470070
 8009188:	40007000 	.word	0x40007000
 800918c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009190:	4b1c      	ldr	r3, [pc, #112]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0e4      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091a8:	d10d      	bne.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80091aa:	4b16      	ldr	r3, [pc, #88]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091be:	4911      	ldr	r1, [pc, #68]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	608b      	str	r3, [r1, #8]
 80091c4:	e005      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80091c6:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	4a0e      	ldr	r2, [pc, #56]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80091d0:	6093      	str	r3, [r2, #8]
 80091d2:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091de:	4909      	ldr	r1, [pc, #36]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d004      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80091f6:	4b04      	ldr	r3, [pc, #16]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80091f8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	40023800 	.word	0x40023800
 8009208:	424711e0 	.word	0x424711e0

0800920c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e025      	b.n	800926c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d106      	bne.n	800923a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f7f7 facd 	bl	80007d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2202      	movs	r2, #2
 800923e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3304      	adds	r3, #4
 800924a:	4619      	mov	r1, r3
 800924c:	4610      	mov	r0, r2
 800924e:	f001 fdb1 	bl	800adb4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	461a      	mov	r2, r3
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	f001 fe1c 	bl	800ae9a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d101      	bne.n	8009290 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800928c:	2302      	movs	r3, #2
 800928e:	e018      	b.n	80092c2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 fe79 	bl	800af98 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d104      	bne.n	80092b8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2205      	movs	r2, #5
 80092b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80092b6:	e003      	b.n	80092c0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d101      	bne.n	80092e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80092e0:	2302      	movs	r3, #2
 80092e2:	e00e      	b.n	8009302 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 fe8c 	bl	800b010 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d101      	bne.n	800931c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e056      	b.n	80093ca <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7f8 f874 	bl	8001424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009352:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	431a      	orrs	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009378:	431a      	orrs	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	ea42 0103 	orr.w	r1, r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	0c1b      	lsrs	r3, r3, #16
 800939a:	f003 0104 	and.w	r1, r3, #4
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69da      	ldr	r2, [r3, #28]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b082      	sub	sp, #8
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e01a      	b.n	800941a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7f8 f859 	bl	80014b4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b088      	sub	sp, #32
 8009426:	af00      	add	r7, sp, #0
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	603b      	str	r3, [r7, #0]
 800942e:	4613      	mov	r3, r2
 8009430:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800943c:	2b01      	cmp	r3, #1
 800943e:	d101      	bne.n	8009444 <HAL_SPI_Transmit+0x22>
 8009440:	2302      	movs	r3, #2
 8009442:	e11e      	b.n	8009682 <HAL_SPI_Transmit+0x260>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800944c:	f7fa fdce 	bl	8003fec <HAL_GetTick>
 8009450:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009452:	88fb      	ldrh	r3, [r7, #6]
 8009454:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b01      	cmp	r3, #1
 8009460:	d002      	beq.n	8009468 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009462:	2302      	movs	r3, #2
 8009464:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009466:	e103      	b.n	8009670 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <HAL_SPI_Transmit+0x52>
 800946e:	88fb      	ldrh	r3, [r7, #6]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009478:	e0fa      	b.n	8009670 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2203      	movs	r2, #3
 800947e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	88fa      	ldrh	r2, [r7, #6]
 8009492:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	88fa      	ldrh	r2, [r7, #6]
 8009498:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c0:	d107      	bne.n	80094d2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094dc:	2b40      	cmp	r3, #64	; 0x40
 80094de:	d007      	beq.n	80094f0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094f8:	d14b      	bne.n	8009592 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <HAL_SPI_Transmit+0xe6>
 8009502:	8afb      	ldrh	r3, [r7, #22]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d13e      	bne.n	8009586 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950c:	881a      	ldrh	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009518:	1c9a      	adds	r2, r3, #2
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009522:	b29b      	uxth	r3, r3
 8009524:	3b01      	subs	r3, #1
 8009526:	b29a      	uxth	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800952c:	e02b      	b.n	8009586 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b02      	cmp	r3, #2
 800953a:	d112      	bne.n	8009562 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009540:	881a      	ldrh	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954c:	1c9a      	adds	r2, r3, #2
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009556:	b29b      	uxth	r3, r3
 8009558:	3b01      	subs	r3, #1
 800955a:	b29a      	uxth	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009560:	e011      	b.n	8009586 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009562:	f7fa fd43 	bl	8003fec <HAL_GetTick>
 8009566:	4602      	mov	r2, r0
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	429a      	cmp	r2, r3
 8009570:	d803      	bhi.n	800957a <HAL_SPI_Transmit+0x158>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009578:	d102      	bne.n	8009580 <HAL_SPI_Transmit+0x15e>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d102      	bne.n	8009586 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009584:	e074      	b.n	8009670 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800958a:	b29b      	uxth	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1ce      	bne.n	800952e <HAL_SPI_Transmit+0x10c>
 8009590:	e04c      	b.n	800962c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <HAL_SPI_Transmit+0x17e>
 800959a:	8afb      	ldrh	r3, [r7, #22]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d140      	bne.n	8009622 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	7812      	ldrb	r2, [r2, #0]
 80095ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095bc:	b29b      	uxth	r3, r3
 80095be:	3b01      	subs	r3, #1
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80095c6:	e02c      	b.n	8009622 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d113      	bne.n	80095fe <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	330c      	adds	r3, #12
 80095e0:	7812      	ldrb	r2, [r2, #0]
 80095e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3b01      	subs	r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80095fc:	e011      	b.n	8009622 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095fe:	f7fa fcf5 	bl	8003fec <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d803      	bhi.n	8009616 <HAL_SPI_Transmit+0x1f4>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d102      	bne.n	800961c <HAL_SPI_Transmit+0x1fa>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009620:	e026      	b.n	8009670 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009626:	b29b      	uxth	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1cd      	bne.n	80095c8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f000 fbb3 	bl	8009d9c <SPI_EndRxTxTransaction>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2220      	movs	r2, #32
 8009640:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800964a:	2300      	movs	r3, #0
 800964c:	613b      	str	r3, [r7, #16]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	613b      	str	r3, [r7, #16]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	613b      	str	r3, [r7, #16]
 800965e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	77fb      	strb	r3, [r7, #31]
 800966c:	e000      	b.n	8009670 <HAL_SPI_Transmit+0x24e>
  }

error:
 800966e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009680:	7ffb      	ldrb	r3, [r7, #31]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b088      	sub	sp, #32
 800968e:	af02      	add	r7, sp, #8
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	603b      	str	r3, [r7, #0]
 8009696:	4613      	mov	r3, r2
 8009698:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096a6:	d112      	bne.n	80096ce <HAL_SPI_Receive+0x44>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10e      	bne.n	80096ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2204      	movs	r2, #4
 80096b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80096b8:	88fa      	ldrh	r2, [r7, #6]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	4613      	mov	r3, r2
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	68b9      	ldr	r1, [r7, #8]
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 f8e9 	bl	800989c <HAL_SPI_TransmitReceive>
 80096ca:	4603      	mov	r3, r0
 80096cc:	e0e2      	b.n	8009894 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d101      	bne.n	80096dc <HAL_SPI_Receive+0x52>
 80096d8:	2302      	movs	r3, #2
 80096da:	e0db      	b.n	8009894 <HAL_SPI_Receive+0x20a>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096e4:	f7fa fc82 	bl	8003fec <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d002      	beq.n	80096fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80096f6:	2302      	movs	r3, #2
 80096f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80096fa:	e0c2      	b.n	8009882 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <HAL_SPI_Receive+0x7e>
 8009702:	88fb      	ldrh	r3, [r7, #6]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d102      	bne.n	800970e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800970c:	e0b9      	b.n	8009882 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2204      	movs	r2, #4
 8009712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	88fa      	ldrh	r2, [r7, #6]
 8009726:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	88fa      	ldrh	r2, [r7, #6]
 800972c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009754:	d107      	bne.n	8009766 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009764:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009770:	2b40      	cmp	r3, #64	; 0x40
 8009772:	d007      	beq.n	8009784 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009782:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d162      	bne.n	8009852 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800978c:	e02e      	b.n	80097ec <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b01      	cmp	r3, #1
 800979a:	d115      	bne.n	80097c8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f103 020c 	add.w	r2, r3, #12
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	7812      	ldrb	r2, [r2, #0]
 80097aa:	b2d2      	uxtb	r2, r2
 80097ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097c6:	e011      	b.n	80097ec <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097c8:	f7fa fc10 	bl	8003fec <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d803      	bhi.n	80097e0 <HAL_SPI_Receive+0x156>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097de:	d102      	bne.n	80097e6 <HAL_SPI_Receive+0x15c>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d102      	bne.n	80097ec <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80097ea:	e04a      	b.n	8009882 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1cb      	bne.n	800978e <HAL_SPI_Receive+0x104>
 80097f6:	e031      	b.n	800985c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b01      	cmp	r3, #1
 8009804:	d113      	bne.n	800982e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68da      	ldr	r2, [r3, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009810:	b292      	uxth	r2, r2
 8009812:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	1c9a      	adds	r2, r3, #2
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009822:	b29b      	uxth	r3, r3
 8009824:	3b01      	subs	r3, #1
 8009826:	b29a      	uxth	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800982c:	e011      	b.n	8009852 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800982e:	f7fa fbdd 	bl	8003fec <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d803      	bhi.n	8009846 <HAL_SPI_Receive+0x1bc>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009844:	d102      	bne.n	800984c <HAL_SPI_Receive+0x1c2>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d102      	bne.n	8009852 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009850:	e017      	b.n	8009882 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009856:	b29b      	uxth	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1cd      	bne.n	80097f8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 fa35 	bl	8009cd0 <SPI_EndRxTransaction>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
 800987e:	e000      	b.n	8009882 <HAL_SPI_Receive+0x1f8>
  }

error :
 8009880:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08c      	sub	sp, #48	; 0x30
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098aa:	2301      	movs	r3, #1
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <HAL_SPI_TransmitReceive+0x26>
 80098be:	2302      	movs	r3, #2
 80098c0:	e18a      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x33c>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098ca:	f7fa fb8f 	bl	8003fec <HAL_GetTick>
 80098ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80098e0:	887b      	ldrh	r3, [r7, #2]
 80098e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d00f      	beq.n	800990c <HAL_SPI_TransmitReceive+0x70>
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098f2:	d107      	bne.n	8009904 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <HAL_SPI_TransmitReceive+0x68>
 80098fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009900:	2b04      	cmp	r3, #4
 8009902:	d003      	beq.n	800990c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009904:	2302      	movs	r3, #2
 8009906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800990a:	e15b      	b.n	8009bc4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <HAL_SPI_TransmitReceive+0x82>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <HAL_SPI_TransmitReceive+0x82>
 8009918:	887b      	ldrh	r3, [r7, #2]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d103      	bne.n	8009926 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009924:	e14e      	b.n	8009bc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b04      	cmp	r3, #4
 8009930:	d003      	beq.n	800993a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2205      	movs	r2, #5
 8009936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	887a      	ldrh	r2, [r7, #2]
 800994a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	887a      	ldrh	r2, [r7, #2]
 8009950:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	887a      	ldrh	r2, [r7, #2]
 800995c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	887a      	ldrh	r2, [r7, #2]
 8009962:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	d007      	beq.n	800998e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800998c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009996:	d178      	bne.n	8009a8a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <HAL_SPI_TransmitReceive+0x10a>
 80099a0:	8b7b      	ldrh	r3, [r7, #26]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d166      	bne.n	8009a74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099aa:	881a      	ldrh	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b6:	1c9a      	adds	r2, r3, #2
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	3b01      	subs	r3, #1
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099ca:	e053      	b.n	8009a74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f003 0302 	and.w	r3, r3, #2
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d11b      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x176>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099de:	b29b      	uxth	r3, r3
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d016      	beq.n	8009a12 <HAL_SPI_TransmitReceive+0x176>
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d113      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	881a      	ldrh	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fa:	1c9a      	adds	r2, r3, #2
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d119      	bne.n	8009a54 <HAL_SPI_TransmitReceive+0x1b8>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d014      	beq.n	8009a54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68da      	ldr	r2, [r3, #12]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a34:	b292      	uxth	r2, r2
 8009a36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3c:	1c9a      	adds	r2, r3, #2
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a50:	2301      	movs	r3, #1
 8009a52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a54:	f7fa faca 	bl	8003fec <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d807      	bhi.n	8009a74 <HAL_SPI_TransmitReceive+0x1d8>
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6a:	d003      	beq.n	8009a74 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009a72:	e0a7      	b.n	8009bc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1a6      	bne.n	80099cc <HAL_SPI_TransmitReceive+0x130>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1a1      	bne.n	80099cc <HAL_SPI_TransmitReceive+0x130>
 8009a88:	e07c      	b.n	8009b84 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <HAL_SPI_TransmitReceive+0x1fc>
 8009a92:	8b7b      	ldrh	r3, [r7, #26]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d16b      	bne.n	8009b70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	330c      	adds	r3, #12
 8009aa2:	7812      	ldrb	r2, [r2, #0]
 8009aa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009abe:	e057      	b.n	8009b70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d11c      	bne.n	8009b08 <HAL_SPI_TransmitReceive+0x26c>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d017      	beq.n	8009b08 <HAL_SPI_TransmitReceive+0x26c>
 8009ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d114      	bne.n	8009b08 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	330c      	adds	r3, #12
 8009ae8:	7812      	ldrb	r2, [r2, #0]
 8009aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d119      	bne.n	8009b4a <HAL_SPI_TransmitReceive+0x2ae>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d014      	beq.n	8009b4a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68da      	ldr	r2, [r3, #12]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2a:	b2d2      	uxtb	r2, r2
 8009b2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b46:	2301      	movs	r3, #1
 8009b48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b4a:	f7fa fa4f 	bl	8003fec <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d803      	bhi.n	8009b62 <HAL_SPI_TransmitReceive+0x2c6>
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b60:	d102      	bne.n	8009b68 <HAL_SPI_TransmitReceive+0x2cc>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d103      	bne.n	8009b70 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b6e:	e029      	b.n	8009bc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1a2      	bne.n	8009ac0 <HAL_SPI_TransmitReceive+0x224>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d19d      	bne.n	8009ac0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 f907 	bl	8009d9c <SPI_EndRxTxTransaction>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d006      	beq.n	8009ba2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009ba0:	e010      	b.n	8009bc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10b      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009baa:	2300      	movs	r3, #0
 8009bac:	617b      	str	r3, [r7, #20]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	617b      	str	r3, [r7, #20]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	617b      	str	r3, [r7, #20]
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	e000      	b.n	8009bc4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009bc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009bd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3730      	adds	r7, #48	; 0x30
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bee:	b2db      	uxtb	r3, r3
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c0c:	e04c      	b.n	8009ca8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c14:	d048      	beq.n	8009ca8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009c16:	f7fa f9e9 	bl	8003fec <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d902      	bls.n	8009c2c <SPI_WaitFlagStateUntilTimeout+0x30>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d13d      	bne.n	8009ca8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c44:	d111      	bne.n	8009c6a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c4e:	d004      	beq.n	8009c5a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c58:	d107      	bne.n	8009c6a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c72:	d10f      	bne.n	8009c94 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e00f      	b.n	8009cc8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	bf0c      	ite	eq
 8009cb8:	2301      	moveq	r3, #1
 8009cba:	2300      	movne	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d1a3      	bne.n	8009c0e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ce4:	d111      	bne.n	8009d0a <SPI_EndRxTransaction+0x3a>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cee:	d004      	beq.n	8009cfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cf8:	d107      	bne.n	8009d0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d12:	d12a      	bne.n	8009d6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d1c:	d012      	beq.n	8009d44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2200      	movs	r2, #0
 8009d26:	2180      	movs	r1, #128	; 0x80
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7ff ff67 	bl	8009bfc <SPI_WaitFlagStateUntilTimeout>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d02d      	beq.n	8009d90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d38:	f043 0220 	orr.w	r2, r3, #32
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e026      	b.n	8009d92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff ff54 	bl	8009bfc <SPI_WaitFlagStateUntilTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d01a      	beq.n	8009d90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5e:	f043 0220 	orr.w	r2, r3, #32
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e013      	b.n	8009d92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2200      	movs	r2, #0
 8009d72:	2101      	movs	r1, #1
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7ff ff41 	bl	8009bfc <SPI_WaitFlagStateUntilTimeout>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d84:	f043 0220 	orr.w	r2, r3, #32
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e000      	b.n	8009d92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
	...

08009d9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009da8:	4b1b      	ldr	r3, [pc, #108]	; (8009e18 <SPI_EndRxTxTransaction+0x7c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a1b      	ldr	r2, [pc, #108]	; (8009e1c <SPI_EndRxTxTransaction+0x80>)
 8009dae:	fba2 2303 	umull	r2, r3, r2, r3
 8009db2:	0d5b      	lsrs	r3, r3, #21
 8009db4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009db8:	fb02 f303 	mul.w	r3, r2, r3
 8009dbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dc6:	d112      	bne.n	8009dee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2180      	movs	r1, #128	; 0x80
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f7ff ff12 	bl	8009bfc <SPI_WaitFlagStateUntilTimeout>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d016      	beq.n	8009e0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de2:	f043 0220 	orr.w	r2, r3, #32
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e00f      	b.n	8009e0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00a      	beq.n	8009e0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e04:	2b80      	cmp	r3, #128	; 0x80
 8009e06:	d0f2      	beq.n	8009dee <SPI_EndRxTxTransaction+0x52>
 8009e08:	e000      	b.n	8009e0c <SPI_EndRxTxTransaction+0x70>
        break;
 8009e0a:	bf00      	nop
  }

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	20000000 	.word	0x20000000
 8009e1c:	165e9f81 	.word	0x165e9f81

08009e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e01d      	b.n	8009e6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7f7 fcb6 	bl	80017b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f000 fa14 	bl	800a28c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68da      	ldr	r2, [r3, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f042 0201 	orr.w	r2, r2, #1
 8009e8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f003 0307 	and.w	r3, r3, #7
 8009e98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2b06      	cmp	r3, #6
 8009e9e:	d007      	beq.n	8009eb0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f042 0201 	orr.w	r2, r2, #1
 8009eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d122      	bne.n	8009f1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d11b      	bne.n	8009f1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f06f 0202 	mvn.w	r2, #2
 8009eea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	f003 0303 	and.w	r3, r3, #3
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d003      	beq.n	8009f08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f9a5 	bl	800a250 <HAL_TIM_IC_CaptureCallback>
 8009f06:	e005      	b.n	8009f14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f997 	bl	800a23c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f9a8 	bl	800a264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d122      	bne.n	8009f6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f003 0304 	and.w	r3, r3, #4
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d11b      	bne.n	8009f6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f06f 0204 	mvn.w	r2, #4
 8009f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2202      	movs	r2, #2
 8009f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f97b 	bl	800a250 <HAL_TIM_IC_CaptureCallback>
 8009f5a:	e005      	b.n	8009f68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f96d 	bl	800a23c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f97e 	bl	800a264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	f003 0308 	and.w	r3, r3, #8
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d122      	bne.n	8009fc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f003 0308 	and.w	r3, r3, #8
 8009f86:	2b08      	cmp	r3, #8
 8009f88:	d11b      	bne.n	8009fc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f06f 0208 	mvn.w	r2, #8
 8009f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2204      	movs	r2, #4
 8009f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	69db      	ldr	r3, [r3, #28]
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f951 	bl	800a250 <HAL_TIM_IC_CaptureCallback>
 8009fae:	e005      	b.n	8009fbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f943 	bl	800a23c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f954 	bl	800a264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	f003 0310 	and.w	r3, r3, #16
 8009fcc:	2b10      	cmp	r3, #16
 8009fce:	d122      	bne.n	800a016 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f003 0310 	and.w	r3, r3, #16
 8009fda:	2b10      	cmp	r3, #16
 8009fdc:	d11b      	bne.n	800a016 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f06f 0210 	mvn.w	r2, #16
 8009fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2208      	movs	r2, #8
 8009fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f927 	bl	800a250 <HAL_TIM_IC_CaptureCallback>
 800a002:	e005      	b.n	800a010 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f919 	bl	800a23c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f92a 	bl	800a264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b01      	cmp	r3, #1
 800a022:	d10e      	bne.n	800a042 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d107      	bne.n	800a042 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f06f 0201 	mvn.w	r2, #1
 800a03a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7f7 f9a1 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a04c:	2b80      	cmp	r3, #128	; 0x80
 800a04e:	d10e      	bne.n	800a06e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a05a:	2b80      	cmp	r3, #128	; 0x80
 800a05c:	d107      	bne.n	800a06e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 facf 	bl	800a60c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a078:	2b40      	cmp	r3, #64	; 0x40
 800a07a:	d10e      	bne.n	800a09a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a086:	2b40      	cmp	r3, #64	; 0x40
 800a088:	d107      	bne.n	800a09a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f8ef 	bl	800a278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	f003 0320 	and.w	r3, r3, #32
 800a0a4:	2b20      	cmp	r3, #32
 800a0a6:	d10e      	bne.n	800a0c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	2b20      	cmp	r3, #32
 800a0b4:	d107      	bne.n	800a0c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f06f 0220 	mvn.w	r2, #32
 800a0be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fa99 	bl	800a5f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0c6:	bf00      	nop
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <HAL_TIM_ConfigClockSource+0x18>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	e0a6      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x166>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a104:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a10c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b40      	cmp	r3, #64	; 0x40
 800a11c:	d067      	beq.n	800a1ee <HAL_TIM_ConfigClockSource+0x120>
 800a11e:	2b40      	cmp	r3, #64	; 0x40
 800a120:	d80b      	bhi.n	800a13a <HAL_TIM_ConfigClockSource+0x6c>
 800a122:	2b10      	cmp	r3, #16
 800a124:	d073      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x140>
 800a126:	2b10      	cmp	r3, #16
 800a128:	d802      	bhi.n	800a130 <HAL_TIM_ConfigClockSource+0x62>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d06f      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a12e:	e078      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a130:	2b20      	cmp	r3, #32
 800a132:	d06c      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x140>
 800a134:	2b30      	cmp	r3, #48	; 0x30
 800a136:	d06a      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a138:	e073      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a13a:	2b70      	cmp	r3, #112	; 0x70
 800a13c:	d00d      	beq.n	800a15a <HAL_TIM_ConfigClockSource+0x8c>
 800a13e:	2b70      	cmp	r3, #112	; 0x70
 800a140:	d804      	bhi.n	800a14c <HAL_TIM_ConfigClockSource+0x7e>
 800a142:	2b50      	cmp	r3, #80	; 0x50
 800a144:	d033      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0xe0>
 800a146:	2b60      	cmp	r3, #96	; 0x60
 800a148:	d041      	beq.n	800a1ce <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a14a:	e06a      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a14c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a150:	d066      	beq.n	800a220 <HAL_TIM_ConfigClockSource+0x152>
 800a152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a156:	d017      	beq.n	800a188 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a158:	e063      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6818      	ldr	r0, [r3, #0]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	6899      	ldr	r1, [r3, #8]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f000 f9a9 	bl	800a4c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a17c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	609a      	str	r2, [r3, #8]
      break;
 800a186:	e04c      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6818      	ldr	r0, [r3, #0]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	6899      	ldr	r1, [r3, #8]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f000 f992 	bl	800a4c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1aa:	609a      	str	r2, [r3, #8]
      break;
 800a1ac:	e039      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6818      	ldr	r0, [r3, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	6859      	ldr	r1, [r3, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f000 f906 	bl	800a3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2150      	movs	r1, #80	; 0x50
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 f95f 	bl	800a48a <TIM_ITRx_SetConfig>
      break;
 800a1cc:	e029      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6818      	ldr	r0, [r3, #0]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	6859      	ldr	r1, [r3, #4]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	f000 f925 	bl	800a42a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2160      	movs	r1, #96	; 0x60
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 f94f 	bl	800a48a <TIM_ITRx_SetConfig>
      break;
 800a1ec:	e019      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6818      	ldr	r0, [r3, #0]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	6859      	ldr	r1, [r3, #4]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f000 f8e6 	bl	800a3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2140      	movs	r1, #64	; 0x40
 800a206:	4618      	mov	r0, r3
 800a208:	f000 f93f 	bl	800a48a <TIM_ITRx_SetConfig>
      break;
 800a20c:	e009      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	4610      	mov	r0, r2
 800a21a:	f000 f936 	bl	800a48a <TIM_ITRx_SetConfig>
      break;
 800a21e:	e000      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a220:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a244:	bf00      	nop
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a40      	ldr	r2, [pc, #256]	; (800a3a0 <TIM_Base_SetConfig+0x114>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d013      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2aa:	d00f      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a3d      	ldr	r2, [pc, #244]	; (800a3a4 <TIM_Base_SetConfig+0x118>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d00b      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a3c      	ldr	r2, [pc, #240]	; (800a3a8 <TIM_Base_SetConfig+0x11c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d007      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a3b      	ldr	r2, [pc, #236]	; (800a3ac <TIM_Base_SetConfig+0x120>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d003      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a3a      	ldr	r2, [pc, #232]	; (800a3b0 <TIM_Base_SetConfig+0x124>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d108      	bne.n	800a2de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a2f      	ldr	r2, [pc, #188]	; (800a3a0 <TIM_Base_SetConfig+0x114>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d02b      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ec:	d027      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a2c      	ldr	r2, [pc, #176]	; (800a3a4 <TIM_Base_SetConfig+0x118>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d023      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a2b      	ldr	r2, [pc, #172]	; (800a3a8 <TIM_Base_SetConfig+0x11c>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d01f      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a2a      	ldr	r2, [pc, #168]	; (800a3ac <TIM_Base_SetConfig+0x120>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d01b      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a29      	ldr	r2, [pc, #164]	; (800a3b0 <TIM_Base_SetConfig+0x124>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d017      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a28      	ldr	r2, [pc, #160]	; (800a3b4 <TIM_Base_SetConfig+0x128>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d013      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a27      	ldr	r2, [pc, #156]	; (800a3b8 <TIM_Base_SetConfig+0x12c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00f      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a26      	ldr	r2, [pc, #152]	; (800a3bc <TIM_Base_SetConfig+0x130>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d00b      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a25      	ldr	r2, [pc, #148]	; (800a3c0 <TIM_Base_SetConfig+0x134>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d007      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a24      	ldr	r2, [pc, #144]	; (800a3c4 <TIM_Base_SetConfig+0x138>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d003      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a23      	ldr	r2, [pc, #140]	; (800a3c8 <TIM_Base_SetConfig+0x13c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d108      	bne.n	800a350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a0a      	ldr	r2, [pc, #40]	; (800a3a0 <TIM_Base_SetConfig+0x114>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d003      	beq.n	800a384 <TIM_Base_SetConfig+0xf8>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a0c      	ldr	r2, [pc, #48]	; (800a3b0 <TIM_Base_SetConfig+0x124>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d103      	bne.n	800a38c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	691a      	ldr	r2, [r3, #16]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	615a      	str	r2, [r3, #20]
}
 800a392:	bf00      	nop
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	40010000 	.word	0x40010000
 800a3a4:	40000400 	.word	0x40000400
 800a3a8:	40000800 	.word	0x40000800
 800a3ac:	40000c00 	.word	0x40000c00
 800a3b0:	40010400 	.word	0x40010400
 800a3b4:	40014000 	.word	0x40014000
 800a3b8:	40014400 	.word	0x40014400
 800a3bc:	40014800 	.word	0x40014800
 800a3c0:	40001800 	.word	0x40001800
 800a3c4:	40001c00 	.word	0x40001c00
 800a3c8:	40002000 	.word	0x40002000

0800a3cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b087      	sub	sp, #28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	f023 0201 	bic.w	r2, r3, #1
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	011b      	lsls	r3, r3, #4
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f023 030a 	bic.w	r3, r3, #10
 800a408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	4313      	orrs	r3, r2
 800a410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	621a      	str	r2, [r3, #32]
}
 800a41e:	bf00      	nop
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b087      	sub	sp, #28
 800a42e:	af00      	add	r7, sp, #0
 800a430:	60f8      	str	r0, [r7, #12]
 800a432:	60b9      	str	r1, [r7, #8]
 800a434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	f023 0210 	bic.w	r2, r3, #16
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6a1b      	ldr	r3, [r3, #32]
 800a44c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	031b      	lsls	r3, r3, #12
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	4313      	orrs	r3, r2
 800a470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	621a      	str	r2, [r3, #32]
}
 800a47e:	bf00      	nop
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a48a:	b480      	push	{r7}
 800a48c:	b085      	sub	sp, #20
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	f043 0307 	orr.w	r3, r3, #7
 800a4ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	609a      	str	r2, [r3, #8]
}
 800a4b4:	bf00      	nop
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	021a      	lsls	r2, r3, #8
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	609a      	str	r2, [r3, #8]
}
 800a4f4:	bf00      	nop
 800a4f6:	371c      	adds	r7, #28
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a510:	2b01      	cmp	r3, #1
 800a512:	d101      	bne.n	800a518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a514:	2302      	movs	r3, #2
 800a516:	e05a      	b.n	800a5ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a53e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	4313      	orrs	r3, r2
 800a548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a21      	ldr	r2, [pc, #132]	; (800a5dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d022      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a564:	d01d      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a1d      	ldr	r2, [pc, #116]	; (800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d018      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a1b      	ldr	r2, [pc, #108]	; (800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d013      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a1a      	ldr	r2, [pc, #104]	; (800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d00e      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a18      	ldr	r2, [pc, #96]	; (800a5ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d009      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a17      	ldr	r2, [pc, #92]	; (800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d004      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a15      	ldr	r2, [pc, #84]	; (800a5f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d10c      	bne.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	40010000 	.word	0x40010000
 800a5e0:	40000400 	.word	0x40000400
 800a5e4:	40000800 	.word	0x40000800
 800a5e8:	40000c00 	.word	0x40000c00
 800a5ec:	40010400 	.word	0x40010400
 800a5f0:	40014000 	.word	0x40014000
 800a5f4:	40001800 	.word	0x40001800

0800a5f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e03f      	b.n	800a6b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d106      	bne.n	800a64c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7f7 faf6 	bl	8001c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2224      	movs	r2, #36	; 0x24
 800a650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f829 	bl	800a6bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	691a      	ldr	r2, [r3, #16]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	695a      	ldr	r2, [r3, #20]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68da      	ldr	r2, [r3, #12]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	b085      	sub	sp, #20
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68da      	ldr	r2, [r3, #12]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689a      	ldr	r2, [r3, #8]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	431a      	orrs	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	69db      	ldr	r3, [r3, #28]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a6fe:	f023 030c 	bic.w	r3, r3, #12
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	6812      	ldr	r2, [r2, #0]
 800a706:	68f9      	ldr	r1, [r7, #12]
 800a708:	430b      	orrs	r3, r1
 800a70a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	699a      	ldr	r2, [r3, #24]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	430a      	orrs	r2, r1
 800a720:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a72a:	f040 818b 	bne.w	800aa44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4ac1      	ldr	r2, [pc, #772]	; (800aa38 <UART_SetConfig+0x37c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d005      	beq.n	800a744 <UART_SetConfig+0x88>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4abf      	ldr	r2, [pc, #764]	; (800aa3c <UART_SetConfig+0x380>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	f040 80bd 	bne.w	800a8be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a744:	f7fe fb5e 	bl	8008e04 <HAL_RCC_GetPCLK2Freq>
 800a748:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	461d      	mov	r5, r3
 800a74e:	f04f 0600 	mov.w	r6, #0
 800a752:	46a8      	mov	r8, r5
 800a754:	46b1      	mov	r9, r6
 800a756:	eb18 0308 	adds.w	r3, r8, r8
 800a75a:	eb49 0409 	adc.w	r4, r9, r9
 800a75e:	4698      	mov	r8, r3
 800a760:	46a1      	mov	r9, r4
 800a762:	eb18 0805 	adds.w	r8, r8, r5
 800a766:	eb49 0906 	adc.w	r9, r9, r6
 800a76a:	f04f 0100 	mov.w	r1, #0
 800a76e:	f04f 0200 	mov.w	r2, #0
 800a772:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a776:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a77a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a77e:	4688      	mov	r8, r1
 800a780:	4691      	mov	r9, r2
 800a782:	eb18 0005 	adds.w	r0, r8, r5
 800a786:	eb49 0106 	adc.w	r1, r9, r6
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	461d      	mov	r5, r3
 800a790:	f04f 0600 	mov.w	r6, #0
 800a794:	196b      	adds	r3, r5, r5
 800a796:	eb46 0406 	adc.w	r4, r6, r6
 800a79a:	461a      	mov	r2, r3
 800a79c:	4623      	mov	r3, r4
 800a79e:	f7f5 fd27 	bl	80001f0 <__aeabi_uldivmod>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	4ba5      	ldr	r3, [pc, #660]	; (800aa40 <UART_SetConfig+0x384>)
 800a7aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a7ae:	095b      	lsrs	r3, r3, #5
 800a7b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	461d      	mov	r5, r3
 800a7b8:	f04f 0600 	mov.w	r6, #0
 800a7bc:	46a9      	mov	r9, r5
 800a7be:	46b2      	mov	sl, r6
 800a7c0:	eb19 0309 	adds.w	r3, r9, r9
 800a7c4:	eb4a 040a 	adc.w	r4, sl, sl
 800a7c8:	4699      	mov	r9, r3
 800a7ca:	46a2      	mov	sl, r4
 800a7cc:	eb19 0905 	adds.w	r9, r9, r5
 800a7d0:	eb4a 0a06 	adc.w	sl, sl, r6
 800a7d4:	f04f 0100 	mov.w	r1, #0
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a7e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a7e8:	4689      	mov	r9, r1
 800a7ea:	4692      	mov	sl, r2
 800a7ec:	eb19 0005 	adds.w	r0, r9, r5
 800a7f0:	eb4a 0106 	adc.w	r1, sl, r6
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	461d      	mov	r5, r3
 800a7fa:	f04f 0600 	mov.w	r6, #0
 800a7fe:	196b      	adds	r3, r5, r5
 800a800:	eb46 0406 	adc.w	r4, r6, r6
 800a804:	461a      	mov	r2, r3
 800a806:	4623      	mov	r3, r4
 800a808:	f7f5 fcf2 	bl	80001f0 <__aeabi_uldivmod>
 800a80c:	4603      	mov	r3, r0
 800a80e:	460c      	mov	r4, r1
 800a810:	461a      	mov	r2, r3
 800a812:	4b8b      	ldr	r3, [pc, #556]	; (800aa40 <UART_SetConfig+0x384>)
 800a814:	fba3 1302 	umull	r1, r3, r3, r2
 800a818:	095b      	lsrs	r3, r3, #5
 800a81a:	2164      	movs	r1, #100	; 0x64
 800a81c:	fb01 f303 	mul.w	r3, r1, r3
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	3332      	adds	r3, #50	; 0x32
 800a826:	4a86      	ldr	r2, [pc, #536]	; (800aa40 <UART_SetConfig+0x384>)
 800a828:	fba2 2303 	umull	r2, r3, r2, r3
 800a82c:	095b      	lsrs	r3, r3, #5
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a834:	4498      	add	r8, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	461d      	mov	r5, r3
 800a83a:	f04f 0600 	mov.w	r6, #0
 800a83e:	46a9      	mov	r9, r5
 800a840:	46b2      	mov	sl, r6
 800a842:	eb19 0309 	adds.w	r3, r9, r9
 800a846:	eb4a 040a 	adc.w	r4, sl, sl
 800a84a:	4699      	mov	r9, r3
 800a84c:	46a2      	mov	sl, r4
 800a84e:	eb19 0905 	adds.w	r9, r9, r5
 800a852:	eb4a 0a06 	adc.w	sl, sl, r6
 800a856:	f04f 0100 	mov.w	r1, #0
 800a85a:	f04f 0200 	mov.w	r2, #0
 800a85e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a862:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a866:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a86a:	4689      	mov	r9, r1
 800a86c:	4692      	mov	sl, r2
 800a86e:	eb19 0005 	adds.w	r0, r9, r5
 800a872:	eb4a 0106 	adc.w	r1, sl, r6
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	461d      	mov	r5, r3
 800a87c:	f04f 0600 	mov.w	r6, #0
 800a880:	196b      	adds	r3, r5, r5
 800a882:	eb46 0406 	adc.w	r4, r6, r6
 800a886:	461a      	mov	r2, r3
 800a888:	4623      	mov	r3, r4
 800a88a:	f7f5 fcb1 	bl	80001f0 <__aeabi_uldivmod>
 800a88e:	4603      	mov	r3, r0
 800a890:	460c      	mov	r4, r1
 800a892:	461a      	mov	r2, r3
 800a894:	4b6a      	ldr	r3, [pc, #424]	; (800aa40 <UART_SetConfig+0x384>)
 800a896:	fba3 1302 	umull	r1, r3, r3, r2
 800a89a:	095b      	lsrs	r3, r3, #5
 800a89c:	2164      	movs	r1, #100	; 0x64
 800a89e:	fb01 f303 	mul.w	r3, r1, r3
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	3332      	adds	r3, #50	; 0x32
 800a8a8:	4a65      	ldr	r2, [pc, #404]	; (800aa40 <UART_SetConfig+0x384>)
 800a8aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ae:	095b      	lsrs	r3, r3, #5
 800a8b0:	f003 0207 	and.w	r2, r3, #7
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4442      	add	r2, r8
 800a8ba:	609a      	str	r2, [r3, #8]
 800a8bc:	e26f      	b.n	800ad9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8be:	f7fe fa8d 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 800a8c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	461d      	mov	r5, r3
 800a8c8:	f04f 0600 	mov.w	r6, #0
 800a8cc:	46a8      	mov	r8, r5
 800a8ce:	46b1      	mov	r9, r6
 800a8d0:	eb18 0308 	adds.w	r3, r8, r8
 800a8d4:	eb49 0409 	adc.w	r4, r9, r9
 800a8d8:	4698      	mov	r8, r3
 800a8da:	46a1      	mov	r9, r4
 800a8dc:	eb18 0805 	adds.w	r8, r8, r5
 800a8e0:	eb49 0906 	adc.w	r9, r9, r6
 800a8e4:	f04f 0100 	mov.w	r1, #0
 800a8e8:	f04f 0200 	mov.w	r2, #0
 800a8ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a8f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a8f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8f8:	4688      	mov	r8, r1
 800a8fa:	4691      	mov	r9, r2
 800a8fc:	eb18 0005 	adds.w	r0, r8, r5
 800a900:	eb49 0106 	adc.w	r1, r9, r6
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	461d      	mov	r5, r3
 800a90a:	f04f 0600 	mov.w	r6, #0
 800a90e:	196b      	adds	r3, r5, r5
 800a910:	eb46 0406 	adc.w	r4, r6, r6
 800a914:	461a      	mov	r2, r3
 800a916:	4623      	mov	r3, r4
 800a918:	f7f5 fc6a 	bl	80001f0 <__aeabi_uldivmod>
 800a91c:	4603      	mov	r3, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	461a      	mov	r2, r3
 800a922:	4b47      	ldr	r3, [pc, #284]	; (800aa40 <UART_SetConfig+0x384>)
 800a924:	fba3 2302 	umull	r2, r3, r3, r2
 800a928:	095b      	lsrs	r3, r3, #5
 800a92a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	461d      	mov	r5, r3
 800a932:	f04f 0600 	mov.w	r6, #0
 800a936:	46a9      	mov	r9, r5
 800a938:	46b2      	mov	sl, r6
 800a93a:	eb19 0309 	adds.w	r3, r9, r9
 800a93e:	eb4a 040a 	adc.w	r4, sl, sl
 800a942:	4699      	mov	r9, r3
 800a944:	46a2      	mov	sl, r4
 800a946:	eb19 0905 	adds.w	r9, r9, r5
 800a94a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a94e:	f04f 0100 	mov.w	r1, #0
 800a952:	f04f 0200 	mov.w	r2, #0
 800a956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a95a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a95e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a962:	4689      	mov	r9, r1
 800a964:	4692      	mov	sl, r2
 800a966:	eb19 0005 	adds.w	r0, r9, r5
 800a96a:	eb4a 0106 	adc.w	r1, sl, r6
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	461d      	mov	r5, r3
 800a974:	f04f 0600 	mov.w	r6, #0
 800a978:	196b      	adds	r3, r5, r5
 800a97a:	eb46 0406 	adc.w	r4, r6, r6
 800a97e:	461a      	mov	r2, r3
 800a980:	4623      	mov	r3, r4
 800a982:	f7f5 fc35 	bl	80001f0 <__aeabi_uldivmod>
 800a986:	4603      	mov	r3, r0
 800a988:	460c      	mov	r4, r1
 800a98a:	461a      	mov	r2, r3
 800a98c:	4b2c      	ldr	r3, [pc, #176]	; (800aa40 <UART_SetConfig+0x384>)
 800a98e:	fba3 1302 	umull	r1, r3, r3, r2
 800a992:	095b      	lsrs	r3, r3, #5
 800a994:	2164      	movs	r1, #100	; 0x64
 800a996:	fb01 f303 	mul.w	r3, r1, r3
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	00db      	lsls	r3, r3, #3
 800a99e:	3332      	adds	r3, #50	; 0x32
 800a9a0:	4a27      	ldr	r2, [pc, #156]	; (800aa40 <UART_SetConfig+0x384>)
 800a9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a6:	095b      	lsrs	r3, r3, #5
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9ae:	4498      	add	r8, r3
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	461d      	mov	r5, r3
 800a9b4:	f04f 0600 	mov.w	r6, #0
 800a9b8:	46a9      	mov	r9, r5
 800a9ba:	46b2      	mov	sl, r6
 800a9bc:	eb19 0309 	adds.w	r3, r9, r9
 800a9c0:	eb4a 040a 	adc.w	r4, sl, sl
 800a9c4:	4699      	mov	r9, r3
 800a9c6:	46a2      	mov	sl, r4
 800a9c8:	eb19 0905 	adds.w	r9, r9, r5
 800a9cc:	eb4a 0a06 	adc.w	sl, sl, r6
 800a9d0:	f04f 0100 	mov.w	r1, #0
 800a9d4:	f04f 0200 	mov.w	r2, #0
 800a9d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9e4:	4689      	mov	r9, r1
 800a9e6:	4692      	mov	sl, r2
 800a9e8:	eb19 0005 	adds.w	r0, r9, r5
 800a9ec:	eb4a 0106 	adc.w	r1, sl, r6
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	461d      	mov	r5, r3
 800a9f6:	f04f 0600 	mov.w	r6, #0
 800a9fa:	196b      	adds	r3, r5, r5
 800a9fc:	eb46 0406 	adc.w	r4, r6, r6
 800aa00:	461a      	mov	r2, r3
 800aa02:	4623      	mov	r3, r4
 800aa04:	f7f5 fbf4 	bl	80001f0 <__aeabi_uldivmod>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <UART_SetConfig+0x384>)
 800aa10:	fba3 1302 	umull	r1, r3, r3, r2
 800aa14:	095b      	lsrs	r3, r3, #5
 800aa16:	2164      	movs	r1, #100	; 0x64
 800aa18:	fb01 f303 	mul.w	r3, r1, r3
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	3332      	adds	r3, #50	; 0x32
 800aa22:	4a07      	ldr	r2, [pc, #28]	; (800aa40 <UART_SetConfig+0x384>)
 800aa24:	fba2 2303 	umull	r2, r3, r2, r3
 800aa28:	095b      	lsrs	r3, r3, #5
 800aa2a:	f003 0207 	and.w	r2, r3, #7
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4442      	add	r2, r8
 800aa34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aa36:	e1b2      	b.n	800ad9e <UART_SetConfig+0x6e2>
 800aa38:	40011000 	.word	0x40011000
 800aa3c:	40011400 	.word	0x40011400
 800aa40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4ad7      	ldr	r2, [pc, #860]	; (800ada8 <UART_SetConfig+0x6ec>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d005      	beq.n	800aa5a <UART_SetConfig+0x39e>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4ad6      	ldr	r2, [pc, #856]	; (800adac <UART_SetConfig+0x6f0>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	f040 80d1 	bne.w	800abfc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa5a:	f7fe f9d3 	bl	8008e04 <HAL_RCC_GetPCLK2Freq>
 800aa5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	469a      	mov	sl, r3
 800aa64:	f04f 0b00 	mov.w	fp, #0
 800aa68:	46d0      	mov	r8, sl
 800aa6a:	46d9      	mov	r9, fp
 800aa6c:	eb18 0308 	adds.w	r3, r8, r8
 800aa70:	eb49 0409 	adc.w	r4, r9, r9
 800aa74:	4698      	mov	r8, r3
 800aa76:	46a1      	mov	r9, r4
 800aa78:	eb18 080a 	adds.w	r8, r8, sl
 800aa7c:	eb49 090b 	adc.w	r9, r9, fp
 800aa80:	f04f 0100 	mov.w	r1, #0
 800aa84:	f04f 0200 	mov.w	r2, #0
 800aa88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa94:	4688      	mov	r8, r1
 800aa96:	4691      	mov	r9, r2
 800aa98:	eb1a 0508 	adds.w	r5, sl, r8
 800aa9c:	eb4b 0609 	adc.w	r6, fp, r9
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	f04f 0200 	mov.w	r2, #0
 800aaaa:	f04f 0300 	mov.w	r3, #0
 800aaae:	f04f 0400 	mov.w	r4, #0
 800aab2:	0094      	lsls	r4, r2, #2
 800aab4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aab8:	008b      	lsls	r3, r1, #2
 800aaba:	461a      	mov	r2, r3
 800aabc:	4623      	mov	r3, r4
 800aabe:	4628      	mov	r0, r5
 800aac0:	4631      	mov	r1, r6
 800aac2:	f7f5 fb95 	bl	80001f0 <__aeabi_uldivmod>
 800aac6:	4603      	mov	r3, r0
 800aac8:	460c      	mov	r4, r1
 800aaca:	461a      	mov	r2, r3
 800aacc:	4bb8      	ldr	r3, [pc, #736]	; (800adb0 <UART_SetConfig+0x6f4>)
 800aace:	fba3 2302 	umull	r2, r3, r3, r2
 800aad2:	095b      	lsrs	r3, r3, #5
 800aad4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	469b      	mov	fp, r3
 800aadc:	f04f 0c00 	mov.w	ip, #0
 800aae0:	46d9      	mov	r9, fp
 800aae2:	46e2      	mov	sl, ip
 800aae4:	eb19 0309 	adds.w	r3, r9, r9
 800aae8:	eb4a 040a 	adc.w	r4, sl, sl
 800aaec:	4699      	mov	r9, r3
 800aaee:	46a2      	mov	sl, r4
 800aaf0:	eb19 090b 	adds.w	r9, r9, fp
 800aaf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aaf8:	f04f 0100 	mov.w	r1, #0
 800aafc:	f04f 0200 	mov.w	r2, #0
 800ab00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab0c:	4689      	mov	r9, r1
 800ab0e:	4692      	mov	sl, r2
 800ab10:	eb1b 0509 	adds.w	r5, fp, r9
 800ab14:	eb4c 060a 	adc.w	r6, ip, sl
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	f04f 0200 	mov.w	r2, #0
 800ab22:	f04f 0300 	mov.w	r3, #0
 800ab26:	f04f 0400 	mov.w	r4, #0
 800ab2a:	0094      	lsls	r4, r2, #2
 800ab2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab30:	008b      	lsls	r3, r1, #2
 800ab32:	461a      	mov	r2, r3
 800ab34:	4623      	mov	r3, r4
 800ab36:	4628      	mov	r0, r5
 800ab38:	4631      	mov	r1, r6
 800ab3a:	f7f5 fb59 	bl	80001f0 <__aeabi_uldivmod>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	460c      	mov	r4, r1
 800ab42:	461a      	mov	r2, r3
 800ab44:	4b9a      	ldr	r3, [pc, #616]	; (800adb0 <UART_SetConfig+0x6f4>)
 800ab46:	fba3 1302 	umull	r1, r3, r3, r2
 800ab4a:	095b      	lsrs	r3, r3, #5
 800ab4c:	2164      	movs	r1, #100	; 0x64
 800ab4e:	fb01 f303 	mul.w	r3, r1, r3
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	3332      	adds	r3, #50	; 0x32
 800ab58:	4a95      	ldr	r2, [pc, #596]	; (800adb0 <UART_SetConfig+0x6f4>)
 800ab5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5e:	095b      	lsrs	r3, r3, #5
 800ab60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab64:	4498      	add	r8, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	469b      	mov	fp, r3
 800ab6a:	f04f 0c00 	mov.w	ip, #0
 800ab6e:	46d9      	mov	r9, fp
 800ab70:	46e2      	mov	sl, ip
 800ab72:	eb19 0309 	adds.w	r3, r9, r9
 800ab76:	eb4a 040a 	adc.w	r4, sl, sl
 800ab7a:	4699      	mov	r9, r3
 800ab7c:	46a2      	mov	sl, r4
 800ab7e:	eb19 090b 	adds.w	r9, r9, fp
 800ab82:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab86:	f04f 0100 	mov.w	r1, #0
 800ab8a:	f04f 0200 	mov.w	r2, #0
 800ab8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab9a:	4689      	mov	r9, r1
 800ab9c:	4692      	mov	sl, r2
 800ab9e:	eb1b 0509 	adds.w	r5, fp, r9
 800aba2:	eb4c 060a 	adc.w	r6, ip, sl
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	4619      	mov	r1, r3
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	f04f 0300 	mov.w	r3, #0
 800abb4:	f04f 0400 	mov.w	r4, #0
 800abb8:	0094      	lsls	r4, r2, #2
 800abba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abbe:	008b      	lsls	r3, r1, #2
 800abc0:	461a      	mov	r2, r3
 800abc2:	4623      	mov	r3, r4
 800abc4:	4628      	mov	r0, r5
 800abc6:	4631      	mov	r1, r6
 800abc8:	f7f5 fb12 	bl	80001f0 <__aeabi_uldivmod>
 800abcc:	4603      	mov	r3, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	461a      	mov	r2, r3
 800abd2:	4b77      	ldr	r3, [pc, #476]	; (800adb0 <UART_SetConfig+0x6f4>)
 800abd4:	fba3 1302 	umull	r1, r3, r3, r2
 800abd8:	095b      	lsrs	r3, r3, #5
 800abda:	2164      	movs	r1, #100	; 0x64
 800abdc:	fb01 f303 	mul.w	r3, r1, r3
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	011b      	lsls	r3, r3, #4
 800abe4:	3332      	adds	r3, #50	; 0x32
 800abe6:	4a72      	ldr	r2, [pc, #456]	; (800adb0 <UART_SetConfig+0x6f4>)
 800abe8:	fba2 2303 	umull	r2, r3, r2, r3
 800abec:	095b      	lsrs	r3, r3, #5
 800abee:	f003 020f 	and.w	r2, r3, #15
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4442      	add	r2, r8
 800abf8:	609a      	str	r2, [r3, #8]
 800abfa:	e0d0      	b.n	800ad9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800abfc:	f7fe f8ee 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 800ac00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	469a      	mov	sl, r3
 800ac06:	f04f 0b00 	mov.w	fp, #0
 800ac0a:	46d0      	mov	r8, sl
 800ac0c:	46d9      	mov	r9, fp
 800ac0e:	eb18 0308 	adds.w	r3, r8, r8
 800ac12:	eb49 0409 	adc.w	r4, r9, r9
 800ac16:	4698      	mov	r8, r3
 800ac18:	46a1      	mov	r9, r4
 800ac1a:	eb18 080a 	adds.w	r8, r8, sl
 800ac1e:	eb49 090b 	adc.w	r9, r9, fp
 800ac22:	f04f 0100 	mov.w	r1, #0
 800ac26:	f04f 0200 	mov.w	r2, #0
 800ac2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac36:	4688      	mov	r8, r1
 800ac38:	4691      	mov	r9, r2
 800ac3a:	eb1a 0508 	adds.w	r5, sl, r8
 800ac3e:	eb4b 0609 	adc.w	r6, fp, r9
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	4619      	mov	r1, r3
 800ac48:	f04f 0200 	mov.w	r2, #0
 800ac4c:	f04f 0300 	mov.w	r3, #0
 800ac50:	f04f 0400 	mov.w	r4, #0
 800ac54:	0094      	lsls	r4, r2, #2
 800ac56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac5a:	008b      	lsls	r3, r1, #2
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	4623      	mov	r3, r4
 800ac60:	4628      	mov	r0, r5
 800ac62:	4631      	mov	r1, r6
 800ac64:	f7f5 fac4 	bl	80001f0 <__aeabi_uldivmod>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	4b50      	ldr	r3, [pc, #320]	; (800adb0 <UART_SetConfig+0x6f4>)
 800ac70:	fba3 2302 	umull	r2, r3, r3, r2
 800ac74:	095b      	lsrs	r3, r3, #5
 800ac76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	469b      	mov	fp, r3
 800ac7e:	f04f 0c00 	mov.w	ip, #0
 800ac82:	46d9      	mov	r9, fp
 800ac84:	46e2      	mov	sl, ip
 800ac86:	eb19 0309 	adds.w	r3, r9, r9
 800ac8a:	eb4a 040a 	adc.w	r4, sl, sl
 800ac8e:	4699      	mov	r9, r3
 800ac90:	46a2      	mov	sl, r4
 800ac92:	eb19 090b 	adds.w	r9, r9, fp
 800ac96:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac9a:	f04f 0100 	mov.w	r1, #0
 800ac9e:	f04f 0200 	mov.w	r2, #0
 800aca2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aca6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800acaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800acae:	4689      	mov	r9, r1
 800acb0:	4692      	mov	sl, r2
 800acb2:	eb1b 0509 	adds.w	r5, fp, r9
 800acb6:	eb4c 060a 	adc.w	r6, ip, sl
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	4619      	mov	r1, r3
 800acc0:	f04f 0200 	mov.w	r2, #0
 800acc4:	f04f 0300 	mov.w	r3, #0
 800acc8:	f04f 0400 	mov.w	r4, #0
 800accc:	0094      	lsls	r4, r2, #2
 800acce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800acd2:	008b      	lsls	r3, r1, #2
 800acd4:	461a      	mov	r2, r3
 800acd6:	4623      	mov	r3, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	4631      	mov	r1, r6
 800acdc:	f7f5 fa88 	bl	80001f0 <__aeabi_uldivmod>
 800ace0:	4603      	mov	r3, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	461a      	mov	r2, r3
 800ace6:	4b32      	ldr	r3, [pc, #200]	; (800adb0 <UART_SetConfig+0x6f4>)
 800ace8:	fba3 1302 	umull	r1, r3, r3, r2
 800acec:	095b      	lsrs	r3, r3, #5
 800acee:	2164      	movs	r1, #100	; 0x64
 800acf0:	fb01 f303 	mul.w	r3, r1, r3
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	011b      	lsls	r3, r3, #4
 800acf8:	3332      	adds	r3, #50	; 0x32
 800acfa:	4a2d      	ldr	r2, [pc, #180]	; (800adb0 <UART_SetConfig+0x6f4>)
 800acfc:	fba2 2303 	umull	r2, r3, r2, r3
 800ad00:	095b      	lsrs	r3, r3, #5
 800ad02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad06:	4498      	add	r8, r3
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	469b      	mov	fp, r3
 800ad0c:	f04f 0c00 	mov.w	ip, #0
 800ad10:	46d9      	mov	r9, fp
 800ad12:	46e2      	mov	sl, ip
 800ad14:	eb19 0309 	adds.w	r3, r9, r9
 800ad18:	eb4a 040a 	adc.w	r4, sl, sl
 800ad1c:	4699      	mov	r9, r3
 800ad1e:	46a2      	mov	sl, r4
 800ad20:	eb19 090b 	adds.w	r9, r9, fp
 800ad24:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ad28:	f04f 0100 	mov.w	r1, #0
 800ad2c:	f04f 0200 	mov.w	r2, #0
 800ad30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad3c:	4689      	mov	r9, r1
 800ad3e:	4692      	mov	sl, r2
 800ad40:	eb1b 0509 	adds.w	r5, fp, r9
 800ad44:	eb4c 060a 	adc.w	r6, ip, sl
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	f04f 0300 	mov.w	r3, #0
 800ad56:	f04f 0400 	mov.w	r4, #0
 800ad5a:	0094      	lsls	r4, r2, #2
 800ad5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad60:	008b      	lsls	r3, r1, #2
 800ad62:	461a      	mov	r2, r3
 800ad64:	4623      	mov	r3, r4
 800ad66:	4628      	mov	r0, r5
 800ad68:	4631      	mov	r1, r6
 800ad6a:	f7f5 fa41 	bl	80001f0 <__aeabi_uldivmod>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	460c      	mov	r4, r1
 800ad72:	461a      	mov	r2, r3
 800ad74:	4b0e      	ldr	r3, [pc, #56]	; (800adb0 <UART_SetConfig+0x6f4>)
 800ad76:	fba3 1302 	umull	r1, r3, r3, r2
 800ad7a:	095b      	lsrs	r3, r3, #5
 800ad7c:	2164      	movs	r1, #100	; 0x64
 800ad7e:	fb01 f303 	mul.w	r3, r1, r3
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	011b      	lsls	r3, r3, #4
 800ad86:	3332      	adds	r3, #50	; 0x32
 800ad88:	4a09      	ldr	r2, [pc, #36]	; (800adb0 <UART_SetConfig+0x6f4>)
 800ad8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8e:	095b      	lsrs	r3, r3, #5
 800ad90:	f003 020f 	and.w	r2, r3, #15
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4442      	add	r2, r8
 800ad9a:	609a      	str	r2, [r3, #8]
}
 800ad9c:	e7ff      	b.n	800ad9e <UART_SetConfig+0x6e2>
 800ad9e:	bf00      	nop
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada8:	40011000 	.word	0x40011000
 800adac:	40011400 	.word	0x40011400
 800adb0:	51eb851f 	.word	0x51eb851f

0800adb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d029      	beq.n	800ae22 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800adda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800adde:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ade8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800adee:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800adf4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800adfa:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800ae00:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800ae06:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800ae0c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800ae12:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	e034      	b.n	800ae8c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae2e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae38:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ae3e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae56:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae60:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800ae66:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800ae6c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800ae72:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800ae78:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b087      	sub	sp, #28
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d02e      	beq.n	800af12 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aec0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	3b01      	subs	r3, #1
 800aece:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aed0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800aeda:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800aee4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aeee:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aef8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	3b01      	subs	r3, #1
 800af00:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af02:	4313      	orrs	r3, r2
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	4313      	orrs	r3, r2
 800af08:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	697a      	ldr	r2, [r7, #20]
 800af0e:	609a      	str	r2, [r3, #8]
 800af10:	e03b      	b.n	800af8a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af22:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	3b01      	subs	r3, #1
 800af2a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	3b01      	subs	r3, #1
 800af32:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af34:	4313      	orrs	r3, r2
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	4313      	orrs	r3, r2
 800af3a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af48:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	3b01      	subs	r3, #1
 800af56:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af58:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	3b01      	subs	r3, #1
 800af60:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800af62:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	3b01      	subs	r3, #1
 800af6a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800af6c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	3b01      	subs	r3, #1
 800af74:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af76:	4313      	orrs	r3, r2
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	371c      	adds	r7, #28
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800afa4:	2300      	movs	r3, #0
 800afa6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800afa8:	2300      	movs	r3, #0
 800afaa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800afb4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	3b01      	subs	r3, #1
 800afbc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800afbe:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800afc6:	4313      	orrs	r3, r2
 800afc8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800afd0:	f7f9 f80c 	bl	8003fec <HAL_GetTick>
 800afd4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800afd6:	e010      	b.n	800affa <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afde:	d00c      	beq.n	800affa <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d007      	beq.n	800aff6 <FMC_SDRAM_SendCommand+0x5e>
 800afe6:	f7f9 f801 	bl	8003fec <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d201      	bcs.n	800affa <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e006      	b.n	800b008 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b20      	cmp	r3, #32
 800b004:	d0e8      	beq.n	800afd8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	695a      	ldr	r2, [r3, #20]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	431a      	orrs	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	370c      	adds	r7, #12
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b036:	b084      	sub	sp, #16
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	f107 001c 	add.w	r0, r7, #28
 800b044:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d122      	bne.n	800b094 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d105      	bne.n	800b088 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f949 	bl	800b320 <USB_CoreReset>
 800b08e:	4603      	mov	r3, r0
 800b090:	73fb      	strb	r3, [r7, #15]
 800b092:	e01a      	b.n	800b0ca <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f93d 	bl	800b320 <USB_CoreReset>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	639a      	str	r2, [r3, #56]	; 0x38
 800b0bc:	e005      	b.n	800b0ca <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d10b      	bne.n	800b0e8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f043 0206 	orr.w	r2, r3, #6
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f043 0220 	orr.w	r2, r3, #32
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0f4:	b004      	add	sp, #16
 800b0f6:	4770      	bx	lr

0800b0f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f043 0201 	orr.w	r2, r3, #1
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b083      	sub	sp, #12
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	f023 0201 	bic.w	r2, r3, #1
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d106      	bne.n	800b168 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	e00b      	b.n	800b180 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d106      	bne.n	800b17c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	60da      	str	r2, [r3, #12]
 800b17a:	e001      	b.n	800b180 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e003      	b.n	800b188 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b180:	2032      	movs	r0, #50	; 0x32
 800b182:	f7f8 ff3f 	bl	8004004 <HAL_Delay>

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	019b      	lsls	r3, r3, #6
 800b1a2:	f043 0220 	orr.w	r2, r3, #32
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4a09      	ldr	r2, [pc, #36]	; (800b1d8 <USB_FlushTxFifo+0x48>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d901      	bls.n	800b1bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e006      	b.n	800b1ca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	f003 0320 	and.w	r3, r3, #32
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	d0f0      	beq.n	800b1aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	00030d40 	.word	0x00030d40

0800b1dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2210      	movs	r2, #16
 800b1ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4a09      	ldr	r2, [pc, #36]	; (800b21c <USB_FlushRxFifo+0x40>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d901      	bls.n	800b200 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e006      	b.n	800b20e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	f003 0310 	and.w	r3, r3, #16
 800b208:	2b10      	cmp	r3, #16
 800b20a:	d0f0      	beq.n	800b1ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	00030d40 	.word	0x00030d40

0800b220 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b220:	b480      	push	{r7}
 800b222:	b089      	sub	sp, #36	; 0x24
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	4611      	mov	r1, r2
 800b22c:	461a      	mov	r2, r3
 800b22e:	460b      	mov	r3, r1
 800b230:	71fb      	strb	r3, [r7, #7]
 800b232:	4613      	mov	r3, r2
 800b234:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b23e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b242:	2b00      	cmp	r3, #0
 800b244:	d11a      	bne.n	800b27c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b246:	88bb      	ldrh	r3, [r7, #4]
 800b248:	3303      	adds	r3, #3
 800b24a:	089b      	lsrs	r3, r3, #2
 800b24c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b24e:	2300      	movs	r3, #0
 800b250:	61bb      	str	r3, [r7, #24]
 800b252:	e00f      	b.n	800b274 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b254:	79fb      	ldrb	r3, [r7, #7]
 800b256:	031a      	lsls	r2, r3, #12
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b260:	461a      	mov	r2, r3
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	3304      	adds	r3, #4
 800b26c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	3301      	adds	r3, #1
 800b272:	61bb      	str	r3, [r7, #24]
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d3eb      	bcc.n	800b254 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3724      	adds	r7, #36	; 0x24
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b089      	sub	sp, #36	; 0x24
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	4613      	mov	r3, r2
 800b296:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b2a0:	88fb      	ldrh	r3, [r7, #6]
 800b2a2:	3303      	adds	r3, #3
 800b2a4:	089b      	lsrs	r3, r3, #2
 800b2a6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	61bb      	str	r3, [r7, #24]
 800b2ac:	e00b      	b.n	800b2c6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	601a      	str	r2, [r3, #0]
    pDest++;
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	61bb      	str	r3, [r7, #24]
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d3ef      	bcc.n	800b2ae <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b2ce:	69fb      	ldr	r3, [r7, #28]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3724      	adds	r7, #36	; 0x24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	695b      	ldr	r3, [r3, #20]
 800b2e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b302:	b480      	push	{r7}
 800b304:	b083      	sub	sp, #12
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	f003 0301 	and.w	r3, r3, #1
}
 800b312:	4618      	mov	r0, r3
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
	...

0800b320 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3301      	adds	r3, #1
 800b330:	60fb      	str	r3, [r7, #12]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	4a13      	ldr	r2, [pc, #76]	; (800b384 <USB_CoreReset+0x64>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d901      	bls.n	800b33e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b33a:	2303      	movs	r3, #3
 800b33c:	e01b      	b.n	800b376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	daf2      	bge.n	800b32c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b346:	2300      	movs	r3, #0
 800b348:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	f043 0201 	orr.w	r2, r3, #1
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3301      	adds	r3, #1
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4a09      	ldr	r2, [pc, #36]	; (800b384 <USB_CoreReset+0x64>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d901      	bls.n	800b368 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	e006      	b.n	800b376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	f003 0301 	and.w	r3, r3, #1
 800b370:	2b01      	cmp	r3, #1
 800b372:	d0f0      	beq.n	800b356 <USB_CoreReset+0x36>

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	00030d40 	.word	0x00030d40

0800b388 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b388:	b084      	sub	sp, #16
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b084      	sub	sp, #16
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	f107 001c 	add.w	r0, r7, #28
 800b396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d018      	beq.n	800b40c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d10a      	bne.n	800b3f6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3ee:	f043 0304 	orr.w	r3, r3, #4
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	e014      	b.n	800b420 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b404:	f023 0304 	bic.w	r3, r3, #4
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	e009      	b.n	800b420 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b41a:	f023 0304 	bic.w	r3, r3, #4
 800b41e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b420:	2110      	movs	r1, #16
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff feb4 	bl	800b190 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7ff fed7 	bl	800b1dc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b42e:	2300      	movs	r3, #0
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	e015      	b.n	800b460 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	015a      	lsls	r2, r3, #5
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	4413      	add	r3, r2
 800b43c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b440:	461a      	mov	r2, r3
 800b442:	f04f 33ff 	mov.w	r3, #4294967295
 800b446:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b454:	461a      	mov	r2, r3
 800b456:	2300      	movs	r3, #0
 800b458:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	3301      	adds	r3, #1
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	429a      	cmp	r2, r3
 800b466:	d3e5      	bcc.n	800b434 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b468:	2101      	movs	r1, #1
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f8ac 	bl	800b5c8 <USB_DriveVbus>

  HAL_Delay(200U);
 800b470:	20c8      	movs	r0, #200	; 0xc8
 800b472:	f7f8 fdc7 	bl	8004004 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f04f 32ff 	mov.w	r2, #4294967295
 800b482:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00b      	beq.n	800b4a8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b496:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a14      	ldr	r2, [pc, #80]	; (800b4ec <USB_HostInit+0x164>)
 800b49c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a13      	ldr	r2, [pc, #76]	; (800b4f0 <USB_HostInit+0x168>)
 800b4a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b4a6:	e009      	b.n	800b4bc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2280      	movs	r2, #128	; 0x80
 800b4ac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a10      	ldr	r2, [pc, #64]	; (800b4f4 <USB_HostInit+0x16c>)
 800b4b2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a10      	ldr	r2, [pc, #64]	; (800b4f8 <USB_HostInit+0x170>)
 800b4b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d105      	bne.n	800b4ce <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	f043 0210 	orr.w	r2, r3, #16
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	699a      	ldr	r2, [r3, #24]
 800b4d2:	4b0a      	ldr	r3, [pc, #40]	; (800b4fc <USB_HostInit+0x174>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4e6:	b004      	add	sp, #16
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	01000200 	.word	0x01000200
 800b4f0:	00e00300 	.word	0x00e00300
 800b4f4:	00600080 	.word	0x00600080
 800b4f8:	004000e0 	.word	0x004000e0
 800b4fc:	a3200008 	.word	0xa3200008

0800b500 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b51e:	f023 0303 	bic.w	r3, r3, #3
 800b522:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	68f9      	ldr	r1, [r7, #12]
 800b534:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b538:	4313      	orrs	r3, r2
 800b53a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b53c:	78fb      	ldrb	r3, [r7, #3]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d107      	bne.n	800b552 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b548:	461a      	mov	r2, r3
 800b54a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b54e:	6053      	str	r3, [r2, #4]
 800b550:	e009      	b.n	800b566 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b552:	78fb      	ldrb	r3, [r7, #3]
 800b554:	2b02      	cmp	r3, #2
 800b556:	d106      	bne.n	800b566 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b55e:	461a      	mov	r2, r3
 800b560:	f241 7370 	movw	r3, #6000	; 0x1770
 800b564:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b594:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b59e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b5a4:	2064      	movs	r0, #100	; 0x64
 800b5a6:	f7f8 fd2d 	bl	8004004 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b5b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b5b8:	200a      	movs	r0, #10
 800b5ba:	f7f8 fd23 	bl	8004004 <HAL_Delay>

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b5ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d109      	bne.n	800b60c <USB_DriveVbus+0x44>
 800b5f8:	78fb      	ldrb	r3, [r7, #3]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d106      	bne.n	800b60c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b606:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b60a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b616:	d109      	bne.n	800b62c <USB_DriveVbus+0x64>
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d106      	bne.n	800b62c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b62a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b63a:	b480      	push	{r7}
 800b63c:	b085      	sub	sp, #20
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	0c5b      	lsrs	r3, r3, #17
 800b658:	f003 0303 	and.w	r3, r3, #3
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	b29b      	uxth	r3, r3
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
	...

0800b68c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	4608      	mov	r0, r1
 800b696:	4611      	mov	r1, r2
 800b698:	461a      	mov	r2, r3
 800b69a:	4603      	mov	r3, r0
 800b69c:	70fb      	strb	r3, [r7, #3]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	70bb      	strb	r3, [r7, #2]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b6ae:	78fb      	ldrb	r3, [r7, #3]
 800b6b0:	015a      	lsls	r2, r3, #5
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b6c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d87e      	bhi.n	800b7c8 <USB_HC_Init+0x13c>
 800b6ca:	a201      	add	r2, pc, #4	; (adr r2, 800b6d0 <USB_HC_Init+0x44>)
 800b6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d0:	0800b6e1 	.word	0x0800b6e1
 800b6d4:	0800b78b 	.word	0x0800b78b
 800b6d8:	0800b6e1 	.word	0x0800b6e1
 800b6dc:	0800b74d 	.word	0x0800b74d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b6e0:	78fb      	ldrb	r3, [r7, #3]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	f240 439d 	movw	r3, #1181	; 0x49d
 800b6f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b6f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	da10      	bge.n	800b71e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b6fc:	78fb      	ldrb	r3, [r7, #3]
 800b6fe:	015a      	lsls	r2, r3, #5
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	4413      	add	r3, r2
 800b704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	78fa      	ldrb	r2, [r7, #3]
 800b70c:	0151      	lsls	r1, r2, #5
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	440a      	add	r2, r1
 800b712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b71a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800b71c:	e057      	b.n	800b7ce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b726:	2b00      	cmp	r3, #0
 800b728:	d051      	beq.n	800b7ce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	015a      	lsls	r2, r3, #5
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	4413      	add	r3, r2
 800b732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	78fa      	ldrb	r2, [r7, #3]
 800b73a:	0151      	lsls	r1, r2, #5
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	440a      	add	r2, r1
 800b740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b744:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b748:	60d3      	str	r3, [r2, #12]
      break;
 800b74a:	e040      	b.n	800b7ce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b74c:	78fb      	ldrb	r3, [r7, #3]
 800b74e:	015a      	lsls	r2, r3, #5
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	4413      	add	r3, r2
 800b754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b758:	461a      	mov	r2, r3
 800b75a:	f240 639d 	movw	r3, #1693	; 0x69d
 800b75e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b760:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b764:	2b00      	cmp	r3, #0
 800b766:	da34      	bge.n	800b7d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b768:	78fb      	ldrb	r3, [r7, #3]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	78fa      	ldrb	r2, [r7, #3]
 800b778:	0151      	lsls	r1, r2, #5
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	440a      	add	r2, r1
 800b77e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b786:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b788:	e023      	b.n	800b7d2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b78a:	78fb      	ldrb	r3, [r7, #3]
 800b78c:	015a      	lsls	r2, r3, #5
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	4413      	add	r3, r2
 800b792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b796:	461a      	mov	r2, r3
 800b798:	f240 2325 	movw	r3, #549	; 0x225
 800b79c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b79e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	da17      	bge.n	800b7d6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b7a6:	78fb      	ldrb	r3, [r7, #3]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	78fa      	ldrb	r2, [r7, #3]
 800b7b6:	0151      	lsls	r1, r2, #5
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7c0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b7c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b7c6:	e006      	b.n	800b7d6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b7cc:	e004      	b.n	800b7d8 <USB_HC_Init+0x14c>
      break;
 800b7ce:	bf00      	nop
 800b7d0:	e002      	b.n	800b7d8 <USB_HC_Init+0x14c>
      break;
 800b7d2:	bf00      	nop
 800b7d4:	e000      	b.n	800b7d8 <USB_HC_Init+0x14c>
      break;
 800b7d6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7de:	699a      	ldr	r2, [r3, #24]
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	f003 030f 	and.w	r3, r3, #15
 800b7e6:	2101      	movs	r1, #1
 800b7e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ec:	68b9      	ldr	r1, [r7, #8]
 800b7ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b802:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b806:	2b00      	cmp	r3, #0
 800b808:	da03      	bge.n	800b812 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b80a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b80e:	613b      	str	r3, [r7, #16]
 800b810:	e001      	b.n	800b816 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800b816:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d103      	bne.n	800b826 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b81e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b822:	60fb      	str	r3, [r7, #12]
 800b824:	e001      	b.n	800b82a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b826:	2300      	movs	r3, #0
 800b828:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b82a:	787b      	ldrb	r3, [r7, #1]
 800b82c:	059b      	lsls	r3, r3, #22
 800b82e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b832:	78bb      	ldrb	r3, [r7, #2]
 800b834:	02db      	lsls	r3, r3, #11
 800b836:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b83a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b83c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b840:	049b      	lsls	r3, r3, #18
 800b842:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b846:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b848:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b84a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b84e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b854:	78fb      	ldrb	r3, [r7, #3]
 800b856:	0159      	lsls	r1, r3, #5
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	440b      	add	r3, r1
 800b85c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b860:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b866:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b868:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d10f      	bne.n	800b890 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b870:	78fb      	ldrb	r3, [r7, #3]
 800b872:	015a      	lsls	r2, r3, #5
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	4413      	add	r3, r2
 800b878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	78fa      	ldrb	r2, [r7, #3]
 800b880:	0151      	lsls	r1, r2, #5
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	440a      	add	r2, r1
 800b886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b88a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b88e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b890:	7dfb      	ldrb	r3, [r7, #23]
}
 800b892:	4618      	mov	r0, r3
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop

0800b8a0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08c      	sub	sp, #48	; 0x30
 800b8a4:	af02      	add	r7, sp, #8
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	785b      	ldrb	r3, [r3, #1]
 800b8b6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b8b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8bc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d028      	beq.n	800b91c <USB_HC_StartXfer+0x7c>
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	791b      	ldrb	r3, [r3, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d124      	bne.n	800b91c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10b      	bne.n	800b8f0 <USB_HC_StartXfer+0x50>
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	795b      	ldrb	r3, [r3, #5]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d107      	bne.n	800b8f0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	785b      	ldrb	r3, [r3, #1]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 fa30 	bl	800bd4c <USB_DoPing>
      return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	e114      	b.n	800bb1a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800b8f0:	79fb      	ldrb	r3, [r7, #7]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d112      	bne.n	800b91c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	0151      	lsls	r1, r2, #5
 800b908:	6a3a      	ldr	r2, [r7, #32]
 800b90a:	440a      	add	r2, r1
 800b90c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b910:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b914:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2200      	movs	r2, #0
 800b91a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d018      	beq.n	800b956 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	8912      	ldrh	r2, [r2, #8]
 800b92c:	4413      	add	r3, r2
 800b92e:	3b01      	subs	r3, #1
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	8912      	ldrh	r2, [r2, #8]
 800b934:	fbb3 f3f2 	udiv	r3, r3, r2
 800b938:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b93a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b93c:	8b7b      	ldrh	r3, [r7, #26]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d90b      	bls.n	800b95a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b942:	8b7b      	ldrh	r3, [r7, #26]
 800b944:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b946:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	8912      	ldrh	r2, [r2, #8]
 800b94c:	fb02 f203 	mul.w	r2, r2, r3
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	611a      	str	r2, [r3, #16]
 800b954:	e001      	b.n	800b95a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b956:	2301      	movs	r3, #1
 800b958:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	78db      	ldrb	r3, [r3, #3]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d006      	beq.n	800b970 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b962:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	8912      	ldrh	r2, [r2, #8]
 800b968:	fb02 f203 	mul.w	r2, r2, r3
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b97a:	04d9      	lsls	r1, r3, #19
 800b97c:	4b69      	ldr	r3, [pc, #420]	; (800bb24 <USB_HC_StartXfer+0x284>)
 800b97e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b980:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	7a9b      	ldrb	r3, [r3, #10]
 800b986:	075b      	lsls	r3, r3, #29
 800b988:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b98c:	69f9      	ldr	r1, [r7, #28]
 800b98e:	0148      	lsls	r0, r1, #5
 800b990:	6a39      	ldr	r1, [r7, #32]
 800b992:	4401      	add	r1, r0
 800b994:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b998:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b99a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d009      	beq.n	800b9b6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	68d9      	ldr	r1, [r3, #12]
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9b2:	460a      	mov	r2, r1
 800b9b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	bf0c      	ite	eq
 800b9c6:	2301      	moveq	r3, #1
 800b9c8:	2300      	movne	r3, #0
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	015a      	lsls	r2, r3, #5
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	69fa      	ldr	r2, [r7, #28]
 800b9de:	0151      	lsls	r1, r2, #5
 800b9e0:	6a3a      	ldr	r2, [r7, #32]
 800b9e2:	440a      	add	r2, r1
 800b9e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b9ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	015a      	lsls	r2, r3, #5
 800b9f2:	6a3b      	ldr	r3, [r7, #32]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	7e7b      	ldrb	r3, [r7, #25]
 800b9fe:	075b      	lsls	r3, r3, #29
 800ba00:	69f9      	ldr	r1, [r7, #28]
 800ba02:	0148      	lsls	r0, r1, #5
 800ba04:	6a39      	ldr	r1, [r7, #32]
 800ba06:	4401      	add	r1, r0
 800ba08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	015a      	lsls	r2, r3, #5
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	4413      	add	r3, r2
 800ba18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a42      	ldr	r2, [pc, #264]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba20:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ba22:	4b41      	ldr	r3, [pc, #260]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba2a:	4a3f      	ldr	r2, [pc, #252]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba2c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	78db      	ldrb	r3, [r3, #3]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d006      	beq.n	800ba44 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ba36:	4b3c      	ldr	r3, [pc, #240]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba3e:	4a3a      	ldr	r2, [pc, #232]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba40:	6013      	str	r3, [r2, #0]
 800ba42:	e005      	b.n	800ba50 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ba44:	4b38      	ldr	r3, [pc, #224]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba4c:	4a36      	ldr	r2, [pc, #216]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba4e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ba50:	4b35      	ldr	r3, [pc, #212]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba58:	4a33      	ldr	r2, [pc, #204]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba5a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	015a      	lsls	r2, r3, #5
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	4413      	add	r3, r2
 800ba64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba68:	461a      	mov	r2, r3
 800ba6a:	4b2f      	ldr	r3, [pc, #188]	; (800bb28 <USB_HC_StartXfer+0x288>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ba70:	79fb      	ldrb	r3, [r7, #7]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	e04f      	b.n	800bb1a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	78db      	ldrb	r3, [r3, #3]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d14a      	bne.n	800bb18 <USB_HC_StartXfer+0x278>
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d046      	beq.n	800bb18 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	79db      	ldrb	r3, [r3, #7]
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	d830      	bhi.n	800baf4 <USB_HC_StartXfer+0x254>
 800ba92:	a201      	add	r2, pc, #4	; (adr r2, 800ba98 <USB_HC_StartXfer+0x1f8>)
 800ba94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba98:	0800baa9 	.word	0x0800baa9
 800ba9c:	0800bacd 	.word	0x0800bacd
 800baa0:	0800baa9 	.word	0x0800baa9
 800baa4:	0800bacd 	.word	0x0800bacd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	3303      	adds	r3, #3
 800baae:	089b      	lsrs	r3, r3, #2
 800bab0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bab2:	8afa      	ldrh	r2, [r7, #22]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab8:	b29b      	uxth	r3, r3
 800baba:	429a      	cmp	r2, r3
 800babc:	d91c      	bls.n	800baf8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	f043 0220 	orr.w	r2, r3, #32
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	619a      	str	r2, [r3, #24]
        }
        break;
 800baca:	e015      	b.n	800baf8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	3303      	adds	r3, #3
 800bad2:	089b      	lsrs	r3, r3, #2
 800bad4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bad6:	8afa      	ldrh	r2, [r7, #22]
 800bad8:	6a3b      	ldr	r3, [r7, #32]
 800bada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d90a      	bls.n	800bafc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	699b      	ldr	r3, [r3, #24]
 800baea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	619a      	str	r2, [r3, #24]
        }
        break;
 800baf2:	e003      	b.n	800bafc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800baf4:	bf00      	nop
 800baf6:	e002      	b.n	800bafe <USB_HC_StartXfer+0x25e>
        break;
 800baf8:	bf00      	nop
 800bafa:	e000      	b.n	800bafe <USB_HC_StartXfer+0x25e>
        break;
 800bafc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	68d9      	ldr	r1, [r3, #12]
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	785a      	ldrb	r2, [r3, #1]
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	b298      	uxth	r0, r3
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	4603      	mov	r3, r0
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f7ff fb84 	bl	800b220 <USB_WritePacket>
  }

  return HAL_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3728      	adds	r7, #40	; 0x28
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	1ff80000 	.word	0x1ff80000
 800bb28:	2000057c 	.word	0x2000057c

0800bb2c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb3e:	695b      	ldr	r3, [r3, #20]
 800bb40:	b29b      	uxth	r3, r3
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b087      	sub	sp, #28
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
 800bb56:	460b      	mov	r3, r1
 800bb58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800bb5e:	78fb      	ldrb	r3, [r7, #3]
 800bb60:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bb62:	2300      	movs	r3, #0
 800bb64:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	015a      	lsls	r2, r3, #5
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	0c9b      	lsrs	r3, r3, #18
 800bb76:	f003 0303 	and.w	r3, r3, #3
 800bb7a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d002      	beq.n	800bb88 <USB_HC_Halt+0x3a>
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d16c      	bne.n	800bc62 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	0151      	lsls	r1, r2, #5
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	440a      	add	r2, r1
 800bb9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bba6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d143      	bne.n	800bc3c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	0151      	lsls	r1, r2, #5
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	440a      	add	r2, r1
 800bbca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbd2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	0151      	lsls	r1, r2, #5
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	440a      	add	r2, r1
 800bbea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbf2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	015a      	lsls	r2, r3, #5
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	0151      	lsls	r1, r2, #5
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	440a      	add	r2, r1
 800bc0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc12:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	3301      	adds	r3, #1
 800bc18:	617b      	str	r3, [r7, #20]
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc20:	d81d      	bhi.n	800bc5e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	015a      	lsls	r2, r3, #5
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	4413      	add	r3, r2
 800bc2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc38:	d0ec      	beq.n	800bc14 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bc3a:	e080      	b.n	800bd3e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	015a      	lsls	r2, r3, #5
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	0151      	lsls	r1, r2, #5
 800bc4e:	693a      	ldr	r2, [r7, #16]
 800bc50:	440a      	add	r2, r1
 800bc52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc5a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bc5c:	e06f      	b.n	800bd3e <USB_HC_Halt+0x1f0>
          break;
 800bc5e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bc60:	e06d      	b.n	800bd3e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	015a      	lsls	r2, r3, #5
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	4413      	add	r3, r2
 800bc6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	0151      	lsls	r1, r2, #5
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	440a      	add	r2, r1
 800bc78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc80:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d143      	bne.n	800bd1a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	0151      	lsls	r1, r2, #5
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	440a      	add	r2, r1
 800bca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcb0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	015a      	lsls	r2, r3, #5
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	0151      	lsls	r1, r2, #5
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	440a      	add	r2, r1
 800bcc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcd0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	015a      	lsls	r2, r3, #5
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	0151      	lsls	r1, r2, #5
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	440a      	add	r2, r1
 800bce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bcf0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	617b      	str	r3, [r7, #20]
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcfe:	d81d      	bhi.n	800bd3c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd16:	d0ec      	beq.n	800bcf2 <USB_HC_Halt+0x1a4>
 800bd18:	e011      	b.n	800bd3e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	015a      	lsls	r2, r3, #5
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	4413      	add	r3, r2
 800bd22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	0151      	lsls	r1, r2, #5
 800bd2c:	693a      	ldr	r2, [r7, #16]
 800bd2e:	440a      	add	r2, r1
 800bd30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	e000      	b.n	800bd3e <USB_HC_Halt+0x1f0>
          break;
 800bd3c:	bf00      	nop
    }
  }

  return HAL_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	371c      	adds	r7, #28
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bd5c:	78fb      	ldrb	r3, [r7, #3]
 800bd5e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bd60:	2301      	movs	r3, #1
 800bd62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	04da      	lsls	r2, r3, #19
 800bd68:	4b15      	ldr	r3, [pc, #84]	; (800bdc0 <USB_DoPing+0x74>)
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	0151      	lsls	r1, r2, #5
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	440a      	add	r2, r1
 800bd74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd7c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	015a      	lsls	r2, r3, #5
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	4413      	add	r3, r2
 800bd86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd94:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd9c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	015a      	lsls	r2, r3, #5
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	4413      	add	r3, r2
 800bda6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdaa:	461a      	mov	r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	371c      	adds	r7, #28
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	1ff80000 	.word	0x1ff80000

0800bdc4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7ff f9a0 	bl	800b11a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800bdda:	2110      	movs	r1, #16
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f7ff f9d7 	bl	800b190 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7ff f9fa 	bl	800b1dc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]
 800bdec:	e01f      	b.n	800be2e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	015a      	lsls	r2, r3, #5
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be04:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be14:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	015a      	lsls	r2, r3, #5
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	4413      	add	r3, r2
 800be1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be22:	461a      	mov	r2, r3
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	3301      	adds	r3, #1
 800be2c:	613b      	str	r3, [r7, #16]
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2b0f      	cmp	r3, #15
 800be32:	d9dc      	bls.n	800bdee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800be34:	2300      	movs	r3, #0
 800be36:	613b      	str	r3, [r7, #16]
 800be38:	e034      	b.n	800bea4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	4413      	add	r3, r2
 800be42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be50:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be58:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be60:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	015a      	lsls	r2, r3, #5
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	4413      	add	r3, r2
 800be6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be6e:	461a      	mov	r2, r3
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	3301      	adds	r3, #1
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be80:	d80c      	bhi.n	800be9c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	015a      	lsls	r2, r3, #5
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4413      	add	r3, r2
 800be8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be98:	d0ec      	beq.n	800be74 <USB_StopHost+0xb0>
 800be9a:	e000      	b.n	800be9e <USB_StopHost+0xda>
        break;
 800be9c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	3301      	adds	r3, #1
 800bea2:	613b      	str	r3, [r7, #16]
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	2b0f      	cmp	r3, #15
 800bea8:	d9c7      	bls.n	800be3a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beb0:	461a      	mov	r2, r3
 800beb2:	f04f 33ff 	mov.w	r3, #4294967295
 800beb6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f04f 32ff 	mov.w	r2, #4294967295
 800bebe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff f919 	bl	800b0f8 <USB_EnableGlobalInt>

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bed0:	b590      	push	{r4, r7, lr}
 800bed2:	b089      	sub	sp, #36	; 0x24
 800bed4:	af04      	add	r7, sp, #16
 800bed6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bed8:	2301      	movs	r3, #1
 800beda:	2202      	movs	r2, #2
 800bedc:	2102      	movs	r1, #2
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fcba 	bl	800c858 <USBH_FindInterface>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	2bff      	cmp	r3, #255	; 0xff
 800beec:	d002      	beq.n	800bef4 <USBH_CDC_InterfaceInit+0x24>
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d901      	bls.n	800bef8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bef4:	2302      	movs	r3, #2
 800bef6:	e13d      	b.n	800c174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fc8f 	bl	800c820 <USBH_SelectInterface>
 800bf02:	4603      	mov	r3, r0
 800bf04:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bf06:	7bbb      	ldrb	r3, [r7, #14]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	e131      	b.n	800c174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bf16:	2050      	movs	r0, #80	; 0x50
 800bf18:	f004 fee0 	bl	8010cdc <malloc>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf26:	69db      	ldr	r3, [r3, #28]
 800bf28:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bf30:	2302      	movs	r3, #2
 800bf32:	e11f      	b.n	800c174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bf34:	2250      	movs	r2, #80	; 0x50
 800bf36:	2100      	movs	r1, #0
 800bf38:	68b8      	ldr	r0, [r7, #8]
 800bf3a:	f004 feea 	bl	8010d12 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	211a      	movs	r1, #26
 800bf44:	fb01 f303 	mul.w	r3, r1, r3
 800bf48:	4413      	add	r3, r2
 800bf4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	b25b      	sxtb	r3, r3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	da15      	bge.n	800bf82 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	211a      	movs	r1, #26
 800bf5c:	fb01 f303 	mul.w	r3, r1, r3
 800bf60:	4413      	add	r3, r2
 800bf62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bf66:	781a      	ldrb	r2, [r3, #0]
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	211a      	movs	r1, #26
 800bf72:	fb01 f303 	mul.w	r3, r1, r3
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bf7c:	881a      	ldrh	r2, [r3, #0]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	785b      	ldrb	r3, [r3, #1]
 800bf86:	4619      	mov	r1, r3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f002 f894 	bl	800e0b6 <USBH_AllocPipe>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	461a      	mov	r2, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	7819      	ldrb	r1, [r3, #0]
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	7858      	ldrb	r0, [r3, #1]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	8952      	ldrh	r2, [r2, #10]
 800bfae:	9202      	str	r2, [sp, #8]
 800bfb0:	2203      	movs	r2, #3
 800bfb2:	9201      	str	r2, [sp, #4]
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	4623      	mov	r3, r4
 800bfb8:	4602      	mov	r2, r0
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f002 f84c 	bl	800e058 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f004 fdbd 	bl	8010b48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bfce:	2300      	movs	r3, #0
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	210a      	movs	r1, #10
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 fc3f 	bl	800c858 <USBH_FindInterface>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
 800bfe0:	2bff      	cmp	r3, #255	; 0xff
 800bfe2:	d002      	beq.n	800bfea <USBH_CDC_InterfaceInit+0x11a>
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d901      	bls.n	800bfee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bfea:	2302      	movs	r3, #2
 800bfec:	e0c2      	b.n	800c174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	211a      	movs	r1, #26
 800bff4:	fb01 f303 	mul.w	r3, r1, r3
 800bff8:	4413      	add	r3, r2
 800bffa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	b25b      	sxtb	r3, r3
 800c002:	2b00      	cmp	r3, #0
 800c004:	da16      	bge.n	800c034 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c006:	7bfb      	ldrb	r3, [r7, #15]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	211a      	movs	r1, #26
 800c00c:	fb01 f303 	mul.w	r3, r1, r3
 800c010:	4413      	add	r3, r2
 800c012:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c016:	781a      	ldrb	r2, [r3, #0]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	211a      	movs	r1, #26
 800c022:	fb01 f303 	mul.w	r3, r1, r3
 800c026:	4413      	add	r3, r2
 800c028:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c02c:	881a      	ldrh	r2, [r3, #0]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	835a      	strh	r2, [r3, #26]
 800c032:	e015      	b.n	800c060 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c034:	7bfb      	ldrb	r3, [r7, #15]
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	211a      	movs	r1, #26
 800c03a:	fb01 f303 	mul.w	r3, r1, r3
 800c03e:	4413      	add	r3, r2
 800c040:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c044:	781a      	ldrb	r2, [r3, #0]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	211a      	movs	r1, #26
 800c050:	fb01 f303 	mul.w	r3, r1, r3
 800c054:	4413      	add	r3, r2
 800c056:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c05a:	881a      	ldrh	r2, [r3, #0]
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c060:	7bfb      	ldrb	r3, [r7, #15]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	211a      	movs	r1, #26
 800c066:	fb01 f303 	mul.w	r3, r1, r3
 800c06a:	4413      	add	r3, r2
 800c06c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	b25b      	sxtb	r3, r3
 800c074:	2b00      	cmp	r3, #0
 800c076:	da16      	bge.n	800c0a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c078:	7bfb      	ldrb	r3, [r7, #15]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	211a      	movs	r1, #26
 800c07e:	fb01 f303 	mul.w	r3, r1, r3
 800c082:	4413      	add	r3, r2
 800c084:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c088:	781a      	ldrb	r2, [r3, #0]
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	211a      	movs	r1, #26
 800c094:	fb01 f303 	mul.w	r3, r1, r3
 800c098:	4413      	add	r3, r2
 800c09a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c09e:	881a      	ldrh	r2, [r3, #0]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	835a      	strh	r2, [r3, #26]
 800c0a4:	e015      	b.n	800c0d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c0a6:	7bfb      	ldrb	r3, [r7, #15]
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	211a      	movs	r1, #26
 800c0ac:	fb01 f303 	mul.w	r3, r1, r3
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c0b6:	781a      	ldrb	r2, [r3, #0]
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	211a      	movs	r1, #26
 800c0c2:	fb01 f303 	mul.w	r3, r1, r3
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c0cc:	881a      	ldrh	r2, [r3, #0]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	7b9b      	ldrb	r3, [r3, #14]
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f001 ffec 	bl	800e0b6 <USBH_AllocPipe>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	7bdb      	ldrb	r3, [r3, #15]
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f001 ffe2 	bl	800e0b6 <USBH_AllocPipe>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	7b59      	ldrb	r1, [r3, #13]
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	7b98      	ldrb	r0, [r3, #14]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	8b12      	ldrh	r2, [r2, #24]
 800c112:	9202      	str	r2, [sp, #8]
 800c114:	2202      	movs	r2, #2
 800c116:	9201      	str	r2, [sp, #4]
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	4623      	mov	r3, r4
 800c11c:	4602      	mov	r2, r0
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f001 ff9a 	bl	800e058 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	7b19      	ldrb	r1, [r3, #12]
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	7bd8      	ldrb	r0, [r3, #15]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	8b52      	ldrh	r2, [r2, #26]
 800c13c:	9202      	str	r2, [sp, #8]
 800c13e:	2202      	movs	r2, #2
 800c140:	9201      	str	r2, [sp, #4]
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	4623      	mov	r3, r4
 800c146:	4602      	mov	r2, r0
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f001 ff85 	bl	800e058 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	7b5b      	ldrb	r3, [r3, #13]
 800c15a:	2200      	movs	r2, #0
 800c15c:	4619      	mov	r1, r3
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f004 fcf2 	bl	8010b48 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	7b1b      	ldrb	r3, [r3, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f004 fceb 	bl	8010b48 <USBH_LL_SetToggle>

  return USBH_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3714      	adds	r7, #20
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd90      	pop	{r4, r7, pc}

0800c17c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00e      	beq.n	800c1b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f001 ff7a 	bl	800e096 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 ffa5 	bl	800e0f8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	7b1b      	ldrb	r3, [r3, #12]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00e      	beq.n	800c1da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	7b1b      	ldrb	r3, [r3, #12]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f001 ff67 	bl	800e096 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	7b1b      	ldrb	r3, [r3, #12]
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f001 ff92 	bl	800e0f8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	7b5b      	ldrb	r3, [r3, #13]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00e      	beq.n	800c200 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	7b5b      	ldrb	r3, [r3, #13]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 ff54 	bl	800e096 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	7b5b      	ldrb	r3, [r3, #13]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 ff7f 	bl	800e0f8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c206:	69db      	ldr	r3, [r3, #28]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00b      	beq.n	800c224 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c212:	69db      	ldr	r3, [r3, #28]
 800c214:	4618      	mov	r0, r3
 800c216:	f004 fd69 	bl	8010cec <free>
    phost->pActiveClass->pData = 0U;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c220:	2200      	movs	r2, #0
 800c222:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b084      	sub	sp, #16
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3340      	adds	r3, #64	; 0x40
 800c244:	4619      	mov	r1, r3
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f8b1 	bl	800c3ae <GetLineCoding>
 800c24c:	4603      	mov	r3, r0
 800c24e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c250:	7afb      	ldrb	r3, [r7, #11]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d105      	bne.n	800c262 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c25c:	2102      	movs	r1, #2
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c262:	7afb      	ldrb	r3, [r7, #11]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c274:	2301      	movs	r3, #1
 800c276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c278:	2300      	movs	r3, #0
 800c27a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c282:	69db      	ldr	r3, [r3, #28]
 800c284:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c28c:	2b04      	cmp	r3, #4
 800c28e:	d877      	bhi.n	800c380 <USBH_CDC_Process+0x114>
 800c290:	a201      	add	r2, pc, #4	; (adr r2, 800c298 <USBH_CDC_Process+0x2c>)
 800c292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c296:	bf00      	nop
 800c298:	0800c2ad 	.word	0x0800c2ad
 800c29c:	0800c2b3 	.word	0x0800c2b3
 800c2a0:	0800c2e3 	.word	0x0800c2e3
 800c2a4:	0800c357 	.word	0x0800c357
 800c2a8:	0800c365 	.word	0x0800c365
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c2b0:	e06d      	b.n	800c38e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f897 	bl	800c3ec <SetLineCoding>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c2c2:	7bbb      	ldrb	r3, [r7, #14]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d104      	bne.n	800c2d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c2d0:	e058      	b.n	800c384 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d055      	beq.n	800c384 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2204      	movs	r2, #4
 800c2dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c2e0:	e050      	b.n	800c384 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	3340      	adds	r3, #64	; 0x40
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f860 	bl	800c3ae <GetLineCoding>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c2f2:	7bbb      	ldrb	r3, [r7, #14]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d126      	bne.n	800c346 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c30a:	791b      	ldrb	r3, [r3, #4]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d13b      	bne.n	800c388 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c31a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d133      	bne.n	800c388 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c32a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d12b      	bne.n	800c388 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c338:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d124      	bne.n	800c388 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f984 	bl	800c64c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c344:	e020      	b.n	800c388 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c346:	7bbb      	ldrb	r3, [r7, #14]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d01d      	beq.n	800c388 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2204      	movs	r2, #4
 800c350:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c354:	e018      	b.n	800c388 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f867 	bl	800c42a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f8f8 	bl	800c552 <CDC_ProcessReception>
      break;
 800c362:	e014      	b.n	800c38e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c364:	2100      	movs	r1, #0
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f001 f953 	bl	800d612 <USBH_ClrFeature>
 800c36c:	4603      	mov	r3, r0
 800c36e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c370:	7bbb      	ldrb	r3, [r7, #14]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10a      	bne.n	800c38c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c37e:	e005      	b.n	800c38c <USBH_CDC_Process+0x120>

    default:
      break;
 800c380:	bf00      	nop
 800c382:	e004      	b.n	800c38e <USBH_CDC_Process+0x122>
      break;
 800c384:	bf00      	nop
 800c386:	e002      	b.n	800c38e <USBH_CDC_Process+0x122>
      break;
 800c388:	bf00      	nop
 800c38a:	e000      	b.n	800c38e <USBH_CDC_Process+0x122>
      break;
 800c38c:	bf00      	nop

  }

  return status;
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	22a1      	movs	r2, #161	; 0xa1
 800c3bc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2221      	movs	r2, #33	; 0x21
 800c3c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2207      	movs	r2, #7
 800c3d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2207      	movs	r2, #7
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f001 faf8 	bl	800d9d2 <USBH_CtlReq>
 800c3e2:	4603      	mov	r3, r0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2221      	movs	r2, #33	; 0x21
 800c3fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2220      	movs	r2, #32
 800c400:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2207      	movs	r2, #7
 800c412:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	2207      	movs	r2, #7
 800c418:	4619      	mov	r1, r3
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f001 fad9 	bl	800d9d2 <USBH_CtlReq>
 800c420:	4603      	mov	r3, r0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b086      	sub	sp, #24
 800c42e:	af02      	add	r7, sp, #8
 800c430:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c43c:	2300      	movs	r3, #0
 800c43e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c446:	2b01      	cmp	r3, #1
 800c448:	d002      	beq.n	800c450 <CDC_ProcessTransmission+0x26>
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d025      	beq.n	800c49a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800c44e:	e07c      	b.n	800c54a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	8b12      	ldrh	r2, [r2, #24]
 800c458:	4293      	cmp	r3, r2
 800c45a:	d90c      	bls.n	800c476 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	69d9      	ldr	r1, [r3, #28]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	8b1a      	ldrh	r2, [r3, #24]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	7b58      	ldrb	r0, [r3, #13]
 800c468:	2301      	movs	r3, #1
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	4603      	mov	r3, r0
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f001 fdaf 	bl	800dfd2 <USBH_BulkSendData>
 800c474:	e00c      	b.n	800c490 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c47e:	b29a      	uxth	r2, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	7b58      	ldrb	r0, [r3, #13]
 800c484:	2301      	movs	r3, #1
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	4603      	mov	r3, r0
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f001 fda1 	bl	800dfd2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2202      	movs	r2, #2
 800c494:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c498:	e057      	b.n	800c54a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	7b5b      	ldrb	r3, [r3, #13]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f004 fb27 	bl	8010af4 <USBH_LL_GetURBState>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c4aa:	7afb      	ldrb	r3, [r7, #11]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d136      	bne.n	800c51e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	8b12      	ldrh	r2, [r2, #24]
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d90e      	bls.n	800c4da <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	8b12      	ldrh	r2, [r2, #24]
 800c4c4:	1a9a      	subs	r2, r3, r2
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	69db      	ldr	r3, [r3, #28]
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	8b12      	ldrh	r2, [r2, #24]
 800c4d2:	441a      	add	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	61da      	str	r2, [r3, #28]
 800c4d8:	e002      	b.n	800c4e0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d004      	beq.n	800c4f2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c4f0:	e006      	b.n	800c500 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f892 	bl	800c624 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2204      	movs	r2, #4
 800c504:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c514:	2200      	movs	r2, #0
 800c516:	4619      	mov	r1, r3
 800c518:	f001 feea 	bl	800e2f0 <osMessagePut>
      break;
 800c51c:	e014      	b.n	800c548 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800c51e:	7afb      	ldrb	r3, [r7, #11]
 800c520:	2b02      	cmp	r3, #2
 800c522:	d111      	bne.n	800c548 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2204      	movs	r2, #4
 800c530:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c540:	2200      	movs	r2, #0
 800c542:	4619      	mov	r1, r3
 800c544:	f001 fed4 	bl	800e2f0 <osMessagePut>
      break;
 800c548:	bf00      	nop
  }
}
 800c54a:	bf00      	nop
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b086      	sub	sp, #24
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c560:	69db      	ldr	r3, [r3, #28]
 800c562:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c564:	2300      	movs	r3, #0
 800c566:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c56e:	2b03      	cmp	r3, #3
 800c570:	d002      	beq.n	800c578 <CDC_ProcessReception+0x26>
 800c572:	2b04      	cmp	r3, #4
 800c574:	d00e      	beq.n	800c594 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c576:	e051      	b.n	800c61c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	6a19      	ldr	r1, [r3, #32]
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	8b5a      	ldrh	r2, [r3, #26]
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	7b1b      	ldrb	r3, [r3, #12]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f001 fd49 	bl	800e01c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	2204      	movs	r2, #4
 800c58e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c592:	e043      	b.n	800c61c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	7b1b      	ldrb	r3, [r3, #12]
 800c598:	4619      	mov	r1, r3
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f004 faaa 	bl	8010af4 <USBH_LL_GetURBState>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c5a4:	7cfb      	ldrb	r3, [r7, #19]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d137      	bne.n	800c61a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	7b1b      	ldrb	r3, [r3, #12]
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f004 fa0d 	bl	80109d0 <USBH_LL_GetLastXferSize>
 800c5b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d016      	beq.n	800c5f0 <CDC_ProcessReception+0x9e>
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	8b5b      	ldrh	r3, [r3, #26]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d910      	bls.n	800c5f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	1ad2      	subs	r2, r2, r3
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	6a1a      	ldr	r2, [r3, #32]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	441a      	add	r2, r3
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	2203      	movs	r2, #3
 800c5ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c5ee:	e006      	b.n	800c5fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f81d 	bl	800c638 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2204      	movs	r2, #4
 800c602:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c612:	2200      	movs	r2, #0
 800c614:	4619      	mov	r1, r3
 800c616:	f001 fe6b 	bl	800e2f0 <osMessagePut>
      break;
 800c61a:	bf00      	nop
  }
}
 800c61c:	bf00      	nop
 800c61e:	3718      	adds	r7, #24
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c660:	b5b0      	push	{r4, r5, r7, lr}
 800c662:	b090      	sub	sp, #64	; 0x40
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	4613      	mov	r3, r2
 800c66c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c674:	2302      	movs	r3, #2
 800c676:	e04d      	b.n	800c714 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	79fa      	ldrb	r2, [r7, #7]
 800c67c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f000 f847 	bl	800c724 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800c6c4:	4b15      	ldr	r3, [pc, #84]	; (800c71c <USBH_Init+0xbc>)
 800c6c6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800c6ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800c6d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f001 fde1 	bl	800e29e <osMessageCreate>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <USBH_Init+0xc0>)
 800c6e6:	f107 0414 	add.w	r4, r7, #20
 800c6ea:	461d      	mov	r5, r3
 800c6ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c6f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800c6f8:	f107 0314 	add.w	r3, r7, #20
 800c6fc:	68f9      	ldr	r1, [r7, #12]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f001 fd6d 	bl	800e1de <osThreadCreate>
 800c704:	4602      	mov	r2, r0
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f004 f8a3 	bl	8010858 <USBH_LL_Init>

  return USBH_OK;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3740      	adds	r7, #64	; 0x40
 800c718:	46bd      	mov	sp, r7
 800c71a:	bdb0      	pop	{r4, r5, r7, pc}
 800c71c:	08010fe4 	.word	0x08010fe4
 800c720:	08011000 	.word	0x08011000

0800c724 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c724:	b480      	push	{r7}
 800c726:	b085      	sub	sp, #20
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c72c:	2300      	movs	r3, #0
 800c72e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c730:	2300      	movs	r3, #0
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	e009      	b.n	800c74a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	33e0      	adds	r3, #224	; 0xe0
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	2200      	movs	r2, #0
 800c742:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	3301      	adds	r3, #1
 800c748:	60fb      	str	r3, [r7, #12]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2b0e      	cmp	r3, #14
 800c74e:	d9f2      	bls.n	800c736 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c750:	2300      	movs	r3, #0
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	e009      	b.n	800c76a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c760:	2200      	movs	r2, #0
 800c762:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	3301      	adds	r3, #1
 800c768:	60fb      	str	r3, [r7, #12]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c770:	d3f1      	bcc.n	800c756 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2240      	movs	r2, #64	; 0x40
 800c796:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d016      	beq.n	800c80e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10e      	bne.n	800c808 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c7f0:	1c59      	adds	r1, r3, #1
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	33de      	adds	r3, #222	; 0xde
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	73fb      	strb	r3, [r7, #15]
 800c806:	e004      	b.n	800c812 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c808:	2302      	movs	r3, #2
 800c80a:	73fb      	strb	r3, [r7, #15]
 800c80c:	e001      	b.n	800c812 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c80e:	2302      	movs	r3, #2
 800c810:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c812:	7bfb      	ldrb	r3, [r7, #15]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	460b      	mov	r3, r1
 800c82a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c836:	78fa      	ldrb	r2, [r7, #3]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d204      	bcs.n	800c846 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c844:	e001      	b.n	800c84a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c846:	2302      	movs	r3, #2
 800c848:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c858:	b480      	push	{r7}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	4608      	mov	r0, r1
 800c862:	4611      	mov	r1, r2
 800c864:	461a      	mov	r2, r3
 800c866:	4603      	mov	r3, r0
 800c868:	70fb      	strb	r3, [r7, #3]
 800c86a:	460b      	mov	r3, r1
 800c86c:	70bb      	strb	r3, [r7, #2]
 800c86e:	4613      	mov	r3, r2
 800c870:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c876:	2300      	movs	r3, #0
 800c878:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c880:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c882:	e025      	b.n	800c8d0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c884:	7dfb      	ldrb	r3, [r7, #23]
 800c886:	221a      	movs	r2, #26
 800c888:	fb02 f303 	mul.w	r3, r2, r3
 800c88c:	3308      	adds	r3, #8
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	4413      	add	r3, r2
 800c892:	3302      	adds	r3, #2
 800c894:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	795b      	ldrb	r3, [r3, #5]
 800c89a:	78fa      	ldrb	r2, [r7, #3]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d002      	beq.n	800c8a6 <USBH_FindInterface+0x4e>
 800c8a0:	78fb      	ldrb	r3, [r7, #3]
 800c8a2:	2bff      	cmp	r3, #255	; 0xff
 800c8a4:	d111      	bne.n	800c8ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c8aa:	78ba      	ldrb	r2, [r7, #2]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d002      	beq.n	800c8b6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8b0:	78bb      	ldrb	r3, [r7, #2]
 800c8b2:	2bff      	cmp	r3, #255	; 0xff
 800c8b4:	d109      	bne.n	800c8ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8ba:	787a      	ldrb	r2, [r7, #1]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d002      	beq.n	800c8c6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c8c0:	787b      	ldrb	r3, [r7, #1]
 800c8c2:	2bff      	cmp	r3, #255	; 0xff
 800c8c4:	d101      	bne.n	800c8ca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	e006      	b.n	800c8d8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d9d6      	bls.n	800c884 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c8d6:	23ff      	movs	r3, #255	; 0xff
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	371c      	adds	r7, #28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f003 fff9 	bl	80108e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c8f2:	2101      	movs	r1, #1
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f004 f910 	bl	8010b1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b088      	sub	sp, #32
 800c908:	af04      	add	r7, sp, #16
 800c90a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c90c:	2302      	movs	r3, #2
 800c90e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c910:	2300      	movs	r3, #0
 800c912:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d102      	bne.n	800c926 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2203      	movs	r2, #3
 800c924:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b0b      	cmp	r3, #11
 800c92e:	f200 823c 	bhi.w	800cdaa <USBH_Process+0x4a6>
 800c932:	a201      	add	r2, pc, #4	; (adr r2, 800c938 <USBH_Process+0x34>)
 800c934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c938:	0800c969 	.word	0x0800c969
 800c93c:	0800c9b7 	.word	0x0800c9b7
 800c940:	0800ca3b 	.word	0x0800ca3b
 800c944:	0800cd29 	.word	0x0800cd29
 800c948:	0800cdab 	.word	0x0800cdab
 800c94c:	0800cafb 	.word	0x0800cafb
 800c950:	0800ccb3 	.word	0x0800ccb3
 800c954:	0800cb4d 	.word	0x0800cb4d
 800c958:	0800cb89 	.word	0x0800cb89
 800c95c:	0800cbc3 	.word	0x0800cbc3
 800c960:	0800cc0b 	.word	0x0800cc0b
 800c964:	0800cd11 	.word	0x0800cd11
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	2b00      	cmp	r3, #0
 800c972:	f000 821c 	beq.w	800cdae <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c97c:	20c8      	movs	r0, #200	; 0xc8
 800c97e:	f004 f916 	bl	8010bae <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f004 f809 	bl	801099a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	f001 fc9e 	bl	800e2f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c9b4:	e1fb      	b.n	800cdae <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d107      	bne.n	800c9d0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	701a      	strb	r2, [r3, #0]
 800c9ce:	e025      	b.n	800ca1c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c9d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9da:	d914      	bls.n	800ca06 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c9f2:	2b03      	cmp	r3, #3
 800c9f4:	d903      	bls.n	800c9fe <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	220d      	movs	r2, #13
 800c9fa:	701a      	strb	r2, [r3, #0]
 800c9fc:	e00e      	b.n	800ca1c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	701a      	strb	r2, [r3, #0]
 800ca04:	e00a      	b.n	800ca1c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ca0c:	f103 020a 	add.w	r2, r3, #10
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ca16:	200a      	movs	r0, #10
 800ca18:	f004 f8c9 	bl	8010bae <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca30:	2200      	movs	r2, #0
 800ca32:	4619      	mov	r1, r3
 800ca34:	f001 fc5c 	bl	800e2f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca38:	e1c0      	b.n	800cdbc <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d005      	beq.n	800ca50 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca4a:	2104      	movs	r1, #4
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ca50:	2064      	movs	r0, #100	; 0x64
 800ca52:	f004 f8ac 	bl	8010bae <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f003 ff7a 	bl	8010950 <USBH_LL_GetSpeed>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	461a      	mov	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2205      	movs	r2, #5
 800ca6a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f001 fb21 	bl	800e0b6 <USBH_AllocPipe>
 800ca74:	4603      	mov	r3, r0
 800ca76:	461a      	mov	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ca7c:	2180      	movs	r1, #128	; 0x80
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f001 fb19 	bl	800e0b6 <USBH_AllocPipe>
 800ca84:	4603      	mov	r3, r0
 800ca86:	461a      	mov	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	7919      	ldrb	r1, [r3, #4]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800caa0:	b292      	uxth	r2, r2
 800caa2:	9202      	str	r2, [sp, #8]
 800caa4:	2200      	movs	r2, #0
 800caa6:	9201      	str	r2, [sp, #4]
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	4603      	mov	r3, r0
 800caac:	2280      	movs	r2, #128	; 0x80
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f001 fad2 	bl	800e058 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	7959      	ldrb	r1, [r3, #5]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cac8:	b292      	uxth	r2, r2
 800caca:	9202      	str	r2, [sp, #8]
 800cacc:	2200      	movs	r2, #0
 800cace:	9201      	str	r2, [sp, #4]
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	4603      	mov	r3, r0
 800cad4:	2200      	movs	r2, #0
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f001 fabe 	bl	800e058 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800caf0:	2200      	movs	r2, #0
 800caf2:	4619      	mov	r1, r3
 800caf4:	f001 fbfc 	bl	800e2f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800caf8:	e160      	b.n	800cdbc <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f964 	bl	800cdc8 <USBH_HandleEnum>
 800cb00:	4603      	mov	r3, r0
 800cb02:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f040 8152 	bne.w	800cdb2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d103      	bne.n	800cb28 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2208      	movs	r2, #8
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	e002      	b.n	800cb2e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2207      	movs	r2, #7
 800cb2c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2205      	movs	r2, #5
 800cb32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb42:	2200      	movs	r2, #0
 800cb44:	4619      	mov	r1, r3
 800cb46:	f001 fbd3 	bl	800e2f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cb4a:	e132      	b.n	800cdb2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f000 812f 	beq.w	800cdb6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb5e:	2101      	movs	r1, #1
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2208      	movs	r2, #8
 800cb68:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2205      	movs	r2, #5
 800cb6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb7e:	2200      	movs	r2, #0
 800cb80:	4619      	mov	r1, r3
 800cb82:	f001 fbb5 	bl	800e2f0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cb86:	e116      	b.n	800cdb6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	4619      	mov	r1, r3
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fcf6 	bl	800d584 <USBH_SetCfg>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d102      	bne.n	800cba4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2209      	movs	r2, #9
 800cba2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2201      	movs	r2, #1
 800cba8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbb8:	2200      	movs	r2, #0
 800cbba:	4619      	mov	r1, r3
 800cbbc:	f001 fb98 	bl	800e2f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cbc0:	e0fc      	b.n	800cdbc <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800cbc8:	f003 0320 	and.w	r3, r3, #32
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00a      	beq.n	800cbe6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cbd0:	2101      	movs	r1, #1
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fcf9 	bl	800d5ca <USBH_SetFeature>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d106      	bne.n	800cbec <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	220a      	movs	r2, #10
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	e002      	b.n	800cbec <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	220a      	movs	r2, #10
 800cbea:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc00:	2200      	movs	r2, #0
 800cc02:	4619      	mov	r1, r3
 800cc04:	f001 fb74 	bl	800e2f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cc08:	e0d8      	b.n	800cdbc <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d03f      	beq.n	800cc94 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	73fb      	strb	r3, [r7, #15]
 800cc20:	e016      	b.n	800cc50 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cc22:	7bfa      	ldrb	r2, [r7, #15]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	32de      	adds	r2, #222	; 0xde
 800cc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2c:	791a      	ldrb	r2, [r3, #4]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d108      	bne.n	800cc4a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cc38:	7bfa      	ldrb	r2, [r7, #15]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	32de      	adds	r2, #222	; 0xde
 800cc3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cc48:	e005      	b.n	800cc56 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc4a:	7bfb      	ldrb	r3, [r7, #15]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	73fb      	strb	r3, [r7, #15]
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d0e5      	beq.n	800cc22 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d016      	beq.n	800cc8e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	4798      	blx	r3
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d109      	bne.n	800cc86 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2206      	movs	r2, #6
 800cc76:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc7e:	2103      	movs	r1, #3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	4798      	blx	r3
 800cc84:	e006      	b.n	800cc94 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	220d      	movs	r2, #13
 800cc8a:	701a      	strb	r2, [r3, #0]
 800cc8c:	e002      	b.n	800cc94 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	220d      	movs	r2, #13
 800cc92:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2205      	movs	r2, #5
 800cc98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cca8:	2200      	movs	r2, #0
 800ccaa:	4619      	mov	r1, r3
 800ccac:	f001 fb20 	bl	800e2f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ccb0:	e084      	b.n	800cdbc <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d017      	beq.n	800ccec <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	4798      	blx	r3
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cccc:	7bbb      	ldrb	r3, [r7, #14]
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d103      	bne.n	800ccdc <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	220b      	movs	r2, #11
 800ccd8:	701a      	strb	r2, [r3, #0]
 800ccda:	e00a      	b.n	800ccf2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d106      	bne.n	800ccf2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	220d      	movs	r2, #13
 800cce8:	701a      	strb	r2, [r3, #0]
 800ccea:	e002      	b.n	800ccf2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	220d      	movs	r2, #13
 800ccf0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2205      	movs	r2, #5
 800ccf6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd06:	2200      	movs	r2, #0
 800cd08:	4619      	mov	r1, r3
 800cd0a:	f001 faf1 	bl	800e2f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cd0e:	e055      	b.n	800cdbc <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d04f      	beq.n	800cdba <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd20:	695b      	ldr	r3, [r3, #20]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	4798      	blx	r3
      }
      break;
 800cd26:	e048      	b.n	800cdba <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7ff fcf7 	bl	800c724 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d009      	beq.n	800cd54 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d005      	beq.n	800cd6a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd64:	2105      	movs	r1, #5
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d107      	bne.n	800cd86 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7ff fdb0 	bl	800c8e4 <USBH_Start>
 800cd84:	e002      	b.n	800cd8c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f003 fdac 	bl	80108e4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cda0:	2200      	movs	r2, #0
 800cda2:	4619      	mov	r1, r3
 800cda4:	f001 faa4 	bl	800e2f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cda8:	e008      	b.n	800cdbc <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800cdaa:	bf00      	nop
 800cdac:	e006      	b.n	800cdbc <USBH_Process+0x4b8>
      break;
 800cdae:	bf00      	nop
 800cdb0:	e004      	b.n	800cdbc <USBH_Process+0x4b8>
      break;
 800cdb2:	bf00      	nop
 800cdb4:	e002      	b.n	800cdbc <USBH_Process+0x4b8>
    break;
 800cdb6:	bf00      	nop
 800cdb8:	e000      	b.n	800cdbc <USBH_Process+0x4b8>
      break;
 800cdba:	bf00      	nop
  }
  return USBH_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop

0800cdc8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b088      	sub	sp, #32
 800cdcc:	af04      	add	r7, sp, #16
 800cdce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b07      	cmp	r3, #7
 800cdde:	f200 8208 	bhi.w	800d1f2 <USBH_HandleEnum+0x42a>
 800cde2:	a201      	add	r2, pc, #4	; (adr r2, 800cde8 <USBH_HandleEnum+0x20>)
 800cde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde8:	0800ce09 	.word	0x0800ce09
 800cdec:	0800cec7 	.word	0x0800cec7
 800cdf0:	0800cf31 	.word	0x0800cf31
 800cdf4:	0800cfbf 	.word	0x0800cfbf
 800cdf8:	0800d029 	.word	0x0800d029
 800cdfc:	0800d099 	.word	0x0800d099
 800ce00:	0800d135 	.word	0x0800d135
 800ce04:	0800d1b3 	.word	0x0800d1b3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ce08:	2108      	movs	r1, #8
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 faea 	bl	800d3e4 <USBH_Get_DevDesc>
 800ce10:	4603      	mov	r3, r0
 800ce12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce14:	7bbb      	ldrb	r3, [r7, #14]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d130      	bne.n	800ce7c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7919      	ldrb	r1, [r3, #4]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ce3e:	b292      	uxth	r2, r2
 800ce40:	9202      	str	r2, [sp, #8]
 800ce42:	2200      	movs	r2, #0
 800ce44:	9201      	str	r2, [sp, #4]
 800ce46:	9300      	str	r3, [sp, #0]
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2280      	movs	r2, #128	; 0x80
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f001 f903 	bl	800e058 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	7959      	ldrb	r1, [r3, #5]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce66:	b292      	uxth	r2, r2
 800ce68:	9202      	str	r2, [sp, #8]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	9201      	str	r2, [sp, #4]
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	4603      	mov	r3, r0
 800ce72:	2200      	movs	r2, #0
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f001 f8ef 	bl	800e058 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ce7a:	e1bc      	b.n	800d1f6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce7c:	7bbb      	ldrb	r3, [r7, #14]
 800ce7e:	2b03      	cmp	r3, #3
 800ce80:	f040 81b9 	bne.w	800d1f6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d903      	bls.n	800cea6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	220d      	movs	r2, #13
 800cea2:	701a      	strb	r2, [r3, #0]
      break;
 800cea4:	e1a7      	b.n	800d1f6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	795b      	ldrb	r3, [r3, #5]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 f923 	bl	800e0f8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	791b      	ldrb	r3, [r3, #4]
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f001 f91d 	bl	800e0f8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	701a      	strb	r2, [r3, #0]
      break;
 800cec4:	e197      	b.n	800d1f6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cec6:	2112      	movs	r1, #18
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fa8b 	bl	800d3e4 <USBH_Get_DevDesc>
 800cece:	4603      	mov	r3, r0
 800ced0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ced2:	7bbb      	ldrb	r3, [r7, #14]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d103      	bne.n	800cee0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2202      	movs	r2, #2
 800cedc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cede:	e18c      	b.n	800d1fa <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cee0:	7bbb      	ldrb	r3, [r7, #14]
 800cee2:	2b03      	cmp	r3, #3
 800cee4:	f040 8189 	bne.w	800d1fa <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ceee:	3301      	adds	r3, #1
 800cef0:	b2da      	uxtb	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cefe:	2b03      	cmp	r3, #3
 800cf00:	d903      	bls.n	800cf0a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	220d      	movs	r2, #13
 800cf06:	701a      	strb	r2, [r3, #0]
      break;
 800cf08:	e177      	b.n	800d1fa <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	795b      	ldrb	r3, [r3, #5]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f001 f8f1 	bl	800e0f8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	791b      	ldrb	r3, [r3, #4]
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f001 f8eb 	bl	800e0f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	701a      	strb	r2, [r3, #0]
      break;
 800cf2e:	e164      	b.n	800d1fa <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cf30:	2101      	movs	r1, #1
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 fb02 	bl	800d53c <USBH_SetAddress>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf3c:	7bbb      	ldrb	r3, [r7, #14]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d132      	bne.n	800cfa8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cf42:	2002      	movs	r0, #2
 800cf44:	f003 fe33 	bl	8010bae <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2203      	movs	r2, #3
 800cf54:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	7919      	ldrb	r1, [r3, #4]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cf6a:	b292      	uxth	r2, r2
 800cf6c:	9202      	str	r2, [sp, #8]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	9201      	str	r2, [sp, #4]
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	4603      	mov	r3, r0
 800cf76:	2280      	movs	r2, #128	; 0x80
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f001 f86d 	bl	800e058 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	7959      	ldrb	r1, [r3, #5]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf92:	b292      	uxth	r2, r2
 800cf94:	9202      	str	r2, [sp, #8]
 800cf96:	2200      	movs	r2, #0
 800cf98:	9201      	str	r2, [sp, #4]
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f001 f859 	bl	800e058 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cfa6:	e12a      	b.n	800d1fe <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfa8:	7bbb      	ldrb	r3, [r7, #14]
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	f040 8127 	bne.w	800d1fe <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	220d      	movs	r2, #13
 800cfb4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	705a      	strb	r2, [r3, #1]
      break;
 800cfbc:	e11f      	b.n	800d1fe <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cfbe:	2109      	movs	r1, #9
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 fa37 	bl	800d434 <USBH_Get_CfgDesc>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d103      	bne.n	800cfd8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2204      	movs	r2, #4
 800cfd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cfd6:	e114      	b.n	800d202 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfd8:	7bbb      	ldrb	r3, [r7, #14]
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	f040 8111 	bne.w	800d202 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d903      	bls.n	800d002 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	220d      	movs	r2, #13
 800cffe:	701a      	strb	r2, [r3, #0]
      break;
 800d000:	e0ff      	b.n	800d202 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	795b      	ldrb	r3, [r3, #5]
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f001 f875 	bl	800e0f8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	791b      	ldrb	r3, [r3, #4]
 800d012:	4619      	mov	r1, r3
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f001 f86f 	bl	800e0f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	701a      	strb	r2, [r3, #0]
      break;
 800d026:	e0ec      	b.n	800d202 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d02e:	4619      	mov	r1, r3
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f9ff 	bl	800d434 <USBH_Get_CfgDesc>
 800d036:	4603      	mov	r3, r0
 800d038:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d03a:	7bbb      	ldrb	r3, [r7, #14]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d103      	bne.n	800d048 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2205      	movs	r2, #5
 800d044:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d046:	e0de      	b.n	800d206 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d048:	7bbb      	ldrb	r3, [r7, #14]
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	f040 80db 	bne.w	800d206 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d056:	3301      	adds	r3, #1
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d066:	2b03      	cmp	r3, #3
 800d068:	d903      	bls.n	800d072 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	220d      	movs	r2, #13
 800d06e:	701a      	strb	r2, [r3, #0]
      break;
 800d070:	e0c9      	b.n	800d206 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	795b      	ldrb	r3, [r3, #5]
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f001 f83d 	bl	800e0f8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	791b      	ldrb	r3, [r3, #4]
 800d082:	4619      	mov	r1, r3
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f001 f837 	bl	800e0f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	701a      	strb	r2, [r3, #0]
      break;
 800d096:	e0b6      	b.n	800d206 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d036      	beq.n	800d110 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d0ae:	23ff      	movs	r3, #255	; 0xff
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 f9e3 	bl	800d47c <USBH_Get_StringDesc>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d0ba:	7bbb      	ldrb	r3, [r7, #14]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d111      	bne.n	800d0e4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2206      	movs	r2, #6
 800d0c4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2205      	movs	r2, #5
 800d0ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d0da:	2200      	movs	r2, #0
 800d0dc:	4619      	mov	r1, r3
 800d0de:	f001 f907 	bl	800e2f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d0e2:	e092      	b.n	800d20a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0e4:	7bbb      	ldrb	r3, [r7, #14]
 800d0e6:	2b03      	cmp	r3, #3
 800d0e8:	f040 808f 	bne.w	800d20a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2206      	movs	r2, #6
 800d0f0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2205      	movs	r2, #5
 800d0f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d106:	2200      	movs	r2, #0
 800d108:	4619      	mov	r1, r3
 800d10a:	f001 f8f1 	bl	800e2f0 <osMessagePut>
      break;
 800d10e:	e07c      	b.n	800d20a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2206      	movs	r2, #6
 800d114:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2205      	movs	r2, #5
 800d11a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d12a:	2200      	movs	r2, #0
 800d12c:	4619      	mov	r1, r3
 800d12e:	f001 f8df 	bl	800e2f0 <osMessagePut>
      break;
 800d132:	e06a      	b.n	800d20a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d027      	beq.n	800d18e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d14a:	23ff      	movs	r3, #255	; 0xff
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f995 	bl	800d47c <USBH_Get_StringDesc>
 800d152:	4603      	mov	r3, r0
 800d154:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d156:	7bbb      	ldrb	r3, [r7, #14]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d103      	bne.n	800d164 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2207      	movs	r2, #7
 800d160:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d162:	e054      	b.n	800d20e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	2b03      	cmp	r3, #3
 800d168:	d151      	bne.n	800d20e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2207      	movs	r2, #7
 800d16e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2205      	movs	r2, #5
 800d174:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d184:	2200      	movs	r2, #0
 800d186:	4619      	mov	r1, r3
 800d188:	f001 f8b2 	bl	800e2f0 <osMessagePut>
      break;
 800d18c:	e03f      	b.n	800d20e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2207      	movs	r2, #7
 800d192:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2205      	movs	r2, #5
 800d198:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	f001 f8a0 	bl	800e2f0 <osMessagePut>
      break;
 800d1b0:	e02d      	b.n	800d20e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d017      	beq.n	800d1ec <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1c8:	23ff      	movs	r3, #255	; 0xff
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f956 	bl	800d47c <USBH_Get_StringDesc>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d1d4:	7bbb      	ldrb	r3, [r7, #14]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d1de:	e018      	b.n	800d212 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	d115      	bne.n	800d212 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ea:	e012      	b.n	800d212 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f0:	e00f      	b.n	800d212 <USBH_HandleEnum+0x44a>

    default:
      break;
 800d1f2:	bf00      	nop
 800d1f4:	e00e      	b.n	800d214 <USBH_HandleEnum+0x44c>
      break;
 800d1f6:	bf00      	nop
 800d1f8:	e00c      	b.n	800d214 <USBH_HandleEnum+0x44c>
      break;
 800d1fa:	bf00      	nop
 800d1fc:	e00a      	b.n	800d214 <USBH_HandleEnum+0x44c>
      break;
 800d1fe:	bf00      	nop
 800d200:	e008      	b.n	800d214 <USBH_HandleEnum+0x44c>
      break;
 800d202:	bf00      	nop
 800d204:	e006      	b.n	800d214 <USBH_HandleEnum+0x44c>
      break;
 800d206:	bf00      	nop
 800d208:	e004      	b.n	800d214 <USBH_HandleEnum+0x44c>
      break;
 800d20a:	bf00      	nop
 800d20c:	e002      	b.n	800d214 <USBH_HandleEnum+0x44c>
      break;
 800d20e:	bf00      	nop
 800d210:	e000      	b.n	800d214 <USBH_HandleEnum+0x44c>
      break;
 800d212:	bf00      	nop
  }
  return Status;
 800d214:	7bfb      	ldrb	r3, [r7, #15]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop

0800d220 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	683a      	ldr	r2, [r7, #0]
 800d22e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d232:	bf00      	nop
 800d234:	370c      	adds	r7, #12
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr

0800d23e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b082      	sub	sp, #8
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f804 	bl	800d262 <USBH_HandleSof>
}
 800d25a:	bf00      	nop
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d262:	b580      	push	{r7, lr}
 800d264:	b082      	sub	sp, #8
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b0b      	cmp	r3, #11
 800d272:	d10a      	bne.n	800d28a <USBH_HandleSof+0x28>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d005      	beq.n	800d28a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d284:	699b      	ldr	r3, [r3, #24]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	4798      	blx	r3
  }
}
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b082      	sub	sp, #8
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	f001 f819 	bl	800e2f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d2be:	bf00      	nop
}
 800d2c0:	3708      	adds	r7, #8
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d2c6:	b480      	push	{r7}
 800d2c8:	b083      	sub	sp, #12
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d2d6:	bf00      	nop
}
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b082      	sub	sp, #8
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2201      	movs	r2, #1
 800d306:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d316:	2200      	movs	r2, #0
 800d318:	4619      	mov	r1, r3
 800d31a:	f000 ffe9 	bl	800e2f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2200      	movs	r2, #0
 800d344:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f003 fae6 	bl	801091a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	791b      	ldrb	r3, [r3, #4]
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fecf 	bl	800e0f8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	795b      	ldrb	r3, [r3, #5]
 800d35e:	4619      	mov	r1, r3
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 fec9 	bl	800e0f8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2201      	movs	r2, #1
 800d36a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d37a:	2200      	movs	r2, #0
 800d37c:	4619      	mov	r1, r3
 800d37e:	f000 ffb7 	bl	800e2f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b086      	sub	sp, #24
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800d39a:	f107 030c 	add.w	r3, r7, #12
 800d39e:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 ffe4 	bl	800e370 <osMessageGet>
    if (event.status == osEventMessage)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2b10      	cmp	r3, #16
 800d3ac:	d1f2      	bne.n	800d394 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7ff faa8 	bl	800c904 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d3b4:	e7ee      	b.n	800d394 <USBH_Process_OS+0x8>

0800d3b6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b082      	sub	sp, #8
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	f000 ff8b 	bl	800e2f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d3f6:	78fb      	ldrb	r3, [r7, #3]
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d402:	2100      	movs	r1, #0
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f864 	bl	800d4d2 <USBH_GetDescriptor>
 800d40a:	4603      	mov	r3, r0
 800d40c:	73fb      	strb	r3, [r7, #15]
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10a      	bne.n	800d42a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d420:	78fa      	ldrb	r2, [r7, #3]
 800d422:	b292      	uxth	r2, r2
 800d424:	4619      	mov	r1, r3
 800d426:	f000 f918 	bl	800d65a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af02      	add	r7, sp, #8
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	331c      	adds	r3, #28
 800d444:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d446:	887b      	ldrh	r3, [r7, #2]
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d450:	2100      	movs	r1, #0
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f83d 	bl	800d4d2 <USBH_GetDescriptor>
 800d458:	4603      	mov	r3, r0
 800d45a:	72fb      	strb	r3, [r7, #11]
 800d45c:	7afb      	ldrb	r3, [r7, #11]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d107      	bne.n	800d472 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d468:	887a      	ldrh	r2, [r7, #2]
 800d46a:	68f9      	ldr	r1, [r7, #12]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 f964 	bl	800d73a <USBH_ParseCfgDesc>
  }

  return status;
 800d472:	7afb      	ldrb	r3, [r7, #11]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b088      	sub	sp, #32
 800d480:	af02      	add	r7, sp, #8
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	607a      	str	r2, [r7, #4]
 800d486:	461a      	mov	r2, r3
 800d488:	460b      	mov	r3, r1
 800d48a:	72fb      	strb	r3, [r7, #11]
 800d48c:	4613      	mov	r3, r2
 800d48e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d490:	7afb      	ldrb	r3, [r7, #11]
 800d492:	b29b      	uxth	r3, r3
 800d494:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d498:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d4a0:	893b      	ldrh	r3, [r7, #8]
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f000 f812 	bl	800d4d2 <USBH_GetDescriptor>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	75fb      	strb	r3, [r7, #23]
 800d4b2:	7dfb      	ldrb	r3, [r7, #23]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d107      	bne.n	800d4c8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d4be:	893a      	ldrh	r2, [r7, #8]
 800d4c0:	6879      	ldr	r1, [r7, #4]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 fa37 	bl	800d936 <USBH_ParseStringDesc>
  }

  return status;
 800d4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	607b      	str	r3, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	72fb      	strb	r3, [r7, #11]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	789b      	ldrb	r3, [r3, #2]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d11c      	bne.n	800d526 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d4ec:	7afb      	ldrb	r3, [r7, #11]
 800d4ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2206      	movs	r2, #6
 800d4fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	893a      	ldrh	r2, [r7, #8]
 800d502:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d504:	893b      	ldrh	r3, [r7, #8]
 800d506:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d50a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d50e:	d104      	bne.n	800d51a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f240 4209 	movw	r2, #1033	; 0x409
 800d516:	829a      	strh	r2, [r3, #20]
 800d518:	e002      	b.n	800d520 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2200      	movs	r2, #0
 800d51e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	8b3a      	ldrh	r2, [r7, #24]
 800d524:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d526:	8b3b      	ldrh	r3, [r7, #24]
 800d528:	461a      	mov	r2, r3
 800d52a:	6879      	ldr	r1, [r7, #4]
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 fa50 	bl	800d9d2 <USBH_CtlReq>
 800d532:	4603      	mov	r3, r0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3710      	adds	r7, #16
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	460b      	mov	r3, r1
 800d546:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	789b      	ldrb	r3, [r3, #2]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d10f      	bne.n	800d570 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2205      	movs	r2, #5
 800d55a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d55c:	78fb      	ldrb	r3, [r7, #3]
 800d55e:	b29a      	uxth	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d570:	2200      	movs	r2, #0
 800d572:	2100      	movs	r1, #0
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 fa2c 	bl	800d9d2 <USBH_CtlReq>
 800d57a:	4603      	mov	r3, r0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	789b      	ldrb	r3, [r3, #2]
 800d594:	2b01      	cmp	r3, #1
 800d596:	d10e      	bne.n	800d5b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2209      	movs	r2, #9
 800d5a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	887a      	ldrh	r2, [r7, #2]
 800d5a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2100      	movs	r1, #0
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 fa09 	bl	800d9d2 <USBH_CtlReq>
 800d5c0:	4603      	mov	r3, r0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	789b      	ldrb	r3, [r3, #2]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d10f      	bne.n	800d5fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2203      	movs	r2, #3
 800d5e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d5ea:	78fb      	ldrb	r3, [r7, #3]
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d5fe:	2200      	movs	r2, #0
 800d600:	2100      	movs	r1, #0
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f9e5 	bl	800d9d2 <USBH_CtlReq>
 800d608:	4603      	mov	r3, r0
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b082      	sub	sp, #8
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	460b      	mov	r3, r1
 800d61c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	789b      	ldrb	r3, [r3, #2]
 800d622:	2b01      	cmp	r3, #1
 800d624:	d10f      	bne.n	800d646 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2202      	movs	r2, #2
 800d62a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d638:	78fb      	ldrb	r3, [r7, #3]
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d646:	2200      	movs	r2, #0
 800d648:	2100      	movs	r1, #0
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f9c1 	bl	800d9d2 <USBH_CtlReq>
 800d650:	4603      	mov	r3, r0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d65a:	b480      	push	{r7}
 800d65c:	b085      	sub	sp, #20
 800d65e:	af00      	add	r7, sp, #0
 800d660:	60f8      	str	r0, [r7, #12]
 800d662:	60b9      	str	r1, [r7, #8]
 800d664:	4613      	mov	r3, r2
 800d666:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	781a      	ldrb	r2, [r3, #0]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	785a      	ldrb	r2, [r3, #1]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	3302      	adds	r3, #2
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	b29a      	uxth	r2, r3
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	3303      	adds	r3, #3
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	b29b      	uxth	r3, r3
 800d688:	021b      	lsls	r3, r3, #8
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	4313      	orrs	r3, r2
 800d68e:	b29a      	uxth	r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	791a      	ldrb	r2, [r3, #4]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	795a      	ldrb	r2, [r3, #5]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	799a      	ldrb	r2, [r3, #6]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	79da      	ldrb	r2, [r3, #7]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d6b4:	88fb      	ldrh	r3, [r7, #6]
 800d6b6:	2b08      	cmp	r3, #8
 800d6b8:	d939      	bls.n	800d72e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	3308      	adds	r3, #8
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	3309      	adds	r3, #9
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	021b      	lsls	r3, r3, #8
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	330a      	adds	r3, #10
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	330b      	adds	r3, #11
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	021b      	lsls	r3, r3, #8
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	330c      	adds	r3, #12
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	330d      	adds	r3, #13
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	b29b      	uxth	r3, r3
 800d702:	021b      	lsls	r3, r3, #8
 800d704:	b29b      	uxth	r3, r3
 800d706:	4313      	orrs	r3, r2
 800d708:	b29a      	uxth	r2, r3
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	7b9a      	ldrb	r2, [r3, #14]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	7bda      	ldrb	r2, [r3, #15]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	7c1a      	ldrb	r2, [r3, #16]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	7c5a      	ldrb	r2, [r3, #17]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	745a      	strb	r2, [r3, #17]
  }
}
 800d72e:	bf00      	nop
 800d730:	3714      	adds	r7, #20
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr

0800d73a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b08a      	sub	sp, #40	; 0x28
 800d73e:	af00      	add	r7, sp, #0
 800d740:	60f8      	str	r0, [r7, #12]
 800d742:	60b9      	str	r1, [r7, #8]
 800d744:	4613      	mov	r3, r2
 800d746:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d74c:	2300      	movs	r3, #0
 800d74e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d752:	2300      	movs	r3, #0
 800d754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	781a      	ldrb	r2, [r3, #0]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	785a      	ldrb	r2, [r3, #1]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	3302      	adds	r3, #2
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	b29a      	uxth	r2, r3
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	3303      	adds	r3, #3
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	021b      	lsls	r3, r3, #8
 800d77e:	b29b      	uxth	r3, r3
 800d780:	4313      	orrs	r3, r2
 800d782:	b29a      	uxth	r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	791a      	ldrb	r2, [r3, #4]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	795a      	ldrb	r2, [r3, #5]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	799a      	ldrb	r2, [r3, #6]
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	79da      	ldrb	r2, [r3, #7]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	7a1a      	ldrb	r2, [r3, #8]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d7b0:	88fb      	ldrh	r3, [r7, #6]
 800d7b2:	2b09      	cmp	r3, #9
 800d7b4:	d95f      	bls.n	800d876 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d7b6:	2309      	movs	r3, #9
 800d7b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d7be:	e051      	b.n	800d864 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d7c0:	f107 0316 	add.w	r3, r7, #22
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7c8:	f000 f8e8 	bl	800d99c <USBH_GetNextDesc>
 800d7cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d0:	785b      	ldrb	r3, [r3, #1]
 800d7d2:	2b04      	cmp	r3, #4
 800d7d4:	d146      	bne.n	800d864 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d7d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7da:	221a      	movs	r2, #26
 800d7dc:	fb02 f303 	mul.w	r3, r2, r3
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	3302      	adds	r3, #2
 800d7e8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d7ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7ec:	69f8      	ldr	r0, [r7, #28]
 800d7ee:	f000 f846 	bl	800d87e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d7fc:	e022      	b.n	800d844 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d7fe:	f107 0316 	add.w	r3, r7, #22
 800d802:	4619      	mov	r1, r3
 800d804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d806:	f000 f8c9 	bl	800d99c <USBH_GetNextDesc>
 800d80a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	785b      	ldrb	r3, [r3, #1]
 800d810:	2b05      	cmp	r3, #5
 800d812:	d117      	bne.n	800d844 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d818:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d81c:	3201      	adds	r2, #1
 800d81e:	00d2      	lsls	r2, r2, #3
 800d820:	211a      	movs	r1, #26
 800d822:	fb01 f303 	mul.w	r3, r1, r3
 800d826:	4413      	add	r3, r2
 800d828:	3308      	adds	r3, #8
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	4413      	add	r3, r2
 800d82e:	3304      	adds	r3, #4
 800d830:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d834:	69b8      	ldr	r0, [r7, #24]
 800d836:	f000 f851 	bl	800d8dc <USBH_ParseEPDesc>
            ep_ix++;
 800d83a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d83e:	3301      	adds	r3, #1
 800d840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	791b      	ldrb	r3, [r3, #4]
 800d848:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d204      	bcs.n	800d85a <USBH_ParseCfgDesc+0x120>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	885a      	ldrh	r2, [r3, #2]
 800d854:	8afb      	ldrh	r3, [r7, #22]
 800d856:	429a      	cmp	r2, r3
 800d858:	d8d1      	bhi.n	800d7fe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d85a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d85e:	3301      	adds	r3, #1
 800d860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d804      	bhi.n	800d876 <USBH_ParseCfgDesc+0x13c>
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	885a      	ldrh	r2, [r3, #2]
 800d870:	8afb      	ldrh	r3, [r7, #22]
 800d872:	429a      	cmp	r2, r3
 800d874:	d8a4      	bhi.n	800d7c0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d876:	bf00      	nop
 800d878:	3728      	adds	r7, #40	; 0x28
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d87e:	b480      	push	{r7}
 800d880:	b083      	sub	sp, #12
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
 800d886:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	781a      	ldrb	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	785a      	ldrb	r2, [r3, #1]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	789a      	ldrb	r2, [r3, #2]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	78da      	ldrb	r2, [r3, #3]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	791a      	ldrb	r2, [r3, #4]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	795a      	ldrb	r2, [r3, #5]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	799a      	ldrb	r2, [r3, #6]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	79da      	ldrb	r2, [r3, #7]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	7a1a      	ldrb	r2, [r3, #8]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	721a      	strb	r2, [r3, #8]
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	781a      	ldrb	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	785a      	ldrb	r2, [r3, #1]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	789a      	ldrb	r2, [r3, #2]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	78da      	ldrb	r2, [r3, #3]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	3304      	adds	r3, #4
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	3305      	adds	r3, #5
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	b29b      	uxth	r3, r3
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	b29b      	uxth	r3, r3
 800d91a:	4313      	orrs	r3, r2
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	799a      	ldrb	r2, [r3, #6]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	719a      	strb	r2, [r3, #6]
}
 800d92a:	bf00      	nop
 800d92c:	370c      	adds	r7, #12
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d936:	b480      	push	{r7}
 800d938:	b087      	sub	sp, #28
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	60b9      	str	r1, [r7, #8]
 800d940:	4613      	mov	r3, r2
 800d942:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	3301      	adds	r3, #1
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	2b03      	cmp	r3, #3
 800d94c:	d120      	bne.n	800d990 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	1e9a      	subs	r2, r3, #2
 800d954:	88fb      	ldrh	r3, [r7, #6]
 800d956:	4293      	cmp	r3, r2
 800d958:	bf28      	it	cs
 800d95a:	4613      	movcs	r3, r2
 800d95c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3302      	adds	r3, #2
 800d962:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d964:	2300      	movs	r3, #0
 800d966:	82fb      	strh	r3, [r7, #22]
 800d968:	e00b      	b.n	800d982 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d96a:	8afb      	ldrh	r3, [r7, #22]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	4413      	add	r3, r2
 800d970:	781a      	ldrb	r2, [r3, #0]
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	3301      	adds	r3, #1
 800d97a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d97c:	8afb      	ldrh	r3, [r7, #22]
 800d97e:	3302      	adds	r3, #2
 800d980:	82fb      	strh	r3, [r7, #22]
 800d982:	8afa      	ldrh	r2, [r7, #22]
 800d984:	8abb      	ldrh	r3, [r7, #20]
 800d986:	429a      	cmp	r2, r3
 800d988:	d3ef      	bcc.n	800d96a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	2200      	movs	r2, #0
 800d98e:	701a      	strb	r2, [r3, #0]
  }
}
 800d990:	bf00      	nop
 800d992:	371c      	adds	r7, #28
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	881a      	ldrh	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	4413      	add	r3, r2
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr

0800d9d2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b086      	sub	sp, #24
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	60f8      	str	r0, [r7, #12]
 800d9da:	60b9      	str	r1, [r7, #8]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	789b      	ldrb	r3, [r3, #2]
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d002      	beq.n	800d9f2 <USBH_CtlReq+0x20>
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d01d      	beq.n	800da2c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d9f0:	e043      	b.n	800da7a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	88fa      	ldrh	r2, [r7, #6]
 800d9fc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2201      	movs	r2, #1
 800da02:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2202      	movs	r2, #2
 800da08:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800da0a:	2301      	movs	r3, #1
 800da0c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2203      	movs	r2, #3
 800da12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800da22:	2200      	movs	r2, #0
 800da24:	4619      	mov	r1, r3
 800da26:	f000 fc63 	bl	800e2f0 <osMessagePut>
      break;
 800da2a:	e026      	b.n	800da7a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f000 f829 	bl	800da84 <USBH_HandleControl>
 800da32:	4603      	mov	r3, r0
 800da34:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800da36:	7dfb      	ldrb	r3, [r7, #23]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <USBH_CtlReq+0x70>
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
 800da3e:	2b03      	cmp	r3, #3
 800da40:	d106      	bne.n	800da50 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2201      	movs	r2, #1
 800da46:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	761a      	strb	r2, [r3, #24]
 800da4e:	e005      	b.n	800da5c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800da50:	7dfb      	ldrb	r3, [r7, #23]
 800da52:	2b02      	cmp	r3, #2
 800da54:	d102      	bne.n	800da5c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2201      	movs	r2, #1
 800da5a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2203      	movs	r2, #3
 800da60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800da70:	2200      	movs	r2, #0
 800da72:	4619      	mov	r1, r3
 800da74:	f000 fc3c 	bl	800e2f0 <osMessagePut>
      break;
 800da78:	bf00      	nop
  }
  return status;
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af02      	add	r7, sp, #8
 800da8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800da8c:	2301      	movs	r3, #1
 800da8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800da90:	2300      	movs	r3, #0
 800da92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	7e1b      	ldrb	r3, [r3, #24]
 800da98:	3b01      	subs	r3, #1
 800da9a:	2b0a      	cmp	r3, #10
 800da9c:	f200 822b 	bhi.w	800def6 <USBH_HandleControl+0x472>
 800daa0:	a201      	add	r2, pc, #4	; (adr r2, 800daa8 <USBH_HandleControl+0x24>)
 800daa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa6:	bf00      	nop
 800daa8:	0800dad5 	.word	0x0800dad5
 800daac:	0800daef 	.word	0x0800daef
 800dab0:	0800db91 	.word	0x0800db91
 800dab4:	0800dbb7 	.word	0x0800dbb7
 800dab8:	0800dc43 	.word	0x0800dc43
 800dabc:	0800dc6f 	.word	0x0800dc6f
 800dac0:	0800dd31 	.word	0x0800dd31
 800dac4:	0800dd53 	.word	0x0800dd53
 800dac8:	0800dde5 	.word	0x0800dde5
 800dacc:	0800de0d 	.word	0x0800de0d
 800dad0:	0800de9f 	.word	0x0800de9f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f103 0110 	add.w	r1, r3, #16
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	795b      	ldrb	r3, [r3, #5]
 800dade:	461a      	mov	r2, r3
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 fa19 	bl	800df18 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2202      	movs	r2, #2
 800daea:	761a      	strb	r2, [r3, #24]
      break;
 800daec:	e20e      	b.n	800df0c <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	795b      	ldrb	r3, [r3, #5]
 800daf2:	4619      	mov	r1, r3
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f002 fffd 	bl	8010af4 <USBH_LL_GetURBState>
 800dafa:	4603      	mov	r3, r0
 800dafc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dafe:	7bbb      	ldrb	r3, [r7, #14]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d12c      	bne.n	800db5e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	7c1b      	ldrb	r3, [r3, #16]
 800db08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	8adb      	ldrh	r3, [r3, #22]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00a      	beq.n	800db2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800db16:	7b7b      	ldrb	r3, [r7, #13]
 800db18:	2b80      	cmp	r3, #128	; 0x80
 800db1a:	d103      	bne.n	800db24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2203      	movs	r2, #3
 800db20:	761a      	strb	r2, [r3, #24]
 800db22:	e00d      	b.n	800db40 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2205      	movs	r2, #5
 800db28:	761a      	strb	r2, [r3, #24]
 800db2a:	e009      	b.n	800db40 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800db2c:	7b7b      	ldrb	r3, [r7, #13]
 800db2e:	2b80      	cmp	r3, #128	; 0x80
 800db30:	d103      	bne.n	800db3a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2209      	movs	r2, #9
 800db36:	761a      	strb	r2, [r3, #24]
 800db38:	e002      	b.n	800db40 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2207      	movs	r2, #7
 800db3e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2203      	movs	r2, #3
 800db44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800db54:	2200      	movs	r2, #0
 800db56:	4619      	mov	r1, r3
 800db58:	f000 fbca 	bl	800e2f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800db5c:	e1cd      	b.n	800defa <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800db5e:	7bbb      	ldrb	r3, [r7, #14]
 800db60:	2b04      	cmp	r3, #4
 800db62:	d003      	beq.n	800db6c <USBH_HandleControl+0xe8>
 800db64:	7bbb      	ldrb	r3, [r7, #14]
 800db66:	2b02      	cmp	r3, #2
 800db68:	f040 81c7 	bne.w	800defa <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	220b      	movs	r2, #11
 800db70:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2203      	movs	r2, #3
 800db76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800db86:	2200      	movs	r2, #0
 800db88:	4619      	mov	r1, r3
 800db8a:	f000 fbb1 	bl	800e2f0 <osMessagePut>
      break;
 800db8e:	e1b4      	b.n	800defa <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db96:	b29a      	uxth	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6899      	ldr	r1, [r3, #8]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	899a      	ldrh	r2, [r3, #12]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	791b      	ldrb	r3, [r3, #4]
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 f9f4 	bl	800df96 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2204      	movs	r2, #4
 800dbb2:	761a      	strb	r2, [r3, #24]
      break;
 800dbb4:	e1aa      	b.n	800df0c <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	791b      	ldrb	r3, [r3, #4]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f002 ff99 	bl	8010af4 <USBH_LL_GetURBState>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dbc6:	7bbb      	ldrb	r3, [r7, #14]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d110      	bne.n	800dbee <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2209      	movs	r2, #9
 800dbd0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2203      	movs	r2, #3
 800dbd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	4619      	mov	r1, r3
 800dbea:	f000 fb81 	bl	800e2f0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dbee:	7bbb      	ldrb	r3, [r7, #14]
 800dbf0:	2b05      	cmp	r3, #5
 800dbf2:	d110      	bne.n	800dc16 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2203      	movs	r2, #3
 800dbfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	4619      	mov	r1, r3
 800dc10:	f000 fb6e 	bl	800e2f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dc14:	e173      	b.n	800defe <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800dc16:	7bbb      	ldrb	r3, [r7, #14]
 800dc18:	2b04      	cmp	r3, #4
 800dc1a:	f040 8170 	bne.w	800defe <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	220b      	movs	r2, #11
 800dc22:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2203      	movs	r2, #3
 800dc28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dc38:	2200      	movs	r2, #0
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	f000 fb58 	bl	800e2f0 <osMessagePut>
      break;
 800dc40:	e15d      	b.n	800defe <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6899      	ldr	r1, [r3, #8]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	899a      	ldrh	r2, [r3, #12]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	7958      	ldrb	r0, [r3, #5]
 800dc4e:	2301      	movs	r3, #1
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	4603      	mov	r3, r0
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f979 	bl	800df4c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2206      	movs	r2, #6
 800dc6a:	761a      	strb	r2, [r3, #24]
      break;
 800dc6c:	e14e      	b.n	800df0c <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	795b      	ldrb	r3, [r3, #5]
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f002 ff3d 	bl	8010af4 <USBH_LL_GetURBState>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dc7e:	7bbb      	ldrb	r3, [r7, #14]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d111      	bne.n	800dca8 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2207      	movs	r2, #7
 800dc88:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2203      	movs	r2, #3
 800dc8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dc9e:	2200      	movs	r2, #0
 800dca0:	4619      	mov	r1, r3
 800dca2:	f000 fb25 	bl	800e2f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dca6:	e12c      	b.n	800df02 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800dca8:	7bbb      	ldrb	r3, [r7, #14]
 800dcaa:	2b05      	cmp	r3, #5
 800dcac:	d113      	bne.n	800dcd6 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	220c      	movs	r2, #12
 800dcb2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2203      	movs	r2, #3
 800dcbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dccc:	2200      	movs	r2, #0
 800dcce:	4619      	mov	r1, r3
 800dcd0:	f000 fb0e 	bl	800e2f0 <osMessagePut>
      break;
 800dcd4:	e115      	b.n	800df02 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dcd6:	7bbb      	ldrb	r3, [r7, #14]
 800dcd8:	2b02      	cmp	r3, #2
 800dcda:	d111      	bne.n	800dd00 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2205      	movs	r2, #5
 800dce0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2203      	movs	r2, #3
 800dce6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	f000 faf9 	bl	800e2f0 <osMessagePut>
      break;
 800dcfe:	e100      	b.n	800df02 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	2b04      	cmp	r3, #4
 800dd04:	f040 80fd 	bne.w	800df02 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	220b      	movs	r2, #11
 800dd0c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dd0e:	2302      	movs	r3, #2
 800dd10:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2203      	movs	r2, #3
 800dd16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dd26:	2200      	movs	r2, #0
 800dd28:	4619      	mov	r1, r3
 800dd2a:	f000 fae1 	bl	800e2f0 <osMessagePut>
      break;
 800dd2e:	e0e8      	b.n	800df02 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	791b      	ldrb	r3, [r3, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	2100      	movs	r1, #0
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 f92c 	bl	800df96 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2208      	movs	r2, #8
 800dd4e:	761a      	strb	r2, [r3, #24]

      break;
 800dd50:	e0dc      	b.n	800df0c <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	791b      	ldrb	r3, [r3, #4]
 800dd56:	4619      	mov	r1, r3
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f002 fecb 	bl	8010af4 <USBH_LL_GetURBState>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dd62:	7bbb      	ldrb	r3, [r7, #14]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d113      	bne.n	800dd90 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	220d      	movs	r2, #13
 800dd6c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2203      	movs	r2, #3
 800dd76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dd86:	2200      	movs	r2, #0
 800dd88:	4619      	mov	r1, r3
 800dd8a:	f000 fab1 	bl	800e2f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dd8e:	e0ba      	b.n	800df06 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800dd90:	7bbb      	ldrb	r3, [r7, #14]
 800dd92:	2b04      	cmp	r3, #4
 800dd94:	d111      	bne.n	800ddba <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	220b      	movs	r2, #11
 800dd9a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2203      	movs	r2, #3
 800dda0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	f000 fa9c 	bl	800e2f0 <osMessagePut>
      break;
 800ddb8:	e0a5      	b.n	800df06 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800ddba:	7bbb      	ldrb	r3, [r7, #14]
 800ddbc:	2b05      	cmp	r3, #5
 800ddbe:	f040 80a2 	bne.w	800df06 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2203      	movs	r2, #3
 800ddca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ddda:	2200      	movs	r2, #0
 800dddc:	4619      	mov	r1, r3
 800ddde:	f000 fa87 	bl	800e2f0 <osMessagePut>
      break;
 800dde2:	e090      	b.n	800df06 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	795a      	ldrb	r2, [r3, #5]
 800dde8:	2301      	movs	r3, #1
 800ddea:	9300      	str	r3, [sp, #0]
 800ddec:	4613      	mov	r3, r2
 800ddee:	2200      	movs	r2, #0
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f8aa 	bl	800df4c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	220a      	movs	r2, #10
 800de08:	761a      	strb	r2, [r3, #24]
      break;
 800de0a:	e07f      	b.n	800df0c <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	795b      	ldrb	r3, [r3, #5]
 800de10:	4619      	mov	r1, r3
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f002 fe6e 	bl	8010af4 <USBH_LL_GetURBState>
 800de18:	4603      	mov	r3, r0
 800de1a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800de1c:	7bbb      	ldrb	r3, [r7, #14]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d113      	bne.n	800de4a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	220d      	movs	r2, #13
 800de2a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2203      	movs	r2, #3
 800de30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800de40:	2200      	movs	r2, #0
 800de42:	4619      	mov	r1, r3
 800de44:	f000 fa54 	bl	800e2f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800de48:	e05f      	b.n	800df0a <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800de4a:	7bbb      	ldrb	r3, [r7, #14]
 800de4c:	2b02      	cmp	r3, #2
 800de4e:	d111      	bne.n	800de74 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2209      	movs	r2, #9
 800de54:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2203      	movs	r2, #3
 800de5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800de6a:	2200      	movs	r2, #0
 800de6c:	4619      	mov	r1, r3
 800de6e:	f000 fa3f 	bl	800e2f0 <osMessagePut>
      break;
 800de72:	e04a      	b.n	800df0a <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800de74:	7bbb      	ldrb	r3, [r7, #14]
 800de76:	2b04      	cmp	r3, #4
 800de78:	d147      	bne.n	800df0a <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	220b      	movs	r2, #11
 800de7e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2203      	movs	r2, #3
 800de84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800de94:	2200      	movs	r2, #0
 800de96:	4619      	mov	r1, r3
 800de98:	f000 fa2a 	bl	800e2f0 <osMessagePut>
      break;
 800de9c:	e035      	b.n	800df0a <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	7e5b      	ldrb	r3, [r3, #25]
 800dea2:	3301      	adds	r3, #1
 800dea4:	b2da      	uxtb	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	765a      	strb	r2, [r3, #25]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	7e5b      	ldrb	r3, [r3, #25]
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d806      	bhi.n	800dec0 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2201      	movs	r2, #1
 800deb6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800debe:	e025      	b.n	800df0c <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dec6:	2106      	movs	r1, #6
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	795b      	ldrb	r3, [r3, #5]
 800ded6:	4619      	mov	r1, r3
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 f90d 	bl	800e0f8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	791b      	ldrb	r3, [r3, #4]
 800dee2:	4619      	mov	r1, r3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 f907 	bl	800e0f8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800def0:	2302      	movs	r3, #2
 800def2:	73fb      	strb	r3, [r7, #15]
      break;
 800def4:	e00a      	b.n	800df0c <USBH_HandleControl+0x488>

    default:
      break;
 800def6:	bf00      	nop
 800def8:	e008      	b.n	800df0c <USBH_HandleControl+0x488>
      break;
 800defa:	bf00      	nop
 800defc:	e006      	b.n	800df0c <USBH_HandleControl+0x488>
      break;
 800defe:	bf00      	nop
 800df00:	e004      	b.n	800df0c <USBH_HandleControl+0x488>
      break;
 800df02:	bf00      	nop
 800df04:	e002      	b.n	800df0c <USBH_HandleControl+0x488>
      break;
 800df06:	bf00      	nop
 800df08:	e000      	b.n	800df0c <USBH_HandleControl+0x488>
      break;
 800df0a:	bf00      	nop
  }

  return status;
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop

0800df18 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b088      	sub	sp, #32
 800df1c:	af04      	add	r7, sp, #16
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	4613      	mov	r3, r2
 800df24:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800df26:	79f9      	ldrb	r1, [r7, #7]
 800df28:	2300      	movs	r3, #0
 800df2a:	9303      	str	r3, [sp, #12]
 800df2c:	2308      	movs	r3, #8
 800df2e:	9302      	str	r3, [sp, #8]
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	9301      	str	r3, [sp, #4]
 800df34:	2300      	movs	r3, #0
 800df36:	9300      	str	r3, [sp, #0]
 800df38:	2300      	movs	r3, #0
 800df3a:	2200      	movs	r2, #0
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f002 fda8 	bl	8010a92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b088      	sub	sp, #32
 800df50:	af04      	add	r7, sp, #16
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4611      	mov	r1, r2
 800df58:	461a      	mov	r2, r3
 800df5a:	460b      	mov	r3, r1
 800df5c:	80fb      	strh	r3, [r7, #6]
 800df5e:	4613      	mov	r3, r2
 800df60:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800df6c:	2300      	movs	r3, #0
 800df6e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800df70:	7979      	ldrb	r1, [r7, #5]
 800df72:	7e3b      	ldrb	r3, [r7, #24]
 800df74:	9303      	str	r3, [sp, #12]
 800df76:	88fb      	ldrh	r3, [r7, #6]
 800df78:	9302      	str	r3, [sp, #8]
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	9301      	str	r3, [sp, #4]
 800df7e:	2301      	movs	r3, #1
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	2300      	movs	r3, #0
 800df84:	2200      	movs	r2, #0
 800df86:	68f8      	ldr	r0, [r7, #12]
 800df88:	f002 fd83 	bl	8010a92 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800df96:	b580      	push	{r7, lr}
 800df98:	b088      	sub	sp, #32
 800df9a:	af04      	add	r7, sp, #16
 800df9c:	60f8      	str	r0, [r7, #12]
 800df9e:	60b9      	str	r1, [r7, #8]
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	80fb      	strh	r3, [r7, #6]
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dfac:	7979      	ldrb	r1, [r7, #5]
 800dfae:	2300      	movs	r3, #0
 800dfb0:	9303      	str	r3, [sp, #12]
 800dfb2:	88fb      	ldrh	r3, [r7, #6]
 800dfb4:	9302      	str	r3, [sp, #8]
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	9301      	str	r3, [sp, #4]
 800dfba:	2301      	movs	r3, #1
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f002 fd65 	bl	8010a92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dfc8:	2300      	movs	r3, #0

}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b088      	sub	sp, #32
 800dfd6:	af04      	add	r7, sp, #16
 800dfd8:	60f8      	str	r0, [r7, #12]
 800dfda:	60b9      	str	r1, [r7, #8]
 800dfdc:	4611      	mov	r1, r2
 800dfde:	461a      	mov	r2, r3
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	80fb      	strh	r3, [r7, #6]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dff2:	2300      	movs	r3, #0
 800dff4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dff6:	7979      	ldrb	r1, [r7, #5]
 800dff8:	7e3b      	ldrb	r3, [r7, #24]
 800dffa:	9303      	str	r3, [sp, #12]
 800dffc:	88fb      	ldrh	r3, [r7, #6]
 800dffe:	9302      	str	r3, [sp, #8]
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	9301      	str	r3, [sp, #4]
 800e004:	2301      	movs	r3, #1
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	2302      	movs	r3, #2
 800e00a:	2200      	movs	r2, #0
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f002 fd40 	bl	8010a92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b088      	sub	sp, #32
 800e020:	af04      	add	r7, sp, #16
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	4611      	mov	r1, r2
 800e028:	461a      	mov	r2, r3
 800e02a:	460b      	mov	r3, r1
 800e02c:	80fb      	strh	r3, [r7, #6]
 800e02e:	4613      	mov	r3, r2
 800e030:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e032:	7979      	ldrb	r1, [r7, #5]
 800e034:	2300      	movs	r3, #0
 800e036:	9303      	str	r3, [sp, #12]
 800e038:	88fb      	ldrh	r3, [r7, #6]
 800e03a:	9302      	str	r3, [sp, #8]
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	9301      	str	r3, [sp, #4]
 800e040:	2301      	movs	r3, #1
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	2302      	movs	r3, #2
 800e046:	2201      	movs	r2, #1
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f002 fd22 	bl	8010a92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e04e:	2300      	movs	r3, #0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b086      	sub	sp, #24
 800e05c:	af04      	add	r7, sp, #16
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	4608      	mov	r0, r1
 800e062:	4611      	mov	r1, r2
 800e064:	461a      	mov	r2, r3
 800e066:	4603      	mov	r3, r0
 800e068:	70fb      	strb	r3, [r7, #3]
 800e06a:	460b      	mov	r3, r1
 800e06c:	70bb      	strb	r3, [r7, #2]
 800e06e:	4613      	mov	r3, r2
 800e070:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e072:	7878      	ldrb	r0, [r7, #1]
 800e074:	78ba      	ldrb	r2, [r7, #2]
 800e076:	78f9      	ldrb	r1, [r7, #3]
 800e078:	8b3b      	ldrh	r3, [r7, #24]
 800e07a:	9302      	str	r3, [sp, #8]
 800e07c:	7d3b      	ldrb	r3, [r7, #20]
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	7c3b      	ldrb	r3, [r7, #16]
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	4603      	mov	r3, r0
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f002 fcb5 	bl	80109f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e08c:	2300      	movs	r3, #0
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3708      	adds	r7, #8
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e096:	b580      	push	{r7, lr}
 800e098:	b082      	sub	sp, #8
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
 800e09e:	460b      	mov	r3, r1
 800e0a0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e0a2:	78fb      	ldrb	r3, [r7, #3]
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f002 fcd4 	bl	8010a54 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b084      	sub	sp, #16
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
 800e0be:	460b      	mov	r3, r1
 800e0c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f836 	bl	800e134 <USBH_GetFreePipe>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e0cc:	89fb      	ldrh	r3, [r7, #14]
 800e0ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d00a      	beq.n	800e0ec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e0d6:	78fa      	ldrb	r2, [r7, #3]
 800e0d8:	89fb      	ldrh	r3, [r7, #14]
 800e0da:	f003 030f 	and.w	r3, r3, #15
 800e0de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e0e2:	6879      	ldr	r1, [r7, #4]
 800e0e4:	33e0      	adds	r3, #224	; 0xe0
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	440b      	add	r3, r1
 800e0ea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e0ec:	89fb      	ldrh	r3, [r7, #14]
 800e0ee:	b2db      	uxtb	r3, r3
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	460b      	mov	r3, r1
 800e102:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e104:	78fb      	ldrb	r3, [r7, #3]
 800e106:	2b0a      	cmp	r3, #10
 800e108:	d80d      	bhi.n	800e126 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e10a:	78fb      	ldrb	r3, [r7, #3]
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	33e0      	adds	r3, #224	; 0xe0
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	4413      	add	r3, r2
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	78fb      	ldrb	r3, [r7, #3]
 800e118:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e11c:	6879      	ldr	r1, [r7, #4]
 800e11e:	33e0      	adds	r3, #224	; 0xe0
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	440b      	add	r3, r1
 800e124:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e134:	b480      	push	{r7}
 800e136:	b085      	sub	sp, #20
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e140:	2300      	movs	r3, #0
 800e142:	73fb      	strb	r3, [r7, #15]
 800e144:	e00f      	b.n	800e166 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e146:	7bfb      	ldrb	r3, [r7, #15]
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	33e0      	adds	r3, #224	; 0xe0
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e156:	2b00      	cmp	r3, #0
 800e158:	d102      	bne.n	800e160 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e15a:	7bfb      	ldrb	r3, [r7, #15]
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	e007      	b.n	800e170 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e160:	7bfb      	ldrb	r3, [r7, #15]
 800e162:	3301      	adds	r3, #1
 800e164:	73fb      	strb	r3, [r7, #15]
 800e166:	7bfb      	ldrb	r3, [r7, #15]
 800e168:	2b0a      	cmp	r3, #10
 800e16a:	d9ec      	bls.n	800e146 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e16c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e170:	4618      	mov	r0, r3
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	4603      	mov	r3, r0
 800e184:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e186:	2300      	movs	r3, #0
 800e188:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e18a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e18e:	2b84      	cmp	r3, #132	; 0x84
 800e190:	d005      	beq.n	800e19e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e192:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	4413      	add	r3, r2
 800e19a:	3303      	adds	r3, #3
 800e19c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e19e:	68fb      	ldr	r3, [r7, #12]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1b2:	f3ef 8305 	mrs	r3, IPSR
 800e1b6:	607b      	str	r3, [r7, #4]
  return(result);
 800e1b8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	bf14      	ite	ne
 800e1be:	2301      	movne	r3, #1
 800e1c0:	2300      	moveq	r3, #0
 800e1c2:	b2db      	uxtb	r3, r3
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e1d4:	f001 f8f4 	bl	800f3c0 <vTaskStartScheduler>
  
  return osOK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e1de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1e0:	b089      	sub	sp, #36	; 0x24
 800e1e2:	af04      	add	r7, sp, #16
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	695b      	ldr	r3, [r3, #20]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d020      	beq.n	800e232 <osThreadCreate+0x54>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	699b      	ldr	r3, [r3, #24]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d01c      	beq.n	800e232 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	685c      	ldr	r4, [r3, #4]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681d      	ldr	r5, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	691e      	ldr	r6, [r3, #16]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7ff ffb6 	bl	800e17c <makeFreeRtosPriority>
 800e210:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e21a:	9202      	str	r2, [sp, #8]
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	9100      	str	r1, [sp, #0]
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	4632      	mov	r2, r6
 800e224:	4629      	mov	r1, r5
 800e226:	4620      	mov	r0, r4
 800e228:	f000 fefb 	bl	800f022 <xTaskCreateStatic>
 800e22c:	4603      	mov	r3, r0
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	e01c      	b.n	800e26c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	685c      	ldr	r4, [r3, #4]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e23e:	b29e      	uxth	r6, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff ff98 	bl	800e17c <makeFreeRtosPriority>
 800e24c:	4602      	mov	r2, r0
 800e24e:	f107 030c 	add.w	r3, r7, #12
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	9200      	str	r2, [sp, #0]
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	4632      	mov	r2, r6
 800e25a:	4629      	mov	r1, r5
 800e25c:	4620      	mov	r0, r4
 800e25e:	f000 ff3a 	bl	800f0d6 <xTaskCreate>
 800e262:	4603      	mov	r3, r0
 800e264:	2b01      	cmp	r3, #1
 800e266:	d001      	beq.n	800e26c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e268:	2300      	movs	r3, #0
 800e26a:	e000      	b.n	800e26e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e26c:	68fb      	ldr	r3, [r7, #12]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e276 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b084      	sub	sp, #16
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <osDelay+0x16>
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	e000      	b.n	800e28e <osDelay+0x18>
 800e28c:	2301      	movs	r3, #1
 800e28e:	4618      	mov	r0, r3
 800e290:	f001 f862 	bl	800f358 <vTaskDelay>
  
  return osOK;
 800e294:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e296:	4618      	mov	r0, r3
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e29e:	b590      	push	{r4, r7, lr}
 800e2a0:	b085      	sub	sp, #20
 800e2a2:	af02      	add	r7, sp, #8
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d012      	beq.n	800e2d6 <osMessageCreate+0x38>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00e      	beq.n	800e2d6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6818      	ldr	r0, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6859      	ldr	r1, [r3, #4]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	689a      	ldr	r2, [r3, #8]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	68dc      	ldr	r4, [r3, #12]
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	f000 f9df 	bl	800e690 <xQueueGenericCreateStatic>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	e008      	b.n	800e2e8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6818      	ldr	r0, [r3, #0]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	f000 fa48 	bl	800e776 <xQueueGenericCreate>
 800e2e6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd90      	pop	{r4, r7, pc}

0800e2f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d101      	bne.n	800e30e <osMessagePut+0x1e>
    ticks = 1;
 800e30a:	2301      	movs	r3, #1
 800e30c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e30e:	f7ff ff4d 	bl	800e1ac <inHandlerMode>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d018      	beq.n	800e34a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e318:	f107 0210 	add.w	r2, r7, #16
 800e31c:	f107 0108 	add.w	r1, r7, #8
 800e320:	2300      	movs	r3, #0
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f000 fb80 	bl	800ea28 <xQueueGenericSendFromISR>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d001      	beq.n	800e332 <osMessagePut+0x42>
      return osErrorOS;
 800e32e:	23ff      	movs	r3, #255	; 0xff
 800e330:	e018      	b.n	800e364 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d014      	beq.n	800e362 <osMessagePut+0x72>
 800e338:	4b0c      	ldr	r3, [pc, #48]	; (800e36c <osMessagePut+0x7c>)
 800e33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e33e:	601a      	str	r2, [r3, #0]
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	e00b      	b.n	800e362 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e34a:	f107 0108 	add.w	r1, r7, #8
 800e34e:	2300      	movs	r3, #0
 800e350:	697a      	ldr	r2, [r7, #20]
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f000 fa6e 	bl	800e834 <xQueueGenericSend>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d001      	beq.n	800e362 <osMessagePut+0x72>
      return osErrorOS;
 800e35e:	23ff      	movs	r3, #255	; 0xff
 800e360:	e000      	b.n	800e364 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3718      	adds	r7, #24
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	e000ed04 	.word	0xe000ed04

0800e370 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e370:	b590      	push	{r4, r7, lr}
 800e372:	b08b      	sub	sp, #44	; 0x2c
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e380:	2300      	movs	r3, #0
 800e382:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10a      	bne.n	800e3a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e38a:	2380      	movs	r3, #128	; 0x80
 800e38c:	617b      	str	r3, [r7, #20]
    return event;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	461c      	mov	r4, r3
 800e392:	f107 0314 	add.w	r3, r7, #20
 800e396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e39a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e39e:	e054      	b.n	800e44a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ae:	d103      	bne.n	800e3b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b6:	e009      	b.n	800e3cc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d006      	beq.n	800e3cc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d101      	bne.n	800e3cc <osMessageGet+0x5c>
      ticks = 1;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e3cc:	f7ff feee 	bl	800e1ac <inHandlerMode>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d01c      	beq.n	800e410 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e3d6:	f107 0220 	add.w	r2, r7, #32
 800e3da:	f107 0314 	add.w	r3, r7, #20
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	68b8      	ldr	r0, [r7, #8]
 800e3e4:	f000 fc90 	bl	800ed08 <xQueueReceiveFromISR>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d102      	bne.n	800e3f4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e3ee:	2310      	movs	r3, #16
 800e3f0:	617b      	str	r3, [r7, #20]
 800e3f2:	e001      	b.n	800e3f8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e3f8:	6a3b      	ldr	r3, [r7, #32]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d01d      	beq.n	800e43a <osMessageGet+0xca>
 800e3fe:	4b15      	ldr	r3, [pc, #84]	; (800e454 <osMessageGet+0xe4>)
 800e400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e404:	601a      	str	r2, [r3, #0]
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	f3bf 8f6f 	isb	sy
 800e40e:	e014      	b.n	800e43a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e410:	f107 0314 	add.w	r3, r7, #20
 800e414:	3304      	adds	r3, #4
 800e416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e418:	4619      	mov	r1, r3
 800e41a:	68b8      	ldr	r0, [r7, #8]
 800e41c:	f000 fb98 	bl	800eb50 <xQueueReceive>
 800e420:	4603      	mov	r3, r0
 800e422:	2b01      	cmp	r3, #1
 800e424:	d102      	bne.n	800e42c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e426:	2310      	movs	r3, #16
 800e428:	617b      	str	r3, [r7, #20]
 800e42a:	e006      	b.n	800e43a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <osMessageGet+0xc6>
 800e432:	2300      	movs	r3, #0
 800e434:	e000      	b.n	800e438 <osMessageGet+0xc8>
 800e436:	2340      	movs	r3, #64	; 0x40
 800e438:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	461c      	mov	r4, r3
 800e43e:	f107 0314 	add.w	r3, r7, #20
 800e442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e446:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	372c      	adds	r7, #44	; 0x2c
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd90      	pop	{r4, r7, pc}
 800e452:	bf00      	nop
 800e454:	e000ed04 	.word	0xe000ed04

0800e458 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f103 0208 	add.w	r2, r3, #8
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f04f 32ff 	mov.w	r2, #4294967295
 800e470:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f103 0208 	add.w	r2, r3, #8
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f103 0208 	add.w	r2, r3, #8
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2200      	movs	r2, #0
 800e48a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e48c:	bf00      	nop
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e4a6:	bf00      	nop
 800e4a8:	370c      	adds	r7, #12
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr

0800e4b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4b2:	b480      	push	{r7}
 800e4b4:	b085      	sub	sp, #20
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
 800e4ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	689a      	ldr	r2, [r3, #8]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	689b      	ldr	r3, [r3, #8]
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	683a      	ldr	r2, [r7, #0]
 800e4dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	1c5a      	adds	r2, r3, #1
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	601a      	str	r2, [r3, #0]
}
 800e4ee:	bf00      	nop
 800e4f0:	3714      	adds	r7, #20
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr

0800e4fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4fa:	b480      	push	{r7}
 800e4fc:	b085      	sub	sp, #20
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
 800e502:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e510:	d103      	bne.n	800e51a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	691b      	ldr	r3, [r3, #16]
 800e516:	60fb      	str	r3, [r7, #12]
 800e518:	e00c      	b.n	800e534 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	3308      	adds	r3, #8
 800e51e:	60fb      	str	r3, [r7, #12]
 800e520:	e002      	b.n	800e528 <vListInsert+0x2e>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	60fb      	str	r3, [r7, #12]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	429a      	cmp	r2, r3
 800e532:	d2f6      	bcs.n	800e522 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	685a      	ldr	r2, [r3, #4]
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	683a      	ldr	r2, [r7, #0]
 800e542:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	683a      	ldr	r2, [r7, #0]
 800e54e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	1c5a      	adds	r2, r3, #1
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	601a      	str	r2, [r3, #0]
}
 800e560:	bf00      	nop
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e56c:	b480      	push	{r7}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	6892      	ldr	r2, [r2, #8]
 800e582:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	6852      	ldr	r2, [r2, #4]
 800e58c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	429a      	cmp	r2, r3
 800e596:	d103      	bne.n	800e5a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	689a      	ldr	r2, [r3, #8]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	1e5a      	subs	r2, r3, #1
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d109      	bne.n	800e5e8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d8:	f383 8811 	msr	BASEPRI, r3
 800e5dc:	f3bf 8f6f 	isb	sy
 800e5e0:	f3bf 8f4f 	dsb	sy
 800e5e4:	60bb      	str	r3, [r7, #8]
 800e5e6:	e7fe      	b.n	800e5e6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e5e8:	f001 fd38 	bl	801005c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f4:	68f9      	ldr	r1, [r7, #12]
 800e5f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e5f8:	fb01 f303 	mul.w	r3, r1, r3
 800e5fc:	441a      	add	r2, r3
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e618:	3b01      	subs	r3, #1
 800e61a:	68f9      	ldr	r1, [r7, #12]
 800e61c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e61e:	fb01 f303 	mul.w	r3, r1, r3
 800e622:	441a      	add	r2, r3
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	22ff      	movs	r2, #255	; 0xff
 800e62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	22ff      	movs	r2, #255	; 0xff
 800e634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d114      	bne.n	800e668 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d01a      	beq.n	800e67c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	3310      	adds	r3, #16
 800e64a:	4618      	mov	r0, r3
 800e64c:	f001 f91c 	bl	800f888 <xTaskRemoveFromEventList>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d012      	beq.n	800e67c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e656:	4b0d      	ldr	r3, [pc, #52]	; (800e68c <xQueueGenericReset+0xcc>)
 800e658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e65c:	601a      	str	r2, [r3, #0]
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	f3bf 8f6f 	isb	sy
 800e666:	e009      	b.n	800e67c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3310      	adds	r3, #16
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7ff fef3 	bl	800e458 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	3324      	adds	r3, #36	; 0x24
 800e676:	4618      	mov	r0, r3
 800e678:	f7ff feee 	bl	800e458 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e67c:	f001 fd1c 	bl	80100b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e680:	2301      	movs	r3, #1
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	e000ed04 	.word	0xe000ed04

0800e690 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e690:	b580      	push	{r7, lr}
 800e692:	b08e      	sub	sp, #56	; 0x38
 800e694:	af02      	add	r7, sp, #8
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
 800e69c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d109      	bne.n	800e6b8 <xQueueGenericCreateStatic+0x28>
 800e6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6b6:	e7fe      	b.n	800e6b6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d109      	bne.n	800e6d2 <xQueueGenericCreateStatic+0x42>
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e6d0:	e7fe      	b.n	800e6d0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d002      	beq.n	800e6de <xQueueGenericCreateStatic+0x4e>
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d001      	beq.n	800e6e2 <xQueueGenericCreateStatic+0x52>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e000      	b.n	800e6e4 <xQueueGenericCreateStatic+0x54>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d109      	bne.n	800e6fc <xQueueGenericCreateStatic+0x6c>
 800e6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	623b      	str	r3, [r7, #32]
 800e6fa:	e7fe      	b.n	800e6fa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d102      	bne.n	800e708 <xQueueGenericCreateStatic+0x78>
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d101      	bne.n	800e70c <xQueueGenericCreateStatic+0x7c>
 800e708:	2301      	movs	r3, #1
 800e70a:	e000      	b.n	800e70e <xQueueGenericCreateStatic+0x7e>
 800e70c:	2300      	movs	r3, #0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d109      	bne.n	800e726 <xQueueGenericCreateStatic+0x96>
 800e712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	61fb      	str	r3, [r7, #28]
 800e724:	e7fe      	b.n	800e724 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e726:	2348      	movs	r3, #72	; 0x48
 800e728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	2b48      	cmp	r3, #72	; 0x48
 800e72e:	d009      	beq.n	800e744 <xQueueGenericCreateStatic+0xb4>
 800e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	61bb      	str	r3, [r7, #24]
 800e742:	e7fe      	b.n	800e742 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e744:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00d      	beq.n	800e76c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	2201      	movs	r2, #1
 800e754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e758:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	4613      	mov	r3, r2
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	68b9      	ldr	r1, [r7, #8]
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f000 f844 	bl	800e7f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e76e:	4618      	mov	r0, r3
 800e770:	3730      	adds	r7, #48	; 0x30
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e776:	b580      	push	{r7, lr}
 800e778:	b08a      	sub	sp, #40	; 0x28
 800e77a:	af02      	add	r7, sp, #8
 800e77c:	60f8      	str	r0, [r7, #12]
 800e77e:	60b9      	str	r1, [r7, #8]
 800e780:	4613      	mov	r3, r2
 800e782:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d109      	bne.n	800e79e <xQueueGenericCreate+0x28>
 800e78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78e:	f383 8811 	msr	BASEPRI, r3
 800e792:	f3bf 8f6f 	isb	sy
 800e796:	f3bf 8f4f 	dsb	sy
 800e79a:	613b      	str	r3, [r7, #16]
 800e79c:	e7fe      	b.n	800e79c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d102      	bne.n	800e7aa <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	61fb      	str	r3, [r7, #28]
 800e7a8:	e004      	b.n	800e7b4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	68ba      	ldr	r2, [r7, #8]
 800e7ae:	fb02 f303 	mul.w	r3, r2, r3
 800e7b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	3348      	adds	r3, #72	; 0x48
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f001 fd69 	bl	8010290 <pvPortMalloc>
 800e7be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d011      	beq.n	800e7ea <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	3348      	adds	r3, #72	; 0x48
 800e7ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e7d8:	79fa      	ldrb	r2, [r7, #7]
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	697a      	ldr	r2, [r7, #20]
 800e7e2:	68b9      	ldr	r1, [r7, #8]
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f000 f805 	bl	800e7f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e7ea:	69bb      	ldr	r3, [r7, #24]
	}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3720      	adds	r7, #32
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d103      	bne.n	800e810 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e808:	69bb      	ldr	r3, [r7, #24]
 800e80a:	69ba      	ldr	r2, [r7, #24]
 800e80c:	601a      	str	r2, [r3, #0]
 800e80e:	e002      	b.n	800e816 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e822:	2101      	movs	r1, #1
 800e824:	69b8      	ldr	r0, [r7, #24]
 800e826:	f7ff fecb 	bl	800e5c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e82a:	bf00      	nop
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
	...

0800e834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b08e      	sub	sp, #56	; 0x38
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
 800e840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e842:	2300      	movs	r3, #0
 800e844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d109      	bne.n	800e864 <xQueueGenericSend+0x30>
 800e850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	62bb      	str	r3, [r7, #40]	; 0x28
 800e862:	e7fe      	b.n	800e862 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d103      	bne.n	800e872 <xQueueGenericSend+0x3e>
 800e86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d101      	bne.n	800e876 <xQueueGenericSend+0x42>
 800e872:	2301      	movs	r3, #1
 800e874:	e000      	b.n	800e878 <xQueueGenericSend+0x44>
 800e876:	2300      	movs	r3, #0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d109      	bne.n	800e890 <xQueueGenericSend+0x5c>
 800e87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e880:	f383 8811 	msr	BASEPRI, r3
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
 800e88e:	e7fe      	b.n	800e88e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2b02      	cmp	r3, #2
 800e894:	d103      	bne.n	800e89e <xQueueGenericSend+0x6a>
 800e896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d101      	bne.n	800e8a2 <xQueueGenericSend+0x6e>
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e000      	b.n	800e8a4 <xQueueGenericSend+0x70>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d109      	bne.n	800e8bc <xQueueGenericSend+0x88>
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	623b      	str	r3, [r7, #32]
 800e8ba:	e7fe      	b.n	800e8ba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8bc:	f001 f99c 	bl	800fbf8 <xTaskGetSchedulerState>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d102      	bne.n	800e8cc <xQueueGenericSend+0x98>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d101      	bne.n	800e8d0 <xQueueGenericSend+0x9c>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	e000      	b.n	800e8d2 <xQueueGenericSend+0x9e>
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d109      	bne.n	800e8ea <xQueueGenericSend+0xb6>
 800e8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8da:	f383 8811 	msr	BASEPRI, r3
 800e8de:	f3bf 8f6f 	isb	sy
 800e8e2:	f3bf 8f4f 	dsb	sy
 800e8e6:	61fb      	str	r3, [r7, #28]
 800e8e8:	e7fe      	b.n	800e8e8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8ea:	f001 fbb7 	bl	801005c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d302      	bcc.n	800e900 <xQueueGenericSend+0xcc>
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	d129      	bne.n	800e954 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	68b9      	ldr	r1, [r7, #8]
 800e904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e906:	f000 fa7c 	bl	800ee02 <prvCopyDataToQueue>
 800e90a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e910:	2b00      	cmp	r3, #0
 800e912:	d010      	beq.n	800e936 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e916:	3324      	adds	r3, #36	; 0x24
 800e918:	4618      	mov	r0, r3
 800e91a:	f000 ffb5 	bl	800f888 <xTaskRemoveFromEventList>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d013      	beq.n	800e94c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e924:	4b3f      	ldr	r3, [pc, #252]	; (800ea24 <xQueueGenericSend+0x1f0>)
 800e926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	f3bf 8f6f 	isb	sy
 800e934:	e00a      	b.n	800e94c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d007      	beq.n	800e94c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e93c:	4b39      	ldr	r3, [pc, #228]	; (800ea24 <xQueueGenericSend+0x1f0>)
 800e93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e94c:	f001 fbb4 	bl	80100b8 <vPortExitCritical>
				return pdPASS;
 800e950:	2301      	movs	r3, #1
 800e952:	e063      	b.n	800ea1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d103      	bne.n	800e962 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e95a:	f001 fbad 	bl	80100b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e95e:	2300      	movs	r3, #0
 800e960:	e05c      	b.n	800ea1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e964:	2b00      	cmp	r3, #0
 800e966:	d106      	bne.n	800e976 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e968:	f107 0314 	add.w	r3, r7, #20
 800e96c:	4618      	mov	r0, r3
 800e96e:	f000 ffed 	bl	800f94c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e972:	2301      	movs	r3, #1
 800e974:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e976:	f001 fb9f 	bl	80100b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e97a:	f000 fd7f 	bl	800f47c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e97e:	f001 fb6d 	bl	801005c <vPortEnterCritical>
 800e982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e988:	b25b      	sxtb	r3, r3
 800e98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98e:	d103      	bne.n	800e998 <xQueueGenericSend+0x164>
 800e990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e992:	2200      	movs	r2, #0
 800e994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e99e:	b25b      	sxtb	r3, r3
 800e9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a4:	d103      	bne.n	800e9ae <xQueueGenericSend+0x17a>
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9ae:	f001 fb83 	bl	80100b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9b2:	1d3a      	adds	r2, r7, #4
 800e9b4:	f107 0314 	add.w	r3, r7, #20
 800e9b8:	4611      	mov	r1, r2
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 ffdc 	bl	800f978 <xTaskCheckForTimeOut>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d124      	bne.n	800ea10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e9c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9c8:	f000 fb13 	bl	800eff2 <prvIsQueueFull>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d018      	beq.n	800ea04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d4:	3310      	adds	r3, #16
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	4611      	mov	r1, r2
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f000 ff30 	bl	800f840 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e9e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9e2:	f000 fa9e 	bl	800ef22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e9e6:	f000 fd57 	bl	800f498 <xTaskResumeAll>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f47f af7c 	bne.w	800e8ea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800e9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ea24 <xQueueGenericSend+0x1f0>)
 800e9f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9f8:	601a      	str	r2, [r3, #0]
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	f3bf 8f6f 	isb	sy
 800ea02:	e772      	b.n	800e8ea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ea04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea06:	f000 fa8c 	bl	800ef22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea0a:	f000 fd45 	bl	800f498 <xTaskResumeAll>
 800ea0e:	e76c      	b.n	800e8ea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ea10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea12:	f000 fa86 	bl	800ef22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea16:	f000 fd3f 	bl	800f498 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ea1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3738      	adds	r7, #56	; 0x38
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	e000ed04 	.word	0xe000ed04

0800ea28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b08e      	sub	sp, #56	; 0x38
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
 800ea34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d109      	bne.n	800ea54 <xQueueGenericSendFromISR+0x2c>
 800ea40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea44:	f383 8811 	msr	BASEPRI, r3
 800ea48:	f3bf 8f6f 	isb	sy
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	627b      	str	r3, [r7, #36]	; 0x24
 800ea52:	e7fe      	b.n	800ea52 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d103      	bne.n	800ea62 <xQueueGenericSendFromISR+0x3a>
 800ea5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d101      	bne.n	800ea66 <xQueueGenericSendFromISR+0x3e>
 800ea62:	2301      	movs	r3, #1
 800ea64:	e000      	b.n	800ea68 <xQueueGenericSendFromISR+0x40>
 800ea66:	2300      	movs	r3, #0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d109      	bne.n	800ea80 <xQueueGenericSendFromISR+0x58>
 800ea6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	623b      	str	r3, [r7, #32]
 800ea7e:	e7fe      	b.n	800ea7e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2b02      	cmp	r3, #2
 800ea84:	d103      	bne.n	800ea8e <xQueueGenericSendFromISR+0x66>
 800ea86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d101      	bne.n	800ea92 <xQueueGenericSendFromISR+0x6a>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e000      	b.n	800ea94 <xQueueGenericSendFromISR+0x6c>
 800ea92:	2300      	movs	r3, #0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d109      	bne.n	800eaac <xQueueGenericSendFromISR+0x84>
 800ea98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9c:	f383 8811 	msr	BASEPRI, r3
 800eaa0:	f3bf 8f6f 	isb	sy
 800eaa4:	f3bf 8f4f 	dsb	sy
 800eaa8:	61fb      	str	r3, [r7, #28]
 800eaaa:	e7fe      	b.n	800eaaa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eaac:	f001 fbb2 	bl	8010214 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eab0:	f3ef 8211 	mrs	r2, BASEPRI
 800eab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab8:	f383 8811 	msr	BASEPRI, r3
 800eabc:	f3bf 8f6f 	isb	sy
 800eac0:	f3bf 8f4f 	dsb	sy
 800eac4:	61ba      	str	r2, [r7, #24]
 800eac6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eac8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eaca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ead0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d302      	bcc.n	800eade <xQueueGenericSendFromISR+0xb6>
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d12c      	bne.n	800eb38 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eae8:	683a      	ldr	r2, [r7, #0]
 800eaea:	68b9      	ldr	r1, [r7, #8]
 800eaec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaee:	f000 f988 	bl	800ee02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eaf2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800eaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eafa:	d112      	bne.n	800eb22 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d016      	beq.n	800eb32 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb06:	3324      	adds	r3, #36	; 0x24
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f000 febd 	bl	800f888 <xTaskRemoveFromEventList>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00e      	beq.n	800eb32 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00b      	beq.n	800eb32 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	601a      	str	r2, [r3, #0]
 800eb20:	e007      	b.n	800eb32 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eb22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb26:	3301      	adds	r3, #1
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	b25a      	sxtb	r2, r3
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eb32:	2301      	movs	r3, #1
 800eb34:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800eb36:	e001      	b.n	800eb3c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	637b      	str	r3, [r7, #52]	; 0x34
 800eb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3738      	adds	r7, #56	; 0x38
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b08c      	sub	sp, #48	; 0x30
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d109      	bne.n	800eb7e <xQueueReceive+0x2e>
	__asm volatile
 800eb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6e:	f383 8811 	msr	BASEPRI, r3
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	623b      	str	r3, [r7, #32]
 800eb7c:	e7fe      	b.n	800eb7c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d103      	bne.n	800eb8c <xQueueReceive+0x3c>
 800eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d101      	bne.n	800eb90 <xQueueReceive+0x40>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e000      	b.n	800eb92 <xQueueReceive+0x42>
 800eb90:	2300      	movs	r3, #0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d109      	bne.n	800ebaa <xQueueReceive+0x5a>
 800eb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9a:	f383 8811 	msr	BASEPRI, r3
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	f3bf 8f4f 	dsb	sy
 800eba6:	61fb      	str	r3, [r7, #28]
 800eba8:	e7fe      	b.n	800eba8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebaa:	f001 f825 	bl	800fbf8 <xTaskGetSchedulerState>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d102      	bne.n	800ebba <xQueueReceive+0x6a>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d101      	bne.n	800ebbe <xQueueReceive+0x6e>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e000      	b.n	800ebc0 <xQueueReceive+0x70>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d109      	bne.n	800ebd8 <xQueueReceive+0x88>
 800ebc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc8:	f383 8811 	msr	BASEPRI, r3
 800ebcc:	f3bf 8f6f 	isb	sy
 800ebd0:	f3bf 8f4f 	dsb	sy
 800ebd4:	61bb      	str	r3, [r7, #24]
 800ebd6:	e7fe      	b.n	800ebd6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebd8:	f001 fa40 	bl	801005c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d01f      	beq.n	800ec28 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ebe8:	68b9      	ldr	r1, [r7, #8]
 800ebea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebec:	f000 f973 	bl	800eed6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf2:	1e5a      	subs	r2, r3, #1
 800ebf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfa:	691b      	ldr	r3, [r3, #16]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00f      	beq.n	800ec20 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec02:	3310      	adds	r3, #16
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 fe3f 	bl	800f888 <xTaskRemoveFromEventList>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d007      	beq.n	800ec20 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ec10:	4b3c      	ldr	r3, [pc, #240]	; (800ed04 <xQueueReceive+0x1b4>)
 800ec12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec16:	601a      	str	r2, [r3, #0]
 800ec18:	f3bf 8f4f 	dsb	sy
 800ec1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ec20:	f001 fa4a 	bl	80100b8 <vPortExitCritical>
				return pdPASS;
 800ec24:	2301      	movs	r3, #1
 800ec26:	e069      	b.n	800ecfc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d103      	bne.n	800ec36 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec2e:	f001 fa43 	bl	80100b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec32:	2300      	movs	r3, #0
 800ec34:	e062      	b.n	800ecfc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d106      	bne.n	800ec4a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec3c:	f107 0310 	add.w	r3, r7, #16
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 fe83 	bl	800f94c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec46:	2301      	movs	r3, #1
 800ec48:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec4a:	f001 fa35 	bl	80100b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec4e:	f000 fc15 	bl	800f47c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec52:	f001 fa03 	bl	801005c <vPortEnterCritical>
 800ec56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec5c:	b25b      	sxtb	r3, r3
 800ec5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec62:	d103      	bne.n	800ec6c <xQueueReceive+0x11c>
 800ec64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec66:	2200      	movs	r2, #0
 800ec68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec72:	b25b      	sxtb	r3, r3
 800ec74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec78:	d103      	bne.n	800ec82 <xQueueReceive+0x132>
 800ec7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec82:	f001 fa19 	bl	80100b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec86:	1d3a      	adds	r2, r7, #4
 800ec88:	f107 0310 	add.w	r3, r7, #16
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f000 fe72 	bl	800f978 <xTaskCheckForTimeOut>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d123      	bne.n	800ece2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec9c:	f000 f993 	bl	800efc6 <prvIsQueueEmpty>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d017      	beq.n	800ecd6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca8:	3324      	adds	r3, #36	; 0x24
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	4611      	mov	r1, r2
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f000 fdc6 	bl	800f840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ecb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecb6:	f000 f934 	bl	800ef22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ecba:	f000 fbed 	bl	800f498 <xTaskResumeAll>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d189      	bne.n	800ebd8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ecc4:	4b0f      	ldr	r3, [pc, #60]	; (800ed04 <xQueueReceive+0x1b4>)
 800ecc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecca:	601a      	str	r2, [r3, #0]
 800eccc:	f3bf 8f4f 	dsb	sy
 800ecd0:	f3bf 8f6f 	isb	sy
 800ecd4:	e780      	b.n	800ebd8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ecd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecd8:	f000 f923 	bl	800ef22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ecdc:	f000 fbdc 	bl	800f498 <xTaskResumeAll>
 800ece0:	e77a      	b.n	800ebd8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ece2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ece4:	f000 f91d 	bl	800ef22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ece8:	f000 fbd6 	bl	800f498 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ecec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecee:	f000 f96a 	bl	800efc6 <prvIsQueueEmpty>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f43f af6f 	beq.w	800ebd8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ecfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3730      	adds	r7, #48	; 0x30
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	e000ed04 	.word	0xe000ed04

0800ed08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b08e      	sub	sp, #56	; 0x38
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d109      	bne.n	800ed32 <xQueueReceiveFromISR+0x2a>
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	f383 8811 	msr	BASEPRI, r3
 800ed26:	f3bf 8f6f 	isb	sy
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	623b      	str	r3, [r7, #32]
 800ed30:	e7fe      	b.n	800ed30 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d103      	bne.n	800ed40 <xQueueReceiveFromISR+0x38>
 800ed38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <xQueueReceiveFromISR+0x3c>
 800ed40:	2301      	movs	r3, #1
 800ed42:	e000      	b.n	800ed46 <xQueueReceiveFromISR+0x3e>
 800ed44:	2300      	movs	r3, #0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d109      	bne.n	800ed5e <xQueueReceiveFromISR+0x56>
 800ed4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4e:	f383 8811 	msr	BASEPRI, r3
 800ed52:	f3bf 8f6f 	isb	sy
 800ed56:	f3bf 8f4f 	dsb	sy
 800ed5a:	61fb      	str	r3, [r7, #28]
 800ed5c:	e7fe      	b.n	800ed5c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed5e:	f001 fa59 	bl	8010214 <vPortValidateInterruptPriority>
	__asm volatile
 800ed62:	f3ef 8211 	mrs	r2, BASEPRI
 800ed66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6a:	f383 8811 	msr	BASEPRI, r3
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	f3bf 8f4f 	dsb	sy
 800ed76:	61ba      	str	r2, [r7, #24]
 800ed78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ed7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d02f      	beq.n	800edea <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed94:	68b9      	ldr	r1, [r7, #8]
 800ed96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed98:	f000 f89d 	bl	800eed6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9e:	1e5a      	subs	r2, r3, #1
 800eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eda4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edac:	d112      	bne.n	800edd4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d016      	beq.n	800ede4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb8:	3310      	adds	r3, #16
 800edba:	4618      	mov	r0, r3
 800edbc:	f000 fd64 	bl	800f888 <xTaskRemoveFromEventList>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00e      	beq.n	800ede4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00b      	beq.n	800ede4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2201      	movs	r2, #1
 800edd0:	601a      	str	r2, [r3, #0]
 800edd2:	e007      	b.n	800ede4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800edd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edd8:	3301      	adds	r3, #1
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	b25a      	sxtb	r2, r3
 800edde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ede4:	2301      	movs	r3, #1
 800ede6:	637b      	str	r3, [r7, #52]	; 0x34
 800ede8:	e001      	b.n	800edee <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800edea:	2300      	movs	r3, #0
 800edec:	637b      	str	r3, [r7, #52]	; 0x34
 800edee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3738      	adds	r7, #56	; 0x38
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b086      	sub	sp, #24
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	60f8      	str	r0, [r7, #12]
 800ee0a:	60b9      	str	r1, [r7, #8]
 800ee0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10d      	bne.n	800ee3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d14d      	bne.n	800eec4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f000 ff01 	bl	800fc34 <xTaskPriorityDisinherit>
 800ee32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2200      	movs	r2, #0
 800ee38:	609a      	str	r2, [r3, #8]
 800ee3a:	e043      	b.n	800eec4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d119      	bne.n	800ee76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6858      	ldr	r0, [r3, #4]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	68b9      	ldr	r1, [r7, #8]
 800ee4e:	f001 ff55 	bl	8010cfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	685a      	ldr	r2, [r3, #4]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee5a:	441a      	add	r2, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	685a      	ldr	r2, [r3, #4]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d32b      	bcc.n	800eec4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	605a      	str	r2, [r3, #4]
 800ee74:	e026      	b.n	800eec4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	68d8      	ldr	r0, [r3, #12]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee7e:	461a      	mov	r2, r3
 800ee80:	68b9      	ldr	r1, [r7, #8]
 800ee82:	f001 ff3b 	bl	8010cfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	68da      	ldr	r2, [r3, #12]
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee8e:	425b      	negs	r3, r3
 800ee90:	441a      	add	r2, r3
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	68da      	ldr	r2, [r3, #12]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d207      	bcs.n	800eeb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	689a      	ldr	r2, [r3, #8]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeaa:	425b      	negs	r3, r3
 800eeac:	441a      	add	r2, r3
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d105      	bne.n	800eec4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d002      	beq.n	800eec4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	3b01      	subs	r3, #1
 800eec2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eecc:	697b      	ldr	r3, [r7, #20]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b082      	sub	sp, #8
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d018      	beq.n	800ef1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	68da      	ldr	r2, [r3, #12]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eef0:	441a      	add	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	68da      	ldr	r2, [r3, #12]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d303      	bcc.n	800ef0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	68d9      	ldr	r1, [r3, #12]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef12:	461a      	mov	r2, r3
 800ef14:	6838      	ldr	r0, [r7, #0]
 800ef16:	f001 fef1 	bl	8010cfc <memcpy>
	}
}
 800ef1a:	bf00      	nop
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b084      	sub	sp, #16
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ef2a:	f001 f897 	bl	801005c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef36:	e011      	b.n	800ef5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d012      	beq.n	800ef66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	3324      	adds	r3, #36	; 0x24
 800ef44:	4618      	mov	r0, r3
 800ef46:	f000 fc9f 	bl	800f888 <xTaskRemoveFromEventList>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ef50:	f000 fd72 	bl	800fa38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ef54:	7bfb      	ldrb	r3, [r7, #15]
 800ef56:	3b01      	subs	r3, #1
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	dce9      	bgt.n	800ef38 <prvUnlockQueue+0x16>
 800ef64:	e000      	b.n	800ef68 <prvUnlockQueue+0x46>
					break;
 800ef66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	22ff      	movs	r2, #255	; 0xff
 800ef6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ef70:	f001 f8a2 	bl	80100b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ef74:	f001 f872 	bl	801005c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef80:	e011      	b.n	800efa6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	691b      	ldr	r3, [r3, #16]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d012      	beq.n	800efb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	3310      	adds	r3, #16
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f000 fc7a 	bl	800f888 <xTaskRemoveFromEventList>
 800ef94:	4603      	mov	r3, r0
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ef9a:	f000 fd4d 	bl	800fa38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ef9e:	7bbb      	ldrb	r3, [r7, #14]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	dce9      	bgt.n	800ef82 <prvUnlockQueue+0x60>
 800efae:	e000      	b.n	800efb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800efb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	22ff      	movs	r2, #255	; 0xff
 800efb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800efba:	f001 f87d 	bl	80100b8 <vPortExitCritical>
}
 800efbe:	bf00      	nop
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b084      	sub	sp, #16
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800efce:	f001 f845 	bl	801005c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d102      	bne.n	800efe0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800efda:	2301      	movs	r3, #1
 800efdc:	60fb      	str	r3, [r7, #12]
 800efde:	e001      	b.n	800efe4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800efe0:	2300      	movs	r3, #0
 800efe2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800efe4:	f001 f868 	bl	80100b8 <vPortExitCritical>

	return xReturn;
 800efe8:	68fb      	ldr	r3, [r7, #12]
}
 800efea:	4618      	mov	r0, r3
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b084      	sub	sp, #16
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800effa:	f001 f82f 	bl	801005c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f006:	429a      	cmp	r2, r3
 800f008:	d102      	bne.n	800f010 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f00a:	2301      	movs	r3, #1
 800f00c:	60fb      	str	r3, [r7, #12]
 800f00e:	e001      	b.n	800f014 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f010:	2300      	movs	r3, #0
 800f012:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f014:	f001 f850 	bl	80100b8 <vPortExitCritical>

	return xReturn;
 800f018:	68fb      	ldr	r3, [r7, #12]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f022:	b580      	push	{r7, lr}
 800f024:	b08e      	sub	sp, #56	; 0x38
 800f026:	af04      	add	r7, sp, #16
 800f028:	60f8      	str	r0, [r7, #12]
 800f02a:	60b9      	str	r1, [r7, #8]
 800f02c:	607a      	str	r2, [r7, #4]
 800f02e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f032:	2b00      	cmp	r3, #0
 800f034:	d109      	bne.n	800f04a <xTaskCreateStatic+0x28>
	__asm volatile
 800f036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03a:	f383 8811 	msr	BASEPRI, r3
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f3bf 8f4f 	dsb	sy
 800f046:	623b      	str	r3, [r7, #32]
 800f048:	e7fe      	b.n	800f048 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800f04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d109      	bne.n	800f064 <xTaskCreateStatic+0x42>
 800f050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f054:	f383 8811 	msr	BASEPRI, r3
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	61fb      	str	r3, [r7, #28]
 800f062:	e7fe      	b.n	800f062 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f064:	2358      	movs	r3, #88	; 0x58
 800f066:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	2b58      	cmp	r3, #88	; 0x58
 800f06c:	d009      	beq.n	800f082 <xTaskCreateStatic+0x60>
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	61bb      	str	r3, [r7, #24]
 800f080:	e7fe      	b.n	800f080 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f082:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f086:	2b00      	cmp	r3, #0
 800f088:	d01e      	beq.n	800f0c8 <xTaskCreateStatic+0xa6>
 800f08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d01b      	beq.n	800f0c8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f098:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09c:	2202      	movs	r2, #2
 800f09e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	9303      	str	r3, [sp, #12]
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	9302      	str	r3, [sp, #8]
 800f0aa:	f107 0314 	add.w	r3, r7, #20
 800f0ae:	9301      	str	r3, [sp, #4]
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	68b9      	ldr	r1, [r7, #8]
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 f850 	bl	800f160 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0c2:	f000 f8df 	bl	800f284 <prvAddNewTaskToReadyList>
 800f0c6:	e001      	b.n	800f0cc <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f0cc:	697b      	ldr	r3, [r7, #20]
	}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3728      	adds	r7, #40	; 0x28
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f0d6:	b580      	push	{r7, lr}
 800f0d8:	b08c      	sub	sp, #48	; 0x30
 800f0da:	af04      	add	r7, sp, #16
 800f0dc:	60f8      	str	r0, [r7, #12]
 800f0de:	60b9      	str	r1, [r7, #8]
 800f0e0:	603b      	str	r3, [r7, #0]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f0e6:	88fb      	ldrh	r3, [r7, #6]
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f001 f8d0 	bl	8010290 <pvPortMalloc>
 800f0f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00e      	beq.n	800f116 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f0f8:	2058      	movs	r0, #88	; 0x58
 800f0fa:	f001 f8c9 	bl	8010290 <pvPortMalloc>
 800f0fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d003      	beq.n	800f10e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	697a      	ldr	r2, [r7, #20]
 800f10a:	631a      	str	r2, [r3, #48]	; 0x30
 800f10c:	e005      	b.n	800f11a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f10e:	6978      	ldr	r0, [r7, #20]
 800f110:	f001 f984 	bl	801041c <vPortFree>
 800f114:	e001      	b.n	800f11a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f116:	2300      	movs	r3, #0
 800f118:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d017      	beq.n	800f150 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	2200      	movs	r2, #0
 800f124:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f128:	88fa      	ldrh	r2, [r7, #6]
 800f12a:	2300      	movs	r3, #0
 800f12c:	9303      	str	r3, [sp, #12]
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	9302      	str	r3, [sp, #8]
 800f132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f134:	9301      	str	r3, [sp, #4]
 800f136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	68b9      	ldr	r1, [r7, #8]
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f000 f80e 	bl	800f160 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f144:	69f8      	ldr	r0, [r7, #28]
 800f146:	f000 f89d 	bl	800f284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f14a:	2301      	movs	r3, #1
 800f14c:	61bb      	str	r3, [r7, #24]
 800f14e:	e002      	b.n	800f156 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f150:	f04f 33ff 	mov.w	r3, #4294967295
 800f154:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f156:	69bb      	ldr	r3, [r7, #24]
	}
 800f158:	4618      	mov	r0, r3
 800f15a:	3720      	adds	r7, #32
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b088      	sub	sp, #32
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	607a      	str	r2, [r7, #4]
 800f16c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f170:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	461a      	mov	r2, r3
 800f178:	21a5      	movs	r1, #165	; 0xa5
 800f17a:	f001 fdca 	bl	8010d12 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f188:	3b01      	subs	r3, #1
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	4413      	add	r3, r2
 800f18e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	f023 0307 	bic.w	r3, r3, #7
 800f196:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	f003 0307 	and.w	r3, r3, #7
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d009      	beq.n	800f1b6 <prvInitialiseNewTask+0x56>
 800f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a6:	f383 8811 	msr	BASEPRI, r3
 800f1aa:	f3bf 8f6f 	isb	sy
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	617b      	str	r3, [r7, #20]
 800f1b4:	e7fe      	b.n	800f1b4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d01f      	beq.n	800f1fc <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1bc:	2300      	movs	r3, #0
 800f1be:	61fb      	str	r3, [r7, #28]
 800f1c0:	e012      	b.n	800f1e8 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f1c2:	68ba      	ldr	r2, [r7, #8]
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	4413      	add	r3, r2
 800f1c8:	7819      	ldrb	r1, [r3, #0]
 800f1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	3334      	adds	r3, #52	; 0x34
 800f1d2:	460a      	mov	r2, r1
 800f1d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	4413      	add	r3, r2
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d006      	beq.n	800f1f0 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	61fb      	str	r3, [r7, #28]
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	2b0f      	cmp	r3, #15
 800f1ec:	d9e9      	bls.n	800f1c2 <prvInitialiseNewTask+0x62>
 800f1ee:	e000      	b.n	800f1f2 <prvInitialiseNewTask+0x92>
			{
				break;
 800f1f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f1fa:	e003      	b.n	800f204 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fe:	2200      	movs	r2, #0
 800f200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f206:	2b06      	cmp	r3, #6
 800f208:	d901      	bls.n	800f20e <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f20a:	2306      	movs	r3, #6
 800f20c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f212:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f218:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	2200      	movs	r2, #0
 800f21e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	3304      	adds	r3, #4
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff f937 	bl	800e498 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22c:	3318      	adds	r3, #24
 800f22e:	4618      	mov	r0, r3
 800f230:	f7ff f932 	bl	800e498 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f238:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23c:	f1c3 0207 	rsb	r2, r3, #7
 800f240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f242:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f248:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24c:	2200      	movs	r2, #0
 800f24e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f252:	2200      	movs	r2, #0
 800f254:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f25e:	683a      	ldr	r2, [r7, #0]
 800f260:	68f9      	ldr	r1, [r7, #12]
 800f262:	69b8      	ldr	r0, [r7, #24]
 800f264:	f000 fdd0 	bl	800fe08 <pxPortInitialiseStack>
 800f268:	4602      	mov	r2, r0
 800f26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f27a:	bf00      	nop
 800f27c:	3720      	adds	r7, #32
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
	...

0800f284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f28c:	f000 fee6 	bl	801005c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f290:	4b2a      	ldr	r3, [pc, #168]	; (800f33c <prvAddNewTaskToReadyList+0xb8>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	3301      	adds	r3, #1
 800f296:	4a29      	ldr	r2, [pc, #164]	; (800f33c <prvAddNewTaskToReadyList+0xb8>)
 800f298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f29a:	4b29      	ldr	r3, [pc, #164]	; (800f340 <prvAddNewTaskToReadyList+0xbc>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d109      	bne.n	800f2b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f2a2:	4a27      	ldr	r2, [pc, #156]	; (800f340 <prvAddNewTaskToReadyList+0xbc>)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f2a8:	4b24      	ldr	r3, [pc, #144]	; (800f33c <prvAddNewTaskToReadyList+0xb8>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d110      	bne.n	800f2d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f2b0:	f000 fbe8 	bl	800fa84 <prvInitialiseTaskLists>
 800f2b4:	e00d      	b.n	800f2d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f2b6:	4b23      	ldr	r3, [pc, #140]	; (800f344 <prvAddNewTaskToReadyList+0xc0>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d109      	bne.n	800f2d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f2be:	4b20      	ldr	r3, [pc, #128]	; (800f340 <prvAddNewTaskToReadyList+0xbc>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d802      	bhi.n	800f2d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f2cc:	4a1c      	ldr	r2, [pc, #112]	; (800f340 <prvAddNewTaskToReadyList+0xbc>)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f2d2:	4b1d      	ldr	r3, [pc, #116]	; (800f348 <prvAddNewTaskToReadyList+0xc4>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	4a1b      	ldr	r2, [pc, #108]	; (800f348 <prvAddNewTaskToReadyList+0xc4>)
 800f2da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	409a      	lsls	r2, r3
 800f2e4:	4b19      	ldr	r3, [pc, #100]	; (800f34c <prvAddNewTaskToReadyList+0xc8>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	4a18      	ldr	r2, [pc, #96]	; (800f34c <prvAddNewTaskToReadyList+0xc8>)
 800f2ec:	6013      	str	r3, [r2, #0]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	4413      	add	r3, r2
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	4a15      	ldr	r2, [pc, #84]	; (800f350 <prvAddNewTaskToReadyList+0xcc>)
 800f2fc:	441a      	add	r2, r3
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	3304      	adds	r3, #4
 800f302:	4619      	mov	r1, r3
 800f304:	4610      	mov	r0, r2
 800f306:	f7ff f8d4 	bl	800e4b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f30a:	f000 fed5 	bl	80100b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f30e:	4b0d      	ldr	r3, [pc, #52]	; (800f344 <prvAddNewTaskToReadyList+0xc0>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d00e      	beq.n	800f334 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f316:	4b0a      	ldr	r3, [pc, #40]	; (800f340 <prvAddNewTaskToReadyList+0xbc>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f320:	429a      	cmp	r2, r3
 800f322:	d207      	bcs.n	800f334 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f324:	4b0b      	ldr	r3, [pc, #44]	; (800f354 <prvAddNewTaskToReadyList+0xd0>)
 800f326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f32a:	601a      	str	r2, [r3, #0]
 800f32c:	f3bf 8f4f 	dsb	sy
 800f330:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	20000680 	.word	0x20000680
 800f340:	20000580 	.word	0x20000580
 800f344:	2000068c 	.word	0x2000068c
 800f348:	2000069c 	.word	0x2000069c
 800f34c:	20000688 	.word	0x20000688
 800f350:	20000584 	.word	0x20000584
 800f354:	e000ed04 	.word	0xe000ed04

0800f358 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f360:	2300      	movs	r3, #0
 800f362:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d016      	beq.n	800f398 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f36a:	4b13      	ldr	r3, [pc, #76]	; (800f3b8 <vTaskDelay+0x60>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d009      	beq.n	800f386 <vTaskDelay+0x2e>
 800f372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f376:	f383 8811 	msr	BASEPRI, r3
 800f37a:	f3bf 8f6f 	isb	sy
 800f37e:	f3bf 8f4f 	dsb	sy
 800f382:	60bb      	str	r3, [r7, #8]
 800f384:	e7fe      	b.n	800f384 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800f386:	f000 f879 	bl	800f47c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f38a:	2100      	movs	r1, #0
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 fcd5 	bl	800fd3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f392:	f000 f881 	bl	800f498 <xTaskResumeAll>
 800f396:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d107      	bne.n	800f3ae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800f39e:	4b07      	ldr	r3, [pc, #28]	; (800f3bc <vTaskDelay+0x64>)
 800f3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3a4:	601a      	str	r2, [r3, #0]
 800f3a6:	f3bf 8f4f 	dsb	sy
 800f3aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3ae:	bf00      	nop
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	200006a8 	.word	0x200006a8
 800f3bc:	e000ed04 	.word	0xe000ed04

0800f3c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b08a      	sub	sp, #40	; 0x28
 800f3c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f3ce:	463a      	mov	r2, r7
 800f3d0:	1d39      	adds	r1, r7, #4
 800f3d2:	f107 0308 	add.w	r3, r7, #8
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7f1 fa20 	bl	800081c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	68ba      	ldr	r2, [r7, #8]
 800f3e2:	9202      	str	r2, [sp, #8]
 800f3e4:	9301      	str	r3, [sp, #4]
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	460a      	mov	r2, r1
 800f3ee:	491d      	ldr	r1, [pc, #116]	; (800f464 <vTaskStartScheduler+0xa4>)
 800f3f0:	481d      	ldr	r0, [pc, #116]	; (800f468 <vTaskStartScheduler+0xa8>)
 800f3f2:	f7ff fe16 	bl	800f022 <xTaskCreateStatic>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	4b1c      	ldr	r3, [pc, #112]	; (800f46c <vTaskStartScheduler+0xac>)
 800f3fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f3fc:	4b1b      	ldr	r3, [pc, #108]	; (800f46c <vTaskStartScheduler+0xac>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d002      	beq.n	800f40a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f404:	2301      	movs	r3, #1
 800f406:	617b      	str	r3, [r7, #20]
 800f408:	e001      	b.n	800f40e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f40a:	2300      	movs	r3, #0
 800f40c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d115      	bne.n	800f440 <vTaskStartScheduler+0x80>
 800f414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f418:	f383 8811 	msr	BASEPRI, r3
 800f41c:	f3bf 8f6f 	isb	sy
 800f420:	f3bf 8f4f 	dsb	sy
 800f424:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f426:	4b12      	ldr	r3, [pc, #72]	; (800f470 <vTaskStartScheduler+0xb0>)
 800f428:	f04f 32ff 	mov.w	r2, #4294967295
 800f42c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f42e:	4b11      	ldr	r3, [pc, #68]	; (800f474 <vTaskStartScheduler+0xb4>)
 800f430:	2201      	movs	r2, #1
 800f432:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f434:	4b10      	ldr	r3, [pc, #64]	; (800f478 <vTaskStartScheduler+0xb8>)
 800f436:	2200      	movs	r2, #0
 800f438:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f43a:	f000 fd71 	bl	800ff20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f43e:	e00d      	b.n	800f45c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f446:	d109      	bne.n	800f45c <vTaskStartScheduler+0x9c>
 800f448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44c:	f383 8811 	msr	BASEPRI, r3
 800f450:	f3bf 8f6f 	isb	sy
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	e7fe      	b.n	800f45a <vTaskStartScheduler+0x9a>
}
 800f45c:	bf00      	nop
 800f45e:	3718      	adds	r7, #24
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	0801101c 	.word	0x0801101c
 800f468:	0800fa51 	.word	0x0800fa51
 800f46c:	200006a4 	.word	0x200006a4
 800f470:	200006a0 	.word	0x200006a0
 800f474:	2000068c 	.word	0x2000068c
 800f478:	20000684 	.word	0x20000684

0800f47c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f47c:	b480      	push	{r7}
 800f47e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f480:	4b04      	ldr	r3, [pc, #16]	; (800f494 <vTaskSuspendAll+0x18>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	3301      	adds	r3, #1
 800f486:	4a03      	ldr	r2, [pc, #12]	; (800f494 <vTaskSuspendAll+0x18>)
 800f488:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f48a:	bf00      	nop
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr
 800f494:	200006a8 	.word	0x200006a8

0800f498 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f4a6:	4b41      	ldr	r3, [pc, #260]	; (800f5ac <xTaskResumeAll+0x114>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d109      	bne.n	800f4c2 <xTaskResumeAll+0x2a>
 800f4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b2:	f383 8811 	msr	BASEPRI, r3
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	f3bf 8f4f 	dsb	sy
 800f4be:	603b      	str	r3, [r7, #0]
 800f4c0:	e7fe      	b.n	800f4c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f4c2:	f000 fdcb 	bl	801005c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f4c6:	4b39      	ldr	r3, [pc, #228]	; (800f5ac <xTaskResumeAll+0x114>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	4a37      	ldr	r2, [pc, #220]	; (800f5ac <xTaskResumeAll+0x114>)
 800f4ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4d0:	4b36      	ldr	r3, [pc, #216]	; (800f5ac <xTaskResumeAll+0x114>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d161      	bne.n	800f59c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f4d8:	4b35      	ldr	r3, [pc, #212]	; (800f5b0 <xTaskResumeAll+0x118>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d05d      	beq.n	800f59c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4e0:	e02e      	b.n	800f540 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4e2:	4b34      	ldr	r3, [pc, #208]	; (800f5b4 <xTaskResumeAll+0x11c>)
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	3318      	adds	r3, #24
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7ff f83c 	bl	800e56c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7ff f837 	bl	800e56c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f502:	2201      	movs	r2, #1
 800f504:	409a      	lsls	r2, r3
 800f506:	4b2c      	ldr	r3, [pc, #176]	; (800f5b8 <xTaskResumeAll+0x120>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4313      	orrs	r3, r2
 800f50c:	4a2a      	ldr	r2, [pc, #168]	; (800f5b8 <xTaskResumeAll+0x120>)
 800f50e:	6013      	str	r3, [r2, #0]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f514:	4613      	mov	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	4a27      	ldr	r2, [pc, #156]	; (800f5bc <xTaskResumeAll+0x124>)
 800f51e:	441a      	add	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	3304      	adds	r3, #4
 800f524:	4619      	mov	r1, r3
 800f526:	4610      	mov	r0, r2
 800f528:	f7fe ffc3 	bl	800e4b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f530:	4b23      	ldr	r3, [pc, #140]	; (800f5c0 <xTaskResumeAll+0x128>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f536:	429a      	cmp	r2, r3
 800f538:	d302      	bcc.n	800f540 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800f53a:	4b22      	ldr	r3, [pc, #136]	; (800f5c4 <xTaskResumeAll+0x12c>)
 800f53c:	2201      	movs	r2, #1
 800f53e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f540:	4b1c      	ldr	r3, [pc, #112]	; (800f5b4 <xTaskResumeAll+0x11c>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d1cc      	bne.n	800f4e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d001      	beq.n	800f552 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f54e:	f000 fb33 	bl	800fbb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f552:	4b1d      	ldr	r3, [pc, #116]	; (800f5c8 <xTaskResumeAll+0x130>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d010      	beq.n	800f580 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f55e:	f000 f837 	bl	800f5d0 <xTaskIncrementTick>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d002      	beq.n	800f56e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800f568:	4b16      	ldr	r3, [pc, #88]	; (800f5c4 <xTaskResumeAll+0x12c>)
 800f56a:	2201      	movs	r2, #1
 800f56c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	3b01      	subs	r3, #1
 800f572:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1f1      	bne.n	800f55e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800f57a:	4b13      	ldr	r3, [pc, #76]	; (800f5c8 <xTaskResumeAll+0x130>)
 800f57c:	2200      	movs	r2, #0
 800f57e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f580:	4b10      	ldr	r3, [pc, #64]	; (800f5c4 <xTaskResumeAll+0x12c>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d009      	beq.n	800f59c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f588:	2301      	movs	r3, #1
 800f58a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f58c:	4b0f      	ldr	r3, [pc, #60]	; (800f5cc <xTaskResumeAll+0x134>)
 800f58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f59c:	f000 fd8c 	bl	80100b8 <vPortExitCritical>

	return xAlreadyYielded;
 800f5a0:	68bb      	ldr	r3, [r7, #8]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	200006a8 	.word	0x200006a8
 800f5b0:	20000680 	.word	0x20000680
 800f5b4:	20000640 	.word	0x20000640
 800f5b8:	20000688 	.word	0x20000688
 800f5bc:	20000584 	.word	0x20000584
 800f5c0:	20000580 	.word	0x20000580
 800f5c4:	20000694 	.word	0x20000694
 800f5c8:	20000690 	.word	0x20000690
 800f5cc:	e000ed04 	.word	0xe000ed04

0800f5d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b086      	sub	sp, #24
 800f5d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5da:	4b4e      	ldr	r3, [pc, #312]	; (800f714 <xTaskIncrementTick+0x144>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f040 8087 	bne.w	800f6f2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f5e4:	4b4c      	ldr	r3, [pc, #304]	; (800f718 <xTaskIncrementTick+0x148>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f5ec:	4a4a      	ldr	r2, [pc, #296]	; (800f718 <xTaskIncrementTick+0x148>)
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d11f      	bne.n	800f638 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f5f8:	4b48      	ldr	r3, [pc, #288]	; (800f71c <xTaskIncrementTick+0x14c>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d009      	beq.n	800f616 <xTaskIncrementTick+0x46>
 800f602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f606:	f383 8811 	msr	BASEPRI, r3
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	603b      	str	r3, [r7, #0]
 800f614:	e7fe      	b.n	800f614 <xTaskIncrementTick+0x44>
 800f616:	4b41      	ldr	r3, [pc, #260]	; (800f71c <xTaskIncrementTick+0x14c>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	60fb      	str	r3, [r7, #12]
 800f61c:	4b40      	ldr	r3, [pc, #256]	; (800f720 <xTaskIncrementTick+0x150>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a3e      	ldr	r2, [pc, #248]	; (800f71c <xTaskIncrementTick+0x14c>)
 800f622:	6013      	str	r3, [r2, #0]
 800f624:	4a3e      	ldr	r2, [pc, #248]	; (800f720 <xTaskIncrementTick+0x150>)
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	6013      	str	r3, [r2, #0]
 800f62a:	4b3e      	ldr	r3, [pc, #248]	; (800f724 <xTaskIncrementTick+0x154>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	3301      	adds	r3, #1
 800f630:	4a3c      	ldr	r2, [pc, #240]	; (800f724 <xTaskIncrementTick+0x154>)
 800f632:	6013      	str	r3, [r2, #0]
 800f634:	f000 fac0 	bl	800fbb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f638:	4b3b      	ldr	r3, [pc, #236]	; (800f728 <xTaskIncrementTick+0x158>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	693a      	ldr	r2, [r7, #16]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d348      	bcc.n	800f6d4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f642:	4b36      	ldr	r3, [pc, #216]	; (800f71c <xTaskIncrementTick+0x14c>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d104      	bne.n	800f656 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f64c:	4b36      	ldr	r3, [pc, #216]	; (800f728 <xTaskIncrementTick+0x158>)
 800f64e:	f04f 32ff 	mov.w	r2, #4294967295
 800f652:	601a      	str	r2, [r3, #0]
					break;
 800f654:	e03e      	b.n	800f6d4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f656:	4b31      	ldr	r3, [pc, #196]	; (800f71c <xTaskIncrementTick+0x14c>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d203      	bcs.n	800f676 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f66e:	4a2e      	ldr	r2, [pc, #184]	; (800f728 <xTaskIncrementTick+0x158>)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f674:	e02e      	b.n	800f6d4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	3304      	adds	r3, #4
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fe ff76 	bl	800e56c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f684:	2b00      	cmp	r3, #0
 800f686:	d004      	beq.n	800f692 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	3318      	adds	r3, #24
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7fe ff6d 	bl	800e56c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f696:	2201      	movs	r2, #1
 800f698:	409a      	lsls	r2, r3
 800f69a:	4b24      	ldr	r3, [pc, #144]	; (800f72c <xTaskIncrementTick+0x15c>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	4a22      	ldr	r2, [pc, #136]	; (800f72c <xTaskIncrementTick+0x15c>)
 800f6a2:	6013      	str	r3, [r2, #0]
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	4413      	add	r3, r2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	4a1f      	ldr	r2, [pc, #124]	; (800f730 <xTaskIncrementTick+0x160>)
 800f6b2:	441a      	add	r2, r3
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	4610      	mov	r0, r2
 800f6bc:	f7fe fef9 	bl	800e4b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6c4:	4b1b      	ldr	r3, [pc, #108]	; (800f734 <xTaskIncrementTick+0x164>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d3b9      	bcc.n	800f642 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6d2:	e7b6      	b.n	800f642 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f6d4:	4b17      	ldr	r3, [pc, #92]	; (800f734 <xTaskIncrementTick+0x164>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6da:	4915      	ldr	r1, [pc, #84]	; (800f730 <xTaskIncrementTick+0x160>)
 800f6dc:	4613      	mov	r3, r2
 800f6de:	009b      	lsls	r3, r3, #2
 800f6e0:	4413      	add	r3, r2
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	440b      	add	r3, r1
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d907      	bls.n	800f6fc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	617b      	str	r3, [r7, #20]
 800f6f0:	e004      	b.n	800f6fc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f6f2:	4b11      	ldr	r3, [pc, #68]	; (800f738 <xTaskIncrementTick+0x168>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	4a0f      	ldr	r2, [pc, #60]	; (800f738 <xTaskIncrementTick+0x168>)
 800f6fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f6fc:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <xTaskIncrementTick+0x16c>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d001      	beq.n	800f708 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800f704:	2301      	movs	r3, #1
 800f706:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f708:	697b      	ldr	r3, [r7, #20]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3718      	adds	r7, #24
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	200006a8 	.word	0x200006a8
 800f718:	20000684 	.word	0x20000684
 800f71c:	20000638 	.word	0x20000638
 800f720:	2000063c 	.word	0x2000063c
 800f724:	20000698 	.word	0x20000698
 800f728:	200006a0 	.word	0x200006a0
 800f72c:	20000688 	.word	0x20000688
 800f730:	20000584 	.word	0x20000584
 800f734:	20000580 	.word	0x20000580
 800f738:	20000690 	.word	0x20000690
 800f73c:	20000694 	.word	0x20000694

0800f740 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b088      	sub	sp, #32
 800f744:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f746:	4b39      	ldr	r3, [pc, #228]	; (800f82c <vTaskSwitchContext+0xec>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d003      	beq.n	800f756 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f74e:	4b38      	ldr	r3, [pc, #224]	; (800f830 <vTaskSwitchContext+0xf0>)
 800f750:	2201      	movs	r2, #1
 800f752:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f754:	e065      	b.n	800f822 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800f756:	4b36      	ldr	r3, [pc, #216]	; (800f830 <vTaskSwitchContext+0xf0>)
 800f758:	2200      	movs	r2, #0
 800f75a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f75c:	4b35      	ldr	r3, [pc, #212]	; (800f834 <vTaskSwitchContext+0xf4>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f762:	61fb      	str	r3, [r7, #28]
 800f764:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800f768:	61bb      	str	r3, [r7, #24]
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	69ba      	ldr	r2, [r7, #24]
 800f770:	429a      	cmp	r2, r3
 800f772:	d111      	bne.n	800f798 <vTaskSwitchContext+0x58>
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	3304      	adds	r3, #4
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	69ba      	ldr	r2, [r7, #24]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d10b      	bne.n	800f798 <vTaskSwitchContext+0x58>
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	3308      	adds	r3, #8
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	69ba      	ldr	r2, [r7, #24]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d105      	bne.n	800f798 <vTaskSwitchContext+0x58>
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	330c      	adds	r3, #12
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	69ba      	ldr	r2, [r7, #24]
 800f794:	429a      	cmp	r2, r3
 800f796:	d008      	beq.n	800f7aa <vTaskSwitchContext+0x6a>
 800f798:	4b26      	ldr	r3, [pc, #152]	; (800f834 <vTaskSwitchContext+0xf4>)
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	4b25      	ldr	r3, [pc, #148]	; (800f834 <vTaskSwitchContext+0xf4>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	3334      	adds	r3, #52	; 0x34
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	4610      	mov	r0, r2
 800f7a6:	f7f1 f826 	bl	80007f6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7aa:	4b23      	ldr	r3, [pc, #140]	; (800f838 <vTaskSwitchContext+0xf8>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	fab3 f383 	clz	r3, r3
 800f7b6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f7b8:	7afb      	ldrb	r3, [r7, #11]
 800f7ba:	f1c3 031f 	rsb	r3, r3, #31
 800f7be:	617b      	str	r3, [r7, #20]
 800f7c0:	491e      	ldr	r1, [pc, #120]	; (800f83c <vTaskSwitchContext+0xfc>)
 800f7c2:	697a      	ldr	r2, [r7, #20]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	440b      	add	r3, r1
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d109      	bne.n	800f7e8 <vTaskSwitchContext+0xa8>
	__asm volatile
 800f7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d8:	f383 8811 	msr	BASEPRI, r3
 800f7dc:	f3bf 8f6f 	isb	sy
 800f7e0:	f3bf 8f4f 	dsb	sy
 800f7e4:	607b      	str	r3, [r7, #4]
 800f7e6:	e7fe      	b.n	800f7e6 <vTaskSwitchContext+0xa6>
 800f7e8:	697a      	ldr	r2, [r7, #20]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	4413      	add	r3, r2
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	4a12      	ldr	r2, [pc, #72]	; (800f83c <vTaskSwitchContext+0xfc>)
 800f7f4:	4413      	add	r3, r2
 800f7f6:	613b      	str	r3, [r7, #16]
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	685a      	ldr	r2, [r3, #4]
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	605a      	str	r2, [r3, #4]
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	3308      	adds	r3, #8
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d104      	bne.n	800f818 <vTaskSwitchContext+0xd8>
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	685a      	ldr	r2, [r3, #4]
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	605a      	str	r2, [r3, #4]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	4a05      	ldr	r2, [pc, #20]	; (800f834 <vTaskSwitchContext+0xf4>)
 800f820:	6013      	str	r3, [r2, #0]
}
 800f822:	bf00      	nop
 800f824:	3720      	adds	r7, #32
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	200006a8 	.word	0x200006a8
 800f830:	20000694 	.word	0x20000694
 800f834:	20000580 	.word	0x20000580
 800f838:	20000688 	.word	0x20000688
 800f83c:	20000584 	.word	0x20000584

0800f840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d109      	bne.n	800f864 <vTaskPlaceOnEventList+0x24>
 800f850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f854:	f383 8811 	msr	BASEPRI, r3
 800f858:	f3bf 8f6f 	isb	sy
 800f85c:	f3bf 8f4f 	dsb	sy
 800f860:	60fb      	str	r3, [r7, #12]
 800f862:	e7fe      	b.n	800f862 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f864:	4b07      	ldr	r3, [pc, #28]	; (800f884 <vTaskPlaceOnEventList+0x44>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	3318      	adds	r3, #24
 800f86a:	4619      	mov	r1, r3
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f7fe fe44 	bl	800e4fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f872:	2101      	movs	r1, #1
 800f874:	6838      	ldr	r0, [r7, #0]
 800f876:	f000 fa61 	bl	800fd3c <prvAddCurrentTaskToDelayedList>
}
 800f87a:	bf00      	nop
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	20000580 	.word	0x20000580

0800f888 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d109      	bne.n	800f8b2 <xTaskRemoveFromEventList+0x2a>
 800f89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a2:	f383 8811 	msr	BASEPRI, r3
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	60fb      	str	r3, [r7, #12]
 800f8b0:	e7fe      	b.n	800f8b0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	3318      	adds	r3, #24
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fe fe58 	bl	800e56c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8bc:	4b1d      	ldr	r3, [pc, #116]	; (800f934 <xTaskRemoveFromEventList+0xac>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d11c      	bne.n	800f8fe <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fe fe4f 	bl	800e56c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	409a      	lsls	r2, r3
 800f8d6:	4b18      	ldr	r3, [pc, #96]	; (800f938 <xTaskRemoveFromEventList+0xb0>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	4a16      	ldr	r2, [pc, #88]	; (800f938 <xTaskRemoveFromEventList+0xb0>)
 800f8de:	6013      	str	r3, [r2, #0]
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	4413      	add	r3, r2
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	4a13      	ldr	r2, [pc, #76]	; (800f93c <xTaskRemoveFromEventList+0xb4>)
 800f8ee:	441a      	add	r2, r3
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	3304      	adds	r3, #4
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	4610      	mov	r0, r2
 800f8f8:	f7fe fddb 	bl	800e4b2 <vListInsertEnd>
 800f8fc:	e005      	b.n	800f90a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	3318      	adds	r3, #24
 800f902:	4619      	mov	r1, r3
 800f904:	480e      	ldr	r0, [pc, #56]	; (800f940 <xTaskRemoveFromEventList+0xb8>)
 800f906:	f7fe fdd4 	bl	800e4b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f90e:	4b0d      	ldr	r3, [pc, #52]	; (800f944 <xTaskRemoveFromEventList+0xbc>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f914:	429a      	cmp	r2, r3
 800f916:	d905      	bls.n	800f924 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f918:	2301      	movs	r3, #1
 800f91a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f91c:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <xTaskRemoveFromEventList+0xc0>)
 800f91e:	2201      	movs	r2, #1
 800f920:	601a      	str	r2, [r3, #0]
 800f922:	e001      	b.n	800f928 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800f924:	2300      	movs	r3, #0
 800f926:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f928:	697b      	ldr	r3, [r7, #20]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3718      	adds	r7, #24
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	200006a8 	.word	0x200006a8
 800f938:	20000688 	.word	0x20000688
 800f93c:	20000584 	.word	0x20000584
 800f940:	20000640 	.word	0x20000640
 800f944:	20000580 	.word	0x20000580
 800f948:	20000694 	.word	0x20000694

0800f94c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f954:	4b06      	ldr	r3, [pc, #24]	; (800f970 <vTaskInternalSetTimeOutState+0x24>)
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f95c:	4b05      	ldr	r3, [pc, #20]	; (800f974 <vTaskInternalSetTimeOutState+0x28>)
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	605a      	str	r2, [r3, #4]
}
 800f964:	bf00      	nop
 800f966:	370c      	adds	r7, #12
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr
 800f970:	20000698 	.word	0x20000698
 800f974:	20000684 	.word	0x20000684

0800f978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b088      	sub	sp, #32
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d109      	bne.n	800f99c <xTaskCheckForTimeOut+0x24>
 800f988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f98c:	f383 8811 	msr	BASEPRI, r3
 800f990:	f3bf 8f6f 	isb	sy
 800f994:	f3bf 8f4f 	dsb	sy
 800f998:	613b      	str	r3, [r7, #16]
 800f99a:	e7fe      	b.n	800f99a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d109      	bne.n	800f9b6 <xTaskCheckForTimeOut+0x3e>
 800f9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a6:	f383 8811 	msr	BASEPRI, r3
 800f9aa:	f3bf 8f6f 	isb	sy
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	60fb      	str	r3, [r7, #12]
 800f9b4:	e7fe      	b.n	800f9b4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f9b6:	f000 fb51 	bl	801005c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f9ba:	4b1d      	ldr	r3, [pc, #116]	; (800fa30 <xTaskCheckForTimeOut+0xb8>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	69ba      	ldr	r2, [r7, #24]
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9d2:	d102      	bne.n	800f9da <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	61fb      	str	r3, [r7, #28]
 800f9d8:	e023      	b.n	800fa22 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	4b15      	ldr	r3, [pc, #84]	; (800fa34 <xTaskCheckForTimeOut+0xbc>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d007      	beq.n	800f9f6 <xTaskCheckForTimeOut+0x7e>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	69ba      	ldr	r2, [r7, #24]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d302      	bcc.n	800f9f6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	61fb      	str	r3, [r7, #28]
 800f9f4:	e015      	b.n	800fa22 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	697a      	ldr	r2, [r7, #20]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d20b      	bcs.n	800fa18 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	1ad2      	subs	r2, r2, r3
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f7ff ff9d 	bl	800f94c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa12:	2300      	movs	r3, #0
 800fa14:	61fb      	str	r3, [r7, #28]
 800fa16:	e004      	b.n	800fa22 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa22:	f000 fb49 	bl	80100b8 <vPortExitCritical>

	return xReturn;
 800fa26:	69fb      	ldr	r3, [r7, #28]
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3720      	adds	r7, #32
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	20000684 	.word	0x20000684
 800fa34:	20000698 	.word	0x20000698

0800fa38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa38:	b480      	push	{r7}
 800fa3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa3c:	4b03      	ldr	r3, [pc, #12]	; (800fa4c <vTaskMissedYield+0x14>)
 800fa3e:	2201      	movs	r2, #1
 800fa40:	601a      	str	r2, [r3, #0]
}
 800fa42:	bf00      	nop
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr
 800fa4c:	20000694 	.word	0x20000694

0800fa50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fa58:	f000 f854 	bl	800fb04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa5c:	4b07      	ldr	r3, [pc, #28]	; (800fa7c <prvIdleTask+0x2c>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d907      	bls.n	800fa74 <prvIdleTask+0x24>
			{
				taskYIELD();
 800fa64:	4b06      	ldr	r3, [pc, #24]	; (800fa80 <prvIdleTask+0x30>)
 800fa66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa6a:	601a      	str	r2, [r3, #0]
 800fa6c:	f3bf 8f4f 	dsb	sy
 800fa70:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fa74:	f7f0 feb8 	bl	80007e8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fa78:	e7ee      	b.n	800fa58 <prvIdleTask+0x8>
 800fa7a:	bf00      	nop
 800fa7c:	20000584 	.word	0x20000584
 800fa80:	e000ed04 	.word	0xe000ed04

0800fa84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	607b      	str	r3, [r7, #4]
 800fa8e:	e00c      	b.n	800faaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	4613      	mov	r3, r2
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	4413      	add	r3, r2
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	4a12      	ldr	r2, [pc, #72]	; (800fae4 <prvInitialiseTaskLists+0x60>)
 800fa9c:	4413      	add	r3, r2
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe fcda 	bl	800e458 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	3301      	adds	r3, #1
 800faa8:	607b      	str	r3, [r7, #4]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b06      	cmp	r3, #6
 800faae:	d9ef      	bls.n	800fa90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fab0:	480d      	ldr	r0, [pc, #52]	; (800fae8 <prvInitialiseTaskLists+0x64>)
 800fab2:	f7fe fcd1 	bl	800e458 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fab6:	480d      	ldr	r0, [pc, #52]	; (800faec <prvInitialiseTaskLists+0x68>)
 800fab8:	f7fe fcce 	bl	800e458 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fabc:	480c      	ldr	r0, [pc, #48]	; (800faf0 <prvInitialiseTaskLists+0x6c>)
 800fabe:	f7fe fccb 	bl	800e458 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fac2:	480c      	ldr	r0, [pc, #48]	; (800faf4 <prvInitialiseTaskLists+0x70>)
 800fac4:	f7fe fcc8 	bl	800e458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fac8:	480b      	ldr	r0, [pc, #44]	; (800faf8 <prvInitialiseTaskLists+0x74>)
 800faca:	f7fe fcc5 	bl	800e458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800face:	4b0b      	ldr	r3, [pc, #44]	; (800fafc <prvInitialiseTaskLists+0x78>)
 800fad0:	4a05      	ldr	r2, [pc, #20]	; (800fae8 <prvInitialiseTaskLists+0x64>)
 800fad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fad4:	4b0a      	ldr	r3, [pc, #40]	; (800fb00 <prvInitialiseTaskLists+0x7c>)
 800fad6:	4a05      	ldr	r2, [pc, #20]	; (800faec <prvInitialiseTaskLists+0x68>)
 800fad8:	601a      	str	r2, [r3, #0]
}
 800fada:	bf00      	nop
 800fadc:	3708      	adds	r7, #8
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	20000584 	.word	0x20000584
 800fae8:	20000610 	.word	0x20000610
 800faec:	20000624 	.word	0x20000624
 800faf0:	20000640 	.word	0x20000640
 800faf4:	20000654 	.word	0x20000654
 800faf8:	2000066c 	.word	0x2000066c
 800fafc:	20000638 	.word	0x20000638
 800fb00:	2000063c 	.word	0x2000063c

0800fb04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb0a:	e019      	b.n	800fb40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb0c:	f000 faa6 	bl	801005c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb10:	4b0f      	ldr	r3, [pc, #60]	; (800fb50 <prvCheckTasksWaitingTermination+0x4c>)
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	68db      	ldr	r3, [r3, #12]
 800fb16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	3304      	adds	r3, #4
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fe fd25 	bl	800e56c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb22:	4b0c      	ldr	r3, [pc, #48]	; (800fb54 <prvCheckTasksWaitingTermination+0x50>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	3b01      	subs	r3, #1
 800fb28:	4a0a      	ldr	r2, [pc, #40]	; (800fb54 <prvCheckTasksWaitingTermination+0x50>)
 800fb2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb2c:	4b0a      	ldr	r3, [pc, #40]	; (800fb58 <prvCheckTasksWaitingTermination+0x54>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	3b01      	subs	r3, #1
 800fb32:	4a09      	ldr	r2, [pc, #36]	; (800fb58 <prvCheckTasksWaitingTermination+0x54>)
 800fb34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb36:	f000 fabf 	bl	80100b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 f80e 	bl	800fb5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb40:	4b05      	ldr	r3, [pc, #20]	; (800fb58 <prvCheckTasksWaitingTermination+0x54>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d1e1      	bne.n	800fb0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	20000654 	.word	0x20000654
 800fb54:	20000680 	.word	0x20000680
 800fb58:	20000668 	.word	0x20000668

0800fb5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d108      	bne.n	800fb80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb72:	4618      	mov	r0, r3
 800fb74:	f000 fc52 	bl	801041c <vPortFree>
				vPortFree( pxTCB );
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 fc4f 	bl	801041c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb7e:	e017      	b.n	800fbb0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d103      	bne.n	800fb92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 fc46 	bl	801041c <vPortFree>
	}
 800fb90:	e00e      	b.n	800fbb0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d009      	beq.n	800fbb0 <prvDeleteTCB+0x54>
 800fb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba0:	f383 8811 	msr	BASEPRI, r3
 800fba4:	f3bf 8f6f 	isb	sy
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	60fb      	str	r3, [r7, #12]
 800fbae:	e7fe      	b.n	800fbae <prvDeleteTCB+0x52>
	}
 800fbb0:	bf00      	nop
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b083      	sub	sp, #12
 800fbbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbbe:	4b0c      	ldr	r3, [pc, #48]	; (800fbf0 <prvResetNextTaskUnblockTime+0x38>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d104      	bne.n	800fbd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fbc8:	4b0a      	ldr	r3, [pc, #40]	; (800fbf4 <prvResetNextTaskUnblockTime+0x3c>)
 800fbca:	f04f 32ff 	mov.w	r2, #4294967295
 800fbce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fbd0:	e008      	b.n	800fbe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbd2:	4b07      	ldr	r3, [pc, #28]	; (800fbf0 <prvResetNextTaskUnblockTime+0x38>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	68db      	ldr	r3, [r3, #12]
 800fbda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4a04      	ldr	r2, [pc, #16]	; (800fbf4 <prvResetNextTaskUnblockTime+0x3c>)
 800fbe2:	6013      	str	r3, [r2, #0]
}
 800fbe4:	bf00      	nop
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr
 800fbf0:	20000638 	.word	0x20000638
 800fbf4:	200006a0 	.word	0x200006a0

0800fbf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fbfe:	4b0b      	ldr	r3, [pc, #44]	; (800fc2c <xTaskGetSchedulerState+0x34>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d102      	bne.n	800fc0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc06:	2301      	movs	r3, #1
 800fc08:	607b      	str	r3, [r7, #4]
 800fc0a:	e008      	b.n	800fc1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc0c:	4b08      	ldr	r3, [pc, #32]	; (800fc30 <xTaskGetSchedulerState+0x38>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d102      	bne.n	800fc1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc14:	2302      	movs	r3, #2
 800fc16:	607b      	str	r3, [r7, #4]
 800fc18:	e001      	b.n	800fc1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc1e:	687b      	ldr	r3, [r7, #4]
	}
 800fc20:	4618      	mov	r0, r3
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr
 800fc2c:	2000068c 	.word	0x2000068c
 800fc30:	200006a8 	.word	0x200006a8

0800fc34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b086      	sub	sp, #24
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fc40:	2300      	movs	r3, #0
 800fc42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d06c      	beq.n	800fd24 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fc4a:	4b39      	ldr	r3, [pc, #228]	; (800fd30 <xTaskPriorityDisinherit+0xfc>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d009      	beq.n	800fc68 <xTaskPriorityDisinherit+0x34>
 800fc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc58:	f383 8811 	msr	BASEPRI, r3
 800fc5c:	f3bf 8f6f 	isb	sy
 800fc60:	f3bf 8f4f 	dsb	sy
 800fc64:	60fb      	str	r3, [r7, #12]
 800fc66:	e7fe      	b.n	800fc66 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d109      	bne.n	800fc84 <xTaskPriorityDisinherit+0x50>
 800fc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc74:	f383 8811 	msr	BASEPRI, r3
 800fc78:	f3bf 8f6f 	isb	sy
 800fc7c:	f3bf 8f4f 	dsb	sy
 800fc80:	60bb      	str	r3, [r7, #8]
 800fc82:	e7fe      	b.n	800fc82 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc88:	1e5a      	subs	r2, r3, #1
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d044      	beq.n	800fd24 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d140      	bne.n	800fd24 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	3304      	adds	r3, #4
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fe fc60 	bl	800e56c <uxListRemove>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d115      	bne.n	800fcde <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb6:	491f      	ldr	r1, [pc, #124]	; (800fd34 <xTaskPriorityDisinherit+0x100>)
 800fcb8:	4613      	mov	r3, r2
 800fcba:	009b      	lsls	r3, r3, #2
 800fcbc:	4413      	add	r3, r2
 800fcbe:	009b      	lsls	r3, r3, #2
 800fcc0:	440b      	add	r3, r1
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d10a      	bne.n	800fcde <xTaskPriorityDisinherit+0xaa>
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fccc:	2201      	movs	r2, #1
 800fcce:	fa02 f303 	lsl.w	r3, r2, r3
 800fcd2:	43da      	mvns	r2, r3
 800fcd4:	4b18      	ldr	r3, [pc, #96]	; (800fd38 <xTaskPriorityDisinherit+0x104>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4013      	ands	r3, r2
 800fcda:	4a17      	ldr	r2, [pc, #92]	; (800fd38 <xTaskPriorityDisinherit+0x104>)
 800fcdc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcea:	f1c3 0207 	rsb	r2, r3, #7
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	409a      	lsls	r2, r3
 800fcfa:	4b0f      	ldr	r3, [pc, #60]	; (800fd38 <xTaskPriorityDisinherit+0x104>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	4a0d      	ldr	r2, [pc, #52]	; (800fd38 <xTaskPriorityDisinherit+0x104>)
 800fd02:	6013      	str	r3, [r2, #0]
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd08:	4613      	mov	r3, r2
 800fd0a:	009b      	lsls	r3, r3, #2
 800fd0c:	4413      	add	r3, r2
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	4a08      	ldr	r2, [pc, #32]	; (800fd34 <xTaskPriorityDisinherit+0x100>)
 800fd12:	441a      	add	r2, r3
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	3304      	adds	r3, #4
 800fd18:	4619      	mov	r1, r3
 800fd1a:	4610      	mov	r0, r2
 800fd1c:	f7fe fbc9 	bl	800e4b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fd20:	2301      	movs	r3, #1
 800fd22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd24:	697b      	ldr	r3, [r7, #20]
	}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3718      	adds	r7, #24
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	20000580 	.word	0x20000580
 800fd34:	20000584 	.word	0x20000584
 800fd38:	20000688 	.word	0x20000688

0800fd3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd46:	4b29      	ldr	r3, [pc, #164]	; (800fdec <prvAddCurrentTaskToDelayedList+0xb0>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd4c:	4b28      	ldr	r3, [pc, #160]	; (800fdf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	3304      	adds	r3, #4
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe fc0a 	bl	800e56c <uxListRemove>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d10b      	bne.n	800fd76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fd5e:	4b24      	ldr	r3, [pc, #144]	; (800fdf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd64:	2201      	movs	r2, #1
 800fd66:	fa02 f303 	lsl.w	r3, r2, r3
 800fd6a:	43da      	mvns	r2, r3
 800fd6c:	4b21      	ldr	r3, [pc, #132]	; (800fdf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4013      	ands	r3, r2
 800fd72:	4a20      	ldr	r2, [pc, #128]	; (800fdf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fd74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd7c:	d10a      	bne.n	800fd94 <prvAddCurrentTaskToDelayedList+0x58>
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d007      	beq.n	800fd94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd84:	4b1a      	ldr	r3, [pc, #104]	; (800fdf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	3304      	adds	r3, #4
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	481a      	ldr	r0, [pc, #104]	; (800fdf8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fd8e:	f7fe fb90 	bl	800e4b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd92:	e026      	b.n	800fde2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4413      	add	r3, r2
 800fd9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd9c:	4b14      	ldr	r3, [pc, #80]	; (800fdf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fda4:	68ba      	ldr	r2, [r7, #8]
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d209      	bcs.n	800fdc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdac:	4b13      	ldr	r3, [pc, #76]	; (800fdfc <prvAddCurrentTaskToDelayedList+0xc0>)
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	4b0f      	ldr	r3, [pc, #60]	; (800fdf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	4610      	mov	r0, r2
 800fdba:	f7fe fb9e 	bl	800e4fa <vListInsert>
}
 800fdbe:	e010      	b.n	800fde2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdc0:	4b0f      	ldr	r3, [pc, #60]	; (800fe00 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	4b0a      	ldr	r3, [pc, #40]	; (800fdf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	3304      	adds	r3, #4
 800fdca:	4619      	mov	r1, r3
 800fdcc:	4610      	mov	r0, r2
 800fdce:	f7fe fb94 	bl	800e4fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fdd2:	4b0c      	ldr	r3, [pc, #48]	; (800fe04 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d202      	bcs.n	800fde2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fddc:	4a09      	ldr	r2, [pc, #36]	; (800fe04 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	6013      	str	r3, [r2, #0]
}
 800fde2:	bf00      	nop
 800fde4:	3710      	adds	r7, #16
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	20000684 	.word	0x20000684
 800fdf0:	20000580 	.word	0x20000580
 800fdf4:	20000688 	.word	0x20000688
 800fdf8:	2000066c 	.word	0x2000066c
 800fdfc:	2000063c 	.word	0x2000063c
 800fe00:	20000638 	.word	0x20000638
 800fe04:	200006a0 	.word	0x200006a0

0800fe08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b085      	sub	sp, #20
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	3b04      	subs	r3, #4
 800fe18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fe20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	3b04      	subs	r3, #4
 800fe26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	f023 0201 	bic.w	r2, r3, #1
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	3b04      	subs	r3, #4
 800fe36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe38:	4a0c      	ldr	r2, [pc, #48]	; (800fe6c <pxPortInitialiseStack+0x64>)
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	3b14      	subs	r3, #20
 800fe42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	3b04      	subs	r3, #4
 800fe4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f06f 0202 	mvn.w	r2, #2
 800fe56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	3b20      	subs	r3, #32
 800fe5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3714      	adds	r7, #20
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr
 800fe6c:	0800fe71 	.word	0x0800fe71

0800fe70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fe70:	b480      	push	{r7}
 800fe72:	b085      	sub	sp, #20
 800fe74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fe76:	2300      	movs	r3, #0
 800fe78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe7a:	4b11      	ldr	r3, [pc, #68]	; (800fec0 <prvTaskExitError+0x50>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe82:	d009      	beq.n	800fe98 <prvTaskExitError+0x28>
 800fe84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe88:	f383 8811 	msr	BASEPRI, r3
 800fe8c:	f3bf 8f6f 	isb	sy
 800fe90:	f3bf 8f4f 	dsb	sy
 800fe94:	60fb      	str	r3, [r7, #12]
 800fe96:	e7fe      	b.n	800fe96 <prvTaskExitError+0x26>
 800fe98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9c:	f383 8811 	msr	BASEPRI, r3
 800fea0:	f3bf 8f6f 	isb	sy
 800fea4:	f3bf 8f4f 	dsb	sy
 800fea8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800feaa:	bf00      	nop
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d0fc      	beq.n	800feac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800feb2:	bf00      	nop
 800feb4:	3714      	adds	r7, #20
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	200000a8 	.word	0x200000a8
	...

0800fed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fed0:	4b07      	ldr	r3, [pc, #28]	; (800fef0 <pxCurrentTCBConst2>)
 800fed2:	6819      	ldr	r1, [r3, #0]
 800fed4:	6808      	ldr	r0, [r1, #0]
 800fed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feda:	f380 8809 	msr	PSP, r0
 800fede:	f3bf 8f6f 	isb	sy
 800fee2:	f04f 0000 	mov.w	r0, #0
 800fee6:	f380 8811 	msr	BASEPRI, r0
 800feea:	4770      	bx	lr
 800feec:	f3af 8000 	nop.w

0800fef0 <pxCurrentTCBConst2>:
 800fef0:	20000580 	.word	0x20000580
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fef4:	bf00      	nop
 800fef6:	bf00      	nop

0800fef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fef8:	4808      	ldr	r0, [pc, #32]	; (800ff1c <prvPortStartFirstTask+0x24>)
 800fefa:	6800      	ldr	r0, [r0, #0]
 800fefc:	6800      	ldr	r0, [r0, #0]
 800fefe:	f380 8808 	msr	MSP, r0
 800ff02:	f04f 0000 	mov.w	r0, #0
 800ff06:	f380 8814 	msr	CONTROL, r0
 800ff0a:	b662      	cpsie	i
 800ff0c:	b661      	cpsie	f
 800ff0e:	f3bf 8f4f 	dsb	sy
 800ff12:	f3bf 8f6f 	isb	sy
 800ff16:	df00      	svc	0
 800ff18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ff1a:	bf00      	nop
 800ff1c:	e000ed08 	.word	0xe000ed08

0800ff20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b086      	sub	sp, #24
 800ff24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ff26:	4b44      	ldr	r3, [pc, #272]	; (8010038 <xPortStartScheduler+0x118>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	4a44      	ldr	r2, [pc, #272]	; (801003c <xPortStartScheduler+0x11c>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d109      	bne.n	800ff44 <xPortStartScheduler+0x24>
 800ff30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff34:	f383 8811 	msr	BASEPRI, r3
 800ff38:	f3bf 8f6f 	isb	sy
 800ff3c:	f3bf 8f4f 	dsb	sy
 800ff40:	613b      	str	r3, [r7, #16]
 800ff42:	e7fe      	b.n	800ff42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ff44:	4b3c      	ldr	r3, [pc, #240]	; (8010038 <xPortStartScheduler+0x118>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4a3d      	ldr	r2, [pc, #244]	; (8010040 <xPortStartScheduler+0x120>)
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d109      	bne.n	800ff62 <xPortStartScheduler+0x42>
 800ff4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	60fb      	str	r3, [r7, #12]
 800ff60:	e7fe      	b.n	800ff60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ff62:	4b38      	ldr	r3, [pc, #224]	; (8010044 <xPortStartScheduler+0x124>)
 800ff64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	b2db      	uxtb	r3, r3
 800ff6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	22ff      	movs	r2, #255	; 0xff
 800ff72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff7c:	78fb      	ldrb	r3, [r7, #3]
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ff84:	b2da      	uxtb	r2, r3
 800ff86:	4b30      	ldr	r3, [pc, #192]	; (8010048 <xPortStartScheduler+0x128>)
 800ff88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ff8a:	4b30      	ldr	r3, [pc, #192]	; (801004c <xPortStartScheduler+0x12c>)
 800ff8c:	2207      	movs	r2, #7
 800ff8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff90:	e009      	b.n	800ffa6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ff92:	4b2e      	ldr	r3, [pc, #184]	; (801004c <xPortStartScheduler+0x12c>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	3b01      	subs	r3, #1
 800ff98:	4a2c      	ldr	r2, [pc, #176]	; (801004c <xPortStartScheduler+0x12c>)
 800ff9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ff9c:	78fb      	ldrb	r3, [r7, #3]
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	005b      	lsls	r3, r3, #1
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ffa6:	78fb      	ldrb	r3, [r7, #3]
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffae:	2b80      	cmp	r3, #128	; 0x80
 800ffb0:	d0ef      	beq.n	800ff92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ffb2:	4b26      	ldr	r3, [pc, #152]	; (801004c <xPortStartScheduler+0x12c>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f1c3 0307 	rsb	r3, r3, #7
 800ffba:	2b04      	cmp	r3, #4
 800ffbc:	d009      	beq.n	800ffd2 <xPortStartScheduler+0xb2>
 800ffbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc2:	f383 8811 	msr	BASEPRI, r3
 800ffc6:	f3bf 8f6f 	isb	sy
 800ffca:	f3bf 8f4f 	dsb	sy
 800ffce:	60bb      	str	r3, [r7, #8]
 800ffd0:	e7fe      	b.n	800ffd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ffd2:	4b1e      	ldr	r3, [pc, #120]	; (801004c <xPortStartScheduler+0x12c>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	021b      	lsls	r3, r3, #8
 800ffd8:	4a1c      	ldr	r2, [pc, #112]	; (801004c <xPortStartScheduler+0x12c>)
 800ffda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ffdc:	4b1b      	ldr	r3, [pc, #108]	; (801004c <xPortStartScheduler+0x12c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ffe4:	4a19      	ldr	r2, [pc, #100]	; (801004c <xPortStartScheduler+0x12c>)
 800ffe6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	b2da      	uxtb	r2, r3
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fff0:	4b17      	ldr	r3, [pc, #92]	; (8010050 <xPortStartScheduler+0x130>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a16      	ldr	r2, [pc, #88]	; (8010050 <xPortStartScheduler+0x130>)
 800fff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fffa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fffc:	4b14      	ldr	r3, [pc, #80]	; (8010050 <xPortStartScheduler+0x130>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a13      	ldr	r2, [pc, #76]	; (8010050 <xPortStartScheduler+0x130>)
 8010002:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010006:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010008:	f000 f8d6 	bl	80101b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801000c:	4b11      	ldr	r3, [pc, #68]	; (8010054 <xPortStartScheduler+0x134>)
 801000e:	2200      	movs	r2, #0
 8010010:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010012:	f000 f8f5 	bl	8010200 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010016:	4b10      	ldr	r3, [pc, #64]	; (8010058 <xPortStartScheduler+0x138>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a0f      	ldr	r2, [pc, #60]	; (8010058 <xPortStartScheduler+0x138>)
 801001c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010020:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010022:	f7ff ff69 	bl	800fef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010026:	f7ff fb8b 	bl	800f740 <vTaskSwitchContext>
	prvTaskExitError();
 801002a:	f7ff ff21 	bl	800fe70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801002e:	2300      	movs	r3, #0
}
 8010030:	4618      	mov	r0, r3
 8010032:	3718      	adds	r7, #24
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	e000ed00 	.word	0xe000ed00
 801003c:	410fc271 	.word	0x410fc271
 8010040:	410fc270 	.word	0x410fc270
 8010044:	e000e400 	.word	0xe000e400
 8010048:	200006ac 	.word	0x200006ac
 801004c:	200006b0 	.word	0x200006b0
 8010050:	e000ed20 	.word	0xe000ed20
 8010054:	200000a8 	.word	0x200000a8
 8010058:	e000ef34 	.word	0xe000ef34

0801005c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010066:	f383 8811 	msr	BASEPRI, r3
 801006a:	f3bf 8f6f 	isb	sy
 801006e:	f3bf 8f4f 	dsb	sy
 8010072:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010074:	4b0e      	ldr	r3, [pc, #56]	; (80100b0 <vPortEnterCritical+0x54>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	3301      	adds	r3, #1
 801007a:	4a0d      	ldr	r2, [pc, #52]	; (80100b0 <vPortEnterCritical+0x54>)
 801007c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801007e:	4b0c      	ldr	r3, [pc, #48]	; (80100b0 <vPortEnterCritical+0x54>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b01      	cmp	r3, #1
 8010084:	d10e      	bne.n	80100a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010086:	4b0b      	ldr	r3, [pc, #44]	; (80100b4 <vPortEnterCritical+0x58>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	b2db      	uxtb	r3, r3
 801008c:	2b00      	cmp	r3, #0
 801008e:	d009      	beq.n	80100a4 <vPortEnterCritical+0x48>
 8010090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010094:	f383 8811 	msr	BASEPRI, r3
 8010098:	f3bf 8f6f 	isb	sy
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	603b      	str	r3, [r7, #0]
 80100a2:	e7fe      	b.n	80100a2 <vPortEnterCritical+0x46>
	}
}
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr
 80100b0:	200000a8 	.word	0x200000a8
 80100b4:	e000ed04 	.word	0xe000ed04

080100b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80100be:	4b11      	ldr	r3, [pc, #68]	; (8010104 <vPortExitCritical+0x4c>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d109      	bne.n	80100da <vPortExitCritical+0x22>
 80100c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ca:	f383 8811 	msr	BASEPRI, r3
 80100ce:	f3bf 8f6f 	isb	sy
 80100d2:	f3bf 8f4f 	dsb	sy
 80100d6:	607b      	str	r3, [r7, #4]
 80100d8:	e7fe      	b.n	80100d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80100da:	4b0a      	ldr	r3, [pc, #40]	; (8010104 <vPortExitCritical+0x4c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	3b01      	subs	r3, #1
 80100e0:	4a08      	ldr	r2, [pc, #32]	; (8010104 <vPortExitCritical+0x4c>)
 80100e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80100e4:	4b07      	ldr	r3, [pc, #28]	; (8010104 <vPortExitCritical+0x4c>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d104      	bne.n	80100f6 <vPortExitCritical+0x3e>
 80100ec:	2300      	movs	r3, #0
 80100ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80100f6:	bf00      	nop
 80100f8:	370c      	adds	r7, #12
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr
 8010102:	bf00      	nop
 8010104:	200000a8 	.word	0x200000a8
	...

08010110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010110:	f3ef 8009 	mrs	r0, PSP
 8010114:	f3bf 8f6f 	isb	sy
 8010118:	4b15      	ldr	r3, [pc, #84]	; (8010170 <pxCurrentTCBConst>)
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	f01e 0f10 	tst.w	lr, #16
 8010120:	bf08      	it	eq
 8010122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012a:	6010      	str	r0, [r2, #0]
 801012c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010134:	f380 8811 	msr	BASEPRI, r0
 8010138:	f3bf 8f4f 	dsb	sy
 801013c:	f3bf 8f6f 	isb	sy
 8010140:	f7ff fafe 	bl	800f740 <vTaskSwitchContext>
 8010144:	f04f 0000 	mov.w	r0, #0
 8010148:	f380 8811 	msr	BASEPRI, r0
 801014c:	bc09      	pop	{r0, r3}
 801014e:	6819      	ldr	r1, [r3, #0]
 8010150:	6808      	ldr	r0, [r1, #0]
 8010152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010156:	f01e 0f10 	tst.w	lr, #16
 801015a:	bf08      	it	eq
 801015c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010160:	f380 8809 	msr	PSP, r0
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop
 801016c:	f3af 8000 	nop.w

08010170 <pxCurrentTCBConst>:
 8010170:	20000580 	.word	0x20000580
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010174:	bf00      	nop
 8010176:	bf00      	nop

08010178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
	__asm volatile
 801017e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010182:	f383 8811 	msr	BASEPRI, r3
 8010186:	f3bf 8f6f 	isb	sy
 801018a:	f3bf 8f4f 	dsb	sy
 801018e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010190:	f7ff fa1e 	bl	800f5d0 <xTaskIncrementTick>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d003      	beq.n	80101a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801019a:	4b06      	ldr	r3, [pc, #24]	; (80101b4 <SysTick_Handler+0x3c>)
 801019c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101a0:	601a      	str	r2, [r3, #0]
 80101a2:	2300      	movs	r3, #0
 80101a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80101ac:	bf00      	nop
 80101ae:	3708      	adds	r7, #8
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	e000ed04 	.word	0xe000ed04

080101b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80101b8:	b480      	push	{r7}
 80101ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80101bc:	4b0b      	ldr	r3, [pc, #44]	; (80101ec <vPortSetupTimerInterrupt+0x34>)
 80101be:	2200      	movs	r2, #0
 80101c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80101c2:	4b0b      	ldr	r3, [pc, #44]	; (80101f0 <vPortSetupTimerInterrupt+0x38>)
 80101c4:	2200      	movs	r2, #0
 80101c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80101c8:	4b0a      	ldr	r3, [pc, #40]	; (80101f4 <vPortSetupTimerInterrupt+0x3c>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4a0a      	ldr	r2, [pc, #40]	; (80101f8 <vPortSetupTimerInterrupt+0x40>)
 80101ce:	fba2 2303 	umull	r2, r3, r2, r3
 80101d2:	099b      	lsrs	r3, r3, #6
 80101d4:	4a09      	ldr	r2, [pc, #36]	; (80101fc <vPortSetupTimerInterrupt+0x44>)
 80101d6:	3b01      	subs	r3, #1
 80101d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80101da:	4b04      	ldr	r3, [pc, #16]	; (80101ec <vPortSetupTimerInterrupt+0x34>)
 80101dc:	2207      	movs	r2, #7
 80101de:	601a      	str	r2, [r3, #0]
}
 80101e0:	bf00      	nop
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr
 80101ea:	bf00      	nop
 80101ec:	e000e010 	.word	0xe000e010
 80101f0:	e000e018 	.word	0xe000e018
 80101f4:	20000000 	.word	0x20000000
 80101f8:	10624dd3 	.word	0x10624dd3
 80101fc:	e000e014 	.word	0xe000e014

08010200 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010200:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010210 <vPortEnableVFP+0x10>
 8010204:	6801      	ldr	r1, [r0, #0]
 8010206:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801020a:	6001      	str	r1, [r0, #0]
 801020c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801020e:	bf00      	nop
 8010210:	e000ed88 	.word	0xe000ed88

08010214 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801021a:	f3ef 8305 	mrs	r3, IPSR
 801021e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2b0f      	cmp	r3, #15
 8010224:	d913      	bls.n	801024e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010226:	4a16      	ldr	r2, [pc, #88]	; (8010280 <vPortValidateInterruptPriority+0x6c>)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	4413      	add	r3, r2
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010230:	4b14      	ldr	r3, [pc, #80]	; (8010284 <vPortValidateInterruptPriority+0x70>)
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	7afa      	ldrb	r2, [r7, #11]
 8010236:	429a      	cmp	r2, r3
 8010238:	d209      	bcs.n	801024e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801023a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023e:	f383 8811 	msr	BASEPRI, r3
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	607b      	str	r3, [r7, #4]
 801024c:	e7fe      	b.n	801024c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801024e:	4b0e      	ldr	r3, [pc, #56]	; (8010288 <vPortValidateInterruptPriority+0x74>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010256:	4b0d      	ldr	r3, [pc, #52]	; (801028c <vPortValidateInterruptPriority+0x78>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	429a      	cmp	r2, r3
 801025c:	d909      	bls.n	8010272 <vPortValidateInterruptPriority+0x5e>
 801025e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010262:	f383 8811 	msr	BASEPRI, r3
 8010266:	f3bf 8f6f 	isb	sy
 801026a:	f3bf 8f4f 	dsb	sy
 801026e:	603b      	str	r3, [r7, #0]
 8010270:	e7fe      	b.n	8010270 <vPortValidateInterruptPriority+0x5c>
	}
 8010272:	bf00      	nop
 8010274:	3714      	adds	r7, #20
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop
 8010280:	e000e3f0 	.word	0xe000e3f0
 8010284:	200006ac 	.word	0x200006ac
 8010288:	e000ed0c 	.word	0xe000ed0c
 801028c:	200006b0 	.word	0x200006b0

08010290 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b08a      	sub	sp, #40	; 0x28
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010298:	2300      	movs	r3, #0
 801029a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801029c:	f7ff f8ee 	bl	800f47c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80102a0:	4b59      	ldr	r3, [pc, #356]	; (8010408 <pvPortMalloc+0x178>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d101      	bne.n	80102ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80102a8:	f000 f910 	bl	80104cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80102ac:	4b57      	ldr	r3, [pc, #348]	; (801040c <pvPortMalloc+0x17c>)
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	4013      	ands	r3, r2
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	f040 808c 	bne.w	80103d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d01c      	beq.n	80102fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80102c0:	2208      	movs	r2, #8
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	4413      	add	r3, r2
 80102c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f003 0307 	and.w	r3, r3, #7
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d013      	beq.n	80102fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f023 0307 	bic.w	r3, r3, #7
 80102d8:	3308      	adds	r3, #8
 80102da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f003 0307 	and.w	r3, r3, #7
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d009      	beq.n	80102fa <pvPortMalloc+0x6a>
 80102e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ea:	f383 8811 	msr	BASEPRI, r3
 80102ee:	f3bf 8f6f 	isb	sy
 80102f2:	f3bf 8f4f 	dsb	sy
 80102f6:	617b      	str	r3, [r7, #20]
 80102f8:	e7fe      	b.n	80102f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d068      	beq.n	80103d2 <pvPortMalloc+0x142>
 8010300:	4b43      	ldr	r3, [pc, #268]	; (8010410 <pvPortMalloc+0x180>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	429a      	cmp	r2, r3
 8010308:	d863      	bhi.n	80103d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801030a:	4b42      	ldr	r3, [pc, #264]	; (8010414 <pvPortMalloc+0x184>)
 801030c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801030e:	4b41      	ldr	r3, [pc, #260]	; (8010414 <pvPortMalloc+0x184>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010314:	e004      	b.n	8010320 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	429a      	cmp	r2, r3
 8010328:	d903      	bls.n	8010332 <pvPortMalloc+0xa2>
 801032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1f1      	bne.n	8010316 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010332:	4b35      	ldr	r3, [pc, #212]	; (8010408 <pvPortMalloc+0x178>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010338:	429a      	cmp	r2, r3
 801033a:	d04a      	beq.n	80103d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801033c:	6a3b      	ldr	r3, [r7, #32]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2208      	movs	r2, #8
 8010342:	4413      	add	r3, r2
 8010344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	6a3b      	ldr	r3, [r7, #32]
 801034c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801034e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010350:	685a      	ldr	r2, [r3, #4]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	1ad2      	subs	r2, r2, r3
 8010356:	2308      	movs	r3, #8
 8010358:	005b      	lsls	r3, r3, #1
 801035a:	429a      	cmp	r2, r3
 801035c:	d91e      	bls.n	801039c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801035e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4413      	add	r3, r2
 8010364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	f003 0307 	and.w	r3, r3, #7
 801036c:	2b00      	cmp	r3, #0
 801036e:	d009      	beq.n	8010384 <pvPortMalloc+0xf4>
 8010370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010374:	f383 8811 	msr	BASEPRI, r3
 8010378:	f3bf 8f6f 	isb	sy
 801037c:	f3bf 8f4f 	dsb	sy
 8010380:	613b      	str	r3, [r7, #16]
 8010382:	e7fe      	b.n	8010382 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010386:	685a      	ldr	r2, [r3, #4]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	1ad2      	subs	r2, r2, r3
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010396:	69b8      	ldr	r0, [r7, #24]
 8010398:	f000 f8fa 	bl	8010590 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801039c:	4b1c      	ldr	r3, [pc, #112]	; (8010410 <pvPortMalloc+0x180>)
 801039e:	681a      	ldr	r2, [r3, #0]
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	1ad3      	subs	r3, r2, r3
 80103a6:	4a1a      	ldr	r2, [pc, #104]	; (8010410 <pvPortMalloc+0x180>)
 80103a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80103aa:	4b19      	ldr	r3, [pc, #100]	; (8010410 <pvPortMalloc+0x180>)
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	4b1a      	ldr	r3, [pc, #104]	; (8010418 <pvPortMalloc+0x188>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d203      	bcs.n	80103be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80103b6:	4b16      	ldr	r3, [pc, #88]	; (8010410 <pvPortMalloc+0x180>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4a17      	ldr	r2, [pc, #92]	; (8010418 <pvPortMalloc+0x188>)
 80103bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80103be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c0:	685a      	ldr	r2, [r3, #4]
 80103c2:	4b12      	ldr	r3, [pc, #72]	; (801040c <pvPortMalloc+0x17c>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	431a      	orrs	r2, r3
 80103c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80103cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ce:	2200      	movs	r2, #0
 80103d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80103d2:	f7ff f861 	bl	800f498 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d101      	bne.n	80103e0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80103dc:	f7f0 fa16 	bl	800080c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	f003 0307 	and.w	r3, r3, #7
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d009      	beq.n	80103fe <pvPortMalloc+0x16e>
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	f383 8811 	msr	BASEPRI, r3
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	60fb      	str	r3, [r7, #12]
 80103fc:	e7fe      	b.n	80103fc <pvPortMalloc+0x16c>
	return pvReturn;
 80103fe:	69fb      	ldr	r3, [r7, #28]
}
 8010400:	4618      	mov	r0, r3
 8010402:	3728      	adds	r7, #40	; 0x28
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	200086bc 	.word	0x200086bc
 801040c:	200086c8 	.word	0x200086c8
 8010410:	200086c0 	.word	0x200086c0
 8010414:	200086b4 	.word	0x200086b4
 8010418:	200086c4 	.word	0x200086c4

0801041c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b086      	sub	sp, #24
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d046      	beq.n	80104bc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801042e:	2308      	movs	r3, #8
 8010430:	425b      	negs	r3, r3
 8010432:	697a      	ldr	r2, [r7, #20]
 8010434:	4413      	add	r3, r2
 8010436:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	685a      	ldr	r2, [r3, #4]
 8010440:	4b20      	ldr	r3, [pc, #128]	; (80104c4 <vPortFree+0xa8>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	4013      	ands	r3, r2
 8010446:	2b00      	cmp	r3, #0
 8010448:	d109      	bne.n	801045e <vPortFree+0x42>
 801044a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044e:	f383 8811 	msr	BASEPRI, r3
 8010452:	f3bf 8f6f 	isb	sy
 8010456:	f3bf 8f4f 	dsb	sy
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	e7fe      	b.n	801045c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d009      	beq.n	801047a <vPortFree+0x5e>
 8010466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	60bb      	str	r3, [r7, #8]
 8010478:	e7fe      	b.n	8010478 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	685a      	ldr	r2, [r3, #4]
 801047e:	4b11      	ldr	r3, [pc, #68]	; (80104c4 <vPortFree+0xa8>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4013      	ands	r3, r2
 8010484:	2b00      	cmp	r3, #0
 8010486:	d019      	beq.n	80104bc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d115      	bne.n	80104bc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	685a      	ldr	r2, [r3, #4]
 8010494:	4b0b      	ldr	r3, [pc, #44]	; (80104c4 <vPortFree+0xa8>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	43db      	mvns	r3, r3
 801049a:	401a      	ands	r2, r3
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80104a0:	f7fe ffec 	bl	800f47c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	685a      	ldr	r2, [r3, #4]
 80104a8:	4b07      	ldr	r3, [pc, #28]	; (80104c8 <vPortFree+0xac>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4413      	add	r3, r2
 80104ae:	4a06      	ldr	r2, [pc, #24]	; (80104c8 <vPortFree+0xac>)
 80104b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80104b2:	6938      	ldr	r0, [r7, #16]
 80104b4:	f000 f86c 	bl	8010590 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80104b8:	f7fe ffee 	bl	800f498 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80104bc:	bf00      	nop
 80104be:	3718      	adds	r7, #24
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	200086c8 	.word	0x200086c8
 80104c8:	200086c0 	.word	0x200086c0

080104cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80104cc:	b480      	push	{r7}
 80104ce:	b085      	sub	sp, #20
 80104d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80104d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80104d8:	4b27      	ldr	r3, [pc, #156]	; (8010578 <prvHeapInit+0xac>)
 80104da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f003 0307 	and.w	r3, r3, #7
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00c      	beq.n	8010500 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	3307      	adds	r3, #7
 80104ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f023 0307 	bic.w	r3, r3, #7
 80104f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80104f4:	68ba      	ldr	r2, [r7, #8]
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	4a1f      	ldr	r2, [pc, #124]	; (8010578 <prvHeapInit+0xac>)
 80104fc:	4413      	add	r3, r2
 80104fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010504:	4a1d      	ldr	r2, [pc, #116]	; (801057c <prvHeapInit+0xb0>)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801050a:	4b1c      	ldr	r3, [pc, #112]	; (801057c <prvHeapInit+0xb0>)
 801050c:	2200      	movs	r2, #0
 801050e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	68ba      	ldr	r2, [r7, #8]
 8010514:	4413      	add	r3, r2
 8010516:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010518:	2208      	movs	r2, #8
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	1a9b      	subs	r3, r3, r2
 801051e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f023 0307 	bic.w	r3, r3, #7
 8010526:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	4a15      	ldr	r2, [pc, #84]	; (8010580 <prvHeapInit+0xb4>)
 801052c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801052e:	4b14      	ldr	r3, [pc, #80]	; (8010580 <prvHeapInit+0xb4>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2200      	movs	r2, #0
 8010534:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010536:	4b12      	ldr	r3, [pc, #72]	; (8010580 <prvHeapInit+0xb4>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2200      	movs	r2, #0
 801053c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	1ad2      	subs	r2, r2, r3
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801054c:	4b0c      	ldr	r3, [pc, #48]	; (8010580 <prvHeapInit+0xb4>)
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	4a0a      	ldr	r2, [pc, #40]	; (8010584 <prvHeapInit+0xb8>)
 801055a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	4a09      	ldr	r2, [pc, #36]	; (8010588 <prvHeapInit+0xbc>)
 8010562:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010564:	4b09      	ldr	r3, [pc, #36]	; (801058c <prvHeapInit+0xc0>)
 8010566:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801056a:	601a      	str	r2, [r3, #0]
}
 801056c:	bf00      	nop
 801056e:	3714      	adds	r7, #20
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr
 8010578:	200006b4 	.word	0x200006b4
 801057c:	200086b4 	.word	0x200086b4
 8010580:	200086bc 	.word	0x200086bc
 8010584:	200086c4 	.word	0x200086c4
 8010588:	200086c0 	.word	0x200086c0
 801058c:	200086c8 	.word	0x200086c8

08010590 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010598:	4b28      	ldr	r3, [pc, #160]	; (801063c <prvInsertBlockIntoFreeList+0xac>)
 801059a:	60fb      	str	r3, [r7, #12]
 801059c:	e002      	b.n	80105a4 <prvInsertBlockIntoFreeList+0x14>
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	60fb      	str	r3, [r7, #12]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d8f7      	bhi.n	801059e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	68ba      	ldr	r2, [r7, #8]
 80105b8:	4413      	add	r3, r2
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d108      	bne.n	80105d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	685a      	ldr	r2, [r3, #4]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	441a      	add	r2, r3
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	685b      	ldr	r3, [r3, #4]
 80105da:	68ba      	ldr	r2, [r7, #8]
 80105dc:	441a      	add	r2, r3
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d118      	bne.n	8010618 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	4b15      	ldr	r3, [pc, #84]	; (8010640 <prvInsertBlockIntoFreeList+0xb0>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d00d      	beq.n	801060e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	685a      	ldr	r2, [r3, #4]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	441a      	add	r2, r3
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	601a      	str	r2, [r3, #0]
 801060c:	e008      	b.n	8010620 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801060e:	4b0c      	ldr	r3, [pc, #48]	; (8010640 <prvInsertBlockIntoFreeList+0xb0>)
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	601a      	str	r2, [r3, #0]
 8010616:	e003      	b.n	8010620 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	429a      	cmp	r2, r3
 8010626:	d002      	beq.n	801062e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801062e:	bf00      	nop
 8010630:	3714      	adds	r7, #20
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop
 801063c:	200086b4 	.word	0x200086b4
 8010640:	200086bc 	.word	0x200086bc

08010644 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8010648:	2200      	movs	r2, #0
 801064a:	490e      	ldr	r1, [pc, #56]	; (8010684 <MX_USB_HOST_Init+0x40>)
 801064c:	480e      	ldr	r0, [pc, #56]	; (8010688 <MX_USB_HOST_Init+0x44>)
 801064e:	f7fc f807 	bl	800c660 <USBH_Init>
 8010652:	4603      	mov	r3, r0
 8010654:	2b00      	cmp	r3, #0
 8010656:	d001      	beq.n	801065c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010658:	f7f0 fea6 	bl	80013a8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 801065c:	490b      	ldr	r1, [pc, #44]	; (801068c <MX_USB_HOST_Init+0x48>)
 801065e:	480a      	ldr	r0, [pc, #40]	; (8010688 <MX_USB_HOST_Init+0x44>)
 8010660:	f7fc f8b4 	bl	800c7cc <USBH_RegisterClass>
 8010664:	4603      	mov	r3, r0
 8010666:	2b00      	cmp	r3, #0
 8010668:	d001      	beq.n	801066e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801066a:	f7f0 fe9d 	bl	80013a8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 801066e:	4806      	ldr	r0, [pc, #24]	; (8010688 <MX_USB_HOST_Init+0x44>)
 8010670:	f7fc f938 	bl	800c8e4 <USBH_Start>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801067a:	f7f0 fe95 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801067e:	bf00      	nop
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	08010691 	.word	0x08010691
 8010688:	20008a70 	.word	0x20008a70
 801068c:	20000088 	.word	0x20000088

08010690 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010690:	b480      	push	{r7}
 8010692:	b083      	sub	sp, #12
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	460b      	mov	r3, r1
 801069a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801069c:	78fb      	ldrb	r3, [r7, #3]
 801069e:	3b01      	subs	r3, #1
 80106a0:	2b04      	cmp	r3, #4
 80106a2:	d819      	bhi.n	80106d8 <USBH_UserProcess+0x48>
 80106a4:	a201      	add	r2, pc, #4	; (adr r2, 80106ac <USBH_UserProcess+0x1c>)
 80106a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106aa:	bf00      	nop
 80106ac:	080106d9 	.word	0x080106d9
 80106b0:	080106c9 	.word	0x080106c9
 80106b4:	080106d9 	.word	0x080106d9
 80106b8:	080106d1 	.word	0x080106d1
 80106bc:	080106c1 	.word	0x080106c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80106c0:	4b09      	ldr	r3, [pc, #36]	; (80106e8 <USBH_UserProcess+0x58>)
 80106c2:	2203      	movs	r2, #3
 80106c4:	701a      	strb	r2, [r3, #0]
  break;
 80106c6:	e008      	b.n	80106da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80106c8:	4b07      	ldr	r3, [pc, #28]	; (80106e8 <USBH_UserProcess+0x58>)
 80106ca:	2202      	movs	r2, #2
 80106cc:	701a      	strb	r2, [r3, #0]
  break;
 80106ce:	e004      	b.n	80106da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80106d0:	4b05      	ldr	r3, [pc, #20]	; (80106e8 <USBH_UserProcess+0x58>)
 80106d2:	2201      	movs	r2, #1
 80106d4:	701a      	strb	r2, [r3, #0]
  break;
 80106d6:	e000      	b.n	80106da <USBH_UserProcess+0x4a>

  default:
  break;
 80106d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80106da:	bf00      	nop
 80106dc:	370c      	adds	r7, #12
 80106de:	46bd      	mov	sp, r7
 80106e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop
 80106e8:	200086cc 	.word	0x200086cc

080106ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b08a      	sub	sp, #40	; 0x28
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106f4:	f107 0314 	add.w	r3, r7, #20
 80106f8:	2200      	movs	r2, #0
 80106fa:	601a      	str	r2, [r3, #0]
 80106fc:	605a      	str	r2, [r3, #4]
 80106fe:	609a      	str	r2, [r3, #8]
 8010700:	60da      	str	r2, [r3, #12]
 8010702:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	4a24      	ldr	r2, [pc, #144]	; (801079c <HAL_HCD_MspInit+0xb0>)
 801070a:	4293      	cmp	r3, r2
 801070c:	d141      	bne.n	8010792 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801070e:	2300      	movs	r3, #0
 8010710:	613b      	str	r3, [r7, #16]
 8010712:	4b23      	ldr	r3, [pc, #140]	; (80107a0 <HAL_HCD_MspInit+0xb4>)
 8010714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010716:	4a22      	ldr	r2, [pc, #136]	; (80107a0 <HAL_HCD_MspInit+0xb4>)
 8010718:	f043 0302 	orr.w	r3, r3, #2
 801071c:	6313      	str	r3, [r2, #48]	; 0x30
 801071e:	4b20      	ldr	r3, [pc, #128]	; (80107a0 <HAL_HCD_MspInit+0xb4>)
 8010720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010722:	f003 0302 	and.w	r3, r3, #2
 8010726:	613b      	str	r3, [r7, #16]
 8010728:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801072a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 801072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010730:	2302      	movs	r3, #2
 8010732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010734:	2300      	movs	r3, #0
 8010736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010738:	2300      	movs	r3, #0
 801073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801073c:	230c      	movs	r3, #12
 801073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010740:	f107 0314 	add.w	r3, r7, #20
 8010744:	4619      	mov	r1, r3
 8010746:	4817      	ldr	r0, [pc, #92]	; (80107a4 <HAL_HCD_MspInit+0xb8>)
 8010748:	f7f4 fad4 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 801074c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010752:	2300      	movs	r3, #0
 8010754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010756:	2300      	movs	r3, #0
 8010758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 801075a:	f107 0314 	add.w	r3, r7, #20
 801075e:	4619      	mov	r1, r3
 8010760:	4810      	ldr	r0, [pc, #64]	; (80107a4 <HAL_HCD_MspInit+0xb8>)
 8010762:	f7f4 fac7 	bl	8004cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010766:	2300      	movs	r3, #0
 8010768:	60fb      	str	r3, [r7, #12]
 801076a:	4b0d      	ldr	r3, [pc, #52]	; (80107a0 <HAL_HCD_MspInit+0xb4>)
 801076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801076e:	4a0c      	ldr	r2, [pc, #48]	; (80107a0 <HAL_HCD_MspInit+0xb4>)
 8010770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010774:	6313      	str	r3, [r2, #48]	; 0x30
 8010776:	4b0a      	ldr	r3, [pc, #40]	; (80107a0 <HAL_HCD_MspInit+0xb4>)
 8010778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801077a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801077e:	60fb      	str	r3, [r7, #12]
 8010780:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010782:	2200      	movs	r2, #0
 8010784:	2100      	movs	r1, #0
 8010786:	204d      	movs	r0, #77	; 0x4d
 8010788:	f7f3 fd16 	bl	80041b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801078c:	204d      	movs	r0, #77	; 0x4d
 801078e:	f7f3 fd2f 	bl	80041f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010792:	bf00      	nop
 8010794:	3728      	adds	r7, #40	; 0x28
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	40040000 	.word	0x40040000
 80107a0:	40023800 	.word	0x40023800
 80107a4:	40020400 	.word	0x40020400

080107a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fc fd41 	bl	800d23e <USBH_LL_IncTimer>
}
 80107bc:	bf00      	nop
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fc fd85 	bl	800d2e2 <USBH_LL_Connect>
}
 80107d8:	bf00      	nop
 80107da:	3708      	adds	r7, #8
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fc fd9a 	bl	800d328 <USBH_LL_Disconnect>
}
 80107f4:	bf00      	nop
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	460b      	mov	r3, r1
 8010806:	70fb      	strb	r3, [r7, #3]
 8010808:	4613      	mov	r3, r2
 801080a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010812:	4618      	mov	r0, r3
 8010814:	f7fc fdcf 	bl	800d3b6 <USBH_LL_NotifyURBChange>
#endif
}
 8010818:	bf00      	nop
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801082e:	4618      	mov	r0, r3
 8010830:	f7fc fd2f 	bl	800d292 <USBH_LL_PortEnabled>
}
 8010834:	bf00      	nop
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801084a:	4618      	mov	r0, r3
 801084c:	f7fc fd3b 	bl	800d2c6 <USBH_LL_PortDisabled>
}
 8010850:	bf00      	nop
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010866:	2b00      	cmp	r3, #0
 8010868:	d132      	bne.n	80108d0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801086a:	4a1c      	ldr	r2, [pc, #112]	; (80108dc <USBH_LL_Init+0x84>)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4a19      	ldr	r2, [pc, #100]	; (80108dc <USBH_LL_Init+0x84>)
 8010876:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801087a:	4b18      	ldr	r3, [pc, #96]	; (80108dc <USBH_LL_Init+0x84>)
 801087c:	4a18      	ldr	r2, [pc, #96]	; (80108e0 <USBH_LL_Init+0x88>)
 801087e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8010880:	4b16      	ldr	r3, [pc, #88]	; (80108dc <USBH_LL_Init+0x84>)
 8010882:	220c      	movs	r2, #12
 8010884:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8010886:	4b15      	ldr	r3, [pc, #84]	; (80108dc <USBH_LL_Init+0x84>)
 8010888:	2201      	movs	r2, #1
 801088a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801088c:	4b13      	ldr	r3, [pc, #76]	; (80108dc <USBH_LL_Init+0x84>)
 801088e:	2200      	movs	r2, #0
 8010890:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010892:	4b12      	ldr	r3, [pc, #72]	; (80108dc <USBH_LL_Init+0x84>)
 8010894:	2202      	movs	r2, #2
 8010896:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8010898:	4b10      	ldr	r3, [pc, #64]	; (80108dc <USBH_LL_Init+0x84>)
 801089a:	2200      	movs	r2, #0
 801089c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801089e:	4b0f      	ldr	r3, [pc, #60]	; (80108dc <USBH_LL_Init+0x84>)
 80108a0:	2200      	movs	r2, #0
 80108a2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80108a4:	4b0d      	ldr	r3, [pc, #52]	; (80108dc <USBH_LL_Init+0x84>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80108aa:	4b0c      	ldr	r3, [pc, #48]	; (80108dc <USBH_LL_Init+0x84>)
 80108ac:	2200      	movs	r2, #0
 80108ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80108b0:	480a      	ldr	r0, [pc, #40]	; (80108dc <USBH_LL_Init+0x84>)
 80108b2:	f7f4 fcec 	bl	800528e <HAL_HCD_Init>
 80108b6:	4603      	mov	r3, r0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d001      	beq.n	80108c0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 80108bc:	f7f0 fd74 	bl	80013a8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80108c0:	4806      	ldr	r0, [pc, #24]	; (80108dc <USBH_LL_Init+0x84>)
 80108c2:	f7f5 f8ef 	bl	8005aa4 <HAL_HCD_GetCurrentFrame>
 80108c6:	4603      	mov	r3, r0
 80108c8:	4619      	mov	r1, r3
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f7fc fca8 	bl	800d220 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	20008e54 	.word	0x20008e54
 80108e0:	40040000 	.word	0x40040000

080108e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108ec:	2300      	movs	r3, #0
 80108ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7f5 f85a 	bl	80059b4 <HAL_HCD_Start>
 8010900:	4603      	mov	r3, r0
 8010902:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010904:	7bfb      	ldrb	r3, [r7, #15]
 8010906:	4618      	mov	r0, r3
 8010908:	f000 f95c 	bl	8010bc4 <USBH_Get_USB_Status>
 801090c:	4603      	mov	r3, r0
 801090e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010910:	7bbb      	ldrb	r3, [r7, #14]
}
 8010912:	4618      	mov	r0, r3
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801091a:	b580      	push	{r7, lr}
 801091c:	b084      	sub	sp, #16
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010922:	2300      	movs	r3, #0
 8010924:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010926:	2300      	movs	r3, #0
 8010928:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010930:	4618      	mov	r0, r3
 8010932:	f7f5 f862 	bl	80059fa <HAL_HCD_Stop>
 8010936:	4603      	mov	r3, r0
 8010938:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801093a:	7bfb      	ldrb	r3, [r7, #15]
 801093c:	4618      	mov	r0, r3
 801093e:	f000 f941 	bl	8010bc4 <USBH_Get_USB_Status>
 8010942:	4603      	mov	r3, r0
 8010944:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010946:	7bbb      	ldrb	r3, [r7, #14]
}
 8010948:	4618      	mov	r0, r3
 801094a:	3710      	adds	r7, #16
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010958:	2301      	movs	r3, #1
 801095a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010962:	4618      	mov	r0, r3
 8010964:	f7f5 f8ac 	bl	8005ac0 <HAL_HCD_GetCurrentSpeed>
 8010968:	4603      	mov	r3, r0
 801096a:	2b01      	cmp	r3, #1
 801096c:	d007      	beq.n	801097e <USBH_LL_GetSpeed+0x2e>
 801096e:	2b01      	cmp	r3, #1
 8010970:	d302      	bcc.n	8010978 <USBH_LL_GetSpeed+0x28>
 8010972:	2b02      	cmp	r3, #2
 8010974:	d006      	beq.n	8010984 <USBH_LL_GetSpeed+0x34>
 8010976:	e008      	b.n	801098a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010978:	2300      	movs	r3, #0
 801097a:	73fb      	strb	r3, [r7, #15]
    break;
 801097c:	e008      	b.n	8010990 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801097e:	2301      	movs	r3, #1
 8010980:	73fb      	strb	r3, [r7, #15]
    break;
 8010982:	e005      	b.n	8010990 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010984:	2302      	movs	r3, #2
 8010986:	73fb      	strb	r3, [r7, #15]
    break;
 8010988:	e002      	b.n	8010990 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801098a:	2301      	movs	r3, #1
 801098c:	73fb      	strb	r3, [r7, #15]
    break;
 801098e:	bf00      	nop
  }
  return  speed;
 8010990:	7bfb      	ldrb	r3, [r7, #15]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b084      	sub	sp, #16
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109a2:	2300      	movs	r3, #0
 80109a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80109a6:	2300      	movs	r3, #0
 80109a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7f5 f83f 	bl	8005a34 <HAL_HCD_ResetPort>
 80109b6:	4603      	mov	r3, r0
 80109b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80109ba:	7bfb      	ldrb	r3, [r7, #15]
 80109bc:	4618      	mov	r0, r3
 80109be:	f000 f901 	bl	8010bc4 <USBH_Get_USB_Status>
 80109c2:	4603      	mov	r3, r0
 80109c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3710      	adds	r7, #16
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	460b      	mov	r3, r1
 80109da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80109e2:	78fa      	ldrb	r2, [r7, #3]
 80109e4:	4611      	mov	r1, r2
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7f5 f847 	bl	8005a7a <HAL_HCD_HC_GetXferCount>
 80109ec:	4603      	mov	r3, r0
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}

080109f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80109f6:	b590      	push	{r4, r7, lr}
 80109f8:	b089      	sub	sp, #36	; 0x24
 80109fa:	af04      	add	r7, sp, #16
 80109fc:	6078      	str	r0, [r7, #4]
 80109fe:	4608      	mov	r0, r1
 8010a00:	4611      	mov	r1, r2
 8010a02:	461a      	mov	r2, r3
 8010a04:	4603      	mov	r3, r0
 8010a06:	70fb      	strb	r3, [r7, #3]
 8010a08:	460b      	mov	r3, r1
 8010a0a:	70bb      	strb	r3, [r7, #2]
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a14:	2300      	movs	r3, #0
 8010a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010a1e:	787c      	ldrb	r4, [r7, #1]
 8010a20:	78ba      	ldrb	r2, [r7, #2]
 8010a22:	78f9      	ldrb	r1, [r7, #3]
 8010a24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a26:	9302      	str	r3, [sp, #8]
 8010a28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a2c:	9301      	str	r3, [sp, #4]
 8010a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010a32:	9300      	str	r3, [sp, #0]
 8010a34:	4623      	mov	r3, r4
 8010a36:	f7f4 fc8c 	bl	8005352 <HAL_HCD_HC_Init>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a3e:	7bfb      	ldrb	r3, [r7, #15]
 8010a40:	4618      	mov	r0, r3
 8010a42:	f000 f8bf 	bl	8010bc4 <USBH_Get_USB_Status>
 8010a46:	4603      	mov	r3, r0
 8010a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3714      	adds	r7, #20
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd90      	pop	{r4, r7, pc}

08010a54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a60:	2300      	movs	r3, #0
 8010a62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a64:	2300      	movs	r3, #0
 8010a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a6e:	78fa      	ldrb	r2, [r7, #3]
 8010a70:	4611      	mov	r1, r2
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7f4 fd05 	bl	8005482 <HAL_HCD_HC_Halt>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a7c:	7bfb      	ldrb	r3, [r7, #15]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f000 f8a0 	bl	8010bc4 <USBH_Get_USB_Status>
 8010a84:	4603      	mov	r3, r0
 8010a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010a92:	b590      	push	{r4, r7, lr}
 8010a94:	b089      	sub	sp, #36	; 0x24
 8010a96:	af04      	add	r7, sp, #16
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	4608      	mov	r0, r1
 8010a9c:	4611      	mov	r1, r2
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	70fb      	strb	r3, [r7, #3]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70bb      	strb	r3, [r7, #2]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aac:	2300      	movs	r3, #0
 8010aae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010aba:	787c      	ldrb	r4, [r7, #1]
 8010abc:	78ba      	ldrb	r2, [r7, #2]
 8010abe:	78f9      	ldrb	r1, [r7, #3]
 8010ac0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010ac4:	9303      	str	r3, [sp, #12]
 8010ac6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010ac8:	9302      	str	r3, [sp, #8]
 8010aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010acc:	9301      	str	r3, [sp, #4]
 8010ace:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	4623      	mov	r3, r4
 8010ad6:	f7f4 fcf7 	bl	80054c8 <HAL_HCD_HC_SubmitRequest>
 8010ada:	4603      	mov	r3, r0
 8010adc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010ade:	7bfb      	ldrb	r3, [r7, #15]
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f000 f86f 	bl	8010bc4 <USBH_Get_USB_Status>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3714      	adds	r7, #20
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd90      	pop	{r4, r7, pc}

08010af4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	460b      	mov	r3, r1
 8010afe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b06:	78fa      	ldrb	r2, [r7, #3]
 8010b08:	4611      	mov	r1, r2
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7f4 ffa0 	bl	8005a50 <HAL_HCD_HC_GetURBState>
 8010b10:	4603      	mov	r3, r0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3708      	adds	r7, #8
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b082      	sub	sp, #8
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
 8010b22:	460b      	mov	r3, r1
 8010b24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d103      	bne.n	8010b38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8010b30:	78fb      	ldrb	r3, [r7, #3]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f000 f872 	bl	8010c1c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010b38:	20c8      	movs	r0, #200	; 0xc8
 8010b3a:	f7f3 fa63 	bl	8004004 <HAL_Delay>
  return USBH_OK;
 8010b3e:	2300      	movs	r3, #0
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3708      	adds	r7, #8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b085      	sub	sp, #20
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	460b      	mov	r3, r1
 8010b52:	70fb      	strb	r3, [r7, #3]
 8010b54:	4613      	mov	r3, r2
 8010b56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010b60:	78fa      	ldrb	r2, [r7, #3]
 8010b62:	68f9      	ldr	r1, [r7, #12]
 8010b64:	4613      	mov	r3, r2
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	4413      	add	r3, r2
 8010b6a:	00db      	lsls	r3, r3, #3
 8010b6c:	440b      	add	r3, r1
 8010b6e:	333b      	adds	r3, #59	; 0x3b
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d00a      	beq.n	8010b8c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010b76:	78fa      	ldrb	r2, [r7, #3]
 8010b78:	68f9      	ldr	r1, [r7, #12]
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	4413      	add	r3, r2
 8010b80:	00db      	lsls	r3, r3, #3
 8010b82:	440b      	add	r3, r1
 8010b84:	3350      	adds	r3, #80	; 0x50
 8010b86:	78ba      	ldrb	r2, [r7, #2]
 8010b88:	701a      	strb	r2, [r3, #0]
 8010b8a:	e009      	b.n	8010ba0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010b8c:	78fa      	ldrb	r2, [r7, #3]
 8010b8e:	68f9      	ldr	r1, [r7, #12]
 8010b90:	4613      	mov	r3, r2
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	4413      	add	r3, r2
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	440b      	add	r3, r1
 8010b9a:	3351      	adds	r3, #81	; 0x51
 8010b9c:	78ba      	ldrb	r2, [r7, #2]
 8010b9e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010ba0:	2300      	movs	r3, #0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3714      	adds	r7, #20
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr

08010bae <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b082      	sub	sp, #8
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f7f3 fa24 	bl	8004004 <HAL_Delay>
}
 8010bbc:	bf00      	nop
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b085      	sub	sp, #20
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	4603      	mov	r3, r0
 8010bcc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010bd2:	79fb      	ldrb	r3, [r7, #7]
 8010bd4:	2b03      	cmp	r3, #3
 8010bd6:	d817      	bhi.n	8010c08 <USBH_Get_USB_Status+0x44>
 8010bd8:	a201      	add	r2, pc, #4	; (adr r2, 8010be0 <USBH_Get_USB_Status+0x1c>)
 8010bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bde:	bf00      	nop
 8010be0:	08010bf1 	.word	0x08010bf1
 8010be4:	08010bf7 	.word	0x08010bf7
 8010be8:	08010bfd 	.word	0x08010bfd
 8010bec:	08010c03 	.word	0x08010c03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8010bf4:	e00b      	b.n	8010c0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010bf6:	2302      	movs	r3, #2
 8010bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8010bfa:	e008      	b.n	8010c0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8010c00:	e005      	b.n	8010c0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010c02:	2302      	movs	r3, #2
 8010c04:	73fb      	strb	r3, [r7, #15]
    break;
 8010c06:	e002      	b.n	8010c0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010c08:	2302      	movs	r3, #2
 8010c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8010c0c:	bf00      	nop
  }
  return usb_status;
 8010c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3714      	adds	r7, #20
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr

08010c1c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	4603      	mov	r3, r0
 8010c24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010c26:	79fb      	ldrb	r3, [r7, #7]
 8010c28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8010c2a:	79fb      	ldrb	r3, [r7, #7]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d102      	bne.n	8010c36 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010c30:	2301      	movs	r3, #1
 8010c32:	73fb      	strb	r3, [r7, #15]
 8010c34:	e001      	b.n	8010c3a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010c36:	2300      	movs	r3, #0
 8010c38:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8010c3a:	7bfb      	ldrb	r3, [r7, #15]
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	2110      	movs	r1, #16
 8010c40:	4803      	ldr	r0, [pc, #12]	; (8010c50 <MX_DriverVbusHS+0x34>)
 8010c42:	f7f4 fb0b 	bl	800525c <HAL_GPIO_WritePin>
}
 8010c46:	bf00      	nop
 8010c48:	3710      	adds	r7, #16
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	40020800 	.word	0x40020800

08010c54 <__errno>:
 8010c54:	4b01      	ldr	r3, [pc, #4]	; (8010c5c <__errno+0x8>)
 8010c56:	6818      	ldr	r0, [r3, #0]
 8010c58:	4770      	bx	lr
 8010c5a:	bf00      	nop
 8010c5c:	200000ac 	.word	0x200000ac

08010c60 <__libc_init_array>:
 8010c60:	b570      	push	{r4, r5, r6, lr}
 8010c62:	4e0d      	ldr	r6, [pc, #52]	; (8010c98 <__libc_init_array+0x38>)
 8010c64:	4c0d      	ldr	r4, [pc, #52]	; (8010c9c <__libc_init_array+0x3c>)
 8010c66:	1ba4      	subs	r4, r4, r6
 8010c68:	10a4      	asrs	r4, r4, #2
 8010c6a:	2500      	movs	r5, #0
 8010c6c:	42a5      	cmp	r5, r4
 8010c6e:	d109      	bne.n	8010c84 <__libc_init_array+0x24>
 8010c70:	4e0b      	ldr	r6, [pc, #44]	; (8010ca0 <__libc_init_array+0x40>)
 8010c72:	4c0c      	ldr	r4, [pc, #48]	; (8010ca4 <__libc_init_array+0x44>)
 8010c74:	f000 f94e 	bl	8010f14 <_init>
 8010c78:	1ba4      	subs	r4, r4, r6
 8010c7a:	10a4      	asrs	r4, r4, #2
 8010c7c:	2500      	movs	r5, #0
 8010c7e:	42a5      	cmp	r5, r4
 8010c80:	d105      	bne.n	8010c8e <__libc_init_array+0x2e>
 8010c82:	bd70      	pop	{r4, r5, r6, pc}
 8010c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010c88:	4798      	blx	r3
 8010c8a:	3501      	adds	r5, #1
 8010c8c:	e7ee      	b.n	8010c6c <__libc_init_array+0xc>
 8010c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010c92:	4798      	blx	r3
 8010c94:	3501      	adds	r5, #1
 8010c96:	e7f2      	b.n	8010c7e <__libc_init_array+0x1e>
 8010c98:	08012fa0 	.word	0x08012fa0
 8010c9c:	08012fa0 	.word	0x08012fa0
 8010ca0:	08012fa0 	.word	0x08012fa0
 8010ca4:	08012fa4 	.word	0x08012fa4

08010ca8 <__itoa>:
 8010ca8:	1e93      	subs	r3, r2, #2
 8010caa:	2b22      	cmp	r3, #34	; 0x22
 8010cac:	b510      	push	{r4, lr}
 8010cae:	460c      	mov	r4, r1
 8010cb0:	d904      	bls.n	8010cbc <__itoa+0x14>
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	700b      	strb	r3, [r1, #0]
 8010cb6:	461c      	mov	r4, r3
 8010cb8:	4620      	mov	r0, r4
 8010cba:	bd10      	pop	{r4, pc}
 8010cbc:	2a0a      	cmp	r2, #10
 8010cbe:	d109      	bne.n	8010cd4 <__itoa+0x2c>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	da07      	bge.n	8010cd4 <__itoa+0x2c>
 8010cc4:	232d      	movs	r3, #45	; 0x2d
 8010cc6:	700b      	strb	r3, [r1, #0]
 8010cc8:	4240      	negs	r0, r0
 8010cca:	2101      	movs	r1, #1
 8010ccc:	4421      	add	r1, r4
 8010cce:	f000 f8e1 	bl	8010e94 <__utoa>
 8010cd2:	e7f1      	b.n	8010cb8 <__itoa+0x10>
 8010cd4:	2100      	movs	r1, #0
 8010cd6:	e7f9      	b.n	8010ccc <__itoa+0x24>

08010cd8 <itoa>:
 8010cd8:	f7ff bfe6 	b.w	8010ca8 <__itoa>

08010cdc <malloc>:
 8010cdc:	4b02      	ldr	r3, [pc, #8]	; (8010ce8 <malloc+0xc>)
 8010cde:	4601      	mov	r1, r0
 8010ce0:	6818      	ldr	r0, [r3, #0]
 8010ce2:	f000 b86d 	b.w	8010dc0 <_malloc_r>
 8010ce6:	bf00      	nop
 8010ce8:	200000ac 	.word	0x200000ac

08010cec <free>:
 8010cec:	4b02      	ldr	r3, [pc, #8]	; (8010cf8 <free+0xc>)
 8010cee:	4601      	mov	r1, r0
 8010cf0:	6818      	ldr	r0, [r3, #0]
 8010cf2:	f000 b817 	b.w	8010d24 <_free_r>
 8010cf6:	bf00      	nop
 8010cf8:	200000ac 	.word	0x200000ac

08010cfc <memcpy>:
 8010cfc:	b510      	push	{r4, lr}
 8010cfe:	1e43      	subs	r3, r0, #1
 8010d00:	440a      	add	r2, r1
 8010d02:	4291      	cmp	r1, r2
 8010d04:	d100      	bne.n	8010d08 <memcpy+0xc>
 8010d06:	bd10      	pop	{r4, pc}
 8010d08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d10:	e7f7      	b.n	8010d02 <memcpy+0x6>

08010d12 <memset>:
 8010d12:	4402      	add	r2, r0
 8010d14:	4603      	mov	r3, r0
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d100      	bne.n	8010d1c <memset+0xa>
 8010d1a:	4770      	bx	lr
 8010d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8010d20:	e7f9      	b.n	8010d16 <memset+0x4>
	...

08010d24 <_free_r>:
 8010d24:	b538      	push	{r3, r4, r5, lr}
 8010d26:	4605      	mov	r5, r0
 8010d28:	2900      	cmp	r1, #0
 8010d2a:	d045      	beq.n	8010db8 <_free_r+0x94>
 8010d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d30:	1f0c      	subs	r4, r1, #4
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	bfb8      	it	lt
 8010d36:	18e4      	addlt	r4, r4, r3
 8010d38:	f000 f8ea 	bl	8010f10 <__malloc_lock>
 8010d3c:	4a1f      	ldr	r2, [pc, #124]	; (8010dbc <_free_r+0x98>)
 8010d3e:	6813      	ldr	r3, [r2, #0]
 8010d40:	4610      	mov	r0, r2
 8010d42:	b933      	cbnz	r3, 8010d52 <_free_r+0x2e>
 8010d44:	6063      	str	r3, [r4, #4]
 8010d46:	6014      	str	r4, [r2, #0]
 8010d48:	4628      	mov	r0, r5
 8010d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d4e:	f000 b8e0 	b.w	8010f12 <__malloc_unlock>
 8010d52:	42a3      	cmp	r3, r4
 8010d54:	d90c      	bls.n	8010d70 <_free_r+0x4c>
 8010d56:	6821      	ldr	r1, [r4, #0]
 8010d58:	1862      	adds	r2, r4, r1
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	bf04      	itt	eq
 8010d5e:	681a      	ldreq	r2, [r3, #0]
 8010d60:	685b      	ldreq	r3, [r3, #4]
 8010d62:	6063      	str	r3, [r4, #4]
 8010d64:	bf04      	itt	eq
 8010d66:	1852      	addeq	r2, r2, r1
 8010d68:	6022      	streq	r2, [r4, #0]
 8010d6a:	6004      	str	r4, [r0, #0]
 8010d6c:	e7ec      	b.n	8010d48 <_free_r+0x24>
 8010d6e:	4613      	mov	r3, r2
 8010d70:	685a      	ldr	r2, [r3, #4]
 8010d72:	b10a      	cbz	r2, 8010d78 <_free_r+0x54>
 8010d74:	42a2      	cmp	r2, r4
 8010d76:	d9fa      	bls.n	8010d6e <_free_r+0x4a>
 8010d78:	6819      	ldr	r1, [r3, #0]
 8010d7a:	1858      	adds	r0, r3, r1
 8010d7c:	42a0      	cmp	r0, r4
 8010d7e:	d10b      	bne.n	8010d98 <_free_r+0x74>
 8010d80:	6820      	ldr	r0, [r4, #0]
 8010d82:	4401      	add	r1, r0
 8010d84:	1858      	adds	r0, r3, r1
 8010d86:	4282      	cmp	r2, r0
 8010d88:	6019      	str	r1, [r3, #0]
 8010d8a:	d1dd      	bne.n	8010d48 <_free_r+0x24>
 8010d8c:	6810      	ldr	r0, [r2, #0]
 8010d8e:	6852      	ldr	r2, [r2, #4]
 8010d90:	605a      	str	r2, [r3, #4]
 8010d92:	4401      	add	r1, r0
 8010d94:	6019      	str	r1, [r3, #0]
 8010d96:	e7d7      	b.n	8010d48 <_free_r+0x24>
 8010d98:	d902      	bls.n	8010da0 <_free_r+0x7c>
 8010d9a:	230c      	movs	r3, #12
 8010d9c:	602b      	str	r3, [r5, #0]
 8010d9e:	e7d3      	b.n	8010d48 <_free_r+0x24>
 8010da0:	6820      	ldr	r0, [r4, #0]
 8010da2:	1821      	adds	r1, r4, r0
 8010da4:	428a      	cmp	r2, r1
 8010da6:	bf04      	itt	eq
 8010da8:	6811      	ldreq	r1, [r2, #0]
 8010daa:	6852      	ldreq	r2, [r2, #4]
 8010dac:	6062      	str	r2, [r4, #4]
 8010dae:	bf04      	itt	eq
 8010db0:	1809      	addeq	r1, r1, r0
 8010db2:	6021      	streq	r1, [r4, #0]
 8010db4:	605c      	str	r4, [r3, #4]
 8010db6:	e7c7      	b.n	8010d48 <_free_r+0x24>
 8010db8:	bd38      	pop	{r3, r4, r5, pc}
 8010dba:	bf00      	nop
 8010dbc:	200086d0 	.word	0x200086d0

08010dc0 <_malloc_r>:
 8010dc0:	b570      	push	{r4, r5, r6, lr}
 8010dc2:	1ccd      	adds	r5, r1, #3
 8010dc4:	f025 0503 	bic.w	r5, r5, #3
 8010dc8:	3508      	adds	r5, #8
 8010dca:	2d0c      	cmp	r5, #12
 8010dcc:	bf38      	it	cc
 8010dce:	250c      	movcc	r5, #12
 8010dd0:	2d00      	cmp	r5, #0
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	db01      	blt.n	8010dda <_malloc_r+0x1a>
 8010dd6:	42a9      	cmp	r1, r5
 8010dd8:	d903      	bls.n	8010de2 <_malloc_r+0x22>
 8010dda:	230c      	movs	r3, #12
 8010ddc:	6033      	str	r3, [r6, #0]
 8010dde:	2000      	movs	r0, #0
 8010de0:	bd70      	pop	{r4, r5, r6, pc}
 8010de2:	f000 f895 	bl	8010f10 <__malloc_lock>
 8010de6:	4a21      	ldr	r2, [pc, #132]	; (8010e6c <_malloc_r+0xac>)
 8010de8:	6814      	ldr	r4, [r2, #0]
 8010dea:	4621      	mov	r1, r4
 8010dec:	b991      	cbnz	r1, 8010e14 <_malloc_r+0x54>
 8010dee:	4c20      	ldr	r4, [pc, #128]	; (8010e70 <_malloc_r+0xb0>)
 8010df0:	6823      	ldr	r3, [r4, #0]
 8010df2:	b91b      	cbnz	r3, 8010dfc <_malloc_r+0x3c>
 8010df4:	4630      	mov	r0, r6
 8010df6:	f000 f83d 	bl	8010e74 <_sbrk_r>
 8010dfa:	6020      	str	r0, [r4, #0]
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	4630      	mov	r0, r6
 8010e00:	f000 f838 	bl	8010e74 <_sbrk_r>
 8010e04:	1c43      	adds	r3, r0, #1
 8010e06:	d124      	bne.n	8010e52 <_malloc_r+0x92>
 8010e08:	230c      	movs	r3, #12
 8010e0a:	6033      	str	r3, [r6, #0]
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	f000 f880 	bl	8010f12 <__malloc_unlock>
 8010e12:	e7e4      	b.n	8010dde <_malloc_r+0x1e>
 8010e14:	680b      	ldr	r3, [r1, #0]
 8010e16:	1b5b      	subs	r3, r3, r5
 8010e18:	d418      	bmi.n	8010e4c <_malloc_r+0x8c>
 8010e1a:	2b0b      	cmp	r3, #11
 8010e1c:	d90f      	bls.n	8010e3e <_malloc_r+0x7e>
 8010e1e:	600b      	str	r3, [r1, #0]
 8010e20:	50cd      	str	r5, [r1, r3]
 8010e22:	18cc      	adds	r4, r1, r3
 8010e24:	4630      	mov	r0, r6
 8010e26:	f000 f874 	bl	8010f12 <__malloc_unlock>
 8010e2a:	f104 000b 	add.w	r0, r4, #11
 8010e2e:	1d23      	adds	r3, r4, #4
 8010e30:	f020 0007 	bic.w	r0, r0, #7
 8010e34:	1ac3      	subs	r3, r0, r3
 8010e36:	d0d3      	beq.n	8010de0 <_malloc_r+0x20>
 8010e38:	425a      	negs	r2, r3
 8010e3a:	50e2      	str	r2, [r4, r3]
 8010e3c:	e7d0      	b.n	8010de0 <_malloc_r+0x20>
 8010e3e:	428c      	cmp	r4, r1
 8010e40:	684b      	ldr	r3, [r1, #4]
 8010e42:	bf16      	itet	ne
 8010e44:	6063      	strne	r3, [r4, #4]
 8010e46:	6013      	streq	r3, [r2, #0]
 8010e48:	460c      	movne	r4, r1
 8010e4a:	e7eb      	b.n	8010e24 <_malloc_r+0x64>
 8010e4c:	460c      	mov	r4, r1
 8010e4e:	6849      	ldr	r1, [r1, #4]
 8010e50:	e7cc      	b.n	8010dec <_malloc_r+0x2c>
 8010e52:	1cc4      	adds	r4, r0, #3
 8010e54:	f024 0403 	bic.w	r4, r4, #3
 8010e58:	42a0      	cmp	r0, r4
 8010e5a:	d005      	beq.n	8010e68 <_malloc_r+0xa8>
 8010e5c:	1a21      	subs	r1, r4, r0
 8010e5e:	4630      	mov	r0, r6
 8010e60:	f000 f808 	bl	8010e74 <_sbrk_r>
 8010e64:	3001      	adds	r0, #1
 8010e66:	d0cf      	beq.n	8010e08 <_malloc_r+0x48>
 8010e68:	6025      	str	r5, [r4, #0]
 8010e6a:	e7db      	b.n	8010e24 <_malloc_r+0x64>
 8010e6c:	200086d0 	.word	0x200086d0
 8010e70:	200086d4 	.word	0x200086d4

08010e74 <_sbrk_r>:
 8010e74:	b538      	push	{r3, r4, r5, lr}
 8010e76:	4c06      	ldr	r4, [pc, #24]	; (8010e90 <_sbrk_r+0x1c>)
 8010e78:	2300      	movs	r3, #0
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	4608      	mov	r0, r1
 8010e7e:	6023      	str	r3, [r4, #0]
 8010e80:	f7f0 fbfe 	bl	8001680 <_sbrk>
 8010e84:	1c43      	adds	r3, r0, #1
 8010e86:	d102      	bne.n	8010e8e <_sbrk_r+0x1a>
 8010e88:	6823      	ldr	r3, [r4, #0]
 8010e8a:	b103      	cbz	r3, 8010e8e <_sbrk_r+0x1a>
 8010e8c:	602b      	str	r3, [r5, #0]
 8010e8e:	bd38      	pop	{r3, r4, r5, pc}
 8010e90:	20009118 	.word	0x20009118

08010e94 <__utoa>:
 8010e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e96:	4b1d      	ldr	r3, [pc, #116]	; (8010f0c <__utoa+0x78>)
 8010e98:	b08b      	sub	sp, #44	; 0x2c
 8010e9a:	4605      	mov	r5, r0
 8010e9c:	460c      	mov	r4, r1
 8010e9e:	466e      	mov	r6, sp
 8010ea0:	f103 0c20 	add.w	ip, r3, #32
 8010ea4:	6818      	ldr	r0, [r3, #0]
 8010ea6:	6859      	ldr	r1, [r3, #4]
 8010ea8:	4637      	mov	r7, r6
 8010eaa:	c703      	stmia	r7!, {r0, r1}
 8010eac:	3308      	adds	r3, #8
 8010eae:	4563      	cmp	r3, ip
 8010eb0:	463e      	mov	r6, r7
 8010eb2:	d1f7      	bne.n	8010ea4 <__utoa+0x10>
 8010eb4:	6818      	ldr	r0, [r3, #0]
 8010eb6:	791b      	ldrb	r3, [r3, #4]
 8010eb8:	713b      	strb	r3, [r7, #4]
 8010eba:	1e93      	subs	r3, r2, #2
 8010ebc:	2b22      	cmp	r3, #34	; 0x22
 8010ebe:	6038      	str	r0, [r7, #0]
 8010ec0:	f04f 0300 	mov.w	r3, #0
 8010ec4:	d904      	bls.n	8010ed0 <__utoa+0x3c>
 8010ec6:	7023      	strb	r3, [r4, #0]
 8010ec8:	461c      	mov	r4, r3
 8010eca:	4620      	mov	r0, r4
 8010ecc:	b00b      	add	sp, #44	; 0x2c
 8010ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ed0:	1e66      	subs	r6, r4, #1
 8010ed2:	fbb5 f0f2 	udiv	r0, r5, r2
 8010ed6:	af0a      	add	r7, sp, #40	; 0x28
 8010ed8:	fb02 5510 	mls	r5, r2, r0, r5
 8010edc:	443d      	add	r5, r7
 8010ede:	1c59      	adds	r1, r3, #1
 8010ee0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8010ee4:	f806 5f01 	strb.w	r5, [r6, #1]!
 8010ee8:	4605      	mov	r5, r0
 8010eea:	b968      	cbnz	r0, 8010f08 <__utoa+0x74>
 8010eec:	5460      	strb	r0, [r4, r1]
 8010eee:	4423      	add	r3, r4
 8010ef0:	4622      	mov	r2, r4
 8010ef2:	1b19      	subs	r1, r3, r4
 8010ef4:	1b10      	subs	r0, r2, r4
 8010ef6:	4281      	cmp	r1, r0
 8010ef8:	dde7      	ble.n	8010eca <__utoa+0x36>
 8010efa:	7811      	ldrb	r1, [r2, #0]
 8010efc:	7818      	ldrb	r0, [r3, #0]
 8010efe:	f802 0b01 	strb.w	r0, [r2], #1
 8010f02:	f803 1901 	strb.w	r1, [r3], #-1
 8010f06:	e7f4      	b.n	8010ef2 <__utoa+0x5e>
 8010f08:	460b      	mov	r3, r1
 8010f0a:	e7e2      	b.n	8010ed2 <__utoa+0x3e>
 8010f0c:	08012f70 	.word	0x08012f70

08010f10 <__malloc_lock>:
 8010f10:	4770      	bx	lr

08010f12 <__malloc_unlock>:
 8010f12:	4770      	bx	lr

08010f14 <_init>:
 8010f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f16:	bf00      	nop
 8010f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f1a:	bc08      	pop	{r3}
 8010f1c:	469e      	mov	lr, r3
 8010f1e:	4770      	bx	lr

08010f20 <_fini>:
 8010f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f22:	bf00      	nop
 8010f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f26:	bc08      	pop	{r3}
 8010f28:	469e      	mov	lr, r3
 8010f2a:	4770      	bx	lr
