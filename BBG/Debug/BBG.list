
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003aec  0800d3a8  0800d3a8  0001d3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e94  08010e94  00030108  2**0
                  CONTENTS
  4 .ARM          00000008  08010e94  08010e94  00020e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e9c  08010e9c  00030108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e9c  08010e9c  00020e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ea0  08010ea0  00020ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08010ea4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  20000108  08010fac  00030108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  08010fac  00030a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040174  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000754a  00000000  00000000  000702ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027d8  00000000  00000000  000777f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024b0  00000000  00000000  00079fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030783  00000000  00000000  0007c480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00029f07  00000000  00000000  000acc03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6e5a  00000000  00000000  000d6b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cd964  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a744  00000000  00000000  001cd9e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000108 	.word	0x20000108
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d390 	.word	0x0800d390

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	0800d390 	.word	0x0800d390

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BBG_init>:
////	bbg->kulka = kulka;
////	rysuj_kulke(bbg->kulka);
//}

void BBG_init(BBG *bbg, Platforma *platforma, Klocek **klocki, Kulka *kulka, int lkl)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
    bbg->liczba_klockow = lkl;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	60da      	str	r2, [r3, #12]

    bbg->platforma = platforma;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	601a      	str	r2, [r3, #0]
    rysuj_platforme(bbg->platforma);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fcea 	bl	8001ee8 <rysuj_platforme>

    bbg->klocki = klocki;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++)
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e014      	b.n	800054a <BBG_init+0x5a>
    {
    	if(bbg->klocki[i]->is_there==1){
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	7b1b      	ldrb	r3, [r3, #12]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d108      	bne.n	8000544 <BBG_init+0x54>
        rysuj_klocek(bbg->klocki[i]);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fe4c 	bl	80011dc <rysuj_klocek>
    for (int i = 0; i < bbg->liczba_klockow; i++)
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	3301      	adds	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbe5      	blt.n	8000520 <BBG_init+0x30>
    	}
    }

    bbg->kulka = kulka;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	609a      	str	r2, [r3, #8]
    rysuj_kulke(bbg->kulka);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fe74 	bl	800124c <rysuj_kulke>
    rysuj_platforme(bbg->platforma);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fcbd 	bl	8001ee8 <rysuj_platforme>
}
 800056e:	bf00      	nop
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <BBG_obsluga_zbicia_klocka>:

int BBG_obsluga_zbicia_klocka(BBG *bbg)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++)
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e118      	b.n	80007b8 <BBG_obsluga_zbicia_klocka+0x240>
    {
        // Sprawdź, czy kulka zderzyła się z klockiem
        if (bbg->kulka->polozenie_y + (bbg->kulka->promien-2) >= bbg->klocki[i]->pozycja_y &&
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	3b02      	subs	r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	6851      	ldr	r1, [r2, #4]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	440a      	add	r2, r1
 80005a0:	6812      	ldr	r2, [r2, #0]
 80005a2:	8852      	ldrh	r2, [r2, #2]
 80005a4:	4293      	cmp	r3, r2
 80005a6:	f2c0 80fe 	blt.w	80007a6 <BBG_obsluga_zbicia_klocka+0x22e>
            bbg->kulka->polozenie_y - (bbg->kulka->promien-2) <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	3b02      	subs	r3, #2
 80005b8:	1ad2      	subs	r2, r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	885b      	ldrh	r3, [r3, #2]
 80005c8:	4618      	mov	r0, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6859      	ldr	r1, [r3, #4]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	4403      	add	r3, r0
        if (bbg->kulka->polozenie_y + (bbg->kulka->promien-2) >= bbg->klocki[i]->pozycja_y &&
 80005da:	429a      	cmp	r2, r3
 80005dc:	f300 80e3 	bgt.w	80007a6 <BBG_obsluga_zbicia_klocka+0x22e>
            bbg->kulka->polozenie_x + (bbg->kulka->promien-2) >= bbg->klocki[i]->pozycja_x &&
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	3b02      	subs	r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	6851      	ldr	r1, [r2, #4]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	440a      	add	r2, r1
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	8812      	ldrh	r2, [r2, #0]
            bbg->kulka->polozenie_y - (bbg->kulka->promien-2) <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005fe:	4293      	cmp	r3, r2
 8000600:	f2c0 80d1 	blt.w	80007a6 <BBG_obsluga_zbicia_klocka+0x22e>
            bbg->kulka->polozenie_x - (bbg->kulka->promien-2) <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc &&
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	3b02      	subs	r3, #2
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6859      	ldr	r1, [r3, #4]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	440b      	add	r3, r1
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6859      	ldr	r1, [r3, #4]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	440b      	add	r3, r1
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	4403      	add	r3, r0
            bbg->kulka->polozenie_x + (bbg->kulka->promien-2) >= bbg->klocki[i]->pozycja_x &&
 8000634:	429a      	cmp	r2, r3
 8000636:	f300 80b6 	bgt.w	80007a6 <BBG_obsluga_zbicia_klocka+0x22e>
			bbg->klocki[i]->is_there==1)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	7b1b      	ldrb	r3, [r3, #12]
            bbg->kulka->polozenie_x - (bbg->kulka->promien-2) <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc &&
 8000648:	2b01      	cmp	r3, #1
 800064a:	f040 80ac 	bne.w	80007a6 <BBG_obsluga_zbicia_klocka+0x22e>
        {

            bbg->kulka->predkosc_x *= -1;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4252      	negs	r2, r2
 800065a:	60da      	str	r2, [r3, #12]
            bbg->kulka->predkosc_y *= -1;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	691a      	ldr	r2, [r3, #16]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	4252      	negs	r2, r2
 8000668:	611a      	str	r2, [r3, #16]

            // Odwróć kierunek prędkości kulki
            if (bbg->kulka->polozenie_x >= bbg->klocki[i]->pozycja_x &&
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	6851      	ldr	r1, [r2, #4]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	0092      	lsls	r2, r2, #2
 8000678:	440a      	add	r2, r1
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	8812      	ldrh	r2, [r2, #0]
 800067e:	4293      	cmp	r3, r2
 8000680:	db1b      	blt.n	80006ba <BBG_obsluga_zbicia_klocka+0x142>
                bbg->kulka->polozenie_x <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6859      	ldr	r1, [r3, #4]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	440b      	add	r3, r1
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6859      	ldr	r1, [r3, #4]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	4403      	add	r3, r0
            if (bbg->kulka->polozenie_x >= bbg->klocki[i]->pozycja_x &&
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dc06      	bgt.n	80006ba <BBG_obsluga_zbicia_klocka+0x142>
            {
                bbg->kulka->predkosc_x *= -1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	4252      	negs	r2, r2
 80006b8:	60da      	str	r2, [r3, #12]
            }
            if (bbg->kulka->polozenie_y >= bbg->klocki[i]->pozycja_y &&
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	6851      	ldr	r1, [r2, #4]
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	0092      	lsls	r2, r2, #2
 80006c8:	440a      	add	r2, r1
 80006ca:	6812      	ldr	r2, [r2, #0]
 80006cc:	8852      	ldrh	r2, [r2, #2]
 80006ce:	4293      	cmp	r3, r2
 80006d0:	db1b      	blt.n	800070a <BBG_obsluga_zbicia_klocka+0x192>
                bbg->kulka->polozenie_y <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6859      	ldr	r1, [r3, #4]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	885b      	ldrh	r3, [r3, #2]
 80006e6:	4618      	mov	r0, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6859      	ldr	r1, [r3, #4]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	795b      	ldrb	r3, [r3, #5]
 80006f6:	4403      	add	r3, r0
            if (bbg->kulka->polozenie_y >= bbg->klocki[i]->pozycja_y &&
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dc06      	bgt.n	800070a <BBG_obsluga_zbicia_klocka+0x192>
            {
                bbg->kulka->predkosc_y *= -1;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	691a      	ldr	r2, [r3, #16]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	4252      	negs	r2, r2
 8000708:	611a      	str	r2, [r3, #16]
            }

            if(bbg->klocki[i]->is_breakable==1){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	7b5b      	ldrb	r3, [r3, #13]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d126      	bne.n	800076a <BBG_obsluga_zbicia_klocka+0x1f2>
            // zamaluj miejsce zbitego klocka
            BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800071c:	482c      	ldr	r0, [pc, #176]	; (80007d0 <BBG_obsluga_zbicia_klocka+0x258>)
 800071e:	f003 fa11 	bl	8003b44 <BSP_LCD_SetBackColor>
            BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000722:	482b      	ldr	r0, [pc, #172]	; (80007d0 <BBG_obsluga_zbicia_klocka+0x258>)
 8000724:	f003 f9f6 	bl	8003b14 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	8818      	ldrh	r0, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	8859      	ldrh	r1, [r3, #2]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	b29c      	uxth	r4, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	795b      	ldrb	r3, [r3, #5]
 8000762:	b29b      	uxth	r3, r3
 8000764:	4622      	mov	r2, r4
 8000766:	f003 fd3f 	bl	80041e8 <BSP_LCD_FillRect>
            }
            // Usuń trafiony klocek z tablicy klocków
            // free(bbg->klocki[i]);

            // Przesuń pozostałe klocki w tablicy, aby zapełnić lukę po usuniętym klocku
            for (int j = i; j < bbg->liczba_klockow - 1; j++)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	e00f      	b.n	8000790 <BBG_obsluga_zbicia_klocka+0x218>
            {
                bbg->klocki[j] = bbg->klocki[j + 1];
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	3301      	adds	r3, #1
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	441a      	add	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6859      	ldr	r1, [r3, #4]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	601a      	str	r2, [r3, #0]
            for (int j = i; j < bbg->liczba_klockow - 1; j++)
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	3301      	adds	r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	3b01      	subs	r3, #1
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbe9      	blt.n	8000770 <BBG_obsluga_zbicia_klocka+0x1f8>
            }


            // Zmniejsz liczbę klocków o 1
            bbg->liczba_klockow--;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	60da      	str	r2, [r3, #12]
		}

		if (bbg->liczba_klockow == 0)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <BBG_obsluga_zbicia_klocka+0x23a>
		{
			return 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e009      	b.n	80007c6 <BBG_obsluga_zbicia_klocka+0x24e>
    for (int i = 0; i < bbg->liczba_klockow; i++)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	429a      	cmp	r2, r3
 80007c0:	f6ff aee1 	blt.w	8000586 <BBG_obsluga_zbicia_klocka+0xe>
		}
	}
    return 0;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd90      	pop	{r4, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	ffff0000 	.word	0xffff0000

080007d4 <BBG_obsluzDotykEkranu>:

// Obsługa dotyku ekranu (przykładowa implementacja)
void BBG_obsluzDotykEkranu(BBG *bbg, TS_StateTypeDef TS_State)
{
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	b08b      	sub	sp, #44	; 0x2c
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	e883 0006 	stmia.w	r3, {r1, r2}
    if (TS_State.TouchDetected)
 80007e2:	88bb      	ldrh	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 810c 	beq.w	8000a02 <BBG_obsluzDotykEkranu+0x22e>
    {
        int platforma_x = Platforma_getPolozenieX(bbg->platforma);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fba3 	bl	8001f3a <Platforma_getPolozenieX>
 80007f4:	6278      	str	r0, [r7, #36]	; 0x24
        int platforma_szerokosc = Platforma_getSzerokosc(bbg->platforma);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fbb5 	bl	8001f6a <Platforma_getSzerokosc>
 8000800:	6238      	str	r0, [r7, #32]
        int platforma_krok = Platforma_getKrok(bbg->platforma);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fbc7 	bl	8001f9a <Platforma_getKrok>
 800080c:	61f8      	str	r0, [r7, #28]

        uint32_t x = Calibration_GetX(TS_State.X);
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	4618      	mov	r0, r3
 8000812:	f001 ffb1 	bl	8002778 <Calibration_GetX>
 8000816:	4603      	mov	r3, r0
 8000818:	61bb      	str	r3, [r7, #24]
        uint32_t y = Calibration_GetY(TS_State.Y);
 800081a:	893b      	ldrh	r3, [r7, #8]
 800081c:	4618      	mov	r0, r3
 800081e:	f001 ffcf 	bl	80027c0 <Calibration_GetY>
 8000822:	4603      	mov	r3, r0
 8000824:	617b      	str	r3, [r7, #20]
        if ((x < BSP_LCD_GetXSize() / 2) && (x > 0))
 8000826:	f003 f8ab 	bl	8003980 <BSP_LCD_GetXSize>
 800082a:	4603      	mov	r3, r0
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	69ba      	ldr	r2, [r7, #24]
 8000830:	429a      	cmp	r2, r3
 8000832:	d256      	bcs.n	80008e2 <BBG_obsluzDotykEkranu+0x10e>
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d053      	beq.n	80008e2 <BBG_obsluzDotykEkranu+0x10e>
        {
            platforma_x = max(0, platforma_x - platforma_krok); // Move left
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
            BSP_LCD_SetTextColor(0xFFFF0000);
 8000846:	4871      	ldr	r0, [pc, #452]	; (8000a0c <BBG_obsluzDotykEkranu+0x238>)
 8000848:	f003 f964 	bl	8003b14 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(platforma_x+Platforma_getSzerokosc(bbg->platforma),Platforma_getPolozenieY(bbg->platforma), Platforma_getKrok(bbg->platforma), Platforma_getWysokosc(bbg->platforma));
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fb8a 	bl	8001f6a <Platforma_getSzerokosc>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	b29b      	uxth	r3, r3
 800085e:	4413      	add	r3, r2
 8000860:	b29c      	uxth	r4, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fb73 	bl	8001f52 <Platforma_getPolozenieY>
 800086c:	4603      	mov	r3, r0
 800086e:	b29d      	uxth	r5, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fb90 	bl	8001f9a <Platforma_getKrok>
 800087a:	4603      	mov	r3, r0
 800087c:	b29e      	uxth	r6, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fb7d 	bl	8001f82 <Platforma_getWysokosc>
 8000888:	4603      	mov	r3, r0
 800088a:	b29b      	uxth	r3, r3
 800088c:	4632      	mov	r2, r6
 800088e:	4629      	mov	r1, r5
 8000890:	4620      	mov	r0, r4
 8000892:	f003 fca9 	bl	80041e8 <BSP_LCD_FillRect>
            BSP_LCD_SetTextColor(Platforma_getKolor(bbg->platforma));
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fb89 	bl	8001fb2 <Platforma_getKolor>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 f936 	bl	8003b14 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(platforma_x,Platforma_getPolozenieY(bbg->platforma), Platforma_getKrok(bbg->platforma), Platforma_getWysokosc(bbg->platforma));
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	b29c      	uxth	r4, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fb4e 	bl	8001f52 <Platforma_getPolozenieY>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29d      	uxth	r5, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fb6b 	bl	8001f9a <Platforma_getKrok>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29e      	uxth	r6, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fb58 	bl	8001f82 <Platforma_getWysokosc>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	4632      	mov	r2, r6
 80008d8:	4629      	mov	r1, r5
 80008da:	4620      	mov	r0, r4
 80008dc:	f003 fc84 	bl	80041e8 <BSP_LCD_FillRect>
 80008e0:	e08b      	b.n	80009fa <BBG_obsluzDotykEkranu+0x226>
        }
        else if ((x > BSP_LCD_GetXSize() / 2) && (x < BSP_LCD_GetXSize()))
 80008e2:	f003 f84d 	bl	8003980 <BSP_LCD_GetXSize>
 80008e6:	4603      	mov	r3, r0
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	f240 8084 	bls.w	80009fa <BBG_obsluzDotykEkranu+0x226>
 80008f2:	f003 f845 	bl	8003980 <BSP_LCD_GetXSize>
 80008f6:	4602      	mov	r2, r0
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d27d      	bcs.n	80009fa <BBG_obsluzDotykEkranu+0x226>
        {
            platforma_x = min(BSP_LCD_GetXSize() - platforma_szerokosc, platforma_x + platforma_krok); // Move right
 80008fe:	f003 f83f 	bl	8003980 <BSP_LCD_GetXSize>
 8000902:	4602      	mov	r2, r0
 8000904:	6a3b      	ldr	r3, [r7, #32]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800090a:	69fa      	ldr	r2, [r7, #28]
 800090c:	440a      	add	r2, r1
 800090e:	4293      	cmp	r3, r2
 8000910:	d205      	bcs.n	800091e <BBG_obsluzDotykEkranu+0x14a>
 8000912:	f003 f835 	bl	8003980 <BSP_LCD_GetXSize>
 8000916:	4602      	mov	r2, r0
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	e002      	b.n	8000924 <BBG_obsluzDotykEkranu+0x150>
 800091e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	4413      	add	r3, r2
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
            if(Platforma_getPolozenieX(bbg->platforma)+Platforma_getSzerokosc(bbg->platforma)<BSP_LCD_GetXSize()){
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fb05 	bl	8001f3a <Platforma_getPolozenieX>
 8000930:	4604      	mov	r4, r0
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fb17 	bl	8001f6a <Platforma_getSzerokosc>
 800093c:	4603      	mov	r3, r0
 800093e:	4423      	add	r3, r4
 8000940:	461c      	mov	r4, r3
 8000942:	f003 f81d 	bl	8003980 <BSP_LCD_GetXSize>
 8000946:	4603      	mov	r3, r0
 8000948:	429c      	cmp	r4, r3
 800094a:	d256      	bcs.n	80009fa <BBG_obsluzDotykEkranu+0x226>
            BSP_LCD_SetTextColor(0xFFFF0000);
 800094c:	482f      	ldr	r0, [pc, #188]	; (8000a0c <BBG_obsluzDotykEkranu+0x238>)
 800094e:	f003 f8e1 	bl	8003b14 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(Platforma_getPolozenieX(bbg->platforma),Platforma_getPolozenieY(bbg->platforma), Platforma_getKrok(bbg->platforma), Platforma_getWysokosc(bbg->platforma));
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f001 faef 	bl	8001f3a <Platforma_getPolozenieX>
 800095c:	4603      	mov	r3, r0
 800095e:	b29c      	uxth	r4, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f001 faf4 	bl	8001f52 <Platforma_getPolozenieY>
 800096a:	4603      	mov	r3, r0
 800096c:	b29d      	uxth	r5, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fb11 	bl	8001f9a <Platforma_getKrok>
 8000978:	4603      	mov	r3, r0
 800097a:	b29e      	uxth	r6, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fafe 	bl	8001f82 <Platforma_getWysokosc>
 8000986:	4603      	mov	r3, r0
 8000988:	b29b      	uxth	r3, r3
 800098a:	4632      	mov	r2, r6
 800098c:	4629      	mov	r1, r5
 800098e:	4620      	mov	r0, r4
 8000990:	f003 fc2a 	bl	80041e8 <BSP_LCD_FillRect>
            BSP_LCD_SetTextColor(Platforma_getKolor(bbg->platforma));
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fb0a 	bl	8001fb2 <Platforma_getKolor>
 800099e:	4603      	mov	r3, r0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f003 f8b7 	bl	8003b14 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(Platforma_getPolozenieX(bbg->platforma)+Platforma_getSzerokosc(bbg->platforma), Platforma_getPolozenieY(bbg->platforma), Platforma_getKrok(bbg->platforma), Platforma_getWysokosc(bbg->platforma));
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fac5 	bl	8001f3a <Platforma_getPolozenieX>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b29c      	uxth	r4, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fad6 	bl	8001f6a <Platforma_getSzerokosc>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	4423      	add	r3, r4
 80009c4:	b29c      	uxth	r4, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fac1 	bl	8001f52 <Platforma_getPolozenieY>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29d      	uxth	r5, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fade 	bl	8001f9a <Platforma_getKrok>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29e      	uxth	r6, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 facb 	bl	8001f82 <Platforma_getWysokosc>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4632      	mov	r2, r6
 80009f2:	4629      	mov	r1, r5
 80009f4:	4620      	mov	r0, r4
 80009f6:	f003 fbf7 	bl	80041e8 <BSP_LCD_FillRect>
            }
        }

        BBG_ruchPlatformy(bbg, platforma_x);
 80009fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 f84e 	bl	8000a9e <BBG_ruchPlatformy>
    }
}
 8000a02:	bf00      	nop
 8000a04:	372c      	adds	r7, #44	; 0x2c
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	ffff0000 	.word	0xffff0000

08000a10 <BBG_ruchKulki>:

// Ruch kulki (przykładowa implementacja)
int BBG_ruchKulki(BBG *bbg)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

    if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->platforma->polozenie_y &&
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	441a      	add	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	db27      	blt.n	8000a80 <BBG_ruchKulki+0x70>
        bbg->kulka->polozenie_x < bbg->platforma->polozenie_x + bbg->platforma->szerokosc &&
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6819      	ldr	r1, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	440b      	add	r3, r1
    if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->platforma->polozenie_y &&
 8000a44:	429a      	cmp	r2, r3
 8000a46:	da1b      	bge.n	8000a80 <BBG_ruchKulki+0x70>
        bbg->kulka->polozenie_x > bbg->platforma->polozenie_x)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
        bbg->kulka->polozenie_x < bbg->platforma->polozenie_x + bbg->platforma->szerokosc &&
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dd13      	ble.n	8000a80 <BBG_ruchKulki+0x70>
    {
        if (!(bbg->kulka->polozenie_y > bbg->platforma->polozenie_y))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dc0b      	bgt.n	8000a80 <BBG_ruchKulki+0x70>
        {
            bbg->kulka->predkosc_y *= -1;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	691a      	ldr	r2, [r3, #16]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	4252      	negs	r2, r2
 8000a74:	611a      	str	r2, [r3, #16]
            rysuj_platforme(bbg->platforma);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fa34 	bl	8001ee8 <rysuj_platforme>
        }
    }

    if (Kulka_ruch(bbg->kulka) == 1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fbfb 	bl	8001280 <Kulka_ruch>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <BBG_ruchKulki+0x84>
    {
        return 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e000      	b.n	8000a96 <BBG_ruchKulki+0x86>
    }

    // Obsługa odbicia od platformy
    return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <BBG_ruchPlatformy>:

// Ruch platformy (przykładowa implementacja)
void BBG_ruchPlatformy(BBG *bbg, int x)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
    Platforma_przesunDo(bbg->platforma, x);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6839      	ldr	r1, [r7, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fa35 	bl	8001f1e <Platforma_przesunDo>

}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_CRC_Init+0x20>)
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <MX_CRC_Init+0x24>)
 8000ac4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_CRC_Init+0x20>)
 8000ac8:	f004 fb40 	bl	800514c <HAL_CRC_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ad2:	f001 f9e3 	bl	8001e9c <Error_Handler>
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000400 	.word	0x20000400
 8000ae0:	40023000 	.word	0x40023000

08000ae4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <HAL_CRC_MspInit+0x3c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d10d      	bne.n	8000b12 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_CRC_MspInit+0x40>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HAL_CRC_MspInit+0x40>)
 8000b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_CRC_MspInit+0x40>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023000 	.word	0x40023000
 8000b24:	40023800 	.word	0x40023800

08000b28 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <MX_DMA2D_Init+0x60>)
 8000b30:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b5e:	f004 fccd 	bl	80054fc <HAL_DMA2D_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000b68:	f001 f998 	bl	8001e9c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_DMA2D_Init+0x5c>)
 8000b70:	f004 ff32 	bl	80059d8 <HAL_DMA2D_ConfigLayer>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000b7a:	f001 f98f 	bl	8001e9c <Error_Handler>
  }

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000408 	.word	0x20000408
 8000b88:	4002b000 	.word	0x4002b000

08000b8c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_DMA2D_MspInit+0x48>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d115      	bne.n	8000bca <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_DMA2D_MspInit+0x4c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <HAL_DMA2D_MspInit+0x4c>)
 8000ba8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_DMA2D_MspInit+0x4c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2105      	movs	r1, #5
 8000bbe:	205a      	movs	r0, #90	; 0x5a
 8000bc0:	f004 fa9a 	bl	80050f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000bc4:	205a      	movs	r0, #90	; 0x5a
 8000bc6:	f004 fab3 	bl	8005130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	4002b000 	.word	0x4002b000
 8000bd8:	40023800 	.word	0x40023800

08000bdc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_FMC_Init+0x98>)
 8000bf6:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <MX_FMC_Init+0x9c>)
 8000bf8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_FMC_Init+0x98>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c0e:	2210      	movs	r2, #16
 8000c10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c14:	2240      	movs	r2, #64	; 0x40
 8000c16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c1a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c40:	2307      	movs	r3, #7
 8000c42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c44:	2304      	movs	r3, #4
 8000c46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c5e:	f008 fef1 	bl	8009a44 <HAL_SDRAM_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c68:	f001 f918 	bl	8001e9c <Error_Handler>
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000448 	.word	0x20000448
 8000c78:	a0000140 	.word	0xa0000140

08000c7c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c90:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <HAL_FMC_MspInit+0x104>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d16f      	bne.n	8000d78 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000c98:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <HAL_FMC_MspInit+0x104>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <HAL_FMC_MspInit+0x108>)
 8000ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca6:	4a37      	ldr	r2, [pc, #220]	; (8000d84 <HAL_FMC_MspInit+0x108>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6393      	str	r3, [r2, #56]	; 0x38
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <HAL_FMC_MspInit+0x108>)
 8000cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000cba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000cbe:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ccc:	230c      	movs	r3, #12
 8000cce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482c      	ldr	r0, [pc, #176]	; (8000d88 <HAL_FMC_MspInit+0x10c>)
 8000cd6:	f004 ffad 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cea:	230c      	movs	r3, #12
 8000cec:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4826      	ldr	r0, [pc, #152]	; (8000d8c <HAL_FMC_MspInit+0x110>)
 8000cf4:	f004 ff9e 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000cf8:	f248 1333 	movw	r3, #33075	; 0x8133
 8000cfc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	481f      	ldr	r0, [pc, #124]	; (8000d90 <HAL_FMC_MspInit+0x114>)
 8000d14:	f004 ff8e 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000d18:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d1c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4818      	ldr	r0, [pc, #96]	; (8000d94 <HAL_FMC_MspInit+0x118>)
 8000d34:	f004 ff7e 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000d38:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000d3c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <HAL_FMC_MspInit+0x11c>)
 8000d54:	f004 ff6e 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000d58:	2360      	movs	r3, #96	; 0x60
 8000d5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480a      	ldr	r0, [pc, #40]	; (8000d9c <HAL_FMC_MspInit+0x120>)
 8000d72:	f004 ff5f 	bl	8005c34 <HAL_GPIO_Init>
 8000d76:	e000      	b.n	8000d7a <HAL_FMC_MspInit+0xfe>
    return;
 8000d78:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000124 	.word	0x20000124
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40021400 	.word	0x40021400
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40021800 	.word	0x40021800
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	40020400 	.word	0x40020400

08000da0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000da8:	f7ff ff68 	bl	8000c7c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
 8000de6:	4b7a      	ldr	r3, [pc, #488]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a79      	ldr	r2, [pc, #484]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b77      	ldr	r3, [pc, #476]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	4b73      	ldr	r3, [pc, #460]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a72      	ldr	r2, [pc, #456]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b70      	ldr	r3, [pc, #448]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0320 	and.w	r3, r3, #32
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	4b6c      	ldr	r3, [pc, #432]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a6b      	ldr	r2, [pc, #428]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b69      	ldr	r3, [pc, #420]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b65      	ldr	r3, [pc, #404]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a64      	ldr	r2, [pc, #400]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b62      	ldr	r3, [pc, #392]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b5e      	ldr	r3, [pc, #376]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a5d      	ldr	r2, [pc, #372]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b5b      	ldr	r3, [pc, #364]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b57      	ldr	r3, [pc, #348]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a56      	ldr	r2, [pc, #344]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b54      	ldr	r3, [pc, #336]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e94:	f043 0310 	orr.w	r3, r3, #16
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b46      	ldr	r3, [pc, #280]	; (8000fd0 <MX_GPIO_Init+0x204>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2116      	movs	r1, #22
 8000ec6:	4843      	ldr	r0, [pc, #268]	; (8000fd4 <MX_GPIO_Init+0x208>)
 8000ec8:	f005 f968 	bl	800619c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	4841      	ldr	r0, [pc, #260]	; (8000fd8 <MX_GPIO_Init+0x20c>)
 8000ed2:	f005 f963 	bl	800619c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000edc:	483f      	ldr	r0, [pc, #252]	; (8000fdc <MX_GPIO_Init+0x210>)
 8000ede:	f005 f95d 	bl	800619c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ee8:	483d      	ldr	r0, [pc, #244]	; (8000fe0 <MX_GPIO_Init+0x214>)
 8000eea:	f005 f957 	bl	800619c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000eee:	2316      	movs	r3, #22
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4833      	ldr	r0, [pc, #204]	; (8000fd4 <MX_GPIO_Init+0x208>)
 8000f06:	f004 fe95 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000f0a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	482e      	ldr	r0, [pc, #184]	; (8000fd8 <MX_GPIO_Init+0x20c>)
 8000f20:	f004 fe88 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4827      	ldr	r0, [pc, #156]	; (8000fd8 <MX_GPIO_Init+0x20c>)
 8000f3c:	f004 fe7a 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000f40:	2320      	movs	r3, #32
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4820      	ldr	r0, [pc, #128]	; (8000fd4 <MX_GPIO_Init+0x208>)
 8000f54:	f004 fe6e 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <MX_GPIO_Init+0x21c>)
 8000f6c:	f004 fe62 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4815      	ldr	r0, [pc, #84]	; (8000fdc <MX_GPIO_Init+0x210>)
 8000f86:	f004 fe55 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000f8a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <MX_GPIO_Init+0x210>)
 8000fa4:	f004 fe46 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000fa8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_GPIO_Init+0x214>)
 8000fc2:	f004 fe37 	bl	8005c34 <HAL_GPIO_Init>

}
 8000fc6:	bf00      	nop
 8000fc8:	3738      	adds	r7, #56	; 0x38
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	10120000 	.word	0x10120000
 8000fe8:	40020400 	.word	0x40020400

08000fec <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_I2C3_Init+0x74>)
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <MX_I2C3_Init+0x78>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_I2C3_Init+0x74>)
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <MX_I2C3_Init+0x7c>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_I2C3_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_I2C3_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_I2C3_Init+0x74>)
 800100a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_I2C3_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_I2C3_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_I2C3_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_I2C3_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_I2C3_Init+0x74>)
 800102a:	f006 fabb 	bl	80075a4 <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001034:	f000 ff32 	bl	8001e9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <MX_I2C3_Init+0x74>)
 800103c:	f007 faa3 	bl	8008586 <HAL_I2CEx_ConfigAnalogFilter>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001046:	f000 ff29 	bl	8001e9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800104a:	2100      	movs	r1, #0
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_I2C3_Init+0x74>)
 800104e:	f007 fad6 	bl	80085fe <HAL_I2CEx_ConfigDigitalFilter>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 ff20 	bl	8001e9c <Error_Handler>
  }

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000047c 	.word	0x2000047c
 8001064:	40005c00 	.word	0x40005c00
 8001068:	000186a0 	.word	0x000186a0

0800106c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <HAL_I2C_MspInit+0xc4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d14b      	bne.n	8001126 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a27      	ldr	r2, [pc, #156]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a20      	ldr	r2, [pc, #128]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80010c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010d8:	2304      	movs	r3, #4
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4815      	ldr	r0, [pc, #84]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 80010e4:	f004 fda6 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80010e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010fa:	2304      	movs	r3, #4
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <HAL_I2C_MspInit+0xd0>)
 8001106:	f004 fd95 	bl	8005c34 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 8001114:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40005c00 	.word	0x40005c00
 8001134:	40023800 	.word	0x40023800
 8001138:	40020800 	.word	0x40020800
 800113c:	40020000 	.word	0x40020000

08001140 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0b      	ldr	r2, [pc, #44]	; (800117c <HAL_I2C_MspDeInit+0x3c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10f      	bne.n	8001172 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_I2C_MspDeInit+0x40>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_I2C_MspDeInit+0x40>)
 8001158:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800115e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <HAL_I2C_MspDeInit+0x44>)
 8001164:	f004 ff10 	bl	8005f88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <HAL_I2C_MspDeInit+0x48>)
 800116e:	f004 ff0b 	bl	8005f88 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40005c00 	.word	0x40005c00
 8001180:	40023800 	.word	0x40023800
 8001184:	40020800 	.word	0x40020800
 8001188:	40020000 	.word	0x40020000

0800118c <Klocek_init>:
#include "klocek.h"
#include "main.h"

// Inicjalizacja struktury Klocek
void Klocek_init(Klocek *k, int x, int y, int w, int h, uint32_t kol, uint8_t brk, uint8_t thr)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
    k->pozycja_x = x;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	b29a      	uxth	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	801a      	strh	r2, [r3, #0]
    k->pozycja_y = y;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	805a      	strh	r2, [r3, #2]
    k->szerokosc = w;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	711a      	strb	r2, [r3, #4]
    k->wysokosc = h;
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	715a      	strb	r2, [r3, #5]
    k->kolor = kol;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	609a      	str	r2, [r3, #8]
    k->is_breakable = brk; // Jak 1 to da się zepuć, jak 0 to nie
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011c6:	735a      	strb	r2, [r3, #13]
    k->is_there = thr; // Jak jest 1 to jest obecny na planszy, jak 0 to nie istnieje
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80011ce:	731a      	strb	r2, [r3, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <rysuj_klocek>:

void rysuj_klocek(Klocek *k)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(k->kolor);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 fc93 	bl	8003b14 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(k->pozycja_x, k->pozycja_y, k->szerokosc, k->wysokosc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	8818      	ldrh	r0, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	8859      	ldrh	r1, [r3, #2]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	795b      	ldrb	r3, [r3, #5]
 8001200:	b29b      	uxth	r3, r3
 8001202:	f002 fff1 	bl	80041e8 <BSP_LCD_FillRect>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <Kulka_init>:
#include "Kulka.h"
#include "main.h"

// Inicjalizacja struktury Kulka
void Kulka_init(Kulka *kulka, int x, int y, int r, int vx, int vy, uint32_t kol)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
	kulka->polozenie_x = x;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = y;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	605a      	str	r2, [r3, #4]
	kulka->promien = r;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	609a      	str	r2, [r3, #8]
	kulka->predkosc_x = vx;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	60da      	str	r2, [r3, #12]
	kulka->predkosc_y = vy;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	611a      	str	r2, [r3, #16]
	kulka->kolor = kol;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6a3a      	ldr	r2, [r7, #32]
 800123e:	615a      	str	r2, [r3, #20]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <rysuj_kulke>:

void rysuj_kulke(Kulka *kulka)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(kulka->kolor);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fc5b 	bl	8003b14 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b298      	uxth	r0, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	b299      	uxth	r1, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	b29b      	uxth	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	f003 f813 	bl	800429c <BSP_LCD_FillCircle>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <Kulka_ruch>:
int Kulka_ruch(Kulka *kulka)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	// Zamaluj stary stan kulki
	BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8001288:	483d      	ldr	r0, [pc, #244]	; (8001380 <Kulka_ruch+0x100>)
 800128a:	f002 fc43 	bl	8003b14 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b298      	uxth	r0, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	b299      	uxth	r1, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	f002 fffb 	bl	800429c <BSP_LCD_FillCircle>

	// Oblicz nowe położenie kulki
	int nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
	int nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	4413      	add	r3, r2
 80012bc:	60bb      	str	r3, [r7, #8]

	// Sprawdź zderzenie z lewą i prawą krawędzią ekranu
	if (nowe_polozenie_x - kulka->promien < 0 || nowe_polozenie_x + kulka->promien > BSP_LCD_GetXSize())
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db09      	blt.n	80012de <Kulka_ruch+0x5e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	461c      	mov	r4, r3
 80012d4:	f002 fb54 	bl	8003980 <BSP_LCD_GetXSize>
 80012d8:	4603      	mov	r3, r0
 80012da:	429c      	cmp	r4, r3
 80012dc:	d910      	bls.n	8001300 <Kulka_ruch+0x80>
	{
		// Zderzenie z lewą lub prawą krawędzią, zmień kierunek prędkości poziomej
		kulka->predkosc_x = -kulka->predkosc_x;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	425a      	negs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	60da      	str	r2, [r3, #12]
		nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
		nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4413      	add	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
	}

	// Sprawdź zderzenie z górną i dolną krawędzią ekranu
	if (nowe_polozenie_y - kulka->promien < 0)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	da10      	bge.n	800132e <Kulka_ruch+0xae>
	{
		// Zderzenie z górną lub dolną krawędzią, zmień kierunek prędkości pionowej
		kulka->predkosc_y = -kulka->predkosc_y;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	425a      	negs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	611a      	str	r2, [r3, #16]
		nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
		nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	4413      	add	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
	}
	if (nowe_polozenie_y + kulka->promien > BSP_LCD_GetYSize())
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4413      	add	r3, r2
 8001336:	461c      	mov	r4, r3
 8001338:	f002 fb2e 	bl	8003998 <BSP_LCD_GetYSize>
 800133c:	4603      	mov	r3, r0
 800133e:	429c      	cmp	r4, r3
 8001340:	d901      	bls.n	8001346 <Kulka_ruch+0xc6>
	{
		return 1;
 8001342:	2301      	movs	r3, #1
 8001344:	e017      	b.n	8001376 <Kulka_ruch+0xf6>
	}

	// Aktualizuj położenie kulki na nowe pozycje
	kulka->polozenie_x = nowe_polozenie_x;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = nowe_polozenie_y;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	605a      	str	r2, [r3, #4]

	// Narysuj kulke na nowej pozycji
	BSP_LCD_SetTextColor(kulka->kolor);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4618      	mov	r0, r3
 8001358:	f002 fbdc 	bl	8003b14 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b298      	uxth	r0, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	b299      	uxth	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	b29b      	uxth	r3, r3
 800136e:	461a      	mov	r2, r3
 8001370:	f002 ff94 	bl	800429c <BSP_LCD_FillCircle>
	return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	bf00      	nop
 8001380:	ffff0000 	.word	0xffff0000

08001384 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b09a      	sub	sp, #104	; 0x68
 8001388:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800138a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800138e:	2234      	movs	r2, #52	; 0x34
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f00b ff15 	bl	800d1c2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2234      	movs	r2, #52	; 0x34
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f00b ff0f 	bl	800d1c2 <memset>

  hltdc.Instance = LTDC;
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013a6:	4a50      	ldr	r2, [pc, #320]	; (80014e8 <MX_LTDC_Init+0x164>)
 80013a8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013aa:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013b0:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013b6:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013bc:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80013c2:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013c4:	2209      	movs	r2, #9
 80013c6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80013c8:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013d0:	221d      	movs	r2, #29
 80013d2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013d6:	2203      	movs	r2, #3
 80013d8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80013da:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013dc:	f240 120d 	movw	r2, #269	; 0x10d
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80013e2:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013e4:	f240 1243 	movw	r2, #323	; 0x143
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80013ea:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013ec:	f240 1217 	movw	r2, #279	; 0x117
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80013f2:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013f4:	f240 1247 	movw	r2, #327	; 0x147
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <MX_LTDC_Init+0x160>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <MX_LTDC_Init+0x160>)
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <MX_LTDC_Init+0x160>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001412:	4834      	ldr	r0, [pc, #208]	; (80014e4 <MX_LTDC_Init+0x160>)
 8001414:	f007 f932 	bl	800867c <HAL_LTDC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800141e:	f000 fd3d 	bl	8001e9c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8001426:	23f0      	movs	r3, #240	; 0xf0
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800142e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001434:	2302      	movs	r3, #2
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001438:	23ff      	movs	r3, #255	; 0xff
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001440:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001444:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001446:	2307      	movs	r3, #7
 8001448:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 800144a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800144e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001450:	23f0      	movs	r3, #240	; 0xf0
 8001452:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001454:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001458:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800146c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	481b      	ldr	r0, [pc, #108]	; (80014e4 <MX_LTDC_Init+0x160>)
 8001476:	f007 fa93 	bl	80089a0 <HAL_LTDC_ConfigLayer>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8001480:	f000 fd0c 	bl	8001e9c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800149c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80014a2:	2305      	movs	r3, #5
 80014a4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_LTDC_Init+0x160>)
 80014cc:	f007 fa68 	bl	80089a0 <HAL_LTDC_ConfigLayer>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 80014d6:	f000 fce1 	bl	8001e9c <Error_Handler>
  }

}
 80014da:	bf00      	nop
 80014dc:	3768      	adds	r7, #104	; 0x68
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200004d0 	.word	0x200004d0
 80014e8:	40016800 	.word	0x40016800

080014ec <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	; 0x38
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a7b      	ldr	r2, [pc, #492]	; (80016f8 <HAL_LTDC_MspInit+0x20c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	f040 80f0 	bne.w	80016f0 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
 8001514:	4b79      	ldr	r3, [pc, #484]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	4a78      	ldr	r2, [pc, #480]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 800151a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800151e:	6453      	str	r3, [r2, #68]	; 0x44
 8001520:	4b76      	ldr	r3, [pc, #472]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001528:	623b      	str	r3, [r7, #32]
 800152a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	4b72      	ldr	r3, [pc, #456]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	4a71      	ldr	r2, [pc, #452]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 8001536:	f043 0320 	orr.w	r3, r3, #32
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
 800153c:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	4a6a      	ldr	r2, [pc, #424]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6313      	str	r3, [r2, #48]	; 0x30
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	4b64      	ldr	r3, [pc, #400]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a63      	ldr	r2, [pc, #396]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b61      	ldr	r3, [pc, #388]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a5c      	ldr	r2, [pc, #368]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 800158a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b56      	ldr	r3, [pc, #344]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	4a55      	ldr	r2, [pc, #340]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6313      	str	r3, [r2, #48]	; 0x30
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a4e      	ldr	r2, [pc, #312]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_LTDC_MspInit+0x210>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80015d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015e6:	230e      	movs	r3, #14
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	4843      	ldr	r0, [pc, #268]	; (8001700 <HAL_LTDC_MspInit+0x214>)
 80015f2:	f004 fb1f 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80015f6:	f641 0358 	movw	r3, #6232	; 0x1858
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001608:	230e      	movs	r3, #14
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	4619      	mov	r1, r3
 8001612:	483c      	ldr	r0, [pc, #240]	; (8001704 <HAL_LTDC_MspInit+0x218>)
 8001614:	f004 fb0e 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001618:	2303      	movs	r3, #3
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001628:	2309      	movs	r3, #9
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4835      	ldr	r0, [pc, #212]	; (8001708 <HAL_LTDC_MspInit+0x21c>)
 8001634:	f004 fafe 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001638:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800164a:	230e      	movs	r3, #14
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	482c      	ldr	r0, [pc, #176]	; (8001708 <HAL_LTDC_MspInit+0x21c>)
 8001656:	f004 faed 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800165a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800166c:	230e      	movs	r3, #14
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4825      	ldr	r0, [pc, #148]	; (800170c <HAL_LTDC_MspInit+0x220>)
 8001678:	f004 fadc 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800167c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800168e:	230e      	movs	r3, #14
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	481d      	ldr	r0, [pc, #116]	; (8001710 <HAL_LTDC_MspInit+0x224>)
 800169a:	f004 facb 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800169e:	2348      	movs	r3, #72	; 0x48
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016ae:	230e      	movs	r3, #14
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	4816      	ldr	r0, [pc, #88]	; (8001714 <HAL_LTDC_MspInit+0x228>)
 80016ba:	f004 fabb 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80016be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016d0:	2309      	movs	r3, #9
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	480c      	ldr	r0, [pc, #48]	; (800170c <HAL_LTDC_MspInit+0x220>)
 80016dc:	f004 faaa 	bl	8005c34 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2105      	movs	r1, #5
 80016e4:	2058      	movs	r0, #88	; 0x58
 80016e6:	f003 fd07 	bl	80050f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80016ea:	2058      	movs	r0, #88	; 0x58
 80016ec:	f003 fd20 	bl	8005130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80016f0:	bf00      	nop
 80016f2:	3738      	adds	r7, #56	; 0x38
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40016800 	.word	0x40016800
 80016fc:	40023800 	.word	0x40023800
 8001700:	40021400 	.word	0x40021400
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400
 800170c:	40021800 	.word	0x40021800
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b0a5      	sub	sp, #148	; 0x94
 800171c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171e:	f003 fbcf 	bl	8004ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 f9dd 	bl	8001ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001726:	f7ff fb51 	bl	8000dcc <MX_GPIO_Init>
  MX_CRC_Init();
 800172a:	f7ff f9c7 	bl	8000abc <MX_CRC_Init>
  MX_DMA2D_Init();
 800172e:	f7ff f9fb 	bl	8000b28 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001732:	f7ff fa53 	bl	8000bdc <MX_FMC_Init>
  MX_I2C3_Init();
 8001736:	f7ff fc59 	bl	8000fec <MX_I2C3_Init>
  MX_LTDC_Init();
 800173a:	f7ff fe23 	bl	8001384 <MX_LTDC_Init>
  MX_SPI5_Init();
 800173e:	f000 fc45 	bl	8001fcc <MX_SPI5_Init>
  MX_TIM1_Init();
 8001742:	f000 fdfb 	bl	800233c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001746:	f001 f85f 	bl	8002808 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  int odswiezanie = 16;
 800174a:	2310      	movs	r3, #16
 800174c:	66fb      	str	r3, [r7, #108]	; 0x6c
  BSP_LCD_Init();
 800174e:	f002 f8ad 	bl	80038ac <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8001752:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001756:	2001      	movs	r0, #1
 8001758:	f002 f92a 	bl	80039b0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800175c:	2001      	movs	r0, #1
 800175e:	f002 f98b 	bl	8003a78 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001762:	4866      	ldr	r0, [pc, #408]	; (80018fc <main+0x1e4>)
 8001764:	f002 fa22 	bl	8003bac <BSP_LCD_Clear>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8001768:	2100      	movs	r1, #0
 800176a:	2001      	movs	r0, #1
 800176c:	f002 f994 	bl	8003a98 <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8001770:	4963      	ldr	r1, [pc, #396]	; (8001900 <main+0x1e8>)
 8001772:	2000      	movs	r0, #0
 8001774:	f002 f91c 	bl	80039b0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8001778:	2000      	movs	r0, #0
 800177a:	f002 f97d 	bl	8003a78 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 800177e:	485f      	ldr	r0, [pc, #380]	; (80018fc <main+0x1e4>)
 8001780:	f002 fa14 	bl	8003bac <BSP_LCD_Clear>

  BSP_LCD_DisplayOn();
 8001784:	f002 fee8 	bl	8004558 <BSP_LCD_DisplayOn>

  Touchscreen_Calibration();
 8001788:	f000 fe4a 	bl	8002420 <Touchscreen_Calibration>
  BSP_LCD_Clear(LCD_COLOR_RED);
 800178c:	485b      	ldr	r0, [pc, #364]	; (80018fc <main+0x1e4>)
 800178e:	f002 fa0d 	bl	8003bac <BSP_LCD_Clear>


  menu_bbg();
 8001792:	f000 fa29 	bl	8001be8 <menu_bbg>


  // Tutaj zmieniamy wczytywany/zapisywany poziom

  switch (level) {
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <main+0x1ec>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b06      	cmp	r3, #6
 800179c:	d82c      	bhi.n	80017f8 <main+0xe0>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <main+0x8c>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017c1 	.word	0x080017c1
 80017a8:	080017c9 	.word	0x080017c9
 80017ac:	080017d1 	.word	0x080017d1
 80017b0:	080017d9 	.word	0x080017d9
 80017b4:	080017e1 	.word	0x080017e1
 80017b8:	080017e9 	.word	0x080017e9
 80017bc:	080017f1 	.word	0x080017f1
	case 0:  Address=ADDR_FLASH_SECTOR_5;
 80017c0:	4b51      	ldr	r3, [pc, #324]	; (8001908 <main+0x1f0>)
 80017c2:	4a52      	ldr	r2, [pc, #328]	; (800190c <main+0x1f4>)
 80017c4:	601a      	str	r2, [r3, #0]
		break;
 80017c6:	e018      	b.n	80017fa <main+0xe2>
	case 1:  Address=ADDR_FLASH_SECTOR_6;
 80017c8:	4b4f      	ldr	r3, [pc, #316]	; (8001908 <main+0x1f0>)
 80017ca:	4a51      	ldr	r2, [pc, #324]	; (8001910 <main+0x1f8>)
 80017cc:	601a      	str	r2, [r3, #0]
		break;
 80017ce:	e014      	b.n	80017fa <main+0xe2>
	case 2:  Address=ADDR_FLASH_SECTOR_7;
 80017d0:	4b4d      	ldr	r3, [pc, #308]	; (8001908 <main+0x1f0>)
 80017d2:	4a50      	ldr	r2, [pc, #320]	; (8001914 <main+0x1fc>)
 80017d4:	601a      	str	r2, [r3, #0]
		break;
 80017d6:	e010      	b.n	80017fa <main+0xe2>
	case 3:  Address=ADDR_FLASH_SECTOR_8;
 80017d8:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <main+0x1f0>)
 80017da:	4a4f      	ldr	r2, [pc, #316]	; (8001918 <main+0x200>)
 80017dc:	601a      	str	r2, [r3, #0]
		break;
 80017de:	e00c      	b.n	80017fa <main+0xe2>
	case 4:  Address=ADDR_FLASH_SECTOR_9;
 80017e0:	4b49      	ldr	r3, [pc, #292]	; (8001908 <main+0x1f0>)
 80017e2:	4a4e      	ldr	r2, [pc, #312]	; (800191c <main+0x204>)
 80017e4:	601a      	str	r2, [r3, #0]
		break;
 80017e6:	e008      	b.n	80017fa <main+0xe2>
	case 5:  Address=ADDR_FLASH_SECTOR_10;
 80017e8:	4b47      	ldr	r3, [pc, #284]	; (8001908 <main+0x1f0>)
 80017ea:	4a4d      	ldr	r2, [pc, #308]	; (8001920 <main+0x208>)
 80017ec:	601a      	str	r2, [r3, #0]
		break;
 80017ee:	e004      	b.n	80017fa <main+0xe2>
	case 6:  Address=ADDR_FLASH_SECTOR_11;
 80017f0:	4b45      	ldr	r3, [pc, #276]	; (8001908 <main+0x1f0>)
 80017f2:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <main+0x20c>)
 80017f4:	601a      	str	r2, [r3, #0]
		break;
 80017f6:	e000      	b.n	80017fa <main+0xe2>
	default: // Nie powinno cię tu być
		break;
 80017f8:	bf00      	nop
}
  BSP_LCD_Clear(LCD_COLOR_RED);
 80017fa:	4840      	ldr	r0, [pc, #256]	; (80018fc <main+0x1e4>)
 80017fc:	f002 f9d6 	bl	8003bac <BSP_LCD_Clear>

                        // Liczba klocków
  int klocek_szerokosc = BSP_LCD_GetXSize() / 12; // Klocki są szersze niż wyższe
 8001800:	f002 f8be 	bl	8003980 <BSP_LCD_GetXSize>
 8001804:	4602      	mov	r2, r0
 8001806:	4b48      	ldr	r3, [pc, #288]	; (8001928 <main+0x210>)
 8001808:	fba3 2302 	umull	r2, r3, r3, r2
 800180c:	08db      	lsrs	r3, r3, #3
 800180e:	66bb      	str	r3, [r7, #104]	; 0x68
  int klocek_wysokosc = BSP_LCD_GetYSize() / 24; // Zakładamy 4 rzędy klocków
 8001810:	f002 f8c2 	bl	8003998 <BSP_LCD_GetYSize>
 8001814:	4602      	mov	r2, r0
 8001816:	4b44      	ldr	r3, [pc, #272]	; (8001928 <main+0x210>)
 8001818:	fba3 2302 	umull	r2, r3, r3, r2
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	667b      	str	r3, [r7, #100]	; 0x64
  int liczba_klockow = COLLUMNS_BBG*ROWS_BBG; // Liczba klocków
 8001820:	2390      	movs	r3, #144	; 0x90
 8001822:	663b      	str	r3, [r7, #96]	; 0x60



  Platforma *platforma = (Platforma *)malloc(sizeof(Platforma));
 8001824:	2018      	movs	r0, #24
 8001826:	f00b fcb9 	bl	800d19c <malloc>
 800182a:	4603      	mov	r3, r0
 800182c:	65fb      	str	r3, [r7, #92]	; 0x5c
  Kulka *kulka = (Kulka *)malloc(sizeof(Kulka));
 800182e:	2018      	movs	r0, #24
 8001830:	f00b fcb4 	bl	800d19c <malloc>
 8001834:	4603      	mov	r3, r0
 8001836:	65bb      	str	r3, [r7, #88]	; 0x58

  Klocek **klocki = (Klocek **)malloc((liczba_klockow) * sizeof(Klocek *));
 8001838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4618      	mov	r0, r3
 800183e:	f00b fcad 	bl	800d19c <malloc>
 8001842:	4603      	mov	r3, r0
 8001844:	657b      	str	r3, [r7, #84]	; 0x54
  int licznik = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	67fb      	str	r3, [r7, #124]	; 0x7c

  for (int kk = 0; kk < COLLUMNS_BBG; kk++)
 800184a:	2300      	movs	r3, #0
 800184c:	67bb      	str	r3, [r7, #120]	; 0x78
 800184e:	e096      	b.n	800197e <main+0x266>
  { // Zakładając 4 rzędy klocków
    for (int k = 0; k < ROWS_BBG; k++, licznik++)
 8001850:	2300      	movs	r3, #0
 8001852:	677b      	str	r3, [r7, #116]	; 0x74
 8001854:	e08c      	b.n	8001970 <main+0x258>
    { // 8 kolumn klocków
      klocki[licznik] = (Klocek *)malloc(sizeof(Klocek));
 8001856:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800185c:	18d4      	adds	r4, r2, r3
 800185e:	2010      	movs	r0, #16
 8001860:	f00b fc9c 	bl	800d19c <malloc>
 8001864:	4603      	mov	r3, r0
 8001866:	6023      	str	r3, [r4, #0]
      uint32_t kolor_klocka = ((k % 2 == 0 && kk % 2 == 0) || (k % 2 == 1 && kk % 2 == 1)) ? LCD_COLOR_BLUE : LCD_COLOR_YELLOW;
 8001868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d104      	bne.n	800187c <main+0x164>
 8001872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00f      	beq.n	800189c <main+0x184>
 800187c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800187e:	2b00      	cmp	r3, #0
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	bfb8      	it	lt
 8001886:	425b      	neglt	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d109      	bne.n	80018a0 <main+0x188>
 800188c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800188e:	2b00      	cmp	r3, #0
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	bfb8      	it	lt
 8001896:	425b      	neglt	r3, r3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <main+0x188>
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <main+0x214>)
 800189e:	e001      	b.n	80018a4 <main+0x18c>
 80018a0:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80018a4:	623b      	str	r3, [r7, #32]
      	}
      	else{
      	  Klocek_init(klocki[licznik], k * klocek_szerokosc, kk * klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka, 1, 1);
      	}*/
     //LEVEL5
      if(kk == 7  && (k >2 && k < 7) || (k > 2 && k <10 ) ){
 80018a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018a8:	2b07      	cmp	r3, #7
 80018aa:	d105      	bne.n	80018b8 <main+0x1a0>
 80018ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	dd02      	ble.n	80018b8 <main+0x1a0>
 80018b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	dd05      	ble.n	80018c4 <main+0x1ac>
 80018b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	dd3a      	ble.n	8001934 <main+0x21c>
 80018be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	dc37      	bgt.n	8001934 <main+0x21c>
		  kolor_klocka = LCD_COLOR_GRAY;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <main+0x218>)
 80018c6:	623b      	str	r3, [r7, #32]
		  Klocek_init(klocki[licznik], k * klocek_szerokosc, kk * klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka, 0, 1);
 80018c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018ce:	4413      	add	r3, r2
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80018d6:	fb02 f103 	mul.w	r1, r2, r3
 80018da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018de:	fb02 f203 	mul.w	r2, r2, r3
 80018e2:	2301      	movs	r3, #1
 80018e4:	9303      	str	r3, [sp, #12]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018f4:	f7ff fc4a 	bl	800118c <Klocek_init>
		  continue;
 80018f8:	e034      	b.n	8001964 <main+0x24c>
 80018fa:	bf00      	nop
 80018fc:	ffff0000 	.word	0xffff0000
 8001900:	d0130000 	.word	0xd0130000
 8001904:	20000578 	.word	0x20000578
 8001908:	20000580 	.word	0x20000580
 800190c:	08020000 	.word	0x08020000
 8001910:	08040000 	.word	0x08040000
 8001914:	08060000 	.word	0x08060000
 8001918:	08080000 	.word	0x08080000
 800191c:	080a0000 	.word	0x080a0000
 8001920:	080c0000 	.word	0x080c0000
 8001924:	080e0000 	.word	0x080e0000
 8001928:	aaaaaaab 	.word	0xaaaaaaab
 800192c:	ff0000ff 	.word	0xff0000ff
 8001930:	ff808080 	.word	0xff808080
      }
	else{
	  Klocek_init(klocki[licznik], k * klocek_szerokosc, kk * klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka, 1, 1);
 8001934:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800193a:	4413      	add	r3, r2
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001940:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001942:	fb02 f103 	mul.w	r1, r2, r3
 8001946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001948:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800194a:	fb02 f203 	mul.w	r2, r2, r3
 800194e:	2301      	movs	r3, #1
 8001950:	9303      	str	r3, [sp, #12]
 8001952:	2301      	movs	r3, #1
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001960:	f7ff fc14 	bl	800118c <Klocek_init>
    for (int k = 0; k < ROWS_BBG; k++, licznik++)
 8001964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001966:	3301      	adds	r3, #1
 8001968:	677b      	str	r3, [r7, #116]	; 0x74
 800196a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800196c:	3301      	adds	r3, #1
 800196e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001972:	2b0b      	cmp	r3, #11
 8001974:	f77f af6f 	ble.w	8001856 <main+0x13e>
  for (int kk = 0; kk < COLLUMNS_BBG; kk++)
 8001978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800197a:	3301      	adds	r3, #1
 800197c:	67bb      	str	r3, [r7, #120]	; 0x78
 800197e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001980:	2b0b      	cmp	r3, #11
 8001982:	f77f af65 	ble.w	8001850 <main+0x138>
  }




  int platforma_x = 50;
 8001986:	2332      	movs	r3, #50	; 0x32
 8001988:	653b      	str	r3, [r7, #80]	; 0x50
  int platforma_y = BSP_LCD_GetYSize() - 20;
 800198a:	f002 f805 	bl	8003998 <BSP_LCD_GetYSize>
 800198e:	4603      	mov	r3, r0
 8001990:	3b14      	subs	r3, #20
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
  int platforma_szerokosc = 80;
 8001994:	2350      	movs	r3, #80	; 0x50
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
  int platforma_wysokosc = 8;
 8001998:	2308      	movs	r3, #8
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
  int platforma_krok = 5;
 800199c:	2305      	movs	r3, #5
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t platforma_kolor = LCD_COLOR_WHITE;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  Platforma_init(platforma, platforma_x, platforma_y, platforma_szerokosc, platforma_wysokosc, platforma_krok, platforma_kolor);
 80019a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80019b8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80019ba:	f000 fa75 	bl	8001ea8 <Platforma_init>
  int kulka_pocz_x = 10 + (rand() % (BSP_LCD_GetXSize() - 20));
 80019be:	f00b fc63 	bl	800d288 <rand>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461c      	mov	r4, r3
 80019c6:	f001 ffdb 	bl	8003980 <BSP_LCD_GetXSize>
 80019ca:	4603      	mov	r3, r0
 80019cc:	3b14      	subs	r3, #20
 80019ce:	fbb4 f2f3 	udiv	r2, r4, r3
 80019d2:	fb03 f302 	mul.w	r3, r3, r2
 80019d6:	1ae3      	subs	r3, r4, r3
 80019d8:	330a      	adds	r3, #10
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  int kulka_pocz_y = platforma_y-10;
 80019dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019de:	3b0a      	subs	r3, #10
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  int kulka_r = 4;
 80019e2:	2304      	movs	r3, #4
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
  int kulka_vx = 2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int kulka_vy = -2;
 80019ea:	f06f 0301 	mvn.w	r3, #1
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t kulka_kolor = LCD_COLOR_WHITE;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t prev_tick=0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	673b      	str	r3, [r7, #112]	; 0x70

  Kulka_init(kulka, kulka_pocz_x, kulka_pocz_y, kulka_r, kulka_vx, kulka_vy, kulka_kolor);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a0c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001a0e:	f7ff fbfe 	bl	800120e <Kulka_init>

  BBG bbg;
  BBG_init(&bbg, platforma, klocki, kulka, liczba_klockow);
 8001a12:	f107 000c 	add.w	r0, r7, #12
 8001a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a1e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001a20:	f7fe fd66 	bl	80004f0 <BBG_init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
	  if(HAL_GetTick()-prev_tick>=odswiezanie){
 8001a24:	f003 fa82 	bl	8004f2c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a2c:	1ad2      	subs	r2, r2, r3
 8001a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3f7      	bcc.n	8001a24 <main+0x30c>
		  prev_tick=HAL_GetTick();
 8001a34:	f003 fa7a 	bl	8004f2c <HAL_GetTick>
 8001a38:	6738      	str	r0, [r7, #112]	; 0x70
    if (BBG_ruchKulki(&bbg) == 1)
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe ffe6 	bl	8000a10 <BBG_ruchKulki>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d115      	bne.n	8001a76 <main+0x35e>
    {
      BSP_LCD_SetFont(&Font24);
 8001a4a:	4822      	ldr	r0, [pc, #136]	; (8001ad4 <main+0x3bc>)
 8001a4c:	f002 f894 	bl	8003b78 <BSP_LCD_SetFont>
      BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 8001a50:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001a54:	f002 f876 	bl	8003b44 <BSP_LCD_SetBackColor>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a58:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a5c:	f002 f85a 	bl	8003b14 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(0, 100, "Game Over", CENTER_MODE);
 8001a60:	2301      	movs	r3, #1
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <main+0x3c0>)
 8001a64:	2164      	movs	r1, #100	; 0x64
 8001a66:	2000      	movs	r0, #0
 8001a68:	f002 f90c 	bl	8003c84 <BSP_LCD_DisplayStringAt>
      HAL_Delay(2000);
 8001a6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a70:	f003 fa68 	bl	8004f44 <HAL_Delay>
      return;
 8001a74:	e029      	b.n	8001aca <main+0x3b2>
    }

    if(BBG_obsluga_zbicia_klocka(&bbg)==1){
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd7c 	bl	8000578 <BBG_obsluga_zbicia_klocka>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d115      	bne.n	8001ab2 <main+0x39a>
        BSP_LCD_SetFont(&Font24);
 8001a86:	4813      	ldr	r0, [pc, #76]	; (8001ad4 <main+0x3bc>)
 8001a88:	f002 f876 	bl	8003b78 <BSP_LCD_SetFont>
        BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 8001a8c:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001a90:	f002 f858 	bl	8003b44 <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a94:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a98:	f002 f83c 	bl	8003b14 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 100, "!!! VICTORY !!!", CENTER_MODE);
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <main+0x3c4>)
 8001aa0:	2164      	movs	r1, #100	; 0x64
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f002 f8ee 	bl	8003c84 <BSP_LCD_DisplayStringAt>
        HAL_Delay(2000);
 8001aa8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001aac:	f003 fa4a 	bl	8004f44 <HAL_Delay>
        return;
 8001ab0:	e00b      	b.n	8001aca <main+0x3b2>
    }
    // 		Get touch state
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 f951 	bl	8004d5c <BSP_TS_GetState>
    BBG_obsluzDotykEkranu(&bbg, TS_State);
 8001aba:	f107 000c 	add.w	r0, r7, #12
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ac4:	f7fe fe86 	bl	80007d4 <BBG_obsluzDotykEkranu>
	  if(HAL_GetTick()-prev_tick>=odswiezanie){
 8001ac8:	e7ac      	b.n	8001a24 <main+0x30c>
  //  free(klocki);
  //  free(platforma);
  //  free(kulka);

  /* USER CODE END 3 */
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3784      	adds	r7, #132	; 0x84
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000074 	.word	0x20000074
 8001ad8:	0800d3a8 	.word	0x0800d3a8
 8001adc:	0800d3b4 	.word	0x0800d3b4

08001ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0a0      	sub	sp, #128	; 0x80
 8001ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aea:	2230      	movs	r2, #48	; 0x30
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00b fb67 	bl	800d1c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2230      	movs	r2, #48	; 0x30
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00b fb58 	bl	800d1c2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <SystemClock_Config+0x100>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a31      	ldr	r2, [pc, #196]	; (8001be0 <SystemClock_Config+0x100>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <SystemClock_Config+0x100>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <SystemClock_Config+0x104>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b3a:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <SystemClock_Config+0x104>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <SystemClock_Config+0x104>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b56:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b62:	2304      	movs	r3, #4
 8001b64:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b66:	2348      	movs	r3, #72	; 0x48
 8001b68:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b76:	4618      	mov	r0, r3
 8001b78:	f007 f912 	bl	8008da0 <HAL_RCC_OscConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b82:	f000 f98b 	bl	8001e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b86:	230f      	movs	r3, #15
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f007 fb6c 	bl	8009280 <HAL_RCC_ClockConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001bae:	f000 f975 	bl	8001e9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001bb6:	2332      	movs	r3, #50	; 0x32
 8001bb8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f007 fd7e 	bl	80096c8 <HAL_RCCEx_PeriphCLKConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001bd2:	f000 f963 	bl	8001e9c <Error_Handler>
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3780      	adds	r7, #128	; 0x80
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40007000 	.word	0x40007000

08001be8 <menu_bbg>:

/* USER CODE BEGIN 4 */

void menu_bbg()
{
 8001be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bec:	b089      	sub	sp, #36	; 0x24
 8001bee:	af02      	add	r7, sp, #8
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001bf0:	4898      	ldr	r0, [pc, #608]	; (8001e54 <menu_bbg+0x26c>)
 8001bf2:	f001 ffdb 	bl	8003bac <BSP_LCD_Clear>

  BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 8001bf6:	4898      	ldr	r0, [pc, #608]	; (8001e58 <menu_bbg+0x270>)
 8001bf8:	f001 ff8c 	bl	8003b14 <BSP_LCD_SetTextColor>

  BSP_LCD_FillRect(0, (BSP_LCD_GetYSize() / 4)-25, 50, 50);
 8001bfc:	f001 fecc 	bl	8003998 <BSP_LCD_GetYSize>
 8001c00:	4603      	mov	r3, r0
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3b19      	subs	r3, #25
 8001c08:	b299      	uxth	r1, r3
 8001c0a:	2332      	movs	r3, #50	; 0x32
 8001c0c:	2232      	movs	r2, #50	; 0x32
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f002 faea 	bl	80041e8 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(BSP_LCD_GetXSize() -50, (BSP_LCD_GetYSize() / 4)-25, 50, 50);
 8001c14:	f001 feb4 	bl	8003980 <BSP_LCD_GetXSize>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b32      	subs	r3, #50	; 0x32
 8001c1e:	b29c      	uxth	r4, r3
 8001c20:	f001 feba 	bl	8003998 <BSP_LCD_GetYSize>
 8001c24:	4603      	mov	r3, r0
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b19      	subs	r3, #25
 8001c2c:	b299      	uxth	r1, r3
 8001c2e:	2332      	movs	r3, #50	; 0x32
 8001c30:	2232      	movs	r2, #50	; 0x32
 8001c32:	4620      	mov	r0, r4
 8001c34:	f002 fad8 	bl	80041e8 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c38:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c3c:	f001 ff6a 	bl	8003b14 <BSP_LCD_SetTextColor>

  BSP_LCD_FillTriangle(15, 25, 25, BSP_LCD_GetYSize() / 4, (BSP_LCD_GetYSize() / 4)+10, (BSP_LCD_GetYSize() / 4)-10);
 8001c40:	f001 feaa 	bl	8003998 <BSP_LCD_GetYSize>
 8001c44:	4603      	mov	r3, r0
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	b29d      	uxth	r5, r3
 8001c4a:	f001 fea5 	bl	8003998 <BSP_LCD_GetYSize>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	330a      	adds	r3, #10
 8001c56:	b29c      	uxth	r4, r3
 8001c58:	f001 fe9e 	bl	8003998 <BSP_LCD_GetYSize>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b0a      	subs	r3, #10
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	9400      	str	r4, [sp, #0]
 8001c6a:	462b      	mov	r3, r5
 8001c6c:	2219      	movs	r2, #25
 8001c6e:	2119      	movs	r1, #25
 8001c70:	200f      	movs	r0, #15
 8001c72:	f002 fbb3 	bl	80043dc <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(BSP_LCD_GetXSize() -15, BSP_LCD_GetXSize() -25, BSP_LCD_GetXSize() -25, BSP_LCD_GetYSize() / 4, (BSP_LCD_GetYSize() / 4)+10, (BSP_LCD_GetYSize() / 4)-10);
 8001c76:	f001 fe83 	bl	8003980 <BSP_LCD_GetXSize>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b0f      	subs	r3, #15
 8001c80:	b29d      	uxth	r5, r3
 8001c82:	f001 fe7d 	bl	8003980 <BSP_LCD_GetXSize>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b19      	subs	r3, #25
 8001c8c:	b29e      	uxth	r6, r3
 8001c8e:	f001 fe77 	bl	8003980 <BSP_LCD_GetXSize>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b19      	subs	r3, #25
 8001c98:	fa1f f883 	uxth.w	r8, r3
 8001c9c:	f001 fe7c 	bl	8003998 <BSP_LCD_GetYSize>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	fa1f f983 	uxth.w	r9, r3
 8001ca8:	f001 fe76 	bl	8003998 <BSP_LCD_GetYSize>
 8001cac:	4603      	mov	r3, r0
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	330a      	adds	r3, #10
 8001cb4:	b29c      	uxth	r4, r3
 8001cb6:	f001 fe6f 	bl	8003998 <BSP_LCD_GetYSize>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b0a      	subs	r3, #10
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	9400      	str	r4, [sp, #0]
 8001cc8:	464b      	mov	r3, r9
 8001cca:	4642      	mov	r2, r8
 8001ccc:	4631      	mov	r1, r6
 8001cce:	4628      	mov	r0, r5
 8001cd0:	f002 fb84 	bl	80043dc <BSP_LCD_FillTriangle>

  BSP_LCD_SetFont(&Font20);
 8001cd4:	4861      	ldr	r0, [pc, #388]	; (8001e5c <menu_bbg+0x274>)
 8001cd6:	f001 ff4f 	bl	8003b78 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001cda:	f04f 30ff 	mov.w	r0, #4294967295
 8001cde:	f001 ff31 	bl	8003b44 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ce2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ce6:	f001 ff15 	bl	8003b14 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, (BSP_LCD_GetYSize() / 4)-30, "BBG", CENTER_MODE);
 8001cea:	f001 fe55 	bl	8003998 <BSP_LCD_GetYSize>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b1e      	subs	r3, #30
 8001cf6:	b299      	uxth	r1, r3
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <menu_bbg+0x278>)
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f001 ffc1 	bl	8003c84 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8001d02:	4858      	ldr	r0, [pc, #352]	; (8001e64 <menu_bbg+0x27c>)
 8001d04:	f001 ff38 	bl	8003b78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, (BSP_LCD_GetYSize() / 4)-10, "Select level", CENTER_MODE);
 8001d08:	f001 fe46 	bl	8003998 <BSP_LCD_GetYSize>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b0a      	subs	r3, #10
 8001d14:	b299      	uxth	r1, r3
 8001d16:	2301      	movs	r3, #1
 8001d18:	4a53      	ldr	r2, [pc, #332]	; (8001e68 <menu_bbg+0x280>)
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f001 ffb2 	bl	8003c84 <BSP_LCD_DisplayStringAt>
  level=0;
 8001d20:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <menu_bbg+0x284>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
  char level_txt[5];

  BSP_LCD_SetFont(&Font24);
 8001d26:	4852      	ldr	r0, [pc, #328]	; (8001e70 <menu_bbg+0x288>)
 8001d28:	f001 ff26 	bl	8003b78 <BSP_LCD_SetFont>
BSP_LCD_DisplayStringAt(0, (BSP_LCD_GetYSize() / 4)+10, itoa(level+1,level_txt, 10), CENTER_MODE);
 8001d2c:	f001 fe34 	bl	8003998 <BSP_LCD_GetYSize>
 8001d30:	4603      	mov	r3, r0
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	330a      	adds	r3, #10
 8001d38:	b29c      	uxth	r4, r3
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <menu_bbg+0x284>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f107 010c 	add.w	r1, r7, #12
 8001d44:	220a      	movs	r2, #10
 8001d46:	4618      	mov	r0, r3
 8001d48:	f00b fa26 	bl	800d198 <itoa>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4621      	mov	r1, r4
 8001d52:	2000      	movs	r0, #0
 8001d54:	f001 ff96 	bl	8003c84 <BSP_LCD_DisplayStringAt>
BSP_LCD_DisplayStringAt(0, (BSP_LCD_GetYSize() / 4)*3, "START", CENTER_MODE);
 8001d58:	f001 fe1e 	bl	8003998 <BSP_LCD_GetYSize>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	0052      	lsls	r2, r2, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	4a41      	ldr	r2, [pc, #260]	; (8001e74 <menu_bbg+0x28c>)
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f001 ff88 	bl	8003c84 <BSP_LCD_DisplayStringAt>


  while (1)
  {
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fff0 	bl	8004d5c <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 8001d7c:	88bb      	ldrh	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f8      	beq.n	8001d74 <menu_bbg+0x18c>
    {
    	uint16_t x = Calibration_GetX(TS_State.X);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fcf7 	bl	8002778 <Calibration_GetX>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	82fb      	strh	r3, [r7, #22]
    	uint16_t y = Calibration_GetY(TS_State.Y);
 8001d8e:	893b      	ldrh	r3, [r7, #8]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fd15 	bl	80027c0 <Calibration_GetY>
 8001d96:	4603      	mov	r3, r0
 8001d98:	82bb      	strh	r3, [r7, #20]

    	if(y<BSP_LCD_GetYSize() / 2 && x>BSP_LCD_GetXSize() / 2){
 8001d9a:	8abc      	ldrh	r4, [r7, #20]
 8001d9c:	f001 fdfc 	bl	8003998 <BSP_LCD_GetYSize>
 8001da0:	4603      	mov	r3, r0
 8001da2:	085b      	lsrs	r3, r3, #1
 8001da4:	429c      	cmp	r4, r3
 8001da6:	d213      	bcs.n	8001dd0 <menu_bbg+0x1e8>
 8001da8:	8afc      	ldrh	r4, [r7, #22]
 8001daa:	f001 fde9 	bl	8003980 <BSP_LCD_GetXSize>
 8001dae:	4603      	mov	r3, r0
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	429c      	cmp	r4, r3
 8001db4:	d90c      	bls.n	8001dd0 <menu_bbg+0x1e8>
    		if(level<MAX_LEVEL_BBG) level++;
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <menu_bbg+0x284>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d805      	bhi.n	8001dca <menu_bbg+0x1e2>
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <menu_bbg+0x284>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <menu_bbg+0x284>)
 8001dc8:	701a      	strb	r2, [r3, #0]
    		HAL_Delay(200);
 8001dca:	20c8      	movs	r0, #200	; 0xc8
 8001dcc:	f003 f8ba 	bl	8004f44 <HAL_Delay>
    	}

    	if(y<BSP_LCD_GetYSize() / 2 && x < BSP_LCD_GetXSize() / 2){
 8001dd0:	8abc      	ldrh	r4, [r7, #20]
 8001dd2:	f001 fde1 	bl	8003998 <BSP_LCD_GetYSize>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	429c      	cmp	r4, r3
 8001ddc:	d213      	bcs.n	8001e06 <menu_bbg+0x21e>
 8001dde:	8afc      	ldrh	r4, [r7, #22]
 8001de0:	f001 fdce 	bl	8003980 <BSP_LCD_GetXSize>
 8001de4:	4603      	mov	r3, r0
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	429c      	cmp	r4, r3
 8001dea:	d20c      	bcs.n	8001e06 <menu_bbg+0x21e>
    		if(level>0) level--;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <menu_bbg+0x284>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <menu_bbg+0x218>
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <menu_bbg+0x284>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <menu_bbg+0x284>)
 8001dfe:	701a      	strb	r2, [r3, #0]
    		HAL_Delay(200);
 8001e00:	20c8      	movs	r0, #200	; 0xc8
 8001e02:	f003 f89f 	bl	8004f44 <HAL_Delay>
    	}

    	if(y>BSP_LCD_GetYSize() / 2){
 8001e06:	8abc      	ldrh	r4, [r7, #20]
 8001e08:	f001 fdc6 	bl	8003998 <BSP_LCD_GetYSize>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	429c      	cmp	r4, r3
 8001e12:	d904      	bls.n	8001e1e <menu_bbg+0x236>
    	      HAL_Delay(500);
 8001e14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e18:	f003 f894 	bl	8004f44 <HAL_Delay>
    	      return;
 8001e1c:	e016      	b.n	8001e4c <menu_bbg+0x264>
    	}


    	BSP_LCD_DisplayStringAt(0, (BSP_LCD_GetYSize() / 4)+10, itoa(level+1,level_txt, 10), CENTER_MODE);
 8001e1e:	f001 fdbb 	bl	8003998 <BSP_LCD_GetYSize>
 8001e22:	4603      	mov	r3, r0
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	330a      	adds	r3, #10
 8001e2a:	b29c      	uxth	r4, r3
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <menu_bbg+0x284>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	f107 010c 	add.w	r1, r7, #12
 8001e36:	220a      	movs	r2, #10
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00b f9ad 	bl	800d198 <itoa>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	2301      	movs	r3, #1
 8001e42:	4621      	mov	r1, r4
 8001e44:	2000      	movs	r0, #0
 8001e46:	f001 ff1d 	bl	8003c84 <BSP_LCD_DisplayStringAt>
  {
 8001e4a:	e793      	b.n	8001d74 <menu_bbg+0x18c>

    }
  }
}
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e54:	ffff0000 	.word	0xffff0000
 8001e58:	ff808080 	.word	0xff808080
 8001e5c:	2000007c 	.word	0x2000007c
 8001e60:	0800d3c4 	.word	0x0800d3c4
 8001e64:	20000084 	.word	0x20000084
 8001e68:	0800d3c8 	.word	0x0800d3c8
 8001e6c:	20000578 	.word	0x20000578
 8001e70:	20000074 	.word	0x20000074
 8001e74:	0800d3d8 	.word	0x0800d3d8

08001e78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e8a:	f003 f83b 	bl	8004f04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40001000 	.word	0x40001000

08001e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	  BSP_LED_On(LED4);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f001 f973 	bl	800318c <BSP_LED_On>
	  while(1)
 8001ea6:	e7fe      	b.n	8001ea6 <Error_Handler+0xa>

08001ea8 <Platforma_init>:
#include "Platforma.h"
#include "main.h"

// Inicjalizacja struktury Platforma
void Platforma_init(Platforma *platforma, int x, int y, int w, int h, int k, uint32_t kol)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
    platforma->polozenie_x = x;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	601a      	str	r2, [r3, #0]
    platforma->polozenie_y = y;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	605a      	str	r2, [r3, #4]
    platforma->szerokosc = w;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	609a      	str	r2, [r3, #8]
    platforma->wysokosc = h;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	60da      	str	r2, [r3, #12]
    platforma->krok = k;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	611a      	str	r2, [r3, #16]
    platforma->kolor = kol;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a3a      	ldr	r2, [r7, #32]
 8001ed8:	615a      	str	r2, [r3, #20]
    rysuj_platforme(platforma);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f804 	bl	8001ee8 <rysuj_platforme>
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <rysuj_platforme>:
    BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
    BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
}

void rysuj_platforme(Platforma *platforma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(platforma->kolor);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 fe0d 	bl	8003b14 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b298      	uxth	r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	b299      	uxth	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f002 f969 	bl	80041e8 <BSP_LCD_FillRect>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <Platforma_przesunDo>:

void Platforma_przesunDo(Platforma *platforma, int x)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
    platforma->polozenie_x = x;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <Platforma_getPolozenieX>:
    platforma->polozenie_x += platforma->krok;
}

// Pobranie położenia X platformy
int Platforma_getPolozenieX(const Platforma *platforma)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
    return platforma->polozenie_x;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <Platforma_getPolozenieY>:

// Pobranie położenia Y platformy
int Platforma_getPolozenieY(const Platforma *platforma)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
    return platforma->polozenie_y;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <Platforma_getSzerokosc>:

// Pobranie szerokości platformy
int Platforma_getSzerokosc(const Platforma *platforma)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
    return platforma->szerokosc;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <Platforma_getWysokosc>:

// Pobranie wysokości platformy
int Platforma_getWysokosc(const Platforma *platforma)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
    return platforma->wysokosc;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <Platforma_getKrok>:

int Platforma_getKrok(const Platforma *platforma)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
    return platforma->krok;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <Platforma_getKolor>:

uint32_t Platforma_getKolor(const Platforma *platforma)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
    return platforma->kolor;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_SPI5_Init+0x64>)
 8001fd2:	4a18      	ldr	r2, [pc, #96]	; (8002034 <MX_SPI5_Init+0x68>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <MX_SPI5_Init+0x64>)
 8001fd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fdc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <MX_SPI5_Init+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_SPI5_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_SPI5_Init+0x64>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_SPI5_Init+0x64>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <MX_SPI5_Init+0x64>)
 8001ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_SPI5_Init+0x64>)
 8002000:	2218      	movs	r2, #24
 8002002:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <MX_SPI5_Init+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_SPI5_Init+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <MX_SPI5_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_SPI5_Init+0x64>)
 8002018:	220a      	movs	r2, #10
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_SPI5_Init+0x64>)
 800201e:	f007 fd90 	bl	8009b42 <HAL_SPI_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002028:	f7ff ff38 	bl	8001e9c <Error_Handler>
  }

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000584 	.word	0x20000584
 8002034:	40015000 	.word	0x40015000

08002038 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_SPI_MspInit+0x84>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d12c      	bne.n	80020b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_SPI_MspInit+0x88>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_SPI_MspInit+0x88>)
 8002064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_SPI_MspInit+0x88>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_SPI_MspInit+0x88>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <HAL_SPI_MspInit+0x88>)
 8002080:	f043 0320 	orr.w	r3, r3, #32
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_SPI_MspInit+0x88>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002092:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80020a4:	2305      	movs	r3, #5
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <HAL_SPI_MspInit+0x8c>)
 80020b0:	f003 fdc0 	bl	8005c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80020b4:	bf00      	nop
 80020b6:	3728      	adds	r7, #40	; 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40015000 	.word	0x40015000
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40021400 	.word	0x40021400

080020c8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_SPI_MspDeInit+0x30>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10a      	bne.n	80020f0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_SPI_MspDeInit+0x34>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_SPI_MspDeInit+0x34>)
 80020e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80020e6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_SPI_MspDeInit+0x38>)
 80020ec:	f003 ff4c 	bl	8005f88 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40015000 	.word	0x40015000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40021400 	.word	0x40021400

08002104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_MspInit+0x54>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_MspInit+0x54>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002118:	6453      	str	r3, [r2, #68]	; 0x44
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_MspInit+0x54>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_MspInit+0x54>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_MspInit+0x54>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_MspInit+0x54>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	210f      	movs	r1, #15
 8002146:	f06f 0001 	mvn.w	r0, #1
 800214a:	f002 ffd5 	bl	80050f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	2036      	movs	r0, #54	; 0x36
 8002172:	f002 ffc1 	bl	80050f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002176:	2036      	movs	r0, #54	; 0x36
 8002178:	f002 ffda 	bl	8005130 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <HAL_InitTick+0xa4>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <HAL_InitTick+0xa4>)
 8002186:	f043 0310 	orr.w	r3, r3, #16
 800218a:	6413      	str	r3, [r2, #64]	; 0x40
 800218c:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_InitTick+0xa4>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002198:	f107 0210 	add.w	r2, r7, #16
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f007 fa5e 	bl	8009664 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021a8:	f007 fa34 	bl	8009614 <HAL_RCC_GetPCLK1Freq>
 80021ac:	4603      	mov	r3, r0
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_InitTick+0xa8>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0c9b      	lsrs	r3, r3, #18
 80021bc:	3b01      	subs	r3, #1
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_InitTick+0xac>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <HAL_InitTick+0xb0>)
 80021c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_InitTick+0xac>)
 80021c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <HAL_InitTick+0xac>)
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_InitTick+0xac>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_InitTick+0xac>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <HAL_InitTick+0xac>)
 80021e2:	f008 fa39 	bl	800a658 <HAL_TIM_Base_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d104      	bne.n	80021f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021ec:	4806      	ldr	r0, [pc, #24]	; (8002208 <HAL_InitTick+0xac>)
 80021ee:	f008 fa5e 	bl	800a6ae <HAL_TIM_Base_Start_IT>
 80021f2:	4603      	mov	r3, r0
 80021f4:	e000      	b.n	80021f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3730      	adds	r7, #48	; 0x30
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	431bde83 	.word	0x431bde83
 8002208:	200005dc 	.word	0x200005dc
 800220c:	40001000 	.word	0x40001000

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_Clear(0xFF000000); // czarny
 8002222:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002226:	f001 fcc1 	bl	8003bac <BSP_LCD_Clear>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <HardFault_Handler+0xc>

0800222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  BSP_LCD_Clear(0xFFFFFF00); // zolty
 8002230:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8002234:	f001 fcba 	bl	8003bac <BSP_LCD_Clear>
 8002238:	e7fa      	b.n	8002230 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <TIM6_DAC_IRQHandler+0x10>)
 800225a:	f008 fa4c 	bl	800a6f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200005dc 	.word	0x200005dc

08002268 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <OTG_HS_IRQHandler+0x10>)
 800226e:	f003 ffae 	bl	80061ce <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200007a0 	.word	0x200007a0

0800227c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <LTDC_IRQHandler+0x10>)
 8002282:	f006 facb 	bl	800881c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200004d0 	.word	0x200004d0

08002290 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <DMA2D_IRQHandler+0x10>)
 8002296:	f003 fa8e 	bl	80057b6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000408 	.word	0x20000408

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f00a ff1e 	bl	800d114 <__errno>
 80022d8:	4602      	mov	r2, r0
 80022da:	230c      	movs	r3, #12
 80022dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20030000 	.word	0x20030000
 8002304:	00000400 	.word	0x00000400
 8002308:	20000128 	.word	0x20000128
 800230c:	20000a68 	.word	0x20000a68

08002310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <SystemInit+0x28>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <SystemInit+0x28>)
 800231c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <SystemInit+0x28>)
 8002326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800232a:	609a      	str	r2, [r3, #8]
#endif
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002350:	463b      	mov	r3, r7
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <MX_TIM1_Init+0x98>)
 800235a:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <MX_TIM1_Init+0x9c>)
 800235c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <MX_TIM1_Init+0x98>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <MX_TIM1_Init+0x98>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <MX_TIM1_Init+0x98>)
 800236c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002370:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <MX_TIM1_Init+0x98>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MX_TIM1_Init+0x98>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MX_TIM1_Init+0x98>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002384:	4813      	ldr	r0, [pc, #76]	; (80023d4 <MX_TIM1_Init+0x98>)
 8002386:	f008 f967 	bl	800a658 <HAL_TIM_Base_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002390:	f7ff fd84 	bl	8001e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	4619      	mov	r1, r3
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <MX_TIM1_Init+0x98>)
 80023a2:	f008 fab0 	bl	800a906 <HAL_TIM_ConfigClockSource>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80023ac:	f7ff fd76 	bl	8001e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023b8:	463b      	mov	r3, r7
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_TIM1_Init+0x98>)
 80023be:	f008 fcbb 	bl	800ad38 <HAL_TIMEx_MasterConfigSynchronization>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023c8:	f7ff fd68 	bl	8001e9c <Error_Handler>
  }

}
 80023cc:	bf00      	nop
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	2000061c 	.word	0x2000061c
 80023d8:	40010000 	.word	0x40010000

080023dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <HAL_TIM_Base_MspInit+0x3c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10d      	bne.n	800240a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_TIM_Base_MspInit+0x40>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_TIM_Base_MspInit+0x40>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_TIM_Base_MspInit+0x40>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40010000 	.word	0x40010000
 800241c:	40023800 	.word	0x40023800

08002420 <Touchscreen_Calibration>:
 * @brief  Performs the TS calibration
 * @param  None
 * @retval None
 */
void Touchscreen_Calibration(void)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	71fb      	strb	r3, [r7, #7]

  TouchscreenCalibration_SetHint();
 800242e:	f000 f8f1 	bl	8002614 <TouchscreenCalibration_SetHint>

  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002432:	f001 faa5 	bl	8003980 <BSP_LCD_GetXSize>
 8002436:	4603      	mov	r3, r0
 8002438:	b29c      	uxth	r4, r3
 800243a:	f001 faad 	bl	8003998 <BSP_LCD_GetYSize>
 800243e:	4603      	mov	r3, r0
 8002440:	b29b      	uxth	r3, r3
 8002442:	4619      	mov	r1, r3
 8002444:	4620      	mov	r0, r4
 8002446:	f002 fc4f 	bl	8004ce8 <BSP_TS_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	71bb      	strb	r3, [r7, #6]

  if (status != TS_OK)
 800244e:	79bb      	ldrb	r3, [r7, #6]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01c      	beq.n	800248e <Touchscreen_Calibration+0x6e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f001 fb74 	bl	8003b44 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800245c:	4861      	ldr	r0, [pc, #388]	; (80025e4 <Touchscreen_Calibration+0x1c4>)
 800245e:	f001 fb59 	bl	8003b14 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 8002462:	f001 fa99 	bl	8003998 <BSP_LCD_GetYSize>
 8002466:	4603      	mov	r3, r0
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b5f      	subs	r3, #95	; 0x5f
 800246c:	b299      	uxth	r1, r3
 800246e:	2301      	movs	r3, #1
 8002470:	4a5d      	ldr	r2, [pc, #372]	; (80025e8 <Touchscreen_Calibration+0x1c8>)
 8002472:	2000      	movs	r0, #0
 8002474:	f001 fc06 	bl	8003c84 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 8002478:	f001 fa8e 	bl	8003998 <BSP_LCD_GetYSize>
 800247c:	4603      	mov	r3, r0
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b50      	subs	r3, #80	; 0x50
 8002482:	b299      	uxth	r1, r3
 8002484:	2301      	movs	r3, #1
 8002486:	4a59      	ldr	r2, [pc, #356]	; (80025ec <Touchscreen_Calibration+0x1cc>)
 8002488:	2000      	movs	r0, #0
 800248a:	f001 fbfb 	bl	8003c84 <BSP_LCD_DisplayStringAt>
  }

  while (1)
  {
    if (status == TS_OK)
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 80a0 	bne.w	80025d6 <Touchscreen_Calibration+0x1b6>
    {
      aLogX[0] = 15;
 8002496:	4b56      	ldr	r3, [pc, #344]	; (80025f0 <Touchscreen_Calibration+0x1d0>)
 8002498:	220f      	movs	r2, #15
 800249a:	801a      	strh	r2, [r3, #0]
      aLogY[0] = 15;
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <Touchscreen_Calibration+0x1d4>)
 800249e:	220f      	movs	r2, #15
 80024a0:	801a      	strh	r2, [r3, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 80024a2:	f001 fa6d 	bl	8003980 <BSP_LCD_GetXSize>
 80024a6:	4603      	mov	r3, r0
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b0f      	subs	r3, #15
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	4b4f      	ldr	r3, [pc, #316]	; (80025f0 <Touchscreen_Calibration+0x1d0>)
 80024b2:	805a      	strh	r2, [r3, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 80024b4:	f001 fa70 	bl	8003998 <BSP_LCD_GetYSize>
 80024b8:	4603      	mov	r3, r0
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b0f      	subs	r3, #15
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <Touchscreen_Calibration+0x1d4>)
 80024c4:	805a      	strh	r2, [r3, #2]

      for (i = 0; i < 2; i++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	71fb      	strb	r3, [r7, #7]
 80024ca:	e015      	b.n	80024f8 <Touchscreen_Calibration+0xd8>
      {
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	4a48      	ldr	r2, [pc, #288]	; (80025f0 <Touchscreen_Calibration+0x1d0>)
 80024d0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <Touchscreen_Calibration+0x1d4>)
 80024d8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4a45      	ldr	r2, [pc, #276]	; (80025f8 <Touchscreen_Calibration+0x1d8>)
 80024e2:	189c      	adds	r4, r3, r2
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4a44      	ldr	r2, [pc, #272]	; (80025fc <Touchscreen_Calibration+0x1dc>)
 80024ea:	4413      	add	r3, r2
 80024ec:	4622      	mov	r2, r4
 80024ee:	f000 f8d1 	bl	8002694 <GetPhysValues>
      for (i = 0; i < 2; i++)
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	3301      	adds	r3, #1
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d9e6      	bls.n	80024cc <Touchscreen_Calibration+0xac>
      }
      A1 = (1000 * (aLogX[1] - aLogX[0])) / (aPhysX[1] - aPhysX[0]);
 80024fe:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <Touchscreen_Calibration+0x1d0>)
 8002500:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002504:	461a      	mov	r2, r3
 8002506:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <Touchscreen_Calibration+0x1d0>)
 8002508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002512:	fb02 f203 	mul.w	r2, r2, r3
 8002516:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <Touchscreen_Calibration+0x1d8>)
 8002518:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800251c:	4619      	mov	r1, r3
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <Touchscreen_Calibration+0x1d8>)
 8002520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002524:	1acb      	subs	r3, r1, r3
 8002526:	fb92 f3f3 	sdiv	r3, r2, r3
 800252a:	b21a      	sxth	r2, r3
 800252c:	4b34      	ldr	r3, [pc, #208]	; (8002600 <Touchscreen_Calibration+0x1e0>)
 800252e:	801a      	strh	r2, [r3, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0];
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <Touchscreen_Calibration+0x1d0>)
 8002532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	0152      	lsls	r2, r2, #5
 800253c:	1ad2      	subs	r2, r2, r3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	b29a      	uxth	r2, r3
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <Touchscreen_Calibration+0x1d8>)
 8002548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254c:	b299      	uxth	r1, r3
 800254e:	4b2c      	ldr	r3, [pc, #176]	; (8002600 <Touchscreen_Calibration+0x1e0>)
 8002550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002554:	b29b      	uxth	r3, r3
 8002556:	fb11 f303 	smulbb	r3, r1, r3
 800255a:	b29b      	uxth	r3, r3
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	b29b      	uxth	r3, r3
 8002560:	b21a      	sxth	r2, r3
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <Touchscreen_Calibration+0x1e4>)
 8002564:	801a      	strh	r2, [r3, #0]

      A2 = (1000 * (aLogY[1] - aLogY[0])) / (aPhysY[1] - aPhysY[0]);
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <Touchscreen_Calibration+0x1d4>)
 8002568:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800256c:	461a      	mov	r2, r3
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <Touchscreen_Calibration+0x1d4>)
 8002570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800257a:	fb02 f203 	mul.w	r2, r2, r3
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <Touchscreen_Calibration+0x1dc>)
 8002580:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002584:	4619      	mov	r1, r3
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <Touchscreen_Calibration+0x1dc>)
 8002588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258c:	1acb      	subs	r3, r1, r3
 800258e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002592:	b21a      	sxth	r2, r3
 8002594:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <Touchscreen_Calibration+0x1e8>)
 8002596:	801a      	strh	r2, [r3, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0];
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <Touchscreen_Calibration+0x1d4>)
 800259a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	0152      	lsls	r2, r2, #5
 80025a4:	1ad2      	subs	r2, r2, r3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <Touchscreen_Calibration+0x1dc>)
 80025b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b4:	b299      	uxth	r1, r3
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <Touchscreen_Calibration+0x1e8>)
 80025b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	fb11 f303 	smulbb	r3, r1, r3
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <Touchscreen_Calibration+0x1ec>)
 80025cc:	801a      	strh	r2, [r3, #0]

      Calibration_Done = 1;
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <Touchscreen_Calibration+0x1f0>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
      return;
 80025d4:	e003      	b.n	80025de <Touchscreen_Calibration+0x1be>
    }

    HAL_Delay(5);
 80025d6:	2005      	movs	r0, #5
 80025d8:	f002 fcb4 	bl	8004f44 <HAL_Delay>
    if (status == TS_OK)
 80025dc:	e757      	b.n	800248e <Touchscreen_Calibration+0x6e>
  }
}
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd90      	pop	{r4, r7, pc}
 80025e4:	ffff0000 	.word	0xffff0000
 80025e8:	0800d3e0 	.word	0x0800d3e0
 80025ec:	0800d3e8 	.word	0x0800d3e8
 80025f0:	20000148 	.word	0x20000148
 80025f4:	2000014c 	.word	0x2000014c
 80025f8:	20000140 	.word	0x20000140
 80025fc:	20000144 	.word	0x20000144
 8002600:	20000136 	.word	0x20000136
 8002604:	2000013a 	.word	0x2000013a
 8002608:	20000138 	.word	0x20000138
 800260c:	2000013c 	.word	0x2000013c
 8002610:	20000134 	.word	0x20000134

08002614 <TouchscreenCalibration_SetHint>:
 * @brief  Display calibration hint
 * @param  None
 * @retval None
 */
static void TouchscreenCalibration_SetHint(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f001 fac6 	bl	8003bac <BSP_LCD_Clear>

  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002620:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002624:	f001 fa76 	bl	8003b14 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f001 fa8a 	bl	8003b44 <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font12);
 8002630:	4814      	ldr	r0, [pc, #80]	; (8002684 <TouchscreenCalibration_SetHint+0x70>)
 8002632:	f001 faa1 	bl	8003b78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 27, (uint8_t *)"Before using the Touchscreen", CENTER_MODE);
 8002636:	f001 f9af 	bl	8003998 <BSP_LCD_GetYSize>
 800263a:	4603      	mov	r3, r0
 800263c:	085b      	lsrs	r3, r3, #1
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b1b      	subs	r3, #27
 8002642:	b299      	uxth	r1, r3
 8002644:	2301      	movs	r3, #1
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <TouchscreenCalibration_SetHint+0x74>)
 8002648:	2000      	movs	r0, #0
 800264a:	f001 fb1b 	bl	8003c84 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 12, (uint8_t *)"you need to calibrate it.", CENTER_MODE);
 800264e:	f001 f9a3 	bl	8003998 <BSP_LCD_GetYSize>
 8002652:	4603      	mov	r3, r0
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b0c      	subs	r3, #12
 800265a:	b299      	uxth	r1, r3
 800265c:	2301      	movs	r3, #1
 800265e:	4a0b      	ldr	r2, [pc, #44]	; (800268c <TouchscreenCalibration_SetHint+0x78>)
 8002660:	2000      	movs	r0, #0
 8002662:	f001 fb0f 	bl	8003c84 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 3, (uint8_t *)"Press on the black circles", CENTER_MODE);
 8002666:	f001 f997 	bl	8003998 <BSP_LCD_GetYSize>
 800266a:	4603      	mov	r3, r0
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	3303      	adds	r3, #3
 8002672:	b299      	uxth	r1, r3
 8002674:	2301      	movs	r3, #1
 8002676:	4a06      	ldr	r2, [pc, #24]	; (8002690 <TouchscreenCalibration_SetHint+0x7c>)
 8002678:	2000      	movs	r0, #0
 800267a:	f001 fb03 	bl	8003c84 <BSP_LCD_DisplayStringAt>
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000008c 	.word	0x2000008c
 8002688:	0800d40c 	.word	0x0800d40c
 800268c:	0800d42c 	.word	0x0800d42c
 8002690:	0800d448 	.word	0x0800d448

08002694 <GetPhysValues>:
 * @param  pPhysX : Physical X position
 * @param  pPhysY : Physical Y position
 * @retval None
 */
static void GetPhysValues(int16_t LogX, int16_t LogY, int16_t *pPhysX, int16_t *pPhysY)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60ba      	str	r2, [r7, #8]
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	4603      	mov	r3, r0
 80026a0:	81fb      	strh	r3, [r7, #14]
 80026a2:	460b      	mov	r3, r1
 80026a4:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80026a6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80026aa:	f001 fa33 	bl	8003b14 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 80026ae:	89fb      	ldrh	r3, [r7, #14]
 80026b0:	89b9      	ldrh	r1, [r7, #12]
 80026b2:	2205      	movs	r2, #5
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 fdf1 	bl	800429c <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80026ba:	f04f 30ff 	mov.w	r0, #4294967295
 80026be:	f001 fa29 	bl	8003b14 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 80026c2:	89fb      	ldrh	r3, [r7, #14]
 80026c4:	89b9      	ldrh	r1, [r7, #12]
 80026c6:	2202      	movs	r2, #2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fde7 	bl	800429c <BSP_LCD_FillCircle>

  /* Wait until touch is pressed */
  WaitForPressedState(1);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f000 f820 	bl	8002714 <WaitForPressedState>

  BSP_TS_GetState(&TS_State);
 80026d4:	480e      	ldr	r0, [pc, #56]	; (8002710 <GetPhysValues+0x7c>)
 80026d6:	f002 fb41 	bl	8004d5c <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <GetPhysValues+0x7c>)
 80026dc:	885b      	ldrh	r3, [r3, #2]
 80026de:	b21a      	sxth	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.Y;
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <GetPhysValues+0x7c>)
 80026e6:	889b      	ldrh	r3, [r3, #4]
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	801a      	strh	r2, [r3, #0]

  /* Wait until touch is released */
  WaitForPressedState(0);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f000 f810 	bl	8002714 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f001 fa0c 	bl	8003b14 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 80026fc:	89fb      	ldrh	r3, [r7, #14]
 80026fe:	89b9      	ldrh	r1, [r7, #12]
 8002700:	2205      	movs	r2, #5
 8002702:	4618      	mov	r0, r3
 8002704:	f001 fdca 	bl	800429c <BSP_LCD_FillCircle>
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2000012c 	.word	0x2000012c

08002714 <WaitForPressedState>:
 * @brief  Wait For Pressed State
 * @param  Pressed: Pressed State
 * @retval None
 */
static void WaitForPressedState(uint8_t Pressed)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef State;

  do
  {
    BSP_TS_GetState(&State);
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fb1a 	bl	8004d5c <BSP_TS_GetState>
    HAL_Delay(10);
 8002728:	200a      	movs	r0, #10
 800272a:	f002 fc0b 	bl	8004f44 <HAL_Delay>
    if (State.TouchDetected == Pressed)
 800272e:	89ba      	ldrh	r2, [r7, #12]
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	b29b      	uxth	r3, r3
 8002734:	429a      	cmp	r2, r3
 8002736:	d1f2      	bne.n	800271e <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 8002738:	f002 fbf8 	bl	8004f2c <HAL_GetTick>
 800273c:	4603      	mov	r3, r0
 800273e:	82fb      	strh	r3, [r7, #22]
      do
      {
        BSP_TS_GetState(&State);
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	4618      	mov	r0, r3
 8002746:	f002 fb09 	bl	8004d5c <BSP_TS_GetState>
        HAL_Delay(10);
 800274a:	200a      	movs	r0, #10
 800274c:	f002 fbfa 	bl	8004f44 <HAL_Delay>
        if (State.TouchDetected != Pressed)
 8002750:	89ba      	ldrh	r2, [r7, #12]
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	b29b      	uxth	r3, r3
 8002756:	429a      	cmp	r2, r3
 8002758:	d108      	bne.n	800276c <WaitForPressedState+0x58>
        {
          break;
        }
        else if ((HAL_GetTick() - 100) > TimeStart)
 800275a:	f002 fbe7 	bl	8004f2c <HAL_GetTick>
 800275e:	4603      	mov	r3, r0
 8002760:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002764:	8afb      	ldrh	r3, [r7, #22]
 8002766:	429a      	cmp	r2, r3
 8002768:	d802      	bhi.n	8002770 <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);
 800276a:	e7e9      	b.n	8002740 <WaitForPressedState+0x2c>
          break;
 800276c:	bf00      	nop
    BSP_TS_GetState(&State);
 800276e:	e7d6      	b.n	800271e <WaitForPressedState+0xa>
        {
          return;
 8002770:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <Calibration_GetX>:
 * @brief  Calibrate X position
 * @param  x: X position
 * @retval calibrated x
 */
uint16_t Calibration_GetX(uint16_t x)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
  return (((A1 * x) + B1) / 1000);
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <Calibration_GetX+0x3c>)
 8002784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002788:	461a      	mov	r2, r3
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	fb03 f302 	mul.w	r3, r3, r2
 8002790:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <Calibration_GetX+0x40>)
 8002792:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002796:	4413      	add	r3, r2
 8002798:	4a08      	ldr	r2, [pc, #32]	; (80027bc <Calibration_GetX+0x44>)
 800279a:	fb82 1203 	smull	r1, r2, r2, r3
 800279e:	1192      	asrs	r2, r2, #6
 80027a0:	17db      	asrs	r3, r3, #31
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	b29b      	uxth	r3, r3
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000136 	.word	0x20000136
 80027b8:	2000013a 	.word	0x2000013a
 80027bc:	10624dd3 	.word	0x10624dd3

080027c0 <Calibration_GetY>:
 * @brief  Calibrate Y position
 * @param  y: Y position
 * @retval calibrated y
 */
uint16_t Calibration_GetY(uint16_t y)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
  return (((A2 * y) + B2) / 1000);
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <Calibration_GetY+0x3c>)
 80027cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d0:	461a      	mov	r2, r3
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	fb03 f302 	mul.w	r3, r3, r2
 80027d8:	4a09      	ldr	r2, [pc, #36]	; (8002800 <Calibration_GetY+0x40>)
 80027da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80027de:	4413      	add	r3, r2
 80027e0:	4a08      	ldr	r2, [pc, #32]	; (8002804 <Calibration_GetY+0x44>)
 80027e2:	fb82 1203 	smull	r1, r2, r2, r3
 80027e6:	1192      	asrs	r2, r2, #6
 80027e8:	17db      	asrs	r3, r3, #31
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	b29b      	uxth	r3, r3
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000138 	.word	0x20000138
 8002800:	2000013c 	.word	0x2000013c
 8002804:	10624dd3 	.word	0x10624dd3

08002808 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <MX_USART1_UART_Init+0x50>)
 8002810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800282e:	220c      	movs	r2, #12
 8002830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002840:	f008 fb0a 	bl	800ae58 <HAL_UART_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800284a:	f7ff fb27 	bl	8001e9c <Error_Handler>
  }

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000065c 	.word	0x2000065c
 8002858:	40011000 	.word	0x40011000

0800285c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_UART_MspInit+0x84>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d12c      	bne.n	80028d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_UART_MspInit+0x88>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_UART_MspInit+0x88>)
 8002888:	f043 0310 	orr.w	r3, r3, #16
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_UART_MspInit+0x88>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_UART_MspInit+0x88>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_UART_MspInit+0x88>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_UART_MspInit+0x88>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028c8:	2307      	movs	r3, #7
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <HAL_UART_MspInit+0x8c>)
 80028d4:	f003 f9ae 	bl	8005c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028d8:	bf00      	nop
 80028da:	3728      	adds	r7, #40	; 0x28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40011000 	.word	0x40011000
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40020000 	.word	0x40020000

080028ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80028ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002924 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028f2:	e003      	b.n	80028fc <LoopCopyDataInit>

080028f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028fa:	3104      	adds	r1, #4

080028fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002900:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002902:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002904:	d3f6      	bcc.n	80028f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002906:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002908:	e002      	b.n	8002910 <LoopFillZerobss>

0800290a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800290a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800290c:	f842 3b04 	str.w	r3, [r2], #4

08002910 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002912:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002914:	d3f9      	bcc.n	800290a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002916:	f7ff fcfb 	bl	8002310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800291a:	f00a fc01 	bl	800d120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800291e:	f7fe fefb 	bl	8001718 <main>
  bx  lr    
 8002922:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002924:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002928:	08010ea4 	.word	0x08010ea4
  ldr  r0, =_sdata
 800292c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002930:	20000108 	.word	0x20000108
  ldr  r2, =_sbss
 8002934:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 8002938:	20000a68 	.word	0x20000a68

0800293c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800293c:	e7fe      	b.n	800293c <ADC_IRQHandler>

0800293e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002942:	f000 fe65 	bl	8003610 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002946:	20ca      	movs	r0, #202	; 0xca
 8002948:	f000 f95d 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800294c:	20c3      	movs	r0, #195	; 0xc3
 800294e:	f000 f967 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002952:	2008      	movs	r0, #8
 8002954:	f000 f964 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002958:	2050      	movs	r0, #80	; 0x50
 800295a:	f000 f961 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800295e:	20cf      	movs	r0, #207	; 0xcf
 8002960:	f000 f951 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f000 f95b 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800296a:	20c1      	movs	r0, #193	; 0xc1
 800296c:	f000 f958 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002970:	2030      	movs	r0, #48	; 0x30
 8002972:	f000 f955 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002976:	20ed      	movs	r0, #237	; 0xed
 8002978:	f000 f945 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800297c:	2064      	movs	r0, #100	; 0x64
 800297e:	f000 f94f 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002982:	2003      	movs	r0, #3
 8002984:	f000 f94c 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002988:	2012      	movs	r0, #18
 800298a:	f000 f949 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800298e:	2081      	movs	r0, #129	; 0x81
 8002990:	f000 f946 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002994:	20e8      	movs	r0, #232	; 0xe8
 8002996:	f000 f936 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800299a:	2085      	movs	r0, #133	; 0x85
 800299c:	f000 f940 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f000 f93d 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80029a6:	2078      	movs	r0, #120	; 0x78
 80029a8:	f000 f93a 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80029ac:	20cb      	movs	r0, #203	; 0xcb
 80029ae:	f000 f92a 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80029b2:	2039      	movs	r0, #57	; 0x39
 80029b4:	f000 f934 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80029b8:	202c      	movs	r0, #44	; 0x2c
 80029ba:	f000 f931 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f000 f92e 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80029c4:	2034      	movs	r0, #52	; 0x34
 80029c6:	f000 f92b 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80029ca:	2002      	movs	r0, #2
 80029cc:	f000 f928 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80029d0:	20f7      	movs	r0, #247	; 0xf7
 80029d2:	f000 f918 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80029d6:	2020      	movs	r0, #32
 80029d8:	f000 f922 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80029dc:	20ea      	movs	r0, #234	; 0xea
 80029de:	f000 f912 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f000 f91c 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f000 f919 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80029ee:	20b1      	movs	r0, #177	; 0xb1
 80029f0:	f000 f909 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f000 f913 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80029fa:	201b      	movs	r0, #27
 80029fc:	f000 f910 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002a00:	20b6      	movs	r0, #182	; 0xb6
 8002a02:	f000 f900 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002a06:	200a      	movs	r0, #10
 8002a08:	f000 f90a 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002a0c:	20a2      	movs	r0, #162	; 0xa2
 8002a0e:	f000 f907 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002a12:	20c0      	movs	r0, #192	; 0xc0
 8002a14:	f000 f8f7 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002a18:	2010      	movs	r0, #16
 8002a1a:	f000 f901 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002a1e:	20c1      	movs	r0, #193	; 0xc1
 8002a20:	f000 f8f1 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002a24:	2010      	movs	r0, #16
 8002a26:	f000 f8fb 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002a2a:	20c5      	movs	r0, #197	; 0xc5
 8002a2c:	f000 f8eb 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002a30:	2045      	movs	r0, #69	; 0x45
 8002a32:	f000 f8f5 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002a36:	2015      	movs	r0, #21
 8002a38:	f000 f8f2 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002a3c:	20c7      	movs	r0, #199	; 0xc7
 8002a3e:	f000 f8e2 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002a42:	2090      	movs	r0, #144	; 0x90
 8002a44:	f000 f8ec 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002a48:	2036      	movs	r0, #54	; 0x36
 8002a4a:	f000 f8dc 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002a4e:	20c8      	movs	r0, #200	; 0xc8
 8002a50:	f000 f8e6 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002a54:	20f2      	movs	r0, #242	; 0xf2
 8002a56:	f000 f8d6 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f000 f8e0 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002a60:	20b0      	movs	r0, #176	; 0xb0
 8002a62:	f000 f8d0 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002a66:	20c2      	movs	r0, #194	; 0xc2
 8002a68:	f000 f8da 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002a6c:	20b6      	movs	r0, #182	; 0xb6
 8002a6e:	f000 f8ca 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002a72:	200a      	movs	r0, #10
 8002a74:	f000 f8d4 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002a78:	20a7      	movs	r0, #167	; 0xa7
 8002a7a:	f000 f8d1 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002a7e:	2027      	movs	r0, #39	; 0x27
 8002a80:	f000 f8ce 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002a84:	2004      	movs	r0, #4
 8002a86:	f000 f8cb 	bl	8002c20 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002a8a:	202a      	movs	r0, #42	; 0x2a
 8002a8c:	f000 f8bb 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f000 f8c5 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f000 f8c2 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f000 f8bf 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002aa2:	20ef      	movs	r0, #239	; 0xef
 8002aa4:	f000 f8bc 	bl	8002c20 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002aa8:	202b      	movs	r0, #43	; 0x2b
 8002aaa:	f000 f8ac 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f000 f8b6 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f000 f8b3 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 f8b0 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002ac0:	203f      	movs	r0, #63	; 0x3f
 8002ac2:	f000 f8ad 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002ac6:	20f6      	movs	r0, #246	; 0xf6
 8002ac8:	f000 f89d 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002acc:	2001      	movs	r0, #1
 8002ace:	f000 f8a7 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 f8a4 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002ad8:	2006      	movs	r0, #6
 8002ada:	f000 f8a1 	bl	8002c20 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002ade:	202c      	movs	r0, #44	; 0x2c
 8002ae0:	f000 f891 	bl	8002c06 <ili9341_WriteReg>
  LCD_Delay(200);
 8002ae4:	20c8      	movs	r0, #200	; 0xc8
 8002ae6:	f000 fe81 	bl	80037ec <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002aea:	2026      	movs	r0, #38	; 0x26
 8002aec:	f000 f88b 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002af0:	2001      	movs	r0, #1
 8002af2:	f000 f895 	bl	8002c20 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002af6:	20e0      	movs	r0, #224	; 0xe0
 8002af8:	f000 f885 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002afc:	200f      	movs	r0, #15
 8002afe:	f000 f88f 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002b02:	2029      	movs	r0, #41	; 0x29
 8002b04:	f000 f88c 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002b08:	2024      	movs	r0, #36	; 0x24
 8002b0a:	f000 f889 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002b0e:	200c      	movs	r0, #12
 8002b10:	f000 f886 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002b14:	200e      	movs	r0, #14
 8002b16:	f000 f883 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002b1a:	2009      	movs	r0, #9
 8002b1c:	f000 f880 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002b20:	204e      	movs	r0, #78	; 0x4e
 8002b22:	f000 f87d 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002b26:	2078      	movs	r0, #120	; 0x78
 8002b28:	f000 f87a 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002b2c:	203c      	movs	r0, #60	; 0x3c
 8002b2e:	f000 f877 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002b32:	2009      	movs	r0, #9
 8002b34:	f000 f874 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002b38:	2013      	movs	r0, #19
 8002b3a:	f000 f871 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002b3e:	2005      	movs	r0, #5
 8002b40:	f000 f86e 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002b44:	2017      	movs	r0, #23
 8002b46:	f000 f86b 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002b4a:	2011      	movs	r0, #17
 8002b4c:	f000 f868 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f000 f865 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002b56:	20e1      	movs	r0, #225	; 0xe1
 8002b58:	f000 f855 	bl	8002c06 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f000 f85f 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002b62:	2016      	movs	r0, #22
 8002b64:	f000 f85c 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002b68:	201b      	movs	r0, #27
 8002b6a:	f000 f859 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002b6e:	2004      	movs	r0, #4
 8002b70:	f000 f856 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002b74:	2011      	movs	r0, #17
 8002b76:	f000 f853 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002b7a:	2007      	movs	r0, #7
 8002b7c:	f000 f850 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002b80:	2031      	movs	r0, #49	; 0x31
 8002b82:	f000 f84d 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002b86:	2033      	movs	r0, #51	; 0x33
 8002b88:	f000 f84a 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002b8c:	2042      	movs	r0, #66	; 0x42
 8002b8e:	f000 f847 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002b92:	2005      	movs	r0, #5
 8002b94:	f000 f844 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002b98:	200c      	movs	r0, #12
 8002b9a:	f000 f841 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002b9e:	200a      	movs	r0, #10
 8002ba0:	f000 f83e 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002ba4:	2028      	movs	r0, #40	; 0x28
 8002ba6:	f000 f83b 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002baa:	202f      	movs	r0, #47	; 0x2f
 8002bac:	f000 f838 	bl	8002c20 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002bb0:	200f      	movs	r0, #15
 8002bb2:	f000 f835 	bl	8002c20 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002bb6:	2011      	movs	r0, #17
 8002bb8:	f000 f825 	bl	8002c06 <ili9341_WriteReg>
  LCD_Delay(200);
 8002bbc:	20c8      	movs	r0, #200	; 0xc8
 8002bbe:	f000 fe15 	bl	80037ec <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002bc2:	2029      	movs	r0, #41	; 0x29
 8002bc4:	f000 f81f 	bl	8002c06 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002bc8:	202c      	movs	r0, #44	; 0x2c
 8002bca:	f000 f81c 	bl	8002c06 <ili9341_WriteReg>
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002bd6:	f000 fd1b 	bl	8003610 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002bda:	2103      	movs	r1, #3
 8002bdc:	20d3      	movs	r0, #211	; 0xd3
 8002bde:	f000 f82c 	bl	8002c3a <ili9341_ReadData>
 8002be2:	4603      	mov	r3, r0
 8002be4:	b29b      	uxth	r3, r3
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	bd80      	pop	{r7, pc}

08002bea <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002bee:	2029      	movs	r0, #41	; 0x29
 8002bf0:	f000 f809 	bl	8002c06 <ili9341_WriteReg>
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002bfc:	2028      	movs	r0, #40	; 0x28
 8002bfe:	f000 f802 	bl	8002c06 <ili9341_WriteReg>
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fd96 	bl	8003744 <LCD_IO_WriteReg>
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fd67 	bl	8003700 <LCD_IO_WriteData>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	460a      	mov	r2, r1
 8002c44:	80fb      	strh	r3, [r7, #6]
 8002c46:	4613      	mov	r3, r2
 8002c48:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002c4a:	797a      	ldrb	r2, [r7, #5]
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fd99 	bl	8003788 <LCD_IO_ReadData>
 8002c56:	4603      	mov	r3, r0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002c64:	23f0      	movs	r3, #240	; 0xf0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002c74:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fa59 	bl	8003148 <stmpe811_GetInstance>
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2bff      	cmp	r3, #255	; 0xff
 8002c9e:	d112      	bne.n	8002cc6 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f000 fa51 	bl	8003148 <stmpe811_GetInstance>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002caa:	7bbb      	ldrb	r3, [r7, #14]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d80a      	bhi.n	8002cc6 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	b2d1      	uxtb	r1, r2
 8002cb6:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <stmpe811_Init+0x4c>)
 8002cb8:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002cba:	f000 fda2 	bl	8003802 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f807 	bl	8002cd4 <stmpe811_Reset>
    }
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000150 	.word	0x20000150

08002cd4 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	2103      	movs	r1, #3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fd97 	bl	800381a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002cec:	200a      	movs	r0, #10
 8002cee:	f000 fdd1 	bl	8003894 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fd8d 	bl	800381a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002d00:	2002      	movs	r0, #2
 8002d02:	f000 fdc7 	bl	8003894 <IOE_Delay>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002d0e:	b590      	push	{r4, r7, lr}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002d18:	f000 fd73 	bl	8003802 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fd8c 	bl	8003840 <IOE_Read>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2101      	movs	r1, #1
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fd83 	bl	8003840 <IOE_Read>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	b21b      	sxth	r3, r3
 8002d42:	b29b      	uxth	r3, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2109      	movs	r1, #9
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fd6d 	bl	8003840 <IOE_Read>
 8002d66:	4603      	mov	r3, r0
 8002d68:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	2109      	movs	r1, #9
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fd4d 	bl	800381a <IOE_Write>
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2109      	movs	r1, #9
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fd4f 	bl	8003840 <IOE_Read>
 8002da2:	4603      	mov	r3, r0
 8002da4:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	2109      	movs	r1, #9
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd2f 	bl	800381a <IOE_Write>
    
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460a      	mov	r2, r1
 8002dce:	80fb      	strh	r3, [r7, #6]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	210a      	movs	r1, #10
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fd2e 	bl	8003840 <IOE_Read>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	797b      	ldrb	r3, [r7, #5]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	210a      	movs	r1, #10
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fd0e 	bl	800381a <IOE_Write>
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	460a      	mov	r2, r1
 8002e10:	80fb      	strh	r3, [r7, #6]
 8002e12:	4613      	mov	r3, r2
 8002e14:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	210a      	movs	r1, #10
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fd0d 	bl	8003840 <IOE_Read>
 8002e26:	4603      	mov	r3, r0
 8002e28:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002e2a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	b25a      	sxtb	r2, r3
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4013      	ands	r3, r2
 8002e38:	b25b      	sxtb	r3, r3
 8002e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	210a      	movs	r1, #10
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fce8 	bl	800381a <IOE_Write>
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	460a      	mov	r2, r1
 8002e5c:	80fb      	strh	r3, [r7, #6]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	210b      	movs	r1, #11
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fce9 	bl	8003840 <IOE_Read>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	797b      	ldrb	r3, [r7, #5]
 8002e74:	4013      	ands	r3, r2
 8002e76:	b2db      	uxtb	r3, r3
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	460a      	mov	r2, r1
 8002e8a:	80fb      	strh	r3, [r7, #6]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	797a      	ldrb	r2, [r7, #5]
 8002e96:	210b      	movs	r1, #11
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fcbe 	bl	800381a <IOE_Write>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	6039      	str	r1, [r7, #0]
 8002eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2117      	movs	r1, #23
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fcbf 	bl	8003840 <IOE_Read>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	b25a      	sxtb	r2, r3
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b25b      	sxtb	r3, r3
 8002ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	2117      	movs	r1, #23
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fc9a 	bl	800381a <IOE_Write>
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2104      	movs	r1, #4
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fc9e 	bl	8003840 <IOE_Read>
 8002f04:	4603      	mov	r3, r0
 8002f06:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	2104      	movs	r1, #4
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fc7e 	bl	800381a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	21f0      	movs	r1, #240	; 0xf0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ffbf 	bl	8002ea6 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	f023 0303 	bic.w	r3, r3, #3
 8002f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	2104      	movs	r1, #4
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fc6e 	bl	800381a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2249      	movs	r2, #73	; 0x49
 8002f44:	2120      	movs	r1, #32
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fc67 	bl	800381a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	f000 fca1 	bl	8003894 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2201      	movs	r2, #1
 8002f58:	2121      	movs	r1, #33	; 0x21
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fc5d 	bl	800381a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	229a      	movs	r2, #154	; 0x9a
 8002f66:	2141      	movs	r1, #65	; 0x41
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fc56 	bl	800381a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2201      	movs	r2, #1
 8002f74:	214a      	movs	r1, #74	; 0x4a
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fc4f 	bl	800381a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2201      	movs	r2, #1
 8002f82:	214b      	movs	r1, #75	; 0x4b
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fc48 	bl	800381a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2200      	movs	r2, #0
 8002f90:	214b      	movs	r1, #75	; 0x4b
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fc41 	bl	800381a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	2156      	movs	r1, #86	; 0x56
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fc3a 	bl	800381a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2201      	movs	r2, #1
 8002fac:	2158      	movs	r1, #88	; 0x58
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fc33 	bl	800381a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2201      	movs	r2, #1
 8002fba:	2140      	movs	r1, #64	; 0x40
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fc2c 	bl	800381a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	22ff      	movs	r2, #255	; 0xff
 8002fc8:	210b      	movs	r1, #11
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fc25 	bl	800381a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002fd0:	2002      	movs	r0, #2
 8002fd2:	f000 fc5f 	bl	8003894 <IOE_Delay>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2140      	movs	r1, #64	; 0x40
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fc24 	bl	8003840 <IOE_Read>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	2b80      	cmp	r3, #128	; 0x80
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800300a:	7bbb      	ldrb	r3, [r7, #14]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	214c      	movs	r1, #76	; 0x4c
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fc12 	bl	8003840 <IOE_Read>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d010      	beq.n	8003044 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	e00d      	b.n	8003044 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2201      	movs	r2, #1
 800302e:	214b      	movs	r1, #75	; 0x4b
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fbf2 	bl	800381a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2200      	movs	r2, #0
 800303c:	214b      	movs	r1, #75	; 0x4b
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fbeb 	bl	800381a <IOE_Write>
  }
  
  return ret;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b086      	sub	sp, #24
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800305c:	89fb      	ldrh	r3, [r7, #14]
 800305e:	b2d8      	uxtb	r0, r3
 8003060:	f107 0210 	add.w	r2, r7, #16
 8003064:	2304      	movs	r3, #4
 8003066:	21d7      	movs	r1, #215	; 0xd7
 8003068:	f000 fbfd 	bl	8003866 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800306c:	7c3b      	ldrb	r3, [r7, #16]
 800306e:	061a      	lsls	r2, r3, #24
 8003070:	7c7b      	ldrb	r3, [r7, #17]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	431a      	orrs	r2, r3
 8003076:	7cbb      	ldrb	r3, [r7, #18]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	4313      	orrs	r3, r2
 800307c:	7cfa      	ldrb	r2, [r7, #19]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	0d1b      	lsrs	r3, r3, #20
 8003086:	b29a      	uxth	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	b29b      	uxth	r3, r3
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800309c:	89fb      	ldrh	r3, [r7, #14]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2201      	movs	r2, #1
 80030a2:	214b      	movs	r1, #75	; 0x4b
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fbb8 	bl	800381a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80030aa:	89fb      	ldrh	r3, [r7, #14]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2200      	movs	r2, #0
 80030b0:	214b      	movs	r1, #75	; 0x4b
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fbb1 	bl	800381a <IOE_Write>
}
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80030ca:	f000 fba0 	bl	800380e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	211f      	movs	r1, #31
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fe76 	bl	8002dc4 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fe36 	bl	8002d4c <stmpe811_EnableGlobalIT>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe47 	bl	8002d88 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	211f      	movs	r1, #31
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fe81 	bl	8002e06 <stmpe811_DisableITSource>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	211f      	movs	r1, #31
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fe99 	bl	8002e52 <stmpe811_ReadGITStatus>
 8003120:	4603      	mov	r3, r0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	211f      	movs	r1, #31
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fea1 	bl	8002e80 <stmpe811_ClearGlobalIT>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	e00b      	b.n	8003174 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <stmpe811_GetInstance+0x40>)
 8003160:	5cd3      	ldrb	r3, [r2, r3]
 8003162:	b29b      	uxth	r3, r3
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	429a      	cmp	r2, r3
 8003168:	d101      	bne.n	800316e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	e006      	b.n	800317c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	3301      	adds	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d9f0      	bls.n	800315c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800317a:	23ff      	movs	r3, #255	; 0xff
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	20000150 	.word	0x20000150

0800318c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <BSP_LED_On+0x2c>)
 800319a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	4a06      	ldr	r2, [pc, #24]	; (80031bc <BSP_LED_On+0x30>)
 80031a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a6:	2201      	movs	r2, #1
 80031a8:	4619      	mov	r1, r3
 80031aa:	f002 fff7 	bl	800619c <HAL_GPIO_WritePin>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000064 	.word	0x20000064
 80031bc:	0800d47c 	.word	0x0800d47c

080031c0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a33      	ldr	r2, [pc, #204]	; (800329c <I2Cx_MspInit+0xdc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d15f      	bne.n	8003292 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <I2Cx_MspInit+0xe0>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a31      	ldr	r2, [pc, #196]	; (80032a0 <I2Cx_MspInit+0xe0>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <I2Cx_MspInit+0xe0>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <I2Cx_MspInit+0xe0>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <I2Cx_MspInit+0xe0>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <I2Cx_MspInit+0xe0>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800320a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800320e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003210:	2312      	movs	r3, #18
 8003212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003218:	2302      	movs	r3, #2
 800321a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800321c:	2304      	movs	r3, #4
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	4619      	mov	r1, r3
 8003226:	481f      	ldr	r0, [pc, #124]	; (80032a4 <I2Cx_MspInit+0xe4>)
 8003228:	f002 fd04 	bl	8005c34 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800322c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003230:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003232:	f107 0314 	add.w	r3, r7, #20
 8003236:	4619      	mov	r1, r3
 8003238:	481b      	ldr	r0, [pc, #108]	; (80032a8 <I2Cx_MspInit+0xe8>)
 800323a:	f002 fcfb 	bl	8005c34 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <I2Cx_MspInit+0xe0>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <I2Cx_MspInit+0xe0>)
 8003248:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <I2Cx_MspInit+0xe0>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <I2Cx_MspInit+0xe0>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <I2Cx_MspInit+0xe0>)
 8003260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003264:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <I2Cx_MspInit+0xe0>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <I2Cx_MspInit+0xe0>)
 800326c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003270:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	210f      	movs	r1, #15
 8003276:	2048      	movs	r0, #72	; 0x48
 8003278:	f001 ff3e 	bl	80050f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800327c:	2048      	movs	r0, #72	; 0x48
 800327e:	f001 ff57 	bl	8005130 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	210f      	movs	r1, #15
 8003286:	2049      	movs	r0, #73	; 0x49
 8003288:	f001 ff36 	bl	80050f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800328c:	2049      	movs	r0, #73	; 0x49
 800328e:	f001 ff4f 	bl	8005130 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003292:	bf00      	nop
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40005c00 	.word	0x40005c00
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40020000 	.word	0x40020000
 80032a8:	40020800 	.word	0x40020800

080032ac <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80032b0:	4814      	ldr	r0, [pc, #80]	; (8003304 <I2Cx_Init+0x58>)
 80032b2:	f004 fdff 	bl	8007eb4 <HAL_I2C_GetState>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d121      	bne.n	8003300 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <I2Cx_Init+0x58>)
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <I2Cx_Init+0x5c>)
 80032c0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <I2Cx_Init+0x58>)
 80032c4:	4a11      	ldr	r2, [pc, #68]	; (800330c <I2Cx_Init+0x60>)
 80032c6:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <I2Cx_Init+0x58>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <I2Cx_Init+0x58>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <I2Cx_Init+0x58>)
 80032d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032da:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <I2Cx_Init+0x58>)
 80032de:	2200      	movs	r2, #0
 80032e0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <I2Cx_Init+0x58>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <I2Cx_Init+0x58>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <I2Cx_Init+0x58>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80032f4:	4803      	ldr	r0, [pc, #12]	; (8003304 <I2Cx_Init+0x58>)
 80032f6:	f7ff ff63 	bl	80031c0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80032fa:	4802      	ldr	r0, [pc, #8]	; (8003304 <I2Cx_Init+0x58>)
 80032fc:	f004 f952 	bl	80075a4 <HAL_I2C_Init>
  }
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	2000069c 	.word	0x2000069c
 8003308:	40005c00 	.word	0x40005c00
 800330c:	000186a0 	.word	0x000186a0

08003310 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <I2Cx_ITConfig+0x58>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <I2Cx_ITConfig+0x58>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <I2Cx_ITConfig+0x58>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003336:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003338:	2301      	movs	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <I2Cx_ITConfig+0x5c>)
 8003342:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	4619      	mov	r1, r3
 8003348:	4809      	ldr	r0, [pc, #36]	; (8003370 <I2Cx_ITConfig+0x60>)
 800334a:	f002 fc73 	bl	8005c34 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800334e:	2200      	movs	r2, #0
 8003350:	210f      	movs	r1, #15
 8003352:	2028      	movs	r0, #40	; 0x28
 8003354:	f001 fed0 	bl	80050f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003358:	2028      	movs	r0, #40	; 0x28
 800335a:	f001 fee9 	bl	8005130 <HAL_NVIC_EnableIRQ>
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	10210000 	.word	0x10210000
 8003370:	40020000 	.word	0x40020000

08003374 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af04      	add	r7, sp, #16
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
 800337e:	460b      	mov	r3, r1
 8003380:	71bb      	strb	r3, [r7, #6]
 8003382:	4613      	mov	r3, r2
 8003384:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	b299      	uxth	r1, r3
 800338e:	79bb      	ldrb	r3, [r7, #6]
 8003390:	b29a      	uxth	r2, r3
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <I2Cx_WriteData+0x4c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	2301      	movs	r3, #1
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	1d7b      	adds	r3, r7, #5
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2301      	movs	r3, #1
 80033a2:	4808      	ldr	r0, [pc, #32]	; (80033c4 <I2Cx_WriteData+0x50>)
 80033a4:	f004 fa66 	bl	8007874 <HAL_I2C_Mem_Write>
 80033a8:	4603      	mov	r3, r0
 80033aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80033b2:	f000 f863 	bl	800347c <I2Cx_Error>
  }        
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000006c 	.word	0x2000006c
 80033c4:	2000069c 	.word	0x2000069c

080033c8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af04      	add	r7, sp, #16
 80033ce:	4603      	mov	r3, r0
 80033d0:	460a      	mov	r2, r1
 80033d2:	71fb      	strb	r3, [r7, #7]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	b299      	uxth	r1, r3
 80033e4:	79bb      	ldrb	r3, [r7, #6]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <I2Cx_ReadData+0x50>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	9302      	str	r3, [sp, #8]
 80033ee:	2301      	movs	r3, #1
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	f107 030e 	add.w	r3, r7, #14
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2301      	movs	r3, #1
 80033fa:	4808      	ldr	r0, [pc, #32]	; (800341c <I2Cx_ReadData+0x54>)
 80033fc:	f004 fb34 	bl	8007a68 <HAL_I2C_Mem_Read>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800340a:	f000 f837 	bl	800347c <I2Cx_Error>
  
  }
  return value;
 800340e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	2000006c 	.word	0x2000006c
 800341c:	2000069c 	.word	0x2000069c

08003420 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af04      	add	r7, sp, #16
 8003426:	603a      	str	r2, [r7, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
 800342e:	460b      	mov	r3, r1
 8003430:	71bb      	strb	r3, [r7, #6]
 8003432:	4613      	mov	r3, r2
 8003434:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	b299      	uxth	r1, r3
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	b29a      	uxth	r2, r3
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <I2Cx_ReadBuffer+0x54>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	9302      	str	r3, [sp, #8]
 8003448:	88bb      	ldrh	r3, [r7, #4]
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2301      	movs	r3, #1
 8003452:	4809      	ldr	r0, [pc, #36]	; (8003478 <I2Cx_ReadBuffer+0x58>)
 8003454:	f004 fb08 	bl	8007a68 <HAL_I2C_Mem_Read>
 8003458:	4603      	mov	r3, r0
 800345a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003462:	2300      	movs	r3, #0
 8003464:	e002      	b.n	800346c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003466:	f000 f809 	bl	800347c <I2Cx_Error>

    return 1;
 800346a:	2301      	movs	r3, #1
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000006c 	.word	0x2000006c
 8003478:	2000069c 	.word	0x2000069c

0800347c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003480:	4803      	ldr	r0, [pc, #12]	; (8003490 <I2Cx_Error+0x14>)
 8003482:	f004 f9c7 	bl	8007814 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003486:	f7ff ff11 	bl	80032ac <I2Cx_Init>
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000069c 	.word	0x2000069c

08003494 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003498:	4819      	ldr	r0, [pc, #100]	; (8003500 <SPIx_Init+0x6c>)
 800349a:	f006 ffbd 	bl	800a418 <HAL_SPI_GetState>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d12b      	bne.n	80034fc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80034a4:	4b16      	ldr	r3, [pc, #88]	; (8003500 <SPIx_Init+0x6c>)
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <SPIx_Init+0x70>)
 80034a8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <SPIx_Init+0x6c>)
 80034ac:	2218      	movs	r2, #24
 80034ae:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80034b0:	4b13      	ldr	r3, [pc, #76]	; (8003500 <SPIx_Init+0x6c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <SPIx_Init+0x6c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <SPIx_Init+0x6c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <SPIx_Init+0x6c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <SPIx_Init+0x6c>)
 80034ca:	2207      	movs	r2, #7
 80034cc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <SPIx_Init+0x6c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <SPIx_Init+0x6c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <SPIx_Init+0x6c>)
 80034dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <SPIx_Init+0x6c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <SPIx_Init+0x6c>)
 80034ea:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034ee:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <SPIx_Init+0x6c>)
 80034f2:	f000 f853 	bl	800359c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80034f6:	4802      	ldr	r0, [pc, #8]	; (8003500 <SPIx_Init+0x6c>)
 80034f8:	f006 fb23 	bl	8009b42 <HAL_SPI_Init>
  } 
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000154 	.word	0x20000154
 8003504:	40015000 	.word	0x40015000

08003508 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	b29a      	uxth	r2, r3
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <SPIx_Read+0x38>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f107 0108 	add.w	r1, r7, #8
 8003522:	4808      	ldr	r0, [pc, #32]	; (8003544 <SPIx_Read+0x3c>)
 8003524:	f006 fccd 	bl	8009ec2 <HAL_SPI_Receive>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003532:	f000 f827 	bl	8003584 <SPIx_Error>
  }
  
  return readvalue;
 8003536:	68bb      	ldr	r3, [r7, #8]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20000070 	.word	0x20000070
 8003544:	20000154 	.word	0x20000154

08003548 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <SPIx_Write+0x34>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	1db9      	adds	r1, r7, #6
 800355c:	2201      	movs	r2, #1
 800355e:	4808      	ldr	r0, [pc, #32]	; (8003580 <SPIx_Write+0x38>)
 8003560:	f006 fb7b 	bl	8009c5a <HAL_SPI_Transmit>
 8003564:	4603      	mov	r3, r0
 8003566:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800356e:	f000 f809 	bl	8003584 <SPIx_Error>
  }
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000070 	.word	0x20000070
 8003580:	20000154 	.word	0x20000154

08003584 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003588:	4803      	ldr	r0, [pc, #12]	; (8003598 <SPIx_Error+0x14>)
 800358a:	f006 fb3e 	bl	8009c0a <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800358e:	f7ff ff81 	bl	8003494 <SPIx_Init>
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000154 	.word	0x20000154

0800359c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <SPIx_MspInit+0x6c>)
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	4a16      	ldr	r2, [pc, #88]	; (8003608 <SPIx_MspInit+0x6c>)
 80035ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b2:	6453      	str	r3, [r2, #68]	; 0x44
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <SPIx_MspInit+0x6c>)
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	4b10      	ldr	r3, [pc, #64]	; (8003608 <SPIx_MspInit+0x6c>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <SPIx_MspInit+0x6c>)
 80035ca:	f043 0320 	orr.w	r3, r3, #32
 80035ce:	6313      	str	r3, [r2, #48]	; 0x30
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <SPIx_MspInit+0x6c>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80035dc:	f44f 7360 	mov.w	r3, #896	; 0x380
 80035e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80035e6:	2302      	movs	r3, #2
 80035e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80035ea:	2301      	movs	r3, #1
 80035ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80035ee:	2305      	movs	r3, #5
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	4804      	ldr	r0, [pc, #16]	; (800360c <SPIx_MspInit+0x70>)
 80035fa:	f002 fb1b 	bl	8005c34 <HAL_GPIO_Init>
}
 80035fe:	bf00      	nop
 8003600:	3728      	adds	r7, #40	; 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	40021400 	.word	0x40021400

08003610 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003616:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <LCD_IO_Init+0xe0>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d164      	bne.n	80036e8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800361e:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <LCD_IO_Init+0xe0>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	4b32      	ldr	r3, [pc, #200]	; (80036f4 <LCD_IO_Init+0xe4>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <LCD_IO_Init+0xe4>)
 800362e:	f043 0308 	orr.w	r3, r3, #8
 8003632:	6313      	str	r3, [r2, #48]	; 0x30
 8003634:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <LCD_IO_Init+0xe4>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003644:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003646:	2301      	movs	r3, #1
 8003648:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800364e:	2302      	movs	r3, #2
 8003650:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003652:	f107 030c 	add.w	r3, r7, #12
 8003656:	4619      	mov	r1, r3
 8003658:	4827      	ldr	r0, [pc, #156]	; (80036f8 <LCD_IO_Init+0xe8>)
 800365a:	f002 faeb 	bl	8005c34 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <LCD_IO_Init+0xe4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <LCD_IO_Init+0xe4>)
 8003668:	f043 0308 	orr.w	r3, r3, #8
 800366c:	6313      	str	r3, [r2, #48]	; 0x30
 800366e:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <LCD_IO_Init+0xe4>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800367a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800367e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003680:	2301      	movs	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003688:	2302      	movs	r3, #2
 800368a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	4619      	mov	r1, r3
 8003692:	4819      	ldr	r0, [pc, #100]	; (80036f8 <LCD_IO_Init+0xe8>)
 8003694:	f002 face 	bl	8005c34 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003698:	2300      	movs	r3, #0
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <LCD_IO_Init+0xe4>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <LCD_IO_Init+0xe4>)
 80036a2:	f043 0304 	orr.w	r3, r3, #4
 80036a6:	6313      	str	r3, [r2, #48]	; 0x30
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <LCD_IO_Init+0xe4>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80036b4:	2304      	movs	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80036b8:	2301      	movs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80036c0:	2302      	movs	r3, #2
 80036c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80036c4:	f107 030c 	add.w	r3, r7, #12
 80036c8:	4619      	mov	r1, r3
 80036ca:	480c      	ldr	r0, [pc, #48]	; (80036fc <LCD_IO_Init+0xec>)
 80036cc:	f002 fab2 	bl	8005c34 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80036d0:	2200      	movs	r2, #0
 80036d2:	2104      	movs	r1, #4
 80036d4:	4809      	ldr	r0, [pc, #36]	; (80036fc <LCD_IO_Init+0xec>)
 80036d6:	f002 fd61 	bl	800619c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80036da:	2201      	movs	r2, #1
 80036dc:	2104      	movs	r1, #4
 80036de:	4807      	ldr	r0, [pc, #28]	; (80036fc <LCD_IO_Init+0xec>)
 80036e0:	f002 fd5c 	bl	800619c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80036e4:	f7ff fed6 	bl	8003494 <SPIx_Init>
  }
}
 80036e8:	bf00      	nop
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	200001ac 	.word	0x200001ac
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40020c00 	.word	0x40020c00
 80036fc:	40020800 	.word	0x40020800

08003700 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800370a:	2201      	movs	r2, #1
 800370c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003710:	480a      	ldr	r0, [pc, #40]	; (800373c <LCD_IO_WriteData+0x3c>)
 8003712:	f002 fd43 	bl	800619c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003716:	2200      	movs	r2, #0
 8003718:	2104      	movs	r1, #4
 800371a:	4809      	ldr	r0, [pc, #36]	; (8003740 <LCD_IO_WriteData+0x40>)
 800371c:	f002 fd3e 	bl	800619c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff ff10 	bl	8003548 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003728:	2201      	movs	r2, #1
 800372a:	2104      	movs	r1, #4
 800372c:	4804      	ldr	r0, [pc, #16]	; (8003740 <LCD_IO_WriteData+0x40>)
 800372e:	f002 fd35 	bl	800619c <HAL_GPIO_WritePin>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40020c00 	.word	0x40020c00
 8003740:	40020800 	.word	0x40020800

08003744 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800374e:	2200      	movs	r2, #0
 8003750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003754:	480a      	ldr	r0, [pc, #40]	; (8003780 <LCD_IO_WriteReg+0x3c>)
 8003756:	f002 fd21 	bl	800619c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800375a:	2200      	movs	r2, #0
 800375c:	2104      	movs	r1, #4
 800375e:	4809      	ldr	r0, [pc, #36]	; (8003784 <LCD_IO_WriteReg+0x40>)
 8003760:	f002 fd1c 	bl	800619c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	b29b      	uxth	r3, r3
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff feed 	bl	8003548 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800376e:	2201      	movs	r2, #1
 8003770:	2104      	movs	r1, #4
 8003772:	4804      	ldr	r0, [pc, #16]	; (8003784 <LCD_IO_WriteReg+0x40>)
 8003774:	f002 fd12 	bl	800619c <HAL_GPIO_WritePin>
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40020c00 	.word	0x40020c00
 8003784:	40020800 	.word	0x40020800

08003788 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	460a      	mov	r2, r1
 8003792:	80fb      	strh	r3, [r7, #6]
 8003794:	4613      	mov	r3, r2
 8003796:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800379c:	2200      	movs	r2, #0
 800379e:	2104      	movs	r1, #4
 80037a0:	4810      	ldr	r0, [pc, #64]	; (80037e4 <LCD_IO_ReadData+0x5c>)
 80037a2:	f002 fcfb 	bl	800619c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80037a6:	2200      	movs	r2, #0
 80037a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037ac:	480e      	ldr	r0, [pc, #56]	; (80037e8 <LCD_IO_ReadData+0x60>)
 80037ae:	f002 fcf5 	bl	800619c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fec7 	bl	8003548 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80037ba:	797b      	ldrb	r3, [r7, #5]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fea3 	bl	8003508 <SPIx_Read>
 80037c2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80037c4:	2201      	movs	r2, #1
 80037c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037ca:	4807      	ldr	r0, [pc, #28]	; (80037e8 <LCD_IO_ReadData+0x60>)
 80037cc:	f002 fce6 	bl	800619c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80037d0:	2201      	movs	r2, #1
 80037d2:	2104      	movs	r1, #4
 80037d4:	4803      	ldr	r0, [pc, #12]	; (80037e4 <LCD_IO_ReadData+0x5c>)
 80037d6:	f002 fce1 	bl	800619c <HAL_GPIO_WritePin>
  
  return readvalue;
 80037da:	68fb      	ldr	r3, [r7, #12]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40020c00 	.word	0x40020c00

080037ec <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f001 fba5 	bl	8004f44 <HAL_Delay>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003802:	b580      	push	{r7, lr}
 8003804:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003806:	f7ff fd51 	bl	80032ac <I2Cx_Init>
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}

0800380e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003812:	f7ff fd7d 	bl	8003310 <I2Cx_ITConfig>
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}

0800381a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	71fb      	strb	r3, [r7, #7]
 8003824:	460b      	mov	r3, r1
 8003826:	71bb      	strb	r3, [r7, #6]
 8003828:	4613      	mov	r3, r2
 800382a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800382c:	797a      	ldrb	r2, [r7, #5]
 800382e:	79b9      	ldrb	r1, [r7, #6]
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fd9e 	bl	8003374 <I2Cx_WriteData>
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	460a      	mov	r2, r1
 800384a:	71fb      	strb	r3, [r7, #7]
 800384c:	4613      	mov	r3, r2
 800384e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003850:	79ba      	ldrb	r2, [r7, #6]
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fdb6 	bl	80033c8 <I2Cx_ReadData>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	603a      	str	r2, [r7, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	4603      	mov	r3, r0
 8003872:	71fb      	strb	r3, [r7, #7]
 8003874:	460b      	mov	r3, r1
 8003876:	71bb      	strb	r3, [r7, #6]
 8003878:	4613      	mov	r3, r2
 800387a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 800387c:	88bb      	ldrh	r3, [r7, #4]
 800387e:	79b9      	ldrb	r1, [r7, #6]
 8003880:	79f8      	ldrb	r0, [r7, #7]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	f7ff fdcc 	bl	8003420 <I2Cx_ReadBuffer>
 8003888:	4603      	mov	r3, r0
 800388a:	b29b      	uxth	r3, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f001 fb51 	bl	8004f44 <HAL_Delay>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80038b0:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038b2:	4a2e      	ldr	r2, [pc, #184]	; (800396c <BSP_LCD_Init+0xc0>)
 80038b4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80038b6:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038b8:	2209      	movs	r2, #9
 80038ba:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038be:	2201      	movs	r2, #1
 80038c0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80038c2:	4b29      	ldr	r3, [pc, #164]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038c4:	221d      	movs	r2, #29
 80038c6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038ca:	2203      	movs	r2, #3
 80038cc:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038d0:	f240 120d 	movw	r2, #269	; 0x10d
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038d8:	f240 1243 	movw	r2, #323	; 0x143
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038e0:	f240 1217 	movw	r2, #279	; 0x117
 80038e4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038e8:	f240 1247 	movw	r2, #327	; 0x147
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <BSP_LCD_Init+0xbc>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <BSP_LCD_Init+0xbc>)
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <BSP_LCD_Init+0xc4>)
 8003908:	2208      	movs	r2, #8
 800390a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <BSP_LCD_Init+0xc4>)
 800390e:	22c0      	movs	r2, #192	; 0xc0
 8003910:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <BSP_LCD_Init+0xc4>)
 8003914:	2204      	movs	r2, #4
 8003916:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003918:	4b15      	ldr	r3, [pc, #84]	; (8003970 <BSP_LCD_Init+0xc4>)
 800391a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800391e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003920:	4813      	ldr	r0, [pc, #76]	; (8003970 <BSP_LCD_Init+0xc4>)
 8003922:	f005 fed1 	bl	80096c8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <BSP_LCD_Init+0xbc>)
 8003928:	2200      	movs	r2, #0
 800392a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <BSP_LCD_Init+0xbc>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <BSP_LCD_Init+0xbc>)
 8003934:	2200      	movs	r2, #0
 8003936:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <BSP_LCD_Init+0xbc>)
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800393e:	f000 fe1b 	bl	8004578 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003942:	4809      	ldr	r0, [pc, #36]	; (8003968 <BSP_LCD_Init+0xbc>)
 8003944:	f004 fe9a 	bl	800867c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <BSP_LCD_Init+0xc8>)
 800394a:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <BSP_LCD_Init+0xcc>)
 800394c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <BSP_LCD_Init+0xc8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003956:	f000 fffd 	bl	8004954 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800395a:	4808      	ldr	r0, [pc, #32]	; (800397c <BSP_LCD_Init+0xd0>)
 800395c:	f000 f90c 	bl	8003b78 <BSP_LCD_SetFont>

  return LCD_OK;
 8003960:	2300      	movs	r3, #0
}  
 8003962:	4618      	mov	r0, r3
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200006f0 	.word	0x200006f0
 800396c:	40016800 	.word	0x40016800
 8003970:	200001f0 	.word	0x200001f0
 8003974:	20000798 	.word	0x20000798
 8003978:	20000004 	.word	0x20000004
 800397c:	20000074 	.word	0x20000074

08003980 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <BSP_LCD_GetXSize+0x14>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
}
 800398e:	4618      	mov	r0, r3
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000798 	.word	0x20000798

08003998 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <BSP_LCD_GetYSize+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4798      	blx	r3
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000798 	.word	0x20000798

080039b0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b090      	sub	sp, #64	; 0x40
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80039c0:	f7ff ffde 	bl	8003980 <BSP_LCD_GetXSize>
 80039c4:	4603      	mov	r3, r0
 80039c6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80039cc:	f7ff ffe4 	bl	8003998 <BSP_LCD_GetYSize>
 80039d0:	4603      	mov	r3, r0
 80039d2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80039dc:	23ff      	movs	r3, #255	; 0xff
 80039de:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80039f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80039fc:	2307      	movs	r3, #7
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003a00:	f7ff ffbe 	bl	8003980 <BSP_LCD_GetXSize>
 8003a04:	4603      	mov	r3, r0
 8003a06:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003a08:	f7ff ffc6 	bl	8003998 <BSP_LCD_GetYSize>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	f107 030c 	add.w	r3, r7, #12
 8003a16:	4619      	mov	r1, r3
 8003a18:	4814      	ldr	r0, [pc, #80]	; (8003a6c <BSP_LCD_LayerDefaultInit+0xbc>)
 8003a1a:	f004 ffc1 	bl	80089a0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	4913      	ldr	r1, [pc, #76]	; (8003a70 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a32:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	490e      	ldr	r1, [pc, #56]	; (8003a70 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3308      	adds	r3, #8
 8003a44:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003a46:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003a48:	88fa      	ldrh	r2, [r7, #6]
 8003a4a:	4909      	ldr	r1, [pc, #36]	; (8003a70 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003a5c:	4803      	ldr	r0, [pc, #12]	; (8003a6c <BSP_LCD_LayerDefaultInit+0xbc>)
 8003a5e:	f004 ffdd 	bl	8008a1c <HAL_LTDC_EnableDither>
}
 8003a62:	bf00      	nop
 8003a64:	3740      	adds	r7, #64	; 0x40
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200006f0 	.word	0x200006f0
 8003a70:	20000224 	.word	0x20000224
 8003a74:	20000074 	.word	0x20000074

08003a78 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003a80:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <BSP_LCD_SelectLayer+0x1c>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000220 	.word	0x20000220

08003a98 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d112      	bne.n	8003ad0 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8003aaa:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <BSP_LCD_SetLayerVisible+0x78>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	01db      	lsls	r3, r3, #7
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3384      	adds	r3, #132	; 0x84
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a15      	ldr	r2, [pc, #84]	; (8003b10 <BSP_LCD_SetLayerVisible+0x78>)
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	01d2      	lsls	r2, r2, #7
 8003ac4:	440a      	add	r2, r1
 8003ac6:	3284      	adds	r2, #132	; 0x84
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e011      	b.n	8003af4 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <BSP_LCD_SetLayerVisible+0x78>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	01db      	lsls	r3, r3, #7
 8003ada:	4413      	add	r3, r2
 8003adc:	3384      	adds	r3, #132	; 0x84
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <BSP_LCD_SetLayerVisible+0x78>)
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	01d2      	lsls	r2, r2, #7
 8003aea:	440a      	add	r2, r1
 8003aec:	3284      	adds	r2, #132	; 0x84
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <BSP_LCD_SetLayerVisible+0x78>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <BSP_LCD_SetLayerVisible+0x78>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	200006f0 	.word	0x200006f0

08003b14 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <BSP_LCD_SetTextColor+0x28>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4907      	ldr	r1, [pc, #28]	; (8003b40 <BSP_LCD_SetTextColor+0x2c>)
 8003b22:	4613      	mov	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	601a      	str	r2, [r3, #0]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20000220 	.word	0x20000220
 8003b40:	20000224 	.word	0x20000224

08003b44 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <BSP_LCD_SetBackColor+0x2c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4908      	ldr	r1, [pc, #32]	; (8003b74 <BSP_LCD_SetBackColor+0x30>)
 8003b52:	4613      	mov	r3, r2
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	601a      	str	r2, [r3, #0]
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000220 	.word	0x20000220
 8003b74:	20000224 	.word	0x20000224

08003b78 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <BSP_LCD_SetFont+0x2c>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <BSP_LCD_SetFont+0x30>)
 8003b86:	4613      	mov	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	3308      	adds	r3, #8
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000220 	.word	0x20000220
 8003ba8:	20000224 	.word	0x20000224

08003bac <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <BSP_LCD_Clear+0x48>)
 8003bb6:	681c      	ldr	r4, [r3, #0]
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <BSP_LCD_Clear+0x48>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <BSP_LCD_Clear+0x4c>)
 8003bbe:	2134      	movs	r1, #52	; 0x34
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	335c      	adds	r3, #92	; 0x5c
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461d      	mov	r5, r3
 8003bcc:	f7ff fed8 	bl	8003980 <BSP_LCD_GetXSize>
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	f7ff fee1 	bl	8003998 <BSP_LCD_GetYSize>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	4632      	mov	r2, r6
 8003be4:	4629      	mov	r1, r5
 8003be6:	4620      	mov	r0, r4
 8003be8:	f000 fe7c 	bl	80048e4 <FillBuffer>
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf4:	20000220 	.word	0x20000220
 8003bf8:	200006f0 	.word	0x200006f0

08003bfc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	80fb      	strh	r3, [r7, #6]
 8003c06:	460b      	mov	r3, r1
 8003c08:	80bb      	strh	r3, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <BSP_LCD_DisplayChar+0x80>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	491b      	ldr	r1, [pc, #108]	; (8003c80 <BSP_LCD_DisplayChar+0x84>)
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3308      	adds	r3, #8
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <BSP_LCD_DisplayChar+0x80>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4c14      	ldr	r4, [pc, #80]	; (8003c80 <BSP_LCD_DisplayChar+0x84>)
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4423      	add	r3, r4
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003c40:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <BSP_LCD_DisplayChar+0x80>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4c0d      	ldr	r4, [pc, #52]	; (8003c80 <BSP_LCD_DisplayChar+0x84>)
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4423      	add	r3, r4
 8003c54:	3308      	adds	r3, #8
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	889b      	ldrh	r3, [r3, #4]
 8003c5a:	3307      	adds	r3, #7
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	da00      	bge.n	8003c62 <BSP_LCD_DisplayChar+0x66>
 8003c60:	3307      	adds	r3, #7
 8003c62:	10db      	asrs	r3, r3, #3
 8003c64:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003c68:	18ca      	adds	r2, r1, r3
 8003c6a:	88b9      	ldrh	r1, [r7, #4]
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fd7e 	bl	8004770 <DrawChar>
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd90      	pop	{r4, r7, pc}
 8003c7c:	20000220 	.word	0x20000220
 8003c80:	20000224 	.word	0x20000224

08003c84 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003c84:	b5b0      	push	{r4, r5, r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60ba      	str	r2, [r7, #8]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	81fb      	strh	r3, [r7, #14]
 8003c92:	460b      	mov	r3, r1
 8003c94:	81bb      	strh	r3, [r7, #12]
 8003c96:	4613      	mov	r3, r2
 8003c98:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	83fb      	strh	r3, [r7, #30]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003cae:	e002      	b.n	8003cb6 <BSP_LCD_DisplayStringAt+0x32>
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	617a      	str	r2, [r7, #20]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f6      	bne.n	8003cb0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003cc2:	f7ff fe5d 	bl	8003980 <BSP_LCD_GetXSize>
 8003cc6:	4b4a      	ldr	r3, [pc, #296]	; (8003df0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	494a      	ldr	r1, [pc, #296]	; (8003df4 <BSP_LCD_DisplayStringAt+0x170>)
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	889b      	ldrh	r3, [r3, #4]
 8003cdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce0:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d01c      	beq.n	8003d22 <BSP_LCD_DisplayStringAt+0x9e>
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d017      	beq.n	8003d1c <BSP_LCD_DisplayStringAt+0x98>
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d12e      	bne.n	8003d4e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	1ad1      	subs	r1, r2, r3
 8003cf6:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	483e      	ldr	r0, [pc, #248]	; (8003df4 <BSP_LCD_DisplayStringAt+0x170>)
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4403      	add	r3, r0
 8003d06:	3308      	adds	r3, #8
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	889b      	ldrh	r3, [r3, #4]
 8003d0c:	fb03 f301 	mul.w	r3, r3, r1
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	4413      	add	r3, r2
 8003d18:	83fb      	strh	r3, [r7, #30]
      break;
 8003d1a:	e01b      	b.n	8003d54 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003d1c:	89fb      	ldrh	r3, [r7, #14]
 8003d1e:	83fb      	strh	r3, [r7, #30]
      break;
 8003d20:	e018      	b.n	8003d54 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	b299      	uxth	r1, r3
 8003d2a:	4b31      	ldr	r3, [pc, #196]	; (8003df0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4831      	ldr	r0, [pc, #196]	; (8003df4 <BSP_LCD_DisplayStringAt+0x170>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	889b      	ldrh	r3, [r3, #4]
 8003d40:	fb11 f303 	smulbb	r3, r1, r3
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	89fb      	ldrh	r3, [r7, #14]
 8003d48:	4413      	add	r3, r2
 8003d4a:	83fb      	strh	r3, [r7, #30]
      break;
 8003d4c:	e002      	b.n	8003d54 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8003d4e:	89fb      	ldrh	r3, [r7, #14]
 8003d50:	83fb      	strh	r3, [r7, #30]
      break;
 8003d52:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003d54:	e01a      	b.n	8003d8c <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	89b9      	ldrh	r1, [r7, #12]
 8003d5c:	8bfb      	ldrh	r3, [r7, #30]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ff4c 	bl	8003bfc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003d64:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4922      	ldr	r1, [pc, #136]	; (8003df4 <BSP_LCD_DisplayStringAt+0x170>)
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3308      	adds	r3, #8
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	889a      	ldrh	r2, [r3, #4]
 8003d7a:	8bfb      	ldrh	r3, [r7, #30]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60bb      	str	r3, [r7, #8]
    i++;
 8003d86:	8bbb      	ldrh	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2dc      	uxtb	r4, r3
 8003d9a:	f7ff fdf1 	bl	8003980 <BSP_LCD_GetXSize>
 8003d9e:	4605      	mov	r5, r0
 8003da0:	8bb9      	ldrh	r1, [r7, #28]
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4813      	ldr	r0, [pc, #76]	; (8003df4 <BSP_LCD_DisplayStringAt+0x170>)
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4403      	add	r3, r0
 8003db2:	3308      	adds	r3, #8
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	889b      	ldrh	r3, [r3, #4]
 8003db8:	fb03 f301 	mul.w	r3, r3, r1
 8003dbc:	1aeb      	subs	r3, r5, r3
 8003dbe:	b299      	uxth	r1, r3
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <BSP_LCD_DisplayStringAt+0x16c>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	480b      	ldr	r0, [pc, #44]	; (8003df4 <BSP_LCD_DisplayStringAt+0x170>)
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4403      	add	r3, r0
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	889b      	ldrh	r3, [r3, #4]
 8003dd6:	4299      	cmp	r1, r3
 8003dd8:	bf2c      	ite	cs
 8003dda:	2301      	movcs	r3, #1
 8003ddc:	2300      	movcc	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	4023      	ands	r3, r4
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1b6      	bne.n	8003d56 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8003de8:	bf00      	nop
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bdb0      	pop	{r4, r5, r7, pc}
 8003df0:	20000220 	.word	0x20000220
 8003df4:	20000224 	.word	0x20000224

08003df8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003df8:	b5b0      	push	{r4, r5, r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	4603      	mov	r3, r0
 8003e00:	80fb      	strh	r3, [r7, #6]
 8003e02:	460b      	mov	r3, r1
 8003e04:	80bb      	strh	r3, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003e0e:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <BSP_LCD_DrawHLine+0x70>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a16      	ldr	r2, [pc, #88]	; (8003e6c <BSP_LCD_DrawHLine+0x74>)
 8003e14:	2134      	movs	r1, #52	; 0x34
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	335c      	adds	r3, #92	; 0x5c
 8003e1e:	681c      	ldr	r4, [r3, #0]
 8003e20:	f7ff fdae 	bl	8003980 <BSP_LCD_GetXSize>
 8003e24:	4602      	mov	r2, r0
 8003e26:	88bb      	ldrh	r3, [r7, #4]
 8003e28:	fb03 f202 	mul.w	r2, r3, r2
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4423      	add	r3, r4
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <BSP_LCD_DrawHLine+0x70>)
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	68fc      	ldr	r4, [r7, #12]
 8003e3c:	887d      	ldrh	r5, [r7, #2]
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <BSP_LCD_DrawHLine+0x70>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	490b      	ldr	r1, [pc, #44]	; (8003e70 <BSP_LCD_DrawHLine+0x78>)
 8003e44:	4613      	mov	r3, r2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	2300      	movs	r3, #0
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	2301      	movs	r3, #1
 8003e58:	462a      	mov	r2, r5
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	f000 fd42 	bl	80048e4 <FillBuffer>
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bdb0      	pop	{r4, r5, r7, pc}
 8003e68:	20000220 	.word	0x20000220
 8003e6c:	200006f0 	.word	0x200006f0
 8003e70:	20000224 	.word	0x20000224

08003e74 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b08b      	sub	sp, #44	; 0x2c
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	80fb      	strh	r3, [r7, #6]
 8003e86:	4603      	mov	r3, r0
 8003e88:	80bb      	strh	r3, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	807b      	strh	r3, [r7, #2]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003e92:	2300      	movs	r3, #0
 8003e94:	823b      	strh	r3, [r7, #16]
 8003e96:	2300      	movs	r3, #0
 8003e98:	81fb      	strh	r3, [r7, #14]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003eaa:	2300      	movs	r3, #0
 8003eac:	83fb      	strh	r3, [r7, #30]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	83bb      	strh	r3, [r7, #28]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	837b      	strh	r3, [r7, #26]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	833b      	strh	r3, [r7, #24]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	82fb      	strh	r3, [r7, #22]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bfb8      	it	lt
 8003ed0:	425b      	neglt	r3, r3
 8003ed2:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003ed4:	883a      	ldrh	r2, [r7, #0]
 8003ed6:	88bb      	ldrh	r3, [r7, #4]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bfb8      	it	lt
 8003ede:	425b      	neglt	r3, r3
 8003ee0:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003ee6:	88bb      	ldrh	r3, [r7, #4]
 8003ee8:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d304      	bcc.n	8003efc <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	843b      	strh	r3, [r7, #32]
 8003efa:	e005      	b.n	8003f08 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f00:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f06:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003f08:	883a      	ldrh	r2, [r7, #0]
 8003f0a:	88bb      	ldrh	r3, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d304      	bcc.n	8003f1a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	83bb      	strh	r3, [r7, #28]
 8003f18:	e005      	b.n	8003f26 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f1e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f24:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003f26:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003f2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	db10      	blt.n	8003f54 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003f32:	2300      	movs	r3, #0
 8003f34:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003f36:	2300      	movs	r3, #0
 8003f38:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003f3a:	8a3b      	ldrh	r3, [r7, #16]
 8003f3c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003f3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f42:	0fda      	lsrs	r2, r3, #31
 8003f44:	4413      	add	r3, r2
 8003f46:	105b      	asrs	r3, r3, #1
 8003f48:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003f4a:	89fb      	ldrh	r3, [r7, #14]
 8003f4c:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003f4e:	8a3b      	ldrh	r3, [r7, #16]
 8003f50:	82bb      	strh	r3, [r7, #20]
 8003f52:	e00f      	b.n	8003f74 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003f54:	2300      	movs	r3, #0
 8003f56:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003f5c:	89fb      	ldrh	r3, [r7, #14]
 8003f5e:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003f60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f64:	0fda      	lsrs	r2, r3, #31
 8003f66:	4413      	add	r3, r2
 8003f68:	105b      	asrs	r3, r3, #1
 8003f6a:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003f6c:	8a3b      	ldrh	r3, [r7, #16]
 8003f6e:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003f74:	2300      	movs	r3, #0
 8003f76:	827b      	strh	r3, [r7, #18]
 8003f78:	e038      	b.n	8003fec <BSP_LCD_DrawLine+0x178>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003f7a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003f7c:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <BSP_LCD_DrawLine+0x18c>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4920      	ldr	r1, [pc, #128]	; (8004004 <BSP_LCD_DrawLine+0x190>)
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4621      	mov	r1, r4
 8003f94:	f000 fbc6 	bl	8004724 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003f98:	8b3a      	ldrh	r2, [r7, #24]
 8003f9a:	8afb      	ldrh	r3, [r7, #22]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003fa2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003fa6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	db0e      	blt.n	8003fcc <BSP_LCD_DrawLine+0x158>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003fae:	8b3a      	ldrh	r2, [r7, #24]
 8003fb0:	8b7b      	ldrh	r3, [r7, #26]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003fb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003fba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fbc:	4413      	add	r3, r2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fc4:	8bfb      	ldrh	r3, [r7, #30]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003fcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003fce:	8c3b      	ldrh	r3, [r7, #32]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fd8:	8bbb      	ldrh	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003fe0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	827b      	strh	r3, [r7, #18]
 8003fec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003ff0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	ddc0      	ble.n	8003f7a <BSP_LCD_DrawLine+0x106>
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	372c      	adds	r7, #44	; 0x2c
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd90      	pop	{r4, r7, pc}
 8004000:	20000220 	.word	0x20000220
 8004004:	20000224 	.word	0x20000224

08004008 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	80fb      	strh	r3, [r7, #6]
 8004012:	460b      	mov	r3, r1
 8004014:	80bb      	strh	r3, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	f1c3 0303 	rsb	r3, r3, #3
 8004022:	617b      	str	r3, [r7, #20]
  curx = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8004028:	887b      	ldrh	r3, [r7, #2]
 800402a:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 800402c:	e0cf      	b.n	80041ce <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	b29a      	uxth	r2, r3
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	4413      	add	r3, r2
 8004036:	b298      	uxth	r0, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	b29b      	uxth	r3, r3
 800403c:	88ba      	ldrh	r2, [r7, #4]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	b29c      	uxth	r4, r3
 8004042:	4b67      	ldr	r3, [pc, #412]	; (80041e0 <BSP_LCD_DrawCircle+0x1d8>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4967      	ldr	r1, [pc, #412]	; (80041e4 <BSP_LCD_DrawCircle+0x1dc>)
 8004048:	4613      	mov	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	4621      	mov	r1, r4
 8004058:	f000 fb64 	bl	8004724 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	b29b      	uxth	r3, r3
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	b298      	uxth	r0, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	b29b      	uxth	r3, r3
 800406a:	88ba      	ldrh	r2, [r7, #4]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	b29c      	uxth	r4, r3
 8004070:	4b5b      	ldr	r3, [pc, #364]	; (80041e0 <BSP_LCD_DrawCircle+0x1d8>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	495b      	ldr	r1, [pc, #364]	; (80041e4 <BSP_LCD_DrawCircle+0x1dc>)
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4621      	mov	r1, r4
 8004086:	f000 fb4d 	bl	8004724 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	b29a      	uxth	r2, r3
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	4413      	add	r3, r2
 8004092:	b298      	uxth	r0, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	b29b      	uxth	r3, r3
 8004098:	88ba      	ldrh	r2, [r7, #4]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	b29c      	uxth	r4, r3
 800409e:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <BSP_LCD_DrawCircle+0x1d8>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4950      	ldr	r1, [pc, #320]	; (80041e4 <BSP_LCD_DrawCircle+0x1dc>)
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	4621      	mov	r1, r4
 80040b4:	f000 fb36 	bl	8004724 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	b298      	uxth	r0, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	88ba      	ldrh	r2, [r7, #4]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	b29c      	uxth	r4, r3
 80040cc:	4b44      	ldr	r3, [pc, #272]	; (80041e0 <BSP_LCD_DrawCircle+0x1d8>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4944      	ldr	r1, [pc, #272]	; (80041e4 <BSP_LCD_DrawCircle+0x1dc>)
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	4621      	mov	r1, r4
 80040e2:	f000 fb1f 	bl	8004724 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	4413      	add	r3, r2
 80040ee:	b298      	uxth	r0, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	88bb      	ldrh	r3, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	b29c      	uxth	r4, r3
 80040fa:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <BSP_LCD_DrawCircle+0x1d8>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4939      	ldr	r1, [pc, #228]	; (80041e4 <BSP_LCD_DrawCircle+0x1dc>)
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	4621      	mov	r1, r4
 8004110:	f000 fb08 	bl	8004724 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	b29b      	uxth	r3, r3
 8004118:	88fa      	ldrh	r2, [r7, #6]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	b298      	uxth	r0, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	b29a      	uxth	r2, r3
 8004122:	88bb      	ldrh	r3, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	b29c      	uxth	r4, r3
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <BSP_LCD_DrawCircle+0x1d8>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	492d      	ldr	r1, [pc, #180]	; (80041e4 <BSP_LCD_DrawCircle+0x1dc>)
 800412e:	4613      	mov	r3, r2
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	4621      	mov	r1, r4
 800413e:	f000 faf1 	bl	8004724 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	b29a      	uxth	r2, r3
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	4413      	add	r3, r2
 800414a:	b298      	uxth	r0, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	b29a      	uxth	r2, r3
 8004150:	88bb      	ldrh	r3, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	b29c      	uxth	r4, r3
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <BSP_LCD_DrawCircle+0x1d8>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4922      	ldr	r1, [pc, #136]	; (80041e4 <BSP_LCD_DrawCircle+0x1dc>)
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	4621      	mov	r1, r4
 800416c:	f000 fada 	bl	8004724 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	b29b      	uxth	r3, r3
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	b298      	uxth	r0, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	b29a      	uxth	r2, r3
 800417e:	88bb      	ldrh	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	b29c      	uxth	r4, r3
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <BSP_LCD_DrawCircle+0x1d8>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4916      	ldr	r1, [pc, #88]	; (80041e4 <BSP_LCD_DrawCircle+0x1dc>)
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4621      	mov	r1, r4
 800419a:	f000 fac3 	bl	8004724 <BSP_LCD_DrawPixel>

    if (d < 0)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	da06      	bge.n	80041b2 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	009a      	lsls	r2, r3, #2
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4413      	add	r3, r2
 80041ac:	3306      	adds	r3, #6
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e00a      	b.n	80041c8 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	009a      	lsls	r2, r3, #2
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	330a      	adds	r3, #10
 80041c0:	617b      	str	r3, [r7, #20]
      cury--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	3301      	adds	r3, #1
 80041cc:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	f67f af2b 	bls.w	800402e <BSP_LCD_DrawCircle+0x26>
  } 
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd90      	pop	{r4, r7, pc}
 80041e0:	20000220 	.word	0x20000220
 80041e4:	20000224 	.word	0x20000224

080041e8 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80041e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af02      	add	r7, sp, #8
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	461a      	mov	r2, r3
 80041f8:	4623      	mov	r3, r4
 80041fa:	80fb      	strh	r3, [r7, #6]
 80041fc:	4603      	mov	r3, r0
 80041fe:	80bb      	strh	r3, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
 8004204:	4613      	mov	r3, r2
 8004206:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800420c:	4b20      	ldr	r3, [pc, #128]	; (8004290 <BSP_LCD_FillRect+0xa8>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4920      	ldr	r1, [pc, #128]	; (8004294 <BSP_LCD_FillRect+0xac>)
 8004212:	4613      	mov	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fc78 	bl	8003b14 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <BSP_LCD_FillRect+0xa8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <BSP_LCD_FillRect+0xb0>)
 800422a:	2134      	movs	r1, #52	; 0x34
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	335c      	adds	r3, #92	; 0x5c
 8004234:	681c      	ldr	r4, [r3, #0]
 8004236:	f7ff fba3 	bl	8003980 <BSP_LCD_GetXSize>
 800423a:	4602      	mov	r2, r0
 800423c:	88bb      	ldrh	r3, [r7, #4]
 800423e:	fb03 f202 	mul.w	r2, r3, r2
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4423      	add	r3, r4
 800424a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800424c:	4b10      	ldr	r3, [pc, #64]	; (8004290 <BSP_LCD_FillRect+0xa8>)
 800424e:	681c      	ldr	r4, [r3, #0]
 8004250:	68fd      	ldr	r5, [r7, #12]
 8004252:	887e      	ldrh	r6, [r7, #2]
 8004254:	f8b7 8000 	ldrh.w	r8, [r7]
 8004258:	f7ff fb92 	bl	8003980 <BSP_LCD_GetXSize>
 800425c:	4602      	mov	r2, r0
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	1ad1      	subs	r1, r2, r3
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <BSP_LCD_FillRect+0xa8>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	480b      	ldr	r0, [pc, #44]	; (8004294 <BSP_LCD_FillRect+0xac>)
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4403      	add	r3, r0
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	9100      	str	r1, [sp, #0]
 8004278:	4643      	mov	r3, r8
 800427a:	4632      	mov	r2, r6
 800427c:	4629      	mov	r1, r5
 800427e:	4620      	mov	r0, r4
 8004280:	f000 fb30 	bl	80048e4 <FillBuffer>
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800428e:	bf00      	nop
 8004290:	20000220 	.word	0x20000220
 8004294:	20000224 	.word	0x20000224
 8004298:	200006f0 	.word	0x200006f0

0800429c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	80fb      	strh	r3, [r7, #6]
 80042a6:	460b      	mov	r3, r1
 80042a8:	80bb      	strh	r3, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80042ae:	887b      	ldrh	r3, [r7, #2]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	f1c3 0303 	rsb	r3, r3, #3
 80042b6:	617b      	str	r3, [r7, #20]

  curx = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80042bc:	887b      	ldrh	r3, [r7, #2]
 80042be:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80042c0:	4b44      	ldr	r3, [pc, #272]	; (80043d4 <BSP_LCD_FillCircle+0x138>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4944      	ldr	r1, [pc, #272]	; (80043d8 <BSP_LCD_FillCircle+0x13c>)
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fc1e 	bl	8003b14 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80042d8:	e061      	b.n	800439e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d021      	beq.n	8004324 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	88fa      	ldrh	r2, [r7, #6]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	b298      	uxth	r0, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	88bb      	ldrh	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	b299      	uxth	r1, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	f7ff fd7b 	bl	8003df8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	b29b      	uxth	r3, r3
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	b298      	uxth	r0, r3
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	b29b      	uxth	r3, r3
 8004310:	88ba      	ldrh	r2, [r7, #4]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	b299      	uxth	r1, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	b29b      	uxth	r3, r3
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	f7ff fd6a 	bl	8003df8 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d021      	beq.n	800436e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	b29b      	uxth	r3, r3
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	b298      	uxth	r0, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	b29b      	uxth	r3, r3
 8004338:	88ba      	ldrh	r2, [r7, #4]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	b299      	uxth	r1, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	b29b      	uxth	r3, r3
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	b29b      	uxth	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	f7ff fd56 	bl	8003df8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	b29b      	uxth	r3, r3
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	b298      	uxth	r0, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	b29a      	uxth	r2, r3
 800435a:	88bb      	ldrh	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	b299      	uxth	r1, r3
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	b29b      	uxth	r3, r3
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	f7ff fd45 	bl	8003df8 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	da06      	bge.n	8004382 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	009a      	lsls	r2, r3, #2
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4413      	add	r3, r2
 800437c:	3306      	adds	r3, #6
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e00a      	b.n	8004398 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	009a      	lsls	r2, r3, #2
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4413      	add	r3, r2
 800438e:	330a      	adds	r3, #10
 8004390:	617b      	str	r3, [r7, #20]
      cury--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b01      	subs	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3301      	adds	r3, #1
 800439c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d999      	bls.n	80042da <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <BSP_LCD_FillCircle+0x138>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	490b      	ldr	r1, [pc, #44]	; (80043d8 <BSP_LCD_FillCircle+0x13c>)
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fbab 	bl	8003b14 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	88b9      	ldrh	r1, [r7, #4]
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fe1f 	bl	8004008 <BSP_LCD_DrawCircle>
}
 80043ca:	bf00      	nop
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000220 	.word	0x20000220
 80043d8:	20000224 	.word	0x20000224

080043dc <BSP_LCD_FillTriangle>:
  * @param  Y2: the point 2 y position
  * @param  X3: the point 3 x position
  * @param  Y3: the point 3 y position
  */
void BSP_LCD_FillTriangle(uint16_t X1, uint16_t X2, uint16_t X3, uint16_t Y1, uint16_t Y2, uint16_t Y3)
{ 
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b08b      	sub	sp, #44	; 0x2c
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4604      	mov	r4, r0
 80043e4:	4608      	mov	r0, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	461a      	mov	r2, r3
 80043ea:	4623      	mov	r3, r4
 80043ec:	80fb      	strh	r3, [r7, #6]
 80043ee:	4603      	mov	r3, r0
 80043f0:	80bb      	strh	r3, [r7, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	807b      	strh	r3, [r7, #2]
 80043f6:	4613      	mov	r3, r2
 80043f8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80043fa:	2300      	movs	r3, #0
 80043fc:	823b      	strh	r3, [r7, #16]
 80043fe:	2300      	movs	r3, #0
 8004400:	81fb      	strh	r3, [r7, #14]
 8004402:	2300      	movs	r3, #0
 8004404:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004406:	2300      	movs	r3, #0
 8004408:	84bb      	strh	r3, [r7, #36]	; 0x24
 800440a:	2300      	movs	r3, #0
 800440c:	847b      	strh	r3, [r7, #34]	; 0x22
 800440e:	2300      	movs	r3, #0
 8004410:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8004412:	2300      	movs	r3, #0
 8004414:	83fb      	strh	r3, [r7, #30]
 8004416:	2300      	movs	r3, #0
 8004418:	83bb      	strh	r3, [r7, #28]
 800441a:	2300      	movs	r3, #0
 800441c:	837b      	strh	r3, [r7, #26]
 800441e:	2300      	movs	r3, #0
 8004420:	833b      	strh	r3, [r7, #24]
 8004422:	2300      	movs	r3, #0
 8004424:	82fb      	strh	r3, [r7, #22]
 8004426:	2300      	movs	r3, #0
 8004428:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800442e:	88ba      	ldrh	r2, [r7, #4]
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	bfb8      	it	lt
 8004438:	425b      	neglt	r3, r3
 800443a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 800443c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800443e:	883b      	ldrh	r3, [r7, #0]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	bfb8      	it	lt
 8004446:	425b      	neglt	r3, r3
 8004448:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 800444e:	883b      	ldrh	r3, [r7, #0]
 8004450:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8004452:	88ba      	ldrh	r2, [r7, #4]
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	429a      	cmp	r2, r3
 8004458:	d304      	bcc.n	8004464 <BSP_LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800445e:	2301      	movs	r3, #1
 8004460:	843b      	strh	r3, [r7, #32]
 8004462:	e005      	b.n	8004470 <BSP_LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004468:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800446a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800446e:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8004470:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004472:	883b      	ldrh	r3, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d304      	bcc.n	8004482 <BSP_LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8004478:	2301      	movs	r3, #1
 800447a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800447c:	2301      	movs	r3, #1
 800447e:	83bb      	strh	r3, [r7, #28]
 8004480:	e005      	b.n	800448e <BSP_LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8004482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004486:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8004488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800448c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800448e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004496:	429a      	cmp	r2, r3
 8004498:	db10      	blt.n	80044bc <BSP_LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800449a:	2300      	movs	r3, #0
 800449c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800449e:	2300      	movs	r3, #0
 80044a0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80044a2:	8a3b      	ldrh	r3, [r7, #16]
 80044a4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80044a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044aa:	0fda      	lsrs	r2, r3, #31
 80044ac:	4413      	add	r3, r2
 80044ae:	105b      	asrs	r3, r3, #1
 80044b0:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80044b2:	89fb      	ldrh	r3, [r7, #14]
 80044b4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80044b6:	8a3b      	ldrh	r3, [r7, #16]
 80044b8:	82bb      	strh	r3, [r7, #20]
 80044ba:	e00f      	b.n	80044dc <BSP_LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80044bc:	2300      	movs	r3, #0
 80044be:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80044c0:	2300      	movs	r3, #0
 80044c2:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80044c4:	89fb      	ldrh	r3, [r7, #14]
 80044c6:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80044c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044cc:	0fda      	lsrs	r2, r3, #31
 80044ce:	4413      	add	r3, r2
 80044d0:	105b      	asrs	r3, r3, #1
 80044d2:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80044d4:	8a3b      	ldrh	r3, [r7, #16]
 80044d6:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80044d8:	89fb      	ldrh	r3, [r7, #14]
 80044da:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80044dc:	2300      	movs	r3, #0
 80044de:	827b      	strh	r3, [r7, #18]
 80044e0:	e02f      	b.n	8004542 <BSP_LCD_FillTriangle+0x166>
  {
    BSP_LCD_DrawLine(x, y, X3, Y3);
 80044e2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80044e4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80044e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80044e8:	887a      	ldrh	r2, [r7, #2]
 80044ea:	f7ff fcc3 	bl	8003e74 <BSP_LCD_DrawLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 80044ee:	8b3a      	ldrh	r2, [r7, #24]
 80044f0:	8afb      	ldrh	r3, [r7, #22]
 80044f2:	4413      	add	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80044f8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80044fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004500:	429a      	cmp	r2, r3
 8004502:	db0e      	blt.n	8004522 <BSP_LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 8004504:	8b3a      	ldrh	r2, [r7, #24]
 8004506:	8b7b      	ldrh	r3, [r7, #26]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	b29b      	uxth	r3, r3
 800450c:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 800450e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004510:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004512:	4413      	add	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8004518:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800451a:	8bfb      	ldrh	r3, [r7, #30]
 800451c:	4413      	add	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8004522:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004524:	8c3b      	ldrh	r3, [r7, #32]
 8004526:	4413      	add	r3, r2
 8004528:	b29b      	uxth	r3, r3
 800452a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 800452c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800452e:	8bbb      	ldrh	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004536:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800453a:	b29b      	uxth	r3, r3
 800453c:	3301      	adds	r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	827b      	strh	r3, [r7, #18]
 8004542:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004546:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800454a:	429a      	cmp	r2, r3
 800454c:	ddc9      	ble.n	80044e2 <BSP_LCD_FillTriangle+0x106>
  } 
}
 800454e:	bf00      	nop
 8004550:	372c      	adds	r7, #44	; 0x2c
 8004552:	46bd      	mov	sp, r7
 8004554:	bd90      	pop	{r4, r7, pc}
	...

08004558 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <BSP_LCD_DisplayOn+0x1c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004566:	4b03      	ldr	r3, [pc, #12]	; (8004574 <BSP_LCD_DisplayOn+0x1c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4798      	blx	r3
  }
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000798 	.word	0x20000798

08004578 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08e      	sub	sp, #56	; 0x38
 800457c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
 8004582:	4b61      	ldr	r3, [pc, #388]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	4a60      	ldr	r2, [pc, #384]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004588:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800458c:	6453      	str	r3, [r2, #68]	; 0x44
 800458e:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004596:	623b      	str	r3, [r7, #32]
 8004598:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	4b5a      	ldr	r3, [pc, #360]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	4a59      	ldr	r2, [pc, #356]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045a8:	6313      	str	r3, [r2, #48]	; 0x30
 80045aa:	4b57      	ldr	r3, [pc, #348]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	4b53      	ldr	r3, [pc, #332]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	4a52      	ldr	r2, [pc, #328]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6313      	str	r3, [r2, #48]	; 0x30
 80045c6:	4b50      	ldr	r3, [pc, #320]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	4b4c      	ldr	r3, [pc, #304]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a4b      	ldr	r2, [pc, #300]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b49      	ldr	r3, [pc, #292]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	4b45      	ldr	r3, [pc, #276]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	4a44      	ldr	r2, [pc, #272]	; (8004708 <BSP_LCD_MspInit+0x190>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6313      	str	r3, [r2, #48]	; 0x30
 80045fe:	4b42      	ldr	r3, [pc, #264]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	4b3e      	ldr	r3, [pc, #248]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	4a3d      	ldr	r2, [pc, #244]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004614:	f043 0308 	orr.w	r3, r3, #8
 8004618:	6313      	str	r3, [r2, #48]	; 0x30
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <BSP_LCD_MspInit+0x190>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <BSP_LCD_MspInit+0x190>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	4a36      	ldr	r2, [pc, #216]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004630:	f043 0320 	orr.w	r3, r3, #32
 8004634:	6313      	str	r3, [r2, #48]	; 0x30
 8004636:	4b34      	ldr	r3, [pc, #208]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	4b30      	ldr	r3, [pc, #192]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a2f      	ldr	r2, [pc, #188]	; (8004708 <BSP_LCD_MspInit+0x190>)
 800464c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <BSP_LCD_MspInit+0x190>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800465e:	f641 0358 	movw	r3, #6232	; 0x1858
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004664:	2302      	movs	r3, #2
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800466c:	2302      	movs	r3, #2
 800466e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004670:	230e      	movs	r3, #14
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004678:	4619      	mov	r1, r3
 800467a:	4824      	ldr	r0, [pc, #144]	; (800470c <BSP_LCD_MspInit+0x194>)
 800467c:	f001 fada 	bl	8005c34 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004680:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468a:	4619      	mov	r1, r3
 800468c:	4820      	ldr	r0, [pc, #128]	; (8004710 <BSP_LCD_MspInit+0x198>)
 800468e:	f001 fad1 	bl	8005c34 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004692:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800469c:	4619      	mov	r1, r3
 800469e:	481d      	ldr	r0, [pc, #116]	; (8004714 <BSP_LCD_MspInit+0x19c>)
 80046a0:	f001 fac8 	bl	8005c34 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80046a4:	2348      	movs	r3, #72	; 0x48
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80046a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ac:	4619      	mov	r1, r3
 80046ae:	481a      	ldr	r0, [pc, #104]	; (8004718 <BSP_LCD_MspInit+0x1a0>)
 80046b0:	f001 fac0 	bl	8005c34 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80046b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80046ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046be:	4619      	mov	r1, r3
 80046c0:	4816      	ldr	r0, [pc, #88]	; (800471c <BSP_LCD_MspInit+0x1a4>)
 80046c2:	f001 fab7 	bl	8005c34 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80046c6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80046cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d0:	4619      	mov	r1, r3
 80046d2:	4813      	ldr	r0, [pc, #76]	; (8004720 <BSP_LCD_MspInit+0x1a8>)
 80046d4:	f001 faae 	bl	8005c34 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80046d8:	2303      	movs	r3, #3
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80046dc:	2309      	movs	r3, #9
 80046de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80046e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e4:	4619      	mov	r1, r3
 80046e6:	480a      	ldr	r0, [pc, #40]	; (8004710 <BSP_LCD_MspInit+0x198>)
 80046e8:	f001 faa4 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80046ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80046f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f6:	4619      	mov	r1, r3
 80046f8:	4809      	ldr	r0, [pc, #36]	; (8004720 <BSP_LCD_MspInit+0x1a8>)
 80046fa:	f001 fa9b 	bl	8005c34 <HAL_GPIO_Init>
}
 80046fe:	bf00      	nop
 8004700:	3738      	adds	r7, #56	; 0x38
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800
 800470c:	40020000 	.word	0x40020000
 8004710:	40020400 	.word	0x40020400
 8004714:	40020800 	.word	0x40020800
 8004718:	40020c00 	.word	0x40020c00
 800471c:	40021400 	.word	0x40021400
 8004720:	40021800 	.word	0x40021800

08004724 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004724:	b5b0      	push	{r4, r5, r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	603a      	str	r2, [r7, #0]
 800472e:	80fb      	strh	r3, [r7, #6]
 8004730:	460b      	mov	r3, r1
 8004732:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <BSP_LCD_DrawPixel+0x44>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a0c      	ldr	r2, [pc, #48]	; (800476c <BSP_LCD_DrawPixel+0x48>)
 800473a:	2134      	movs	r1, #52	; 0x34
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	4413      	add	r3, r2
 8004742:	335c      	adds	r3, #92	; 0x5c
 8004744:	681c      	ldr	r4, [r3, #0]
 8004746:	88bd      	ldrh	r5, [r7, #4]
 8004748:	f7ff f91a 	bl	8003980 <BSP_LCD_GetXSize>
 800474c:	4603      	mov	r3, r0
 800474e:	fb03 f205 	mul.w	r2, r3, r5
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4423      	add	r3, r4
 800475a:	461a      	mov	r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6013      	str	r3, [r2, #0]
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bdb0      	pop	{r4, r5, r7, pc}
 8004768:	20000220 	.word	0x20000220
 800476c:	200006f0 	.word	0x200006f0

08004770 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	603a      	str	r2, [r7, #0]
 800477a:	80fb      	strh	r3, [r7, #6]
 800477c:	460b      	mov	r3, r1
 800477e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	2300      	movs	r3, #0
 8004786:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <DrawChar+0x16c>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4953      	ldr	r1, [pc, #332]	; (80048e0 <DrawChar+0x170>)
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	3308      	adds	r3, #8
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	88db      	ldrh	r3, [r3, #6]
 80047a2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80047a4:	4b4d      	ldr	r3, [pc, #308]	; (80048dc <DrawChar+0x16c>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	494d      	ldr	r1, [pc, #308]	; (80048e0 <DrawChar+0x170>)
 80047aa:	4613      	mov	r3, r2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	3308      	adds	r3, #8
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	889b      	ldrh	r3, [r3, #4]
 80047ba:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80047bc:	8a3b      	ldrh	r3, [r7, #16]
 80047be:	3307      	adds	r3, #7
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	da00      	bge.n	80047c6 <DrawChar+0x56>
 80047c4:	3307      	adds	r3, #7
 80047c6:	10db      	asrs	r3, r3, #3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	8a3b      	ldrh	r3, [r7, #16]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e076      	b.n	80048ca <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80047dc:	8a3b      	ldrh	r3, [r7, #16]
 80047de:	3307      	adds	r3, #7
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	da00      	bge.n	80047e6 <DrawChar+0x76>
 80047e4:	3307      	adds	r3, #7
 80047e6:	10db      	asrs	r3, r3, #3
 80047e8:	461a      	mov	r2, r3
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	fb03 f302 	mul.w	r3, r3, r2
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	4413      	add	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80047f6:	8a3b      	ldrh	r3, [r7, #16]
 80047f8:	3307      	adds	r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da00      	bge.n	8004800 <DrawChar+0x90>
 80047fe:	3307      	adds	r3, #7
 8004800:	10db      	asrs	r3, r3, #3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d002      	beq.n	800480c <DrawChar+0x9c>
 8004806:	2b02      	cmp	r3, #2
 8004808:	d004      	beq.n	8004814 <DrawChar+0xa4>
 800480a:	e00c      	b.n	8004826 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	617b      	str	r3, [r7, #20]
      break;
 8004812:	e016      	b.n	8004842 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	3201      	adds	r2, #1
 800481e:	7812      	ldrb	r2, [r2, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]
      break;
 8004824:	e00d      	b.n	8004842 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	041a      	lsls	r2, r3, #16
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	3301      	adds	r3, #1
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	4313      	orrs	r3, r2
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	3202      	adds	r2, #2
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
      break;
 8004840:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	e036      	b.n	80048b6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004848:	8a3a      	ldrh	r2, [r7, #16]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	1ad2      	subs	r2, r2, r3
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	4413      	add	r3, r2
 8004852:	3b01      	subs	r3, #1
 8004854:	2201      	movs	r2, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	461a      	mov	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d012      	beq.n	800488a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	b29a      	uxth	r2, r3
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	4413      	add	r3, r2
 800486c:	b298      	uxth	r0, r3
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <DrawChar+0x16c>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	491b      	ldr	r1, [pc, #108]	; (80048e0 <DrawChar+0x170>)
 8004874:	4613      	mov	r3, r2
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	88bb      	ldrh	r3, [r7, #4]
 8004882:	4619      	mov	r1, r3
 8004884:	f7ff ff4e 	bl	8004724 <BSP_LCD_DrawPixel>
 8004888:	e012      	b.n	80048b0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	b29a      	uxth	r2, r3
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	4413      	add	r3, r2
 8004892:	b298      	uxth	r0, r3
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <DrawChar+0x16c>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4911      	ldr	r1, [pc, #68]	; (80048e0 <DrawChar+0x170>)
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	3304      	adds	r3, #4
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	88bb      	ldrh	r3, [r7, #4]
 80048aa:	4619      	mov	r1, r3
 80048ac:	f7ff ff3a 	bl	8004724 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	3301      	adds	r3, #1
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	8a3b      	ldrh	r3, [r7, #16]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d3c4      	bcc.n	8004848 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80048be:	88bb      	ldrh	r3, [r7, #4]
 80048c0:	3301      	adds	r3, #1
 80048c2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	3301      	adds	r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	8a7b      	ldrh	r3, [r7, #18]
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d384      	bcc.n	80047dc <DrawChar+0x6c>
  }
}
 80048d2:	bf00      	nop
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000220 	.word	0x20000220
 80048e0:	20000224 	.word	0x20000224

080048e4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80048f2:	4b16      	ldr	r3, [pc, #88]	; (800494c <FillBuffer+0x68>)
 80048f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80048f8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80048fa:	4b14      	ldr	r3, [pc, #80]	; (800494c <FillBuffer+0x68>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004900:	4a12      	ldr	r2, [pc, #72]	; (800494c <FillBuffer+0x68>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004906:	4b11      	ldr	r3, [pc, #68]	; (800494c <FillBuffer+0x68>)
 8004908:	4a11      	ldr	r2, [pc, #68]	; (8004950 <FillBuffer+0x6c>)
 800490a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800490c:	480f      	ldr	r0, [pc, #60]	; (800494c <FillBuffer+0x68>)
 800490e:	f000 fdf5 	bl	80054fc <HAL_DMA2D_Init>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d115      	bne.n	8004944 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	480c      	ldr	r0, [pc, #48]	; (800494c <FillBuffer+0x68>)
 800491c:	f001 f85c 	bl	80059d8 <HAL_DMA2D_ConfigLayer>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10e      	bne.n	8004944 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69f9      	ldr	r1, [r7, #28]
 8004930:	4806      	ldr	r0, [pc, #24]	; (800494c <FillBuffer+0x68>)
 8004932:	f000 fe2c 	bl	800558e <HAL_DMA2D_Start>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800493c:	210a      	movs	r1, #10
 800493e:	4803      	ldr	r0, [pc, #12]	; (800494c <FillBuffer+0x68>)
 8004940:	f000 fe50 	bl	80055e4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200001b0 	.word	0x200001b0
 8004950:	4002b000 	.word	0x4002b000

08004954 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004958:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 800495a:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <BSP_SDRAM_Init+0xb0>)
 800495c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800495e:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <BSP_SDRAM_Init+0xb4>)
 8004960:	2202      	movs	r2, #2
 8004962:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004964:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <BSP_SDRAM_Init+0xb4>)
 8004966:	2207      	movs	r2, #7
 8004968:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800496a:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <BSP_SDRAM_Init+0xb4>)
 800496c:	2204      	movs	r2, #4
 800496e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004970:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <BSP_SDRAM_Init+0xb4>)
 8004972:	2207      	movs	r2, #7
 8004974:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004976:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <BSP_SDRAM_Init+0xb4>)
 8004978:	2202      	movs	r2, #2
 800497a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800497c:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <BSP_SDRAM_Init+0xb4>)
 800497e:	2202      	movs	r2, #2
 8004980:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004982:	4b21      	ldr	r3, [pc, #132]	; (8004a08 <BSP_SDRAM_Init+0xb4>)
 8004984:	2202      	movs	r2, #2
 8004986:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004988:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 800498a:	2201      	movs	r2, #1
 800498c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800498e:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 8004990:	2200      	movs	r2, #0
 8004992:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 8004996:	2204      	movs	r2, #4
 8004998:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800499a:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 800499c:	2210      	movs	r2, #16
 800499e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 80049a2:	2240      	movs	r2, #64	; 0x40
 80049a4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80049a6:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 80049a8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80049ac:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80049ae:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 80049b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ba:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 80049be:	2200      	movs	r2, #0
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80049c2:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 80049c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049c8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80049ca:	2100      	movs	r1, #0
 80049cc:	480c      	ldr	r0, [pc, #48]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 80049ce:	f000 f87f 	bl	8004ad0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80049d2:	490d      	ldr	r1, [pc, #52]	; (8004a08 <BSP_SDRAM_Init+0xb4>)
 80049d4:	480a      	ldr	r0, [pc, #40]	; (8004a00 <BSP_SDRAM_Init+0xac>)
 80049d6:	f005 f835 	bl	8009a44 <HAL_SDRAM_Init>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <BSP_SDRAM_Init+0xb8>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e002      	b.n	80049ee <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80049e8:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <BSP_SDRAM_Init+0xb8>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80049ee:	f240 506a 	movw	r0, #1386	; 0x56a
 80049f2:	f000 f80d 	bl	8004a10 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <BSP_SDRAM_Init+0xb8>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	2000023c 	.word	0x2000023c
 8004a04:	a0000140 	.word	0xa0000140
 8004a08:	20000270 	.word	0x20000270
 8004a0c:	20000094 	.word	0x20000094

08004a10 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004a1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004a22:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a24:	2208      	movs	r2, #8
 8004a26:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004a2e:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a38:	4923      	ldr	r1, [pc, #140]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a3a:	4824      	ldr	r0, [pc, #144]	; (8004acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004a3c:	f005 f836 	bl	8009aac <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004a40:	2001      	movs	r0, #1
 8004a42:	f000 fa7f 	bl	8004f44 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004a46:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a48:	2202      	movs	r2, #2
 8004a4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a4e:	2208      	movs	r2, #8
 8004a50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004a52:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004a58:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a62:	4919      	ldr	r1, [pc, #100]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a64:	4819      	ldr	r0, [pc, #100]	; (8004acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004a66:	f005 f821 	bl	8009aac <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004a6a:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004a70:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a72:	2208      	movs	r2, #8
 8004a74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a78:	2204      	movs	r2, #4
 8004a7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004a7c:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a86:	4910      	ldr	r1, [pc, #64]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a88:	4810      	ldr	r0, [pc, #64]	; (8004acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004a8a:	f005 f80f 	bl	8009aac <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004a8e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004a92:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a96:	2204      	movs	r2, #4
 8004a98:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a07      	ldr	r2, [pc, #28]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aaa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ab0:	4905      	ldr	r1, [pc, #20]	; (8004ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ab2:	4806      	ldr	r0, [pc, #24]	; (8004acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004ab4:	f004 fffa 	bl	8009aac <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4804      	ldr	r0, [pc, #16]	; (8004acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004abc:	f005 f821 	bl	8009b02 <HAL_SDRAM_ProgramRefreshRate>
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	2000028c 	.word	0x2000028c
 8004acc:	2000023c 	.word	0x2000023c

08004ad0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b090      	sub	sp, #64	; 0x40
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80ec 	beq.w	8004cba <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae6:	4b77      	ldr	r3, [pc, #476]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	4a76      	ldr	r2, [pc, #472]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6393      	str	r3, [r2, #56]	; 0x38
 8004af2:	4b74      	ldr	r3, [pc, #464]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	4b70      	ldr	r3, [pc, #448]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	4a6f      	ldr	r2, [pc, #444]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0e:	4b6d      	ldr	r3, [pc, #436]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	4b69      	ldr	r3, [pc, #420]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	4a68      	ldr	r2, [pc, #416]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2a:	4b66      	ldr	r3, [pc, #408]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	623b      	str	r3, [r7, #32]
 8004b34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	4b62      	ldr	r3, [pc, #392]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	4a61      	ldr	r2, [pc, #388]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b40:	f043 0304 	orr.w	r3, r3, #4
 8004b44:	6313      	str	r3, [r2, #48]	; 0x30
 8004b46:	4b5f      	ldr	r3, [pc, #380]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	4b5b      	ldr	r3, [pc, #364]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	4a5a      	ldr	r2, [pc, #360]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b5c:	f043 0308 	orr.w	r3, r3, #8
 8004b60:	6313      	str	r3, [r2, #48]	; 0x30
 8004b62:	4b58      	ldr	r3, [pc, #352]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	4b54      	ldr	r3, [pc, #336]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	4a53      	ldr	r2, [pc, #332]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b78:	f043 0310 	orr.w	r3, r3, #16
 8004b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7e:	4b51      	ldr	r3, [pc, #324]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	4b4d      	ldr	r3, [pc, #308]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	4a4c      	ldr	r2, [pc, #304]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b94:	f043 0320 	orr.w	r3, r3, #32
 8004b98:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9a:	4b4a      	ldr	r3, [pc, #296]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4b46      	ldr	r3, [pc, #280]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	4a45      	ldr	r2, [pc, #276]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb6:	4b43      	ldr	r3, [pc, #268]	; (8004cc4 <BSP_SDRAM_MspInit+0x1f4>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004bce:	230c      	movs	r3, #12
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004bd2:	2360      	movs	r3, #96	; 0x60
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bda:	4619      	mov	r1, r3
 8004bdc:	483a      	ldr	r0, [pc, #232]	; (8004cc8 <BSP_SDRAM_MspInit+0x1f8>)
 8004bde:	f001 f829 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004be2:	2301      	movs	r3, #1
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bea:	4619      	mov	r1, r3
 8004bec:	4837      	ldr	r0, [pc, #220]	; (8004ccc <BSP_SDRAM_MspInit+0x1fc>)
 8004bee:	f001 f821 	bl	8005c34 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004bf2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4834      	ldr	r0, [pc, #208]	; (8004cd0 <BSP_SDRAM_MspInit+0x200>)
 8004c00:	f001 f818 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004c04:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4830      	ldr	r0, [pc, #192]	; (8004cd4 <BSP_SDRAM_MspInit+0x204>)
 8004c12:	f001 f80f 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004c16:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c20:	4619      	mov	r1, r3
 8004c22:	482d      	ldr	r0, [pc, #180]	; (8004cd8 <BSP_SDRAM_MspInit+0x208>)
 8004c24:	f001 f806 	bl	8005c34 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004c28:	f248 1333 	movw	r3, #33075	; 0x8133
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c32:	4619      	mov	r1, r3
 8004c34:	4829      	ldr	r0, [pc, #164]	; (8004cdc <BSP_SDRAM_MspInit+0x20c>)
 8004c36:	f000 fffd 	bl	8005c34 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004c40:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c42:	2280      	movs	r2, #128	; 0x80
 8004c44:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004c46:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c4c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c54:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c5c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004c5e:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c64:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004c66:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c72:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004c74:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004c7a:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004c80:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004c86:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004c8c:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c8e:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <BSP_SDRAM_MspInit+0x214>)
 8004c90:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
 8004c98:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004c9e:	4810      	ldr	r0, [pc, #64]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004ca0:	f000 fb1e 	bl	80052e0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004ca4:	480e      	ldr	r0, [pc, #56]	; (8004ce0 <BSP_SDRAM_MspInit+0x210>)
 8004ca6:	f000 fa6d 	bl	8005184 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004caa:	2200      	movs	r2, #0
 8004cac:	210f      	movs	r1, #15
 8004cae:	2038      	movs	r0, #56	; 0x38
 8004cb0:	f000 fa22 	bl	80050f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004cb4:	2038      	movs	r0, #56	; 0x38
 8004cb6:	f000 fa3b 	bl	8005130 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004cba:	bf00      	nop
 8004cbc:	3740      	adds	r7, #64	; 0x40
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40020400 	.word	0x40020400
 8004ccc:	40020800 	.word	0x40020800
 8004cd0:	40020c00 	.word	0x40020c00
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40021400 	.word	0x40021400
 8004cdc:	40021800 	.word	0x40021800
 8004ce0:	2000029c 	.word	0x2000029c
 8004ce4:	40026410 	.word	0x40026410

08004ce8 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	460a      	mov	r2, r1
 8004cf2:	80fb      	strh	r3, [r7, #6]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <BSP_TS_Init+0x64>)
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004d02:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <BSP_TS_Init+0x68>)
 8004d04:	88bb      	ldrh	r3, [r7, #4]
 8004d06:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <BSP_TS_Init+0x6c>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2082      	movs	r0, #130	; 0x82
 8004d0e:	4798      	blx	r3
 8004d10:	4603      	mov	r3, r0
 8004d12:	461a      	mov	r2, r3
 8004d14:	f640 0311 	movw	r3, #2065	; 0x811
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d104      	bne.n	8004d26 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <BSP_TS_Init+0x70>)
 8004d1e:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <BSP_TS_Init+0x6c>)
 8004d20:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <BSP_TS_Init+0x70>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2082      	movs	r0, #130	; 0x82
 8004d34:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <BSP_TS_Init+0x70>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2082      	movs	r0, #130	; 0x82
 8004d3e:	4798      	blx	r3
  }

  return ret;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000300 	.word	0x20000300
 8004d50:	20000302 	.word	0x20000302
 8004d54:	2000003c 	.word	0x2000003c
 8004d58:	200002fc 	.word	0x200002fc

08004d5c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004d64:	4b4f      	ldr	r3, [pc, #316]	; (8004ea4 <BSP_TS_GetState+0x148>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2082      	movs	r0, #130	; 0x82
 8004d6c:	4798      	blx	r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 808d 	beq.w	8004e9a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004d80:	4b48      	ldr	r3, [pc, #288]	; (8004ea4 <BSP_TS_GetState+0x148>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f107 020c 	add.w	r2, r7, #12
 8004d8a:	f107 010e 	add.w	r1, r7, #14
 8004d8e:	2082      	movs	r0, #130	; 0x82
 8004d90:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004d92:	89bb      	ldrh	r3, [r7, #12]
 8004d94:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004d9c:	89bb      	ldrh	r3, [r7, #12]
 8004d9e:	4a42      	ldr	r2, [pc, #264]	; (8004ea8 <BSP_TS_GetState+0x14c>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004da8:	8abb      	ldrh	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	82bb      	strh	r3, [r7, #20]
 8004db2:	e008      	b.n	8004dc6 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004db4:	4b3d      	ldr	r3, [pc, #244]	; (8004eac <BSP_TS_GetState+0x150>)
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	8aba      	ldrh	r2, [r7, #20]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d903      	bls.n	8004dc6 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8004dbe:	4b3b      	ldr	r3, [pc, #236]	; (8004eac <BSP_TS_GetState+0x150>)
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004dc6:	8abb      	ldrh	r3, [r7, #20]
 8004dc8:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004dca:	89fb      	ldrh	r3, [r7, #14]
 8004dcc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d806      	bhi.n	8004de2 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004dd4:	89fb      	ldrh	r3, [r7, #14]
 8004dd6:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8004dda:	330e      	adds	r3, #14
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	81fb      	strh	r3, [r7, #14]
 8004de0:	e005      	b.n	8004dee <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004de2:	89fb      	ldrh	r3, [r7, #14]
 8004de4:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8004de8:	3308      	adds	r3, #8
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004dee:	89fb      	ldrh	r3, [r7, #14]
 8004df0:	4a2f      	ldr	r2, [pc, #188]	; (8004eb0 <BSP_TS_GetState+0x154>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	08db      	lsrs	r3, r3, #3
 8004df8:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004dfa:	8afb      	ldrh	r3, [r7, #22]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	82fb      	strh	r3, [r7, #22]
 8004e04:	e008      	b.n	8004e18 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004e06:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <BSP_TS_GetState+0x158>)
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	8afa      	ldrh	r2, [r7, #22]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d903      	bls.n	8004e18 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004e10:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <BSP_TS_GetState+0x158>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004e18:	8afb      	ldrh	r3, [r7, #22]
 8004e1a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004e1c:	89fb      	ldrh	r3, [r7, #14]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <BSP_TS_GetState+0x15c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d906      	bls.n	8004e36 <BSP_TS_GetState+0xda>
 8004e28:	89fa      	ldrh	r2, [r7, #14]
 8004e2a:	4b23      	ldr	r3, [pc, #140]	; (8004eb8 <BSP_TS_GetState+0x15c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	e005      	b.n	8004e42 <BSP_TS_GetState+0xe6>
 8004e36:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <BSP_TS_GetState+0x15c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	89fb      	ldrh	r3, [r7, #14]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004e44:	89bb      	ldrh	r3, [r7, #12]
 8004e46:	461a      	mov	r2, r3
 8004e48:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <BSP_TS_GetState+0x160>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d906      	bls.n	8004e5e <BSP_TS_GetState+0x102>
 8004e50:	89ba      	ldrh	r2, [r7, #12]
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <BSP_TS_GetState+0x160>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	e005      	b.n	8004e6a <BSP_TS_GetState+0x10e>
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <BSP_TS_GetState+0x160>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	89bb      	ldrh	r3, [r7, #12]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004e6c:	8a7a      	ldrh	r2, [r7, #18]
 8004e6e:	8a3b      	ldrh	r3, [r7, #16]
 8004e70:	4413      	add	r3, r2
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	dd07      	ble.n	8004e86 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004e76:	89fb      	ldrh	r3, [r7, #14]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <BSP_TS_GetState+0x15c>)
 8004e7c:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004e7e:	89bb      	ldrh	r3, [r7, #12]
 8004e80:	461a      	mov	r2, r3
 8004e82:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <BSP_TS_GetState+0x160>)
 8004e84:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <BSP_TS_GetState+0x15c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <BSP_TS_GetState+0x160>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	809a      	strh	r2, [r3, #4]
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200002fc 	.word	0x200002fc
 8004ea8:	ba2e8ba3 	.word	0xba2e8ba3
 8004eac:	20000302 	.word	0x20000302
 8004eb0:	88888889 	.word	0x88888889
 8004eb4:	20000300 	.word	0x20000300
 8004eb8:	20000304 	.word	0x20000304
 8004ebc:	20000308 	.word	0x20000308

08004ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <HAL_Init+0x40>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <HAL_Init+0x40>)
 8004eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_Init+0x40>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <HAL_Init+0x40>)
 8004ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004edc:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <HAL_Init+0x40>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a07      	ldr	r2, [pc, #28]	; (8004f00 <HAL_Init+0x40>)
 8004ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ee8:	2003      	movs	r0, #3
 8004eea:	f000 f8fa 	bl	80050e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f7fd f934 	bl	800215c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ef4:	f7fd f906 	bl	8002104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40023c00 	.word	0x40023c00

08004f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_IncTick+0x20>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <HAL_IncTick+0x24>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4413      	add	r3, r2
 8004f14:	4a04      	ldr	r2, [pc, #16]	; (8004f28 <HAL_IncTick+0x24>)
 8004f16:	6013      	str	r3, [r2, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	2000009c 	.word	0x2000009c
 8004f28:	2000079c 	.word	0x2000079c

08004f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <HAL_GetTick+0x14>)
 8004f32:	681b      	ldr	r3, [r3, #0]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	2000079c 	.word	0x2000079c

08004f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f4c:	f7ff ffee 	bl	8004f2c <HAL_GetTick>
 8004f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d005      	beq.n	8004f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_Delay+0x40>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f6a:	bf00      	nop
 8004f6c:	f7ff ffde 	bl	8004f2c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d8f7      	bhi.n	8004f6c <HAL_Delay+0x28>
  {
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	2000009c 	.word	0x2000009c

08004f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <__NVIC_SetPriorityGrouping+0x44>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fba:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <__NVIC_SetPriorityGrouping+0x44>)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	60d3      	str	r3, [r2, #12]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	0a1b      	lsrs	r3, r3, #8
 8004fda:	f003 0307 	and.w	r3, r3, #7
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	db0b      	blt.n	8005016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	f003 021f 	and.w	r2, r3, #31
 8005004:	4907      	ldr	r1, [pc, #28]	; (8005024 <__NVIC_EnableIRQ+0x38>)
 8005006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2001      	movs	r0, #1
 800500e:	fa00 f202 	lsl.w	r2, r0, r2
 8005012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	e000e100 	.word	0xe000e100

08005028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	6039      	str	r1, [r7, #0]
 8005032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005038:	2b00      	cmp	r3, #0
 800503a:	db0a      	blt.n	8005052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	490c      	ldr	r1, [pc, #48]	; (8005074 <__NVIC_SetPriority+0x4c>)
 8005042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005046:	0112      	lsls	r2, r2, #4
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	440b      	add	r3, r1
 800504c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005050:	e00a      	b.n	8005068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	4908      	ldr	r1, [pc, #32]	; (8005078 <__NVIC_SetPriority+0x50>)
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	3b04      	subs	r3, #4
 8005060:	0112      	lsls	r2, r2, #4
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	440b      	add	r3, r1
 8005066:	761a      	strb	r2, [r3, #24]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	e000e100 	.word	0xe000e100
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800507c:	b480      	push	{r7}
 800507e:	b089      	sub	sp, #36	; 0x24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f1c3 0307 	rsb	r3, r3, #7
 8005096:	2b04      	cmp	r3, #4
 8005098:	bf28      	it	cs
 800509a:	2304      	movcs	r3, #4
 800509c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3304      	adds	r3, #4
 80050a2:	2b06      	cmp	r3, #6
 80050a4:	d902      	bls.n	80050ac <NVIC_EncodePriority+0x30>
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3b03      	subs	r3, #3
 80050aa:	e000      	b.n	80050ae <NVIC_EncodePriority+0x32>
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b0:	f04f 32ff 	mov.w	r2, #4294967295
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43da      	mvns	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	401a      	ands	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050c4:	f04f 31ff 	mov.w	r1, #4294967295
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	fa01 f303 	lsl.w	r3, r1, r3
 80050ce:	43d9      	mvns	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d4:	4313      	orrs	r3, r2
         );
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3724      	adds	r7, #36	; 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ff4c 	bl	8004f88 <__NVIC_SetPriorityGrouping>
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800510a:	f7ff ff61 	bl	8004fd0 <__NVIC_GetPriorityGrouping>
 800510e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	6978      	ldr	r0, [r7, #20]
 8005116:	f7ff ffb1 	bl	800507c <NVIC_EncodePriority>
 800511a:	4602      	mov	r2, r0
 800511c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005120:	4611      	mov	r1, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff ff80 	bl	8005028 <__NVIC_SetPriority>
}
 8005128:	bf00      	nop
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff ff54 	bl	8004fec <__NVIC_EnableIRQ>
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e00e      	b.n	800517c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	795b      	ldrb	r3, [r3, #5]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d105      	bne.n	8005174 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fb fcb8 	bl	8000ae4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005190:	f7ff fecc 	bl	8004f2c <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e099      	b.n	80052d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051c0:	e00f      	b.n	80051e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051c2:	f7ff feb3 	bl	8004f2c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d908      	bls.n	80051e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2203      	movs	r2, #3
 80051da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e078      	b.n	80052d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e8      	bne.n	80051c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4b38      	ldr	r3, [pc, #224]	; (80052dc <HAL_DMA_Init+0x158>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800520e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	2b04      	cmp	r3, #4
 800523a:	d107      	bne.n	800524c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	4313      	orrs	r3, r2
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0307 	bic.w	r3, r3, #7
 8005262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b04      	cmp	r3, #4
 8005274:	d117      	bne.n	80052a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00e      	beq.n	80052a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f8bd 	bl	8005408 <DMA_CheckFifoParam>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2240      	movs	r2, #64	; 0x40
 8005298:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052a2:	2301      	movs	r3, #1
 80052a4:	e016      	b.n	80052d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f874 	bl	800539c <DMA_CalcBaseAndBitshift>
 80052b4:	4603      	mov	r3, r0
 80052b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052bc:	223f      	movs	r2, #63	; 0x3f
 80052be:	409a      	lsls	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	f010803f 	.word	0xf010803f

080052e0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e050      	b.n	8005394 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d101      	bne.n	8005302 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80052fe:	2302      	movs	r3, #2
 8005300:	e048      	b.n	8005394 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2200      	movs	r2, #0
 8005330:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2221      	movs	r2, #33	; 0x21
 8005340:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f82a 	bl	800539c <DMA_CalcBaseAndBitshift>
 8005348:	4603      	mov	r3, r0
 800534a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005374:	223f      	movs	r2, #63	; 0x3f
 8005376:	409a      	lsls	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	3b10      	subs	r3, #16
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <DMA_CalcBaseAndBitshift+0x64>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	091b      	lsrs	r3, r3, #4
 80053b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053b6:	4a13      	ldr	r2, [pc, #76]	; (8005404 <DMA_CalcBaseAndBitshift+0x68>)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d909      	bls.n	80053de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	1d1a      	adds	r2, r3, #4
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	659a      	str	r2, [r3, #88]	; 0x58
 80053dc:	e007      	b.n	80053ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053e6:	f023 0303 	bic.w	r3, r3, #3
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	aaaaaaab 	.word	0xaaaaaaab
 8005404:	08010e64 	.word	0x08010e64

08005408 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d11f      	bne.n	8005462 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d855      	bhi.n	80054d4 <DMA_CheckFifoParam+0xcc>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <DMA_CheckFifoParam+0x28>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005441 	.word	0x08005441
 8005434:	08005453 	.word	0x08005453
 8005438:	08005441 	.word	0x08005441
 800543c:	080054d5 	.word	0x080054d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d045      	beq.n	80054d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005450:	e042      	b.n	80054d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800545a:	d13f      	bne.n	80054dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005460:	e03c      	b.n	80054dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546a:	d121      	bne.n	80054b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d836      	bhi.n	80054e0 <DMA_CheckFifoParam+0xd8>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <DMA_CheckFifoParam+0x70>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	08005489 	.word	0x08005489
 800547c:	0800548f 	.word	0x0800548f
 8005480:	08005489 	.word	0x08005489
 8005484:	080054a1 	.word	0x080054a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e02f      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d024      	beq.n	80054e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800549e:	e021      	b.n	80054e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054a8:	d11e      	bne.n	80054e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054ae:	e01b      	b.n	80054e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d902      	bls.n	80054bc <DMA_CheckFifoParam+0xb4>
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d003      	beq.n	80054c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054ba:	e018      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	e015      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00e      	beq.n	80054ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
      break;
 80054d2:	e00b      	b.n	80054ec <DMA_CheckFifoParam+0xe4>
      break;
 80054d4:	bf00      	nop
 80054d6:	e00a      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
      break;
 80054d8:	bf00      	nop
 80054da:	e008      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
      break;
 80054dc:	bf00      	nop
 80054de:	e006      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
      break;
 80054e0:	bf00      	nop
 80054e2:	e004      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
      break;
 80054e4:	bf00      	nop
 80054e6:	e002      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
      break;   
 80054e8:	bf00      	nop
 80054ea:	e000      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
      break;
 80054ec:	bf00      	nop
    }
  } 
  
  return status; 
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e03b      	b.n	8005586 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fb fb32 	bl	8000b8c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554c:	f023 0107 	bic.w	r1, r3, #7
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005566:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	68d1      	ldr	r1, [r2, #12]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	430b      	orrs	r3, r1
 8005574:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b086      	sub	sp, #24
 8005592:	af02      	add	r7, sp, #8
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_DMA2D_Start+0x1c>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e018      	b.n	80055dc <HAL_DMA2D_Start+0x4e>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fa99 	bl	8005afc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d056      	beq.n	80056ae <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005600:	f7ff fc94 	bl	8004f2c <HAL_GetTick>
 8005604:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005606:	e04b      	b.n	80056a0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005616:	2b00      	cmp	r3, #0
 8005618:	d023      	beq.n	8005662 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005628:	f043 0202 	orr.w	r2, r3, #2
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	f043 0201 	orr.w	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2221      	movs	r2, #33	; 0x21
 800564c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2204      	movs	r2, #4
 8005652:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e0a5      	b.n	80057ae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d01a      	beq.n	80056a0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800566a:	f7ff fc5f 	bl	8004f2c <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <HAL_DMA2D_PollForTransfer+0x9c>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10f      	bne.n	80056a0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2203      	movs	r2, #3
 8005690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e086      	b.n	80057ae <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0ac      	beq.n	8005608 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d061      	beq.n	8005794 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80056d0:	f7ff fc2c 	bl	8004f2c <HAL_GetTick>
 80056d4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80056d6:	e056      	b.n	8005786 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d02e      	beq.n	8005748 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f8:	f043 0204 	orr.w	r2, r3, #4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d005      	beq.n	8005716 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	f043 0202 	orr.w	r2, r3, #2
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	f043 0201 	orr.w	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2229      	movs	r2, #41	; 0x29
 8005732:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2204      	movs	r2, #4
 8005738:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e032      	b.n	80057ae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d01a      	beq.n	8005786 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005750:	f7ff fbec 	bl	8004f2c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d302      	bcc.n	8005766 <HAL_DMA2D_PollForTransfer+0x182>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10f      	bne.n	8005786 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2203      	movs	r2, #3
 8005776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e013      	b.n	80057ae <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0a1      	beq.n	80056d8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2212      	movs	r2, #18
 800579a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d026      	beq.n	8005826 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d021      	beq.n	8005826 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057f0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	f043 0201 	orr.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2204      	movs	r2, #4
 800580a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d026      	beq.n	800587e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d021      	beq.n	800587e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005848:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2220      	movs	r2, #32
 8005850:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	f043 0202 	orr.w	r2, r3, #2
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d026      	beq.n	80058d6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588e:	2b00      	cmp	r3, #0
 8005890:	d021      	beq.n	80058d6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2208      	movs	r2, #8
 80058a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	f043 0204 	orr.w	r2, r3, #4
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d013      	beq.n	8005908 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00e      	beq.n	8005908 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2204      	movs	r2, #4
 8005900:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f853 	bl	80059ae <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d024      	beq.n	800595c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01f      	beq.n	800595c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800592a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2202      	movs	r2, #2
 8005932:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01f      	beq.n	80059a6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01a      	beq.n	80059a6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800597e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2210      	movs	r2, #16
 8005986:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f80e 	bl	80059c2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_DMA2D_ConfigLayer+0x20>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e079      	b.n	8005aec <HAL_DMA2D_ConfigLayer+0x114>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4413      	add	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	041b      	lsls	r3, r3, #16
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005a22:	4b35      	ldr	r3, [pc, #212]	; (8005af8 <HAL_DMA2D_ConfigLayer+0x120>)
 8005a24:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b0a      	cmp	r3, #10
 8005a2c:	d003      	beq.n	8005a36 <HAL_DMA2D_ConfigLayer+0x5e>
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b09      	cmp	r3, #9
 8005a34:	d107      	bne.n	8005a46 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e005      	b.n	8005a52 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	061b      	lsls	r3, r3, #24
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d120      	bne.n	8005a9a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	ea02 0103 	and.w	r1, r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b0a      	cmp	r3, #10
 8005a80:	d003      	beq.n	8005a8a <HAL_DMA2D_ConfigLayer+0xb2>
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b09      	cmp	r3, #9
 8005a88:	d127      	bne.n	8005ada <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a96:	629a      	str	r2, [r3, #40]	; 0x28
 8005a98:	e01f      	b.n	8005ada <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	ea02 0103 	and.w	r1, r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b0a      	cmp	r3, #10
 8005ac2:	d003      	beq.n	8005acc <HAL_DMA2D_ConfigLayer+0xf4>
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b09      	cmp	r3, #9
 8005aca:	d106      	bne.n	8005ada <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005ad8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	ff03000f 	.word	0xff03000f

08005afc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b08b      	sub	sp, #44	; 0x2c
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b10:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	041a      	lsls	r2, r3, #16
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b34:	d174      	bne.n	8005c20 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b3c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b44:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b4c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d108      	bne.n	8005b6e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6c:	e053      	b.n	8005c16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d106      	bne.n	8005b84 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
 8005b82:	e048      	b.n	8005c16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d111      	bne.n	8005bb0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	0cdb      	lsrs	r3, r3, #19
 8005b90:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	0a9b      	lsrs	r3, r3, #10
 8005b96:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	08db      	lsrs	r3, r3, #3
 8005b9c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	02db      	lsls	r3, r3, #11
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	e032      	b.n	8005c16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d117      	bne.n	8005be8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	0fdb      	lsrs	r3, r3, #31
 8005bbc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	0cdb      	lsrs	r3, r3, #19
 8005bc2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	0adb      	lsrs	r3, r3, #11
 8005bc8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	08db      	lsrs	r3, r3, #3
 8005bce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	029b      	lsls	r3, r3, #10
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	03db      	lsls	r3, r3, #15
 8005bde:	4313      	orrs	r3, r2
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	e016      	b.n	8005c16 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	0f1b      	lsrs	r3, r3, #28
 8005bec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	0d1b      	lsrs	r3, r3, #20
 8005bf2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	0b1b      	lsrs	r3, r3, #12
 8005bf8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	011a      	lsls	r2, r3, #4
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	031b      	lsls	r3, r3, #12
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005c1e:	e003      	b.n	8005c28 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	60da      	str	r2, [r3, #12]
}
 8005c28:	bf00      	nop
 8005c2a:	372c      	adds	r7, #44	; 0x2c
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b089      	sub	sp, #36	; 0x24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	e177      	b.n	8005f40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c50:	2201      	movs	r2, #1
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4013      	ands	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	f040 8166 	bne.w	8005f3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d00b      	beq.n	8005c8e <HAL_GPIO_Init+0x5a>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d007      	beq.n	8005c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c82:	2b11      	cmp	r3, #17
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b12      	cmp	r3, #18
 8005c8c:	d130      	bne.n	8005cf0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	2203      	movs	r2, #3
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 0201 	and.w	r2, r3, #1
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4013      	ands	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d003      	beq.n	8005d30 <HAL_GPIO_Init+0xfc>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b12      	cmp	r3, #18
 8005d2e:	d123      	bne.n	8005d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	08da      	lsrs	r2, r3, #3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3208      	adds	r2, #8
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	220f      	movs	r2, #15
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	08da      	lsrs	r2, r3, #3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3208      	adds	r2, #8
 8005d72:	69b9      	ldr	r1, [r7, #24]
 8005d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	2203      	movs	r2, #3
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 0203 	and.w	r2, r3, #3
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80c0 	beq.w	8005f3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <HAL_GPIO_Init+0x320>)
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	4a64      	ldr	r2, [pc, #400]	; (8005f54 <HAL_GPIO_Init+0x320>)
 8005dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8005dca:	4b62      	ldr	r3, [pc, #392]	; (8005f54 <HAL_GPIO_Init+0x320>)
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dd6:	4a60      	ldr	r2, [pc, #384]	; (8005f58 <HAL_GPIO_Init+0x324>)
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	089b      	lsrs	r3, r3, #2
 8005ddc:	3302      	adds	r3, #2
 8005dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	220f      	movs	r2, #15
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a57      	ldr	r2, [pc, #348]	; (8005f5c <HAL_GPIO_Init+0x328>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d037      	beq.n	8005e72 <HAL_GPIO_Init+0x23e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a56      	ldr	r2, [pc, #344]	; (8005f60 <HAL_GPIO_Init+0x32c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d031      	beq.n	8005e6e <HAL_GPIO_Init+0x23a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a55      	ldr	r2, [pc, #340]	; (8005f64 <HAL_GPIO_Init+0x330>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d02b      	beq.n	8005e6a <HAL_GPIO_Init+0x236>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a54      	ldr	r2, [pc, #336]	; (8005f68 <HAL_GPIO_Init+0x334>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d025      	beq.n	8005e66 <HAL_GPIO_Init+0x232>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a53      	ldr	r2, [pc, #332]	; (8005f6c <HAL_GPIO_Init+0x338>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01f      	beq.n	8005e62 <HAL_GPIO_Init+0x22e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a52      	ldr	r2, [pc, #328]	; (8005f70 <HAL_GPIO_Init+0x33c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d019      	beq.n	8005e5e <HAL_GPIO_Init+0x22a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a51      	ldr	r2, [pc, #324]	; (8005f74 <HAL_GPIO_Init+0x340>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_GPIO_Init+0x226>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a50      	ldr	r2, [pc, #320]	; (8005f78 <HAL_GPIO_Init+0x344>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00d      	beq.n	8005e56 <HAL_GPIO_Init+0x222>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a4f      	ldr	r2, [pc, #316]	; (8005f7c <HAL_GPIO_Init+0x348>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <HAL_GPIO_Init+0x21e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a4e      	ldr	r2, [pc, #312]	; (8005f80 <HAL_GPIO_Init+0x34c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d101      	bne.n	8005e4e <HAL_GPIO_Init+0x21a>
 8005e4a:	2309      	movs	r3, #9
 8005e4c:	e012      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e4e:	230a      	movs	r3, #10
 8005e50:	e010      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e52:	2308      	movs	r3, #8
 8005e54:	e00e      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e56:	2307      	movs	r3, #7
 8005e58:	e00c      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e5a:	2306      	movs	r3, #6
 8005e5c:	e00a      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e5e:	2305      	movs	r3, #5
 8005e60:	e008      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e62:	2304      	movs	r3, #4
 8005e64:	e006      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e66:	2303      	movs	r3, #3
 8005e68:	e004      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e002      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <HAL_GPIO_Init+0x240>
 8005e72:	2300      	movs	r3, #0
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	f002 0203 	and.w	r2, r2, #3
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	4093      	lsls	r3, r2
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e84:	4934      	ldr	r1, [pc, #208]	; (8005f58 <HAL_GPIO_Init+0x324>)
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	089b      	lsrs	r3, r3, #2
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e92:	4b3c      	ldr	r3, [pc, #240]	; (8005f84 <HAL_GPIO_Init+0x350>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005eb6:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <HAL_GPIO_Init+0x350>)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ebc:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <HAL_GPIO_Init+0x350>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ee0:	4a28      	ldr	r2, [pc, #160]	; (8005f84 <HAL_GPIO_Init+0x350>)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ee6:	4b27      	ldr	r3, [pc, #156]	; (8005f84 <HAL_GPIO_Init+0x350>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f0a:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <HAL_GPIO_Init+0x350>)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f10:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <HAL_GPIO_Init+0x350>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f34:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <HAL_GPIO_Init+0x350>)
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b0f      	cmp	r3, #15
 8005f44:	f67f ae84 	bls.w	8005c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f48:	bf00      	nop
 8005f4a:	3724      	adds	r7, #36	; 0x24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40023800 	.word	0x40023800
 8005f58:	40013800 	.word	0x40013800
 8005f5c:	40020000 	.word	0x40020000
 8005f60:	40020400 	.word	0x40020400
 8005f64:	40020800 	.word	0x40020800
 8005f68:	40020c00 	.word	0x40020c00
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40021400 	.word	0x40021400
 8005f74:	40021800 	.word	0x40021800
 8005f78:	40021c00 	.word	0x40021c00
 8005f7c:	40022000 	.word	0x40022000
 8005f80:	40022400 	.word	0x40022400
 8005f84:	40013c00 	.word	0x40013c00

08005f88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e0d9      	b.n	8006158 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	f040 80c9 	bne.w	8006152 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005fc0:	4a6a      	ldr	r2, [pc, #424]	; (800616c <HAL_GPIO_DeInit+0x1e4>)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fcc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	220f      	movs	r2, #15
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a62      	ldr	r2, [pc, #392]	; (8006170 <HAL_GPIO_DeInit+0x1e8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d037      	beq.n	800605a <HAL_GPIO_DeInit+0xd2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a61      	ldr	r2, [pc, #388]	; (8006174 <HAL_GPIO_DeInit+0x1ec>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d031      	beq.n	8006056 <HAL_GPIO_DeInit+0xce>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a60      	ldr	r2, [pc, #384]	; (8006178 <HAL_GPIO_DeInit+0x1f0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02b      	beq.n	8006052 <HAL_GPIO_DeInit+0xca>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a5f      	ldr	r2, [pc, #380]	; (800617c <HAL_GPIO_DeInit+0x1f4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d025      	beq.n	800604e <HAL_GPIO_DeInit+0xc6>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a5e      	ldr	r2, [pc, #376]	; (8006180 <HAL_GPIO_DeInit+0x1f8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01f      	beq.n	800604a <HAL_GPIO_DeInit+0xc2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a5d      	ldr	r2, [pc, #372]	; (8006184 <HAL_GPIO_DeInit+0x1fc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d019      	beq.n	8006046 <HAL_GPIO_DeInit+0xbe>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a5c      	ldr	r2, [pc, #368]	; (8006188 <HAL_GPIO_DeInit+0x200>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <HAL_GPIO_DeInit+0xba>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a5b      	ldr	r2, [pc, #364]	; (800618c <HAL_GPIO_DeInit+0x204>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00d      	beq.n	800603e <HAL_GPIO_DeInit+0xb6>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a5a      	ldr	r2, [pc, #360]	; (8006190 <HAL_GPIO_DeInit+0x208>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <HAL_GPIO_DeInit+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a59      	ldr	r2, [pc, #356]	; (8006194 <HAL_GPIO_DeInit+0x20c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d101      	bne.n	8006036 <HAL_GPIO_DeInit+0xae>
 8006032:	2309      	movs	r3, #9
 8006034:	e012      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 8006036:	230a      	movs	r3, #10
 8006038:	e010      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 800603a:	2308      	movs	r3, #8
 800603c:	e00e      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 800603e:	2307      	movs	r3, #7
 8006040:	e00c      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 8006042:	2306      	movs	r3, #6
 8006044:	e00a      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 8006046:	2305      	movs	r3, #5
 8006048:	e008      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 800604a:	2304      	movs	r3, #4
 800604c:	e006      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 800604e:	2303      	movs	r3, #3
 8006050:	e004      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 8006052:	2302      	movs	r3, #2
 8006054:	e002      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <HAL_GPIO_DeInit+0xd4>
 800605a:	2300      	movs	r3, #0
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	f002 0203 	and.w	r2, r2, #3
 8006062:	0092      	lsls	r2, r2, #2
 8006064:	4093      	lsls	r3, r2
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	429a      	cmp	r2, r3
 800606a:	d132      	bne.n	80060d2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800606c:	4b4a      	ldr	r3, [pc, #296]	; (8006198 <HAL_GPIO_DeInit+0x210>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	43db      	mvns	r3, r3
 8006074:	4948      	ldr	r1, [pc, #288]	; (8006198 <HAL_GPIO_DeInit+0x210>)
 8006076:	4013      	ands	r3, r2
 8006078:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800607a:	4b47      	ldr	r3, [pc, #284]	; (8006198 <HAL_GPIO_DeInit+0x210>)
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	43db      	mvns	r3, r3
 8006082:	4945      	ldr	r1, [pc, #276]	; (8006198 <HAL_GPIO_DeInit+0x210>)
 8006084:	4013      	ands	r3, r2
 8006086:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006088:	4b43      	ldr	r3, [pc, #268]	; (8006198 <HAL_GPIO_DeInit+0x210>)
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	43db      	mvns	r3, r3
 8006090:	4941      	ldr	r1, [pc, #260]	; (8006198 <HAL_GPIO_DeInit+0x210>)
 8006092:	4013      	ands	r3, r2
 8006094:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006096:	4b40      	ldr	r3, [pc, #256]	; (8006198 <HAL_GPIO_DeInit+0x210>)
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	43db      	mvns	r3, r3
 800609e:	493e      	ldr	r1, [pc, #248]	; (8006198 <HAL_GPIO_DeInit+0x210>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	220f      	movs	r2, #15
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80060b4:	4a2d      	ldr	r2, [pc, #180]	; (800616c <HAL_GPIO_DeInit+0x1e4>)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	089b      	lsrs	r3, r3, #2
 80060ba:	3302      	adds	r3, #2
 80060bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	43da      	mvns	r2, r3
 80060c4:	4829      	ldr	r0, [pc, #164]	; (800616c <HAL_GPIO_DeInit+0x1e4>)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	089b      	lsrs	r3, r3, #2
 80060ca:	400a      	ands	r2, r1
 80060cc:	3302      	adds	r3, #2
 80060ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	2103      	movs	r1, #3
 80060dc:	fa01 f303 	lsl.w	r3, r1, r3
 80060e0:	43db      	mvns	r3, r3
 80060e2:	401a      	ands	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	08da      	lsrs	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3208      	adds	r2, #8
 80060f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	220f      	movs	r2, #15
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	43db      	mvns	r3, r3
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	08d2      	lsrs	r2, r2, #3
 8006108:	4019      	ands	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3208      	adds	r2, #8
 800610e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	2103      	movs	r1, #3
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	401a      	ands	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	2101      	movs	r1, #1
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	fa01 f303 	lsl.w	r3, r1, r3
 8006134:	43db      	mvns	r3, r3
 8006136:	401a      	ands	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	2103      	movs	r1, #3
 8006146:	fa01 f303 	lsl.w	r3, r1, r3
 800614a:	43db      	mvns	r3, r3
 800614c:	401a      	ands	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	3301      	adds	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b0f      	cmp	r3, #15
 800615c:	f67f af22 	bls.w	8005fa4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006160:	bf00      	nop
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	40013800 	.word	0x40013800
 8006170:	40020000 	.word	0x40020000
 8006174:	40020400 	.word	0x40020400
 8006178:	40020800 	.word	0x40020800
 800617c:	40020c00 	.word	0x40020c00
 8006180:	40021000 	.word	0x40021000
 8006184:	40021400 	.word	0x40021400
 8006188:	40021800 	.word	0x40021800
 800618c:	40021c00 	.word	0x40021c00
 8006190:	40022000 	.word	0x40022000
 8006194:	40022400 	.word	0x40022400
 8006198:	40013c00 	.word	0x40013c00

0800619c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	807b      	strh	r3, [r7, #2]
 80061a8:	4613      	mov	r3, r2
 80061aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061ac:	787b      	ldrb	r3, [r7, #1]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061b2:	887a      	ldrh	r2, [r7, #2]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061b8:	e003      	b.n	80061c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061ba:	887b      	ldrh	r3, [r7, #2]
 80061bc:	041a      	lsls	r2, r3, #16
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	619a      	str	r2, [r3, #24]
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f005 fbe9 	bl	800b9bc <USB_GetMode>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	f040 80ef 	bne.w	80063d0 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f005 fbcd 	bl	800b996 <USB_ReadInterrupts>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 80e5 	beq.w	80063ce <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f005 fbc4 	bl	800b996 <USB_ReadInterrupts>
 800620e:	4603      	mov	r3, r0
 8006210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006218:	d104      	bne.n	8006224 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006222:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f005 fbb4 	bl	800b996 <USB_ReadInterrupts>
 800622e:	4603      	mov	r3, r0
 8006230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006238:	d104      	bne.n	8006244 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006242:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f005 fba4 	bl	800b996 <USB_ReadInterrupts>
 800624e:	4603      	mov	r3, r0
 8006250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006258:	d104      	bne.n	8006264 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006262:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f005 fb94 	bl	800b996 <USB_ReadInterrupts>
 800626e:	4603      	mov	r3, r0
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d103      	bne.n	8006280 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2202      	movs	r2, #2
 800627e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f005 fb86 	bl	800b996 <USB_ReadInterrupts>
 800628a:	4603      	mov	r3, r0
 800628c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006294:	d115      	bne.n	80062c2 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800629e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d108      	bne.n	80062c2 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f006 feab 	bl	800d00c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2101      	movs	r1, #1
 80062bc:	4618      	mov	r0, r3
 80062be:	f005 fb8b 	bl	800b9d8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f005 fb65 	bl	800b996 <USB_ReadInterrupts>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062d6:	d102      	bne.n	80062de <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 f8ef 	bl	80074bc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f005 fb57 	bl	800b996 <USB_ReadInterrupts>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d106      	bne.n	8006300 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f006 fe6e 	bl	800cfd4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2208      	movs	r2, #8
 80062fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f005 fb46 	bl	800b996 <USB_ReadInterrupts>
 800630a:	4603      	mov	r3, r0
 800630c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006310:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006314:	d138      	bne.n	8006388 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f005 fb96 	bl	800ba4c <USB_HC_ReadInterrupt>
 8006320:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	e025      	b.n	8006374 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	fa22 f303 	lsr.w	r3, r2, r3
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d018      	beq.n	800636e <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800634e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006352:	d106      	bne.n	8006362 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f858 	bl	8006410 <HCD_HC_IN_IRQHandler>
 8006360:	e005      	b.n	800636e <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc86 	bl	8006c7a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	3301      	adds	r3, #1
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	429a      	cmp	r2, r3
 800637c:	d3d4      	bcc.n	8006328 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f005 fb02 	bl	800b996 <USB_ReadInterrupts>
 8006392:	4603      	mov	r3, r0
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	2b10      	cmp	r3, #16
 800639a:	d101      	bne.n	80063a0 <HAL_HCD_IRQHandler+0x1d2>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <HAL_HCD_IRQHandler+0x1d4>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d014      	beq.n	80063d0 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699a      	ldr	r2, [r3, #24]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0210 	bic.w	r2, r2, #16
 80063b4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 ffd4 	bl	8007364 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0210 	orr.w	r2, r2, #16
 80063ca:	619a      	str	r2, [r3, #24]
 80063cc:	e000      	b.n	80063d0 <HAL_HCD_IRQHandler+0x202>
      return;
 80063ce:	bf00      	nop
    }
  }
}
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_HCD_Stop+0x16>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e00d      	b.n	8006408 <HAL_HCD_Stop+0x32>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f005 fc37 	bl	800bc6c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4413      	add	r3, r2
 8006432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b04      	cmp	r3, #4
 800643e:	d119      	bne.n	8006474 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	461a      	mov	r2, r3
 800644e:	2304      	movs	r3, #4
 8006450:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	440a      	add	r2, r1
 8006468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646c:	f043 0302 	orr.w	r3, r3, #2
 8006470:	60d3      	str	r3, [r2, #12]
 8006472:	e0ce      	b.n	8006612 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648a:	d12c      	bne.n	80064e6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	461a      	mov	r2, r3
 800649a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800649e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	440b      	add	r3, r1
 80064ae:	335d      	adds	r3, #93	; 0x5d
 80064b0:	2207      	movs	r2, #7
 80064b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ce:	f043 0302 	orr.w	r3, r3, #2
 80064d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f005 fac5 	bl	800ba6e <USB_HC_Halt>
 80064e4:	e095      	b.n	8006612 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d109      	bne.n	8006510 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	461a      	mov	r2, r3
 800650a:	2320      	movs	r3, #32
 800650c:	6093      	str	r3, [r2, #8]
 800650e:	e080      	b.n	8006612 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b08      	cmp	r3, #8
 8006524:	d134      	bne.n	8006590 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	0151      	lsls	r1, r2, #5
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	440a      	add	r2, r1
 800653c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006540:	f043 0302 	orr.w	r3, r3, #2
 8006544:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	440b      	add	r3, r1
 8006554:	335d      	adds	r3, #93	; 0x5d
 8006556:	2205      	movs	r2, #5
 8006558:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4413      	add	r3, r2
 8006562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006566:	461a      	mov	r2, r3
 8006568:	2310      	movs	r3, #16
 800656a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	461a      	mov	r2, r3
 800657a:	2308      	movs	r3, #8
 800657c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f005 fa70 	bl	800ba6e <USB_HC_Halt>
 800658e:	e040      	b.n	8006612 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	4413      	add	r3, r2
 8006598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a6:	d134      	bne.n	8006612 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c2:	f043 0302 	orr.w	r3, r3, #2
 80065c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f005 fa4b 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	461a      	mov	r2, r3
 80065e6:	2310      	movs	r3, #16
 80065e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	440b      	add	r3, r1
 80065f8:	335d      	adds	r3, #93	; 0x5d
 80065fa:	2208      	movs	r2, #8
 80065fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4413      	add	r3, r2
 8006606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660a:	461a      	mov	r2, r3
 800660c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006610:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	4413      	add	r3, r2
 800661a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006628:	d122      	bne.n	8006670 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	440a      	add	r2, r1
 8006640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006644:	f043 0302 	orr.w	r3, r3, #2
 8006648:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f005 fa0a 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	461a      	mov	r2, r3
 8006668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800666c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800666e:	e300      	b.n	8006c72 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b01      	cmp	r3, #1
 8006684:	f040 80fd 	bne.w	8006882 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01b      	beq.n	80066c8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	440b      	add	r3, r1
 800669e:	3348      	adds	r3, #72	; 0x48
 80066a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	0159      	lsls	r1, r3, #5
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	440b      	add	r3, r1
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80066b4:	1ad1      	subs	r1, r2, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4403      	add	r3, r0
 80066c4:	334c      	adds	r3, #76	; 0x4c
 80066c6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	440b      	add	r3, r1
 80066d6:	335d      	adds	r3, #93	; 0x5d
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	440b      	add	r3, r1
 80066ea:	3358      	adds	r3, #88	; 0x58
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fc:	461a      	mov	r2, r3
 80066fe:	2301      	movs	r3, #1
 8006700:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	440b      	add	r3, r1
 8006710:	333f      	adds	r3, #63	; 0x3f
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	440b      	add	r3, r1
 8006726:	333f      	adds	r3, #63	; 0x3f
 8006728:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800672a:	2b02      	cmp	r3, #2
 800672c:	d121      	bne.n	8006772 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	440a      	add	r2, r1
 8006744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006748:	f043 0302 	orr.w	r3, r3, #2
 800674c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f005 f988 	bl	800ba6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	461a      	mov	r2, r3
 800676c:	2310      	movs	r3, #16
 800676e:	6093      	str	r3, [r2, #8]
 8006770:	e070      	b.n	8006854 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	440b      	add	r3, r1
 8006780:	333f      	adds	r3, #63	; 0x3f
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d12a      	bne.n	80067de <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	440a      	add	r2, r1
 800679e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4613      	mov	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	440b      	add	r3, r1
 80067b6:	335c      	adds	r3, #92	; 0x5c
 80067b8:	2201      	movs	r2, #1
 80067ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	b2d8      	uxtb	r0, r3
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	440b      	add	r3, r1
 80067ce:	335c      	adds	r3, #92	; 0x5c
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	4601      	mov	r1, r0
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f006 fc26 	bl	800d028 <HAL_HCD_HC_NotifyURBChange_Callback>
 80067dc:	e03a      	b.n	8006854 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	440b      	add	r3, r1
 80067ec:	333f      	adds	r3, #63	; 0x3f
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d12f      	bne.n	8006854 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	440b      	add	r3, r1
 8006802:	335c      	adds	r3, #92	; 0x5c
 8006804:	2201      	movs	r2, #1
 8006806:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	440b      	add	r3, r1
 8006816:	3350      	adds	r3, #80	; 0x50
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	f083 0301 	eor.w	r3, r3, #1
 800681e:	b2d8      	uxtb	r0, r3
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	440b      	add	r3, r1
 800682e:	3350      	adds	r3, #80	; 0x50
 8006830:	4602      	mov	r2, r0
 8006832:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	b2d8      	uxtb	r0, r3
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	440b      	add	r3, r1
 8006846:	335c      	adds	r3, #92	; 0x5c
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	4601      	mov	r1, r0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f006 fbea 	bl	800d028 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	440b      	add	r3, r1
 8006862:	3350      	adds	r3, #80	; 0x50
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f083 0301 	eor.w	r3, r3, #1
 800686a:	b2d8      	uxtb	r0, r3
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	440b      	add	r3, r1
 800687a:	3350      	adds	r3, #80	; 0x50
 800687c:	4602      	mov	r2, r0
 800687e:	701a      	strb	r2, [r3, #0]
}
 8006880:	e1f7      	b.n	8006c72 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	f040 811a 	bne.w	8006ace <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068b4:	f023 0302 	bic.w	r3, r3, #2
 80068b8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	440b      	add	r3, r1
 80068c8:	335d      	adds	r3, #93	; 0x5d
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10a      	bne.n	80068e6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	440b      	add	r3, r1
 80068de:	335c      	adds	r3, #92	; 0x5c
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	e0d9      	b.n	8006a9a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	440b      	add	r3, r1
 80068f4:	335d      	adds	r3, #93	; 0x5d
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b05      	cmp	r3, #5
 80068fa:	d10a      	bne.n	8006912 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	440b      	add	r3, r1
 800690a:	335c      	adds	r3, #92	; 0x5c
 800690c:	2205      	movs	r2, #5
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	e0c3      	b.n	8006a9a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	440b      	add	r3, r1
 8006920:	335d      	adds	r3, #93	; 0x5d
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b06      	cmp	r3, #6
 8006926:	d00a      	beq.n	800693e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	440b      	add	r3, r1
 8006936:	335d      	adds	r3, #93	; 0x5d
 8006938:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800693a:	2b08      	cmp	r3, #8
 800693c:	d156      	bne.n	80069ec <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	440b      	add	r3, r1
 800694c:	3358      	adds	r3, #88	; 0x58
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	1c59      	adds	r1, r3, #1
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	4403      	add	r3, r0
 8006960:	3358      	adds	r3, #88	; 0x58
 8006962:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4613      	mov	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	440b      	add	r3, r1
 8006972:	3358      	adds	r3, #88	; 0x58
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d914      	bls.n	80069a4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	440b      	add	r3, r1
 8006988:	3358      	adds	r3, #88	; 0x58
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	440b      	add	r3, r1
 800699c:	335c      	adds	r3, #92	; 0x5c
 800699e:	2204      	movs	r2, #4
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	e009      	b.n	80069b8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	440b      	add	r3, r1
 80069b2:	335c      	adds	r3, #92	; 0x5c
 80069b4:	2202      	movs	r2, #2
 80069b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e4:	461a      	mov	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	e056      	b.n	8006a9a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	440b      	add	r3, r1
 80069fa:	335d      	adds	r3, #93	; 0x5d
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d123      	bne.n	8006a4a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	440b      	add	r3, r1
 8006a10:	335c      	adds	r3, #92	; 0x5c
 8006a12:	2202      	movs	r2, #2
 8006a14:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a2c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a34:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a42:	461a      	mov	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	e027      	b.n	8006a9a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	440b      	add	r3, r1
 8006a58:	335d      	adds	r3, #93	; 0x5d
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b07      	cmp	r3, #7
 8006a5e:	d11c      	bne.n	8006a9a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	440b      	add	r3, r1
 8006a6e:	3358      	adds	r3, #88	; 0x58
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	1c59      	adds	r1, r3, #1
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	4403      	add	r3, r0
 8006a82:	3358      	adds	r3, #88	; 0x58
 8006a84:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	440b      	add	r3, r1
 8006a94:	335c      	adds	r3, #92	; 0x5c
 8006a96:	2204      	movs	r2, #4
 8006a98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	b2d8      	uxtb	r0, r3
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	440b      	add	r3, r1
 8006abe:	335c      	adds	r3, #92	; 0x5c
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f006 faae 	bl	800d028 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006acc:	e0d1      	b.n	8006c72 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae0:	2b80      	cmp	r3, #128	; 0x80
 8006ae2:	d13e      	bne.n	8006b62 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	0151      	lsls	r1, r2, #5
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	440a      	add	r2, r1
 8006afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006afe:	f043 0302 	orr.w	r3, r3, #2
 8006b02:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	440b      	add	r3, r1
 8006b12:	3358      	adds	r3, #88	; 0x58
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	1c59      	adds	r1, r3, #1
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	4403      	add	r3, r0
 8006b26:	3358      	adds	r3, #88	; 0x58
 8006b28:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	440b      	add	r3, r1
 8006b38:	335d      	adds	r3, #93	; 0x5d
 8006b3a:	2206      	movs	r2, #6
 8006b3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	4611      	mov	r1, r2
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f004 ff90 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	6093      	str	r3, [r2, #8]
}
 8006b60:	e087      	b.n	8006c72 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d17c      	bne.n	8006c72 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	440b      	add	r3, r1
 8006b86:	333f      	adds	r3, #63	; 0x3f
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d122      	bne.n	8006bd4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	440b      	add	r3, r1
 8006b9c:	3358      	adds	r3, #88	; 0x58
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bbc:	f043 0302 	orr.w	r3, r3, #2
 8006bc0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f004 ff4e 	bl	800ba6e <USB_HC_Halt>
 8006bd2:	e045      	b.n	8006c60 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	440b      	add	r3, r1
 8006be2:	333f      	adds	r3, #63	; 0x3f
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	440b      	add	r3, r1
 8006bf8:	333f      	adds	r3, #63	; 0x3f
 8006bfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d12f      	bne.n	8006c60 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3358      	adds	r3, #88	; 0x58
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d121      	bne.n	8006c60 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	440b      	add	r3, r1
 8006c2a:	335d      	adds	r3, #93	; 0x5d
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c4a:	f043 0302 	orr.w	r3, r3, #2
 8006c4e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f004 ff07 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2310      	movs	r3, #16
 8006c70:	6093      	str	r3, [r2, #8]
}
 8006c72:	bf00      	nop
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b086      	sub	sp, #24
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d119      	bne.n	8006cde <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	2304      	movs	r3, #4
 8006cba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	0151      	lsls	r1, r2, #5
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	440a      	add	r2, r1
 8006cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd6:	f043 0302 	orr.w	r3, r3, #2
 8006cda:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006cdc:	e33e      	b.n	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d141      	bne.n	8006d78 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d00:	461a      	mov	r2, r3
 8006d02:	2320      	movs	r3, #32
 8006d04:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	440b      	add	r3, r1
 8006d14:	333d      	adds	r3, #61	; 0x3d
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	f040 831f 	bne.w	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4613      	mov	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	440b      	add	r3, r1
 8006d2c:	333d      	adds	r3, #61	; 0x3d
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	440b      	add	r3, r1
 8006d40:	335c      	adds	r3, #92	; 0x5c
 8006d42:	2202      	movs	r2, #2
 8006d44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d60:	f043 0302 	orr.w	r3, r3, #2
 8006d64:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	4611      	mov	r1, r2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f004 fe7c 	bl	800ba6e <USB_HC_Halt>
}
 8006d76:	e2f1      	b.n	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	d13f      	bne.n	8006e0e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	440b      	add	r3, r1
 8006d9c:	335d      	adds	r3, #93	; 0x5d
 8006d9e:	2204      	movs	r2, #4
 8006da0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	440b      	add	r3, r1
 8006db0:	333d      	adds	r3, #61	; 0x3d
 8006db2:	2201      	movs	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3358      	adds	r3, #88	; 0x58
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	0151      	lsls	r1, r2, #5
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	440a      	add	r2, r1
 8006de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	4611      	mov	r1, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f004 fe3a 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e06:	461a      	mov	r2, r3
 8006e08:	2340      	movs	r3, #64	; 0x40
 8006e0a:	6093      	str	r3, [r2, #8]
}
 8006e0c:	e2a6      	b.n	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e24:	d122      	bne.n	8006e6c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e40:	f043 0302 	orr.w	r3, r3, #2
 8006e44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f004 fe0c 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e62:	461a      	mov	r2, r3
 8006e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e68:	6093      	str	r3, [r2, #8]
}
 8006e6a:	e277      	b.n	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d135      	bne.n	8006eee <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	440b      	add	r3, r1
 8006e90:	3358      	adds	r3, #88	; 0x58
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb0:	f043 0302 	orr.w	r3, r3, #2
 8006eb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f004 fdd4 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	440b      	add	r3, r1
 8006ee6:	335d      	adds	r3, #93	; 0x5d
 8006ee8:	2201      	movs	r2, #1
 8006eea:	701a      	strb	r2, [r3, #0]
}
 8006eec:	e236      	b.n	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d12b      	bne.n	8006f5c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f10:	461a      	mov	r2, r3
 8006f12:	2308      	movs	r3, #8
 8006f14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	0151      	lsls	r1, r2, #5
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	440a      	add	r2, r1
 8006f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f004 fd94 	bl	800ba6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	440b      	add	r3, r1
 8006f54:	335d      	adds	r3, #93	; 0x5d
 8006f56:	2205      	movs	r2, #5
 8006f58:	701a      	strb	r2, [r3, #0]
}
 8006f5a:	e1ff      	b.n	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d155      	bne.n	800701e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	440b      	add	r3, r1
 8006f80:	3358      	adds	r3, #88	; 0x58
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	440b      	add	r3, r1
 8006f94:	335d      	adds	r3, #93	; 0x5d
 8006f96:	2203      	movs	r2, #3
 8006f98:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	440b      	add	r3, r1
 8006fa8:	333d      	adds	r3, #61	; 0x3d
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d114      	bne.n	8006fda <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	440b      	add	r3, r1
 8006fbe:	333c      	adds	r3, #60	; 0x3c
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d109      	bne.n	8006fda <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	440b      	add	r3, r1
 8006fd4:	333d      	adds	r3, #61	; 0x3d
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff4:	f043 0302 	orr.w	r3, r3, #2
 8006ff8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f004 fd32 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007016:	461a      	mov	r2, r3
 8007018:	2310      	movs	r3, #16
 800701a:	6093      	str	r3, [r2, #8]
}
 800701c:	e19e      	b.n	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4413      	add	r3, r2
 8007026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007030:	2b80      	cmp	r3, #128	; 0x80
 8007032:	d12b      	bne.n	800708c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	4413      	add	r3, r2
 800703c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	440a      	add	r2, r1
 800704a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800704e:	f043 0302 	orr.w	r3, r3, #2
 8007052:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	4611      	mov	r1, r2
 800705e:	4618      	mov	r0, r3
 8007060:	f004 fd05 	bl	800ba6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	440b      	add	r3, r1
 8007072:	335d      	adds	r3, #93	; 0x5d
 8007074:	2206      	movs	r2, #6
 8007076:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	4413      	add	r3, r2
 8007080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007084:	461a      	mov	r2, r3
 8007086:	2380      	movs	r3, #128	; 0x80
 8007088:	6093      	str	r3, [r2, #8]
}
 800708a:	e167      	b.n	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4413      	add	r3, r2
 8007094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800709e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a2:	d135      	bne.n	8007110 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070be:	f043 0302 	orr.w	r3, r3, #2
 80070c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f004 fccd 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e0:	461a      	mov	r2, r3
 80070e2:	2310      	movs	r3, #16
 80070e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f2:	461a      	mov	r2, r3
 80070f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	440b      	add	r3, r1
 8007108:	335d      	adds	r3, #93	; 0x5d
 800710a:	2208      	movs	r2, #8
 800710c:	701a      	strb	r2, [r3, #0]
}
 800710e:	e125      	b.n	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b02      	cmp	r3, #2
 8007124:	f040 811a 	bne.w	800735c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	4413      	add	r3, r2
 8007130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	440a      	add	r2, r1
 800713e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007142:	f023 0302 	bic.w	r3, r3, #2
 8007146:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	440b      	add	r3, r1
 8007156:	335d      	adds	r3, #93	; 0x5d
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d137      	bne.n	80071ce <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	440b      	add	r3, r1
 800716c:	335c      	adds	r3, #92	; 0x5c
 800716e:	2201      	movs	r2, #1
 8007170:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	440b      	add	r3, r1
 8007180:	333f      	adds	r3, #63	; 0x3f
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d00b      	beq.n	80071a0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	440b      	add	r3, r1
 8007196:	333f      	adds	r3, #63	; 0x3f
 8007198:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800719a:	2b03      	cmp	r3, #3
 800719c:	f040 80c5 	bne.w	800732a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	440b      	add	r3, r1
 80071ae:	3351      	adds	r3, #81	; 0x51
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f083 0301 	eor.w	r3, r3, #1
 80071b6:	b2d8      	uxtb	r0, r3
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	440b      	add	r3, r1
 80071c6:	3351      	adds	r3, #81	; 0x51
 80071c8:	4602      	mov	r2, r0
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	e0ad      	b.n	800732a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	440b      	add	r3, r1
 80071dc:	335d      	adds	r3, #93	; 0x5d
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d10a      	bne.n	80071fa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	440b      	add	r3, r1
 80071f2:	335c      	adds	r3, #92	; 0x5c
 80071f4:	2202      	movs	r2, #2
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	e097      	b.n	800732a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	440b      	add	r3, r1
 8007208:	335d      	adds	r3, #93	; 0x5d
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d10a      	bne.n	8007226 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	440b      	add	r3, r1
 800721e:	335c      	adds	r3, #92	; 0x5c
 8007220:	2202      	movs	r2, #2
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	e081      	b.n	800732a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	440b      	add	r3, r1
 8007234:	335d      	adds	r3, #93	; 0x5d
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b05      	cmp	r3, #5
 800723a:	d10a      	bne.n	8007252 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	440b      	add	r3, r1
 800724a:	335c      	adds	r3, #92	; 0x5c
 800724c:	2205      	movs	r2, #5
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	e06b      	b.n	800732a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	440b      	add	r3, r1
 8007260:	335d      	adds	r3, #93	; 0x5d
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b06      	cmp	r3, #6
 8007266:	d00a      	beq.n	800727e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	440b      	add	r3, r1
 8007276:	335d      	adds	r3, #93	; 0x5d
 8007278:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800727a:	2b08      	cmp	r3, #8
 800727c:	d155      	bne.n	800732a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	440b      	add	r3, r1
 800728c:	3358      	adds	r3, #88	; 0x58
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	1c59      	adds	r1, r3, #1
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4403      	add	r3, r0
 80072a0:	3358      	adds	r3, #88	; 0x58
 80072a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	440b      	add	r3, r1
 80072b2:	3358      	adds	r3, #88	; 0x58
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d914      	bls.n	80072e4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	440b      	add	r3, r1
 80072c8:	3358      	adds	r3, #88	; 0x58
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	440b      	add	r3, r1
 80072dc:	335c      	adds	r3, #92	; 0x5c
 80072de:	2204      	movs	r2, #4
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	e009      	b.n	80072f8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	440b      	add	r3, r1
 80072f2:	335c      	adds	r3, #92	; 0x5c
 80072f4:	2202      	movs	r2, #2
 80072f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800730e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007316:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4413      	add	r3, r2
 8007320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007324:	461a      	mov	r2, r3
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	4413      	add	r3, r2
 8007332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007336:	461a      	mov	r2, r3
 8007338:	2302      	movs	r3, #2
 800733a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	b2d8      	uxtb	r0, r3
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	440b      	add	r3, r1
 800734e:	335c      	adds	r3, #92	; 0x5c
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	4601      	mov	r1, r0
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f005 fe66 	bl	800d028 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800735c:	bf00      	nop
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	0c5b      	lsrs	r3, r3, #17
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	091b      	lsrs	r3, r3, #4
 8007394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007398:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d003      	beq.n	80073a8 <HCD_RXQLVL_IRQHandler+0x44>
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	f000 8082 	beq.w	80074aa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80073a6:	e083      	b.n	80074b0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d07f      	beq.n	80074ae <HCD_RXQLVL_IRQHandler+0x14a>
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	440b      	add	r3, r1
 80073bc:	3344      	adds	r3, #68	; 0x44
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d074      	beq.n	80074ae <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	440b      	add	r3, r1
 80073d6:	3344      	adds	r3, #68	; 0x44
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	b292      	uxth	r2, r2
 80073de:	4619      	mov	r1, r3
 80073e0:	f004 fab0 	bl	800b944 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	440b      	add	r3, r1
 80073f2:	3344      	adds	r3, #68	; 0x44
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	18d1      	adds	r1, r2, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	4403      	add	r3, r0
 8007408:	3344      	adds	r3, #68	; 0x44
 800740a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	440b      	add	r3, r1
 800741a:	334c      	adds	r3, #76	; 0x4c
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	18d1      	adds	r1, r2, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	4403      	add	r3, r0
 8007430:	334c      	adds	r3, #76	; 0x4c
 8007432:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	4413      	add	r3, r2
 800743c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	4b1d      	ldr	r3, [pc, #116]	; (80074b8 <HCD_RXQLVL_IRQHandler+0x154>)
 8007444:	4013      	ands	r3, r2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d031      	beq.n	80074ae <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	4413      	add	r3, r2
 8007452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007460:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007468:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007476:	461a      	mov	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	440b      	add	r3, r1
 800748a:	3350      	adds	r3, #80	; 0x50
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	f083 0301 	eor.w	r3, r3, #1
 8007492:	b2d8      	uxtb	r0, r3
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	440b      	add	r3, r1
 80074a2:	3350      	adds	r3, #80	; 0x50
 80074a4:	4602      	mov	r2, r0
 80074a6:	701a      	strb	r2, [r3, #0]
      break;
 80074a8:	e001      	b.n	80074ae <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80074aa:	bf00      	nop
 80074ac:	e000      	b.n	80074b0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80074ae:	bf00      	nop
  }
}
 80074b0:	bf00      	nop
 80074b2:	3728      	adds	r7, #40	; 0x28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	1ff80000 	.word	0x1ff80000

080074bc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074e8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d10b      	bne.n	800750c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d102      	bne.n	8007504 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f005 fd76 	bl	800cff0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f043 0302 	orr.w	r3, r3, #2
 800750a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b08      	cmp	r3, #8
 8007514:	d132      	bne.n	800757c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f043 0308 	orr.w	r3, r3, #8
 800751c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b04      	cmp	r3, #4
 8007526:	d126      	bne.n	8007576 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	2b02      	cmp	r3, #2
 800752e:	d113      	bne.n	8007558 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007536:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800753a:	d106      	bne.n	800754a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2102      	movs	r1, #2
 8007542:	4618      	mov	r0, r3
 8007544:	f004 fa48 	bl	800b9d8 <USB_InitFSLSPClkSel>
 8007548:	e011      	b.n	800756e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2101      	movs	r1, #1
 8007550:	4618      	mov	r0, r3
 8007552:	f004 fa41 	bl	800b9d8 <USB_InitFSLSPClkSel>
 8007556:	e00a      	b.n	800756e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d106      	bne.n	800756e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007566:	461a      	mov	r2, r3
 8007568:	f64e 2360 	movw	r3, #60000	; 0xea60
 800756c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f005 fd6c 	bl	800d04c <HAL_HCD_PortEnabled_Callback>
 8007574:	e002      	b.n	800757c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f005 fd76 	bl	800d068 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b20      	cmp	r3, #32
 8007584:	d103      	bne.n	800758e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f043 0320 	orr.w	r3, r3, #32
 800758c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007594:	461a      	mov	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	6013      	str	r3, [r2, #0]
}
 800759a:	bf00      	nop
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e11f      	b.n	80077f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7f9 fd4e 	bl	800106c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2224      	movs	r2, #36	; 0x24
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007608:	f002 f804 	bl	8009614 <HAL_RCC_GetPCLK1Freq>
 800760c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4a7b      	ldr	r2, [pc, #492]	; (8007800 <HAL_I2C_Init+0x25c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d807      	bhi.n	8007628 <HAL_I2C_Init+0x84>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a7a      	ldr	r2, [pc, #488]	; (8007804 <HAL_I2C_Init+0x260>)
 800761c:	4293      	cmp	r3, r2
 800761e:	bf94      	ite	ls
 8007620:	2301      	movls	r3, #1
 8007622:	2300      	movhi	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	e006      	b.n	8007636 <HAL_I2C_Init+0x92>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a77      	ldr	r2, [pc, #476]	; (8007808 <HAL_I2C_Init+0x264>)
 800762c:	4293      	cmp	r3, r2
 800762e:	bf94      	ite	ls
 8007630:	2301      	movls	r3, #1
 8007632:	2300      	movhi	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e0db      	b.n	80077f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4a72      	ldr	r2, [pc, #456]	; (800780c <HAL_I2C_Init+0x268>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	0c9b      	lsrs	r3, r3, #18
 8007648:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	4a64      	ldr	r2, [pc, #400]	; (8007800 <HAL_I2C_Init+0x25c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d802      	bhi.n	8007678 <HAL_I2C_Init+0xd4>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	3301      	adds	r3, #1
 8007676:	e009      	b.n	800768c <HAL_I2C_Init+0xe8>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800767e:	fb02 f303 	mul.w	r3, r2, r3
 8007682:	4a63      	ldr	r2, [pc, #396]	; (8007810 <HAL_I2C_Init+0x26c>)
 8007684:	fba2 2303 	umull	r2, r3, r2, r3
 8007688:	099b      	lsrs	r3, r3, #6
 800768a:	3301      	adds	r3, #1
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6812      	ldr	r2, [r2, #0]
 8007690:	430b      	orrs	r3, r1
 8007692:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800769e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	4956      	ldr	r1, [pc, #344]	; (8007800 <HAL_I2C_Init+0x25c>)
 80076a8:	428b      	cmp	r3, r1
 80076aa:	d80d      	bhi.n	80076c8 <HAL_I2C_Init+0x124>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	1e59      	subs	r1, r3, #1
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80076ba:	3301      	adds	r3, #1
 80076bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	bf38      	it	cc
 80076c4:	2304      	movcc	r3, #4
 80076c6:	e04f      	b.n	8007768 <HAL_I2C_Init+0x1c4>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d111      	bne.n	80076f4 <HAL_I2C_Init+0x150>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	1e58      	subs	r0, r3, #1
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6859      	ldr	r1, [r3, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	440b      	add	r3, r1
 80076de:	fbb0 f3f3 	udiv	r3, r0, r3
 80076e2:	3301      	adds	r3, #1
 80076e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	bf0c      	ite	eq
 80076ec:	2301      	moveq	r3, #1
 80076ee:	2300      	movne	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	e012      	b.n	800771a <HAL_I2C_Init+0x176>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	1e58      	subs	r0, r3, #1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6859      	ldr	r1, [r3, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	0099      	lsls	r1, r3, #2
 8007704:	440b      	add	r3, r1
 8007706:	fbb0 f3f3 	udiv	r3, r0, r3
 800770a:	3301      	adds	r3, #1
 800770c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007710:	2b00      	cmp	r3, #0
 8007712:	bf0c      	ite	eq
 8007714:	2301      	moveq	r3, #1
 8007716:	2300      	movne	r3, #0
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <HAL_I2C_Init+0x17e>
 800771e:	2301      	movs	r3, #1
 8007720:	e022      	b.n	8007768 <HAL_I2C_Init+0x1c4>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10e      	bne.n	8007748 <HAL_I2C_Init+0x1a4>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1e58      	subs	r0, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6859      	ldr	r1, [r3, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	440b      	add	r3, r1
 8007738:	fbb0 f3f3 	udiv	r3, r0, r3
 800773c:	3301      	adds	r3, #1
 800773e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007746:	e00f      	b.n	8007768 <HAL_I2C_Init+0x1c4>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	1e58      	subs	r0, r3, #1
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6859      	ldr	r1, [r3, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	440b      	add	r3, r1
 8007756:	0099      	lsls	r1, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	fbb0 f3f3 	udiv	r3, r0, r3
 800775e:	3301      	adds	r3, #1
 8007760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	6809      	ldr	r1, [r1, #0]
 800776c:	4313      	orrs	r3, r2
 800776e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69da      	ldr	r2, [r3, #28]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6911      	ldr	r1, [r2, #16]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	68d2      	ldr	r2, [r2, #12]
 80077a2:	4311      	orrs	r1, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	430b      	orrs	r3, r1
 80077aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695a      	ldr	r2, [r3, #20]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	000186a0 	.word	0x000186a0
 8007804:	001e847f 	.word	0x001e847f
 8007808:	003d08ff 	.word	0x003d08ff
 800780c:	431bde83 	.word	0x431bde83
 8007810:	10624dd3 	.word	0x10624dd3

08007814 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e021      	b.n	800786a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2224      	movs	r2, #36	; 0x24
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7f9 fc7e 	bl	8001140 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af02      	add	r7, sp, #8
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	4608      	mov	r0, r1
 800787e:	4611      	mov	r1, r2
 8007880:	461a      	mov	r2, r3
 8007882:	4603      	mov	r3, r0
 8007884:	817b      	strh	r3, [r7, #10]
 8007886:	460b      	mov	r3, r1
 8007888:	813b      	strh	r3, [r7, #8]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800788e:	f7fd fb4d 	bl	8004f2c <HAL_GetTick>
 8007892:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b20      	cmp	r3, #32
 800789e:	f040 80d9 	bne.w	8007a54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	2319      	movs	r3, #25
 80078a8:	2201      	movs	r2, #1
 80078aa:	496d      	ldr	r1, [pc, #436]	; (8007a60 <HAL_I2C_Mem_Write+0x1ec>)
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 fc8d 	bl	80081cc <I2C_WaitOnFlagUntilTimeout>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80078b8:	2302      	movs	r3, #2
 80078ba:	e0cc      	b.n	8007a56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_I2C_Mem_Write+0x56>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e0c5      	b.n	8007a56 <HAL_I2C_Mem_Write+0x1e2>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d007      	beq.n	80078f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2221      	movs	r2, #33	; 0x21
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2240      	movs	r2, #64	; 0x40
 800790c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a3a      	ldr	r2, [r7, #32]
 800791a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007920:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007926:	b29a      	uxth	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4a4d      	ldr	r2, [pc, #308]	; (8007a64 <HAL_I2C_Mem_Write+0x1f0>)
 8007930:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007932:	88f8      	ldrh	r0, [r7, #6]
 8007934:	893a      	ldrh	r2, [r7, #8]
 8007936:	8979      	ldrh	r1, [r7, #10]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4603      	mov	r3, r0
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fac4 	bl	8007ed0 <I2C_RequestMemoryWrite>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d052      	beq.n	80079f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e081      	b.n	8007a56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fd0e 	bl	8008378 <I2C_WaitOnTXEFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00d      	beq.n	800797e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	2b04      	cmp	r3, #4
 8007968:	d107      	bne.n	800797a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007978:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e06b      	b.n	8007a56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	781a      	ldrb	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d11b      	bne.n	80079f4 <HAL_I2C_Mem_Write+0x180>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d017      	beq.n	80079f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1aa      	bne.n	8007952 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fcfa 	bl	80083fa <I2C_WaitOnBTFFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00d      	beq.n	8007a28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	d107      	bne.n	8007a24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e016      	b.n	8007a56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	e000      	b.n	8007a56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a54:	2302      	movs	r3, #2
  }
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	00100002 	.word	0x00100002
 8007a64:	ffff0000 	.word	0xffff0000

08007a68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08c      	sub	sp, #48	; 0x30
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	4608      	mov	r0, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	461a      	mov	r2, r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	817b      	strh	r3, [r7, #10]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	813b      	strh	r3, [r7, #8]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a82:	f7fd fa53 	bl	8004f2c <HAL_GetTick>
 8007a86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	f040 8208 	bne.w	8007ea6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	2319      	movs	r3, #25
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	497b      	ldr	r1, [pc, #492]	; (8007c8c <HAL_I2C_Mem_Read+0x224>)
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 fb93 	bl	80081cc <I2C_WaitOnFlagUntilTimeout>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007aac:	2302      	movs	r3, #2
 8007aae:	e1fb      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_I2C_Mem_Read+0x56>
 8007aba:	2302      	movs	r3, #2
 8007abc:	e1f4      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x440>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d007      	beq.n	8007ae4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0201 	orr.w	r2, r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007af2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2222      	movs	r2, #34	; 0x22
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2240      	movs	r2, #64	; 0x40
 8007b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a5b      	ldr	r2, [pc, #364]	; (8007c90 <HAL_I2C_Mem_Read+0x228>)
 8007b24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b26:	88f8      	ldrh	r0, [r7, #6]
 8007b28:	893a      	ldrh	r2, [r7, #8]
 8007b2a:	8979      	ldrh	r1, [r7, #10]
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	4603      	mov	r3, r0
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fa60 	bl	8007ffc <I2C_RequestMemoryRead>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e1b0      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d113      	bne.n	8007b76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b4e:	2300      	movs	r3, #0
 8007b50:	623b      	str	r3, [r7, #32]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	623b      	str	r3, [r7, #32]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	623b      	str	r3, [r7, #32]
 8007b62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	e184      	b.n	8007e80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d11b      	bne.n	8007bb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	61fb      	str	r3, [r7, #28]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	61fb      	str	r3, [r7, #28]
 8007ba2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e164      	b.n	8007e80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d11b      	bne.n	8007bf6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bde:	2300      	movs	r3, #0
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	61bb      	str	r3, [r7, #24]
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	e144      	b.n	8007e80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c0c:	e138      	b.n	8007e80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	f200 80f1 	bhi.w	8007dfa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d123      	bne.n	8007c68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 fc29 	bl	800847c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e139      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691a      	ldr	r2, [r3, #16]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c66:	e10b      	b.n	8007e80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d14e      	bne.n	8007d0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	2200      	movs	r2, #0
 8007c78:	4906      	ldr	r1, [pc, #24]	; (8007c94 <HAL_I2C_Mem_Read+0x22c>)
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 faa6 	bl	80081cc <I2C_WaitOnFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d008      	beq.n	8007c98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e10e      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x440>
 8007c8a:	bf00      	nop
 8007c8c:	00100002 	.word	0x00100002
 8007c90:	ffff0000 	.word	0xffff0000
 8007c94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691a      	ldr	r2, [r3, #16]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	b2d2      	uxtb	r2, r2
 8007ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d0c:	e0b8      	b.n	8007e80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	2200      	movs	r2, #0
 8007d16:	4966      	ldr	r1, [pc, #408]	; (8007eb0 <HAL_I2C_Mem_Read+0x448>)
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fa57 	bl	80081cc <I2C_WaitOnFlagUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e0bf      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691a      	ldr	r2, [r3, #16]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d70:	2200      	movs	r2, #0
 8007d72:	494f      	ldr	r1, [pc, #316]	; (8007eb0 <HAL_I2C_Mem_Read+0x448>)
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 fa29 	bl	80081cc <I2C_WaitOnFlagUntilTimeout>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e091      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691a      	ldr	r2, [r3, #16]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	b2d2      	uxtb	r2, r2
 8007da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	b2d2      	uxtb	r2, r2
 8007dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007df8:	e042      	b.n	8007e80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fb3c 	bl	800847c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e04c      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691a      	ldr	r2, [r3, #16]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	b2d2      	uxtb	r2, r2
 8007e1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d118      	bne.n	8007e80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f47f aec2 	bne.w	8007c0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ea6:	2302      	movs	r3, #2
  }
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3728      	adds	r7, #40	; 0x28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	00010004 	.word	0x00010004

08007eb4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec2:	b2db      	uxtb	r3, r3
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	4608      	mov	r0, r1
 8007eda:	4611      	mov	r1, r2
 8007edc:	461a      	mov	r2, r3
 8007ede:	4603      	mov	r3, r0
 8007ee0:	817b      	strh	r3, [r7, #10]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	813b      	strh	r3, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ef8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f960 	bl	80081cc <I2C_WaitOnFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00d      	beq.n	8007f2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f20:	d103      	bne.n	8007f2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e05f      	b.n	8007fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f2e:	897b      	ldrh	r3, [r7, #10]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	461a      	mov	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	6a3a      	ldr	r2, [r7, #32]
 8007f42:	492d      	ldr	r1, [pc, #180]	; (8007ff8 <I2C_RequestMemoryWrite+0x128>)
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 f998 	bl	800827a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e04c      	b.n	8007fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f54:	2300      	movs	r3, #0
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6c:	6a39      	ldr	r1, [r7, #32]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 fa02 	bl	8008378 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00d      	beq.n	8007f96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d107      	bne.n	8007f92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e02b      	b.n	8007fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d105      	bne.n	8007fa8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f9c:	893b      	ldrh	r3, [r7, #8]
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	611a      	str	r2, [r3, #16]
 8007fa6:	e021      	b.n	8007fec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007fa8:	893b      	ldrh	r3, [r7, #8]
 8007faa:	0a1b      	lsrs	r3, r3, #8
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb8:	6a39      	ldr	r1, [r7, #32]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 f9dc 	bl	8008378 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00d      	beq.n	8007fe2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d107      	bne.n	8007fde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e005      	b.n	8007fee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fe2:	893b      	ldrh	r3, [r7, #8]
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	00010002 	.word	0x00010002

08007ffc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af02      	add	r7, sp, #8
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	461a      	mov	r2, r3
 800800a:	4603      	mov	r3, r0
 800800c:	817b      	strh	r3, [r7, #10]
 800800e:	460b      	mov	r3, r1
 8008010:	813b      	strh	r3, [r7, #8]
 8008012:	4613      	mov	r3, r2
 8008014:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008024:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	2200      	movs	r2, #0
 800803e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f8c2 	bl	80081cc <I2C_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00d      	beq.n	800806a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800805c:	d103      	bne.n	8008066 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008064:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e0aa      	b.n	80081c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800806a:	897b      	ldrh	r3, [r7, #10]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	461a      	mov	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	6a3a      	ldr	r2, [r7, #32]
 800807e:	4952      	ldr	r1, [pc, #328]	; (80081c8 <I2C_RequestMemoryRead+0x1cc>)
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f8fa 	bl	800827a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e097      	b.n	80081c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a8:	6a39      	ldr	r1, [r7, #32]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f964 	bl	8008378 <I2C_WaitOnTXEFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00d      	beq.n	80080d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d107      	bne.n	80080ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e076      	b.n	80081c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d105      	bne.n	80080e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080d8:	893b      	ldrh	r3, [r7, #8]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	611a      	str	r2, [r3, #16]
 80080e2:	e021      	b.n	8008128 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080e4:	893b      	ldrh	r3, [r7, #8]
 80080e6:	0a1b      	lsrs	r3, r3, #8
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f4:	6a39      	ldr	r1, [r7, #32]
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 f93e 	bl	8008378 <I2C_WaitOnTXEFlagUntilTimeout>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00d      	beq.n	800811e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	2b04      	cmp	r3, #4
 8008108:	d107      	bne.n	800811a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e050      	b.n	80081c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800811e:	893b      	ldrh	r3, [r7, #8]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800812a:	6a39      	ldr	r1, [r7, #32]
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 f923 	bl	8008378 <I2C_WaitOnTXEFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00d      	beq.n	8008154 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	2b04      	cmp	r3, #4
 800813e:	d107      	bne.n	8008150 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800814e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e035      	b.n	80081c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008162:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	2200      	movs	r2, #0
 800816c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f82b 	bl	80081cc <I2C_WaitOnFlagUntilTimeout>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00d      	beq.n	8008198 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818a:	d103      	bne.n	8008194 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008192:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e013      	b.n	80081c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008198:	897b      	ldrh	r3, [r7, #10]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f043 0301 	orr.w	r3, r3, #1
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	6a3a      	ldr	r2, [r7, #32]
 80081ac:	4906      	ldr	r1, [pc, #24]	; (80081c8 <I2C_RequestMemoryRead+0x1cc>)
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f863 	bl	800827a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e000      	b.n	80081c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	00010002 	.word	0x00010002

080081cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081dc:	e025      	b.n	800822a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d021      	beq.n	800822a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081e6:	f7fc fea1 	bl	8004f2c <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d302      	bcc.n	80081fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d116      	bne.n	800822a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f043 0220 	orr.w	r2, r3, #32
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e023      	b.n	8008272 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	0c1b      	lsrs	r3, r3, #16
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b01      	cmp	r3, #1
 8008232:	d10d      	bne.n	8008250 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	43da      	mvns	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4013      	ands	r3, r2
 8008240:	b29b      	uxth	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	bf0c      	ite	eq
 8008246:	2301      	moveq	r3, #1
 8008248:	2300      	movne	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	461a      	mov	r2, r3
 800824e:	e00c      	b.n	800826a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	43da      	mvns	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	4013      	ands	r3, r2
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	bf0c      	ite	eq
 8008262:	2301      	moveq	r3, #1
 8008264:	2300      	movne	r3, #0
 8008266:	b2db      	uxtb	r3, r3
 8008268:	461a      	mov	r2, r3
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	429a      	cmp	r2, r3
 800826e:	d0b6      	beq.n	80081de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	607a      	str	r2, [r7, #4]
 8008286:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008288:	e051      	b.n	800832e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008298:	d123      	bne.n	80082e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2220      	movs	r2, #32
 80082be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	f043 0204 	orr.w	r2, r3, #4
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e046      	b.n	8008370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d021      	beq.n	800832e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ea:	f7fc fe1f 	bl	8004f2c <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d302      	bcc.n	8008300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d116      	bne.n	800832e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2220      	movs	r2, #32
 800830a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	f043 0220 	orr.w	r2, r3, #32
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e020      	b.n	8008370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	0c1b      	lsrs	r3, r3, #16
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b01      	cmp	r3, #1
 8008336:	d10c      	bne.n	8008352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	43da      	mvns	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4013      	ands	r3, r2
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	bf14      	ite	ne
 800834a:	2301      	movne	r3, #1
 800834c:	2300      	moveq	r3, #0
 800834e:	b2db      	uxtb	r3, r3
 8008350:	e00b      	b.n	800836a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	43da      	mvns	r2, r3
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4013      	ands	r3, r2
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	bf14      	ite	ne
 8008364:	2301      	movne	r3, #1
 8008366:	2300      	moveq	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d18d      	bne.n	800828a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008384:	e02d      	b.n	80083e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 f8ce 	bl	8008528 <I2C_IsAcknowledgeFailed>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e02d      	b.n	80083f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839c:	d021      	beq.n	80083e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800839e:	f7fc fdc5 	bl	8004f2c <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d302      	bcc.n	80083b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d116      	bne.n	80083e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	f043 0220 	orr.w	r2, r3, #32
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e007      	b.n	80083f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ec:	2b80      	cmp	r3, #128	; 0x80
 80083ee:	d1ca      	bne.n	8008386 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008406:	e02d      	b.n	8008464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f88d 	bl	8008528 <I2C_IsAcknowledgeFailed>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e02d      	b.n	8008474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841e:	d021      	beq.n	8008464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008420:	f7fc fd84 	bl	8004f2c <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	429a      	cmp	r2, r3
 800842e:	d302      	bcc.n	8008436 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d116      	bne.n	8008464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2220      	movs	r2, #32
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	f043 0220 	orr.w	r2, r3, #32
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e007      	b.n	8008474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b04      	cmp	r3, #4
 8008470:	d1ca      	bne.n	8008408 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008488:	e042      	b.n	8008510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	f003 0310 	and.w	r3, r3, #16
 8008494:	2b10      	cmp	r3, #16
 8008496:	d119      	bne.n	80084cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f06f 0210 	mvn.w	r2, #16
 80084a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e029      	b.n	8008520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084cc:	f7fc fd2e 	bl	8004f2c <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d302      	bcc.n	80084e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d116      	bne.n	8008510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	f043 0220 	orr.w	r2, r3, #32
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e007      	b.n	8008520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851a:	2b40      	cmp	r3, #64	; 0x40
 800851c:	d1b5      	bne.n	800848a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800853a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800853e:	d11b      	bne.n	8008578 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008548:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008564:	f043 0204 	orr.w	r2, r3, #4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e000      	b.n	800857a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b20      	cmp	r3, #32
 800859a:	d129      	bne.n	80085f0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2224      	movs	r2, #36	; 0x24
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0201 	bic.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0210 	bic.w	r2, r2, #16
 80085c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0201 	orr.w	r2, r2, #1
 80085e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	e000      	b.n	80085f2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80085f0:	2302      	movs	r3, #2
  }
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b20      	cmp	r3, #32
 8008616:	d12a      	bne.n	800866e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2224      	movs	r2, #36	; 0x24
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0201 	bic.w	r2, r2, #1
 800862e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008638:	89fb      	ldrh	r3, [r7, #14]
 800863a:	f023 030f 	bic.w	r3, r3, #15
 800863e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	b29a      	uxth	r2, r3
 8008644:	89fb      	ldrh	r3, [r7, #14]
 8008646:	4313      	orrs	r3, r2
 8008648:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	89fa      	ldrh	r2, [r7, #14]
 8008650:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0201 	orr.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2220      	movs	r2, #32
 8008666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	e000      	b.n	8008670 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800866e:	2302      	movs	r3, #2
  }
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e0bf      	b.n	800880e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7f8 ff22 	bl	80014ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699a      	ldr	r2, [r3, #24]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80086be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6999      	ldr	r1, [r3, #24]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80086d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	430a      	orrs	r2, r1
 80086e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6899      	ldr	r1, [r3, #8]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	4b4a      	ldr	r3, [pc, #296]	; (8008818 <HAL_LTDC_Init+0x19c>)
 80086f0:	400b      	ands	r3, r1
 80086f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6899      	ldr	r1, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	699a      	ldr	r2, [r3, #24]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68d9      	ldr	r1, [r3, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	4b3e      	ldr	r3, [pc, #248]	; (8008818 <HAL_LTDC_Init+0x19c>)
 800871e:	400b      	ands	r3, r1
 8008720:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	041b      	lsls	r3, r3, #16
 8008728:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68d9      	ldr	r1, [r3, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1a      	ldr	r2, [r3, #32]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6919      	ldr	r1, [r3, #16]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b33      	ldr	r3, [pc, #204]	; (8008818 <HAL_LTDC_Init+0x19c>)
 800874c:	400b      	ands	r3, r1
 800874e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	041b      	lsls	r3, r3, #16
 8008756:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6919      	ldr	r1, [r3, #16]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6959      	ldr	r1, [r3, #20]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	4b27      	ldr	r3, [pc, #156]	; (8008818 <HAL_LTDC_Init+0x19c>)
 800877a:	400b      	ands	r3, r1
 800877c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	041b      	lsls	r3, r3, #16
 8008784:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6959      	ldr	r1, [r3, #20]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	430a      	orrs	r2, r1
 800879a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087a2:	021b      	lsls	r3, r3, #8
 80087a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80087ac:	041b      	lsls	r3, r3, #16
 80087ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80087be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0206 	orr.w	r2, r2, #6
 80087ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0201 	orr.w	r2, r2, #1
 80087fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	f000f800 	.word	0xf000f800

0800881c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b00      	cmp	r3, #0
 800883c:	d023      	beq.n	8008886 <HAL_LTDC_IRQHandler+0x6a>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01e      	beq.n	8008886 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0204 	bic.w	r2, r2, #4
 8008856:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2204      	movs	r2, #4
 800885e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008866:	f043 0201 	orr.w	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2204      	movs	r2, #4
 8008874:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f86f 	bl	8008964 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d023      	beq.n	80088d8 <HAL_LTDC_IRQHandler+0xbc>
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d01e      	beq.n	80088d8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0202 	bic.w	r2, r2, #2
 80088a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2202      	movs	r2, #2
 80088b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088b8:	f043 0202 	orr.w	r2, r3, #2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2204      	movs	r2, #4
 80088c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f846 	bl	8008964 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d01b      	beq.n	800891a <HAL_LTDC_IRQHandler+0xfe>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d016      	beq.n	800891a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0201 	bic.w	r2, r2, #1
 80088fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2201      	movs	r2, #1
 8008902:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f82f 	bl	8008978 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f003 0308 	and.w	r3, r3, #8
 8008920:	2b00      	cmp	r3, #0
 8008922:	d01b      	beq.n	800895c <HAL_LTDC_IRQHandler+0x140>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d016      	beq.n	800895c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0208 	bic.w	r2, r2, #8
 800893c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2208      	movs	r2, #8
 8008944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f818 	bl	800898c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80089a0:	b5b0      	push	{r4, r5, r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <HAL_LTDC_ConfigLayer+0x1a>
 80089b6:	2302      	movs	r3, #2
 80089b8:	e02c      	b.n	8008a14 <HAL_LTDC_ConfigLayer+0x74>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2202      	movs	r2, #2
 80089c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2134      	movs	r1, #52	; 0x34
 80089d0:	fb01 f303 	mul.w	r3, r1, r3
 80089d4:	4413      	add	r3, r2
 80089d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4614      	mov	r4, r2
 80089de:	461d      	mov	r5, r3
 80089e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 f83b 	bl	8008a70 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2201      	movs	r2, #1
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bdb0      	pop	{r4, r5, r7, pc}

08008a1c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_LTDC_EnableDither+0x16>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e016      	b.n	8008a60 <HAL_LTDC_EnableDither+0x44>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008a42:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <HAL_LTDC_EnableDither+0x50>)
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	4a09      	ldr	r2, [pc, #36]	; (8008a6c <HAL_LTDC_EnableDither+0x50>)
 8008a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a4c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	40016800 	.word	0x40016800

08008a70 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b089      	sub	sp, #36	; 0x24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	0c1b      	lsrs	r3, r3, #16
 8008a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a8c:	4413      	add	r3, r2
 8008a8e:	041b      	lsls	r3, r3, #16
 8008a90:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	01db      	lsls	r3, r3, #7
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3384      	adds	r3, #132	; 0x84
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	6812      	ldr	r2, [r2, #0]
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	01d2      	lsls	r2, r2, #7
 8008aac:	440a      	add	r2, r1
 8008aae:	3284      	adds	r2, #132	; 0x84
 8008ab0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008ab4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ac6:	4413      	add	r3, r2
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	01db      	lsls	r3, r3, #7
 8008ad4:	440b      	add	r3, r1
 8008ad6:	3384      	adds	r3, #132	; 0x84
 8008ad8:	4619      	mov	r1, r3
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008aee:	4413      	add	r3, r2
 8008af0:	041b      	lsls	r3, r3, #16
 8008af2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	01db      	lsls	r3, r3, #7
 8008afe:	4413      	add	r3, r2
 8008b00:	3384      	adds	r3, #132	; 0x84
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	4611      	mov	r1, r2
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	01d2      	lsls	r2, r2, #7
 8008b0e:	440a      	add	r2, r1
 8008b10:	3284      	adds	r2, #132	; 0x84
 8008b12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008b16:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b26:	4413      	add	r3, r2
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	01db      	lsls	r3, r3, #7
 8008b34:	440b      	add	r3, r1
 8008b36:	3384      	adds	r3, #132	; 0x84
 8008b38:	4619      	mov	r1, r3
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	01db      	lsls	r3, r3, #7
 8008b4a:	4413      	add	r3, r2
 8008b4c:	3384      	adds	r3, #132	; 0x84
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	6812      	ldr	r2, [r2, #0]
 8008b54:	4611      	mov	r1, r2
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	01d2      	lsls	r2, r2, #7
 8008b5a:	440a      	add	r2, r1
 8008b5c:	3284      	adds	r2, #132	; 0x84
 8008b5e:	f023 0307 	bic.w	r3, r3, #7
 8008b62:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	01db      	lsls	r3, r3, #7
 8008b6e:	4413      	add	r3, r2
 8008b70:	3384      	adds	r3, #132	; 0x84
 8008b72:	461a      	mov	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008b8a:	041b      	lsls	r3, r3, #16
 8008b8c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	01db      	lsls	r3, r3, #7
 8008ba0:	4413      	add	r3, r2
 8008ba2:	3384      	adds	r3, #132	; 0x84
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	01db      	lsls	r3, r3, #7
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3384      	adds	r3, #132	; 0x84
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	01db      	lsls	r3, r3, #7
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3384      	adds	r3, #132	; 0x84
 8008bd8:	4619      	mov	r1, r3
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	01db      	lsls	r3, r3, #7
 8008bea:	4413      	add	r3, r2
 8008bec:	3384      	adds	r3, #132	; 0x84
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	6812      	ldr	r2, [r2, #0]
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	01d2      	lsls	r2, r2, #7
 8008bfa:	440a      	add	r2, r1
 8008bfc:	3284      	adds	r2, #132	; 0x84
 8008bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c02:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	01db      	lsls	r3, r3, #7
 8008c0e:	4413      	add	r3, r2
 8008c10:	3384      	adds	r3, #132	; 0x84
 8008c12:	461a      	mov	r2, r3
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	01db      	lsls	r3, r3, #7
 8008c24:	4413      	add	r3, r2
 8008c26:	3384      	adds	r3, #132	; 0x84
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	6812      	ldr	r2, [r2, #0]
 8008c2e:	4611      	mov	r1, r2
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	01d2      	lsls	r2, r2, #7
 8008c34:	440a      	add	r2, r1
 8008c36:	3284      	adds	r2, #132	; 0x84
 8008c38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008c3c:	f023 0307 	bic.w	r3, r3, #7
 8008c40:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	69da      	ldr	r2, [r3, #28]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	68f9      	ldr	r1, [r7, #12]
 8008c4c:	6809      	ldr	r1, [r1, #0]
 8008c4e:	4608      	mov	r0, r1
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	01c9      	lsls	r1, r1, #7
 8008c54:	4401      	add	r1, r0
 8008c56:	3184      	adds	r1, #132	; 0x84
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	01db      	lsls	r3, r3, #7
 8008c66:	4413      	add	r3, r2
 8008c68:	3384      	adds	r3, #132	; 0x84
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	461a      	mov	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	01db      	lsls	r3, r3, #7
 8008c76:	4413      	add	r3, r2
 8008c78:	3384      	adds	r3, #132	; 0x84
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	01db      	lsls	r3, r3, #7
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3384      	adds	r3, #132	; 0x84
 8008c8e:	461a      	mov	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d102      	bne.n	8008ca4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008c9e:	2304      	movs	r3, #4
 8008ca0:	61fb      	str	r3, [r7, #28]
 8008ca2:	e01b      	b.n	8008cdc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d102      	bne.n	8008cb2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008cac:	2303      	movs	r3, #3
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e014      	b.n	8008cdc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d00b      	beq.n	8008cd2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d007      	beq.n	8008cd2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d003      	beq.n	8008cd2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008cce:	2b07      	cmp	r3, #7
 8008cd0:	d102      	bne.n	8008cd8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	e001      	b.n	8008cdc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	01db      	lsls	r3, r3, #7
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3384      	adds	r3, #132	; 0x84
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	6812      	ldr	r2, [r2, #0]
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	01d2      	lsls	r2, r2, #7
 8008cf6:	440a      	add	r2, r1
 8008cf8:	3284      	adds	r2, #132	; 0x84
 8008cfa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d04:	69fa      	ldr	r2, [r7, #28]
 8008d06:	fb02 f303 	mul.w	r3, r2, r3
 8008d0a:	041a      	lsls	r2, r3, #16
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	6859      	ldr	r1, [r3, #4]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	1acb      	subs	r3, r1, r3
 8008d16:	69f9      	ldr	r1, [r7, #28]
 8008d18:	fb01 f303 	mul.w	r3, r1, r3
 8008d1c:	3303      	adds	r3, #3
 8008d1e:	68f9      	ldr	r1, [r7, #12]
 8008d20:	6809      	ldr	r1, [r1, #0]
 8008d22:	4608      	mov	r0, r1
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	01c9      	lsls	r1, r1, #7
 8008d28:	4401      	add	r1, r0
 8008d2a:	3184      	adds	r1, #132	; 0x84
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	01db      	lsls	r3, r3, #7
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3384      	adds	r3, #132	; 0x84
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	6812      	ldr	r2, [r2, #0]
 8008d44:	4611      	mov	r1, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	01d2      	lsls	r2, r2, #7
 8008d4a:	440a      	add	r2, r1
 8008d4c:	3284      	adds	r2, #132	; 0x84
 8008d4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d52:	f023 0307 	bic.w	r3, r3, #7
 8008d56:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	01db      	lsls	r3, r3, #7
 8008d62:	4413      	add	r3, r2
 8008d64:	3384      	adds	r3, #132	; 0x84
 8008d66:	461a      	mov	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	01db      	lsls	r3, r3, #7
 8008d78:	4413      	add	r3, r2
 8008d7a:	3384      	adds	r3, #132	; 0x84
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	6812      	ldr	r2, [r2, #0]
 8008d82:	4611      	mov	r1, r2
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	01d2      	lsls	r2, r2, #7
 8008d88:	440a      	add	r2, r1
 8008d8a:	3284      	adds	r2, #132	; 0x84
 8008d8c:	f043 0301 	orr.w	r3, r3, #1
 8008d90:	6013      	str	r3, [r2, #0]
}
 8008d92:	bf00      	nop
 8008d94:	3724      	adds	r7, #36	; 0x24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e25b      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d075      	beq.n	8008eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008dbe:	4ba3      	ldr	r3, [pc, #652]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f003 030c 	and.w	r3, r3, #12
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d00c      	beq.n	8008de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008dca:	4ba0      	ldr	r3, [pc, #640]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008dd2:	2b08      	cmp	r3, #8
 8008dd4:	d112      	bne.n	8008dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008dd6:	4b9d      	ldr	r3, [pc, #628]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008de2:	d10b      	bne.n	8008dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de4:	4b99      	ldr	r3, [pc, #612]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d05b      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x108>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d157      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e236      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e04:	d106      	bne.n	8008e14 <HAL_RCC_OscConfig+0x74>
 8008e06:	4b91      	ldr	r3, [pc, #580]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a90      	ldr	r2, [pc, #576]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	e01d      	b.n	8008e50 <HAL_RCC_OscConfig+0xb0>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e1c:	d10c      	bne.n	8008e38 <HAL_RCC_OscConfig+0x98>
 8008e1e:	4b8b      	ldr	r3, [pc, #556]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a8a      	ldr	r2, [pc, #552]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	4b88      	ldr	r3, [pc, #544]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a87      	ldr	r2, [pc, #540]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	e00b      	b.n	8008e50 <HAL_RCC_OscConfig+0xb0>
 8008e38:	4b84      	ldr	r3, [pc, #528]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a83      	ldr	r2, [pc, #524]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	4b81      	ldr	r3, [pc, #516]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a80      	ldr	r2, [pc, #512]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d013      	beq.n	8008e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e58:	f7fc f868 	bl	8004f2c <HAL_GetTick>
 8008e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e5e:	e008      	b.n	8008e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e60:	f7fc f864 	bl	8004f2c <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	2b64      	cmp	r3, #100	; 0x64
 8008e6c:	d901      	bls.n	8008e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e1fb      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e72:	4b76      	ldr	r3, [pc, #472]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0f0      	beq.n	8008e60 <HAL_RCC_OscConfig+0xc0>
 8008e7e:	e014      	b.n	8008eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e80:	f7fc f854 	bl	8004f2c <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e86:	e008      	b.n	8008e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e88:	f7fc f850 	bl	8004f2c <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	2b64      	cmp	r3, #100	; 0x64
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e1e7      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e9a:	4b6c      	ldr	r3, [pc, #432]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1f0      	bne.n	8008e88 <HAL_RCC_OscConfig+0xe8>
 8008ea6:	e000      	b.n	8008eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d063      	beq.n	8008f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008eb6:	4b65      	ldr	r3, [pc, #404]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f003 030c 	and.w	r3, r3, #12
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ec2:	4b62      	ldr	r3, [pc, #392]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	d11c      	bne.n	8008f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ece:	4b5f      	ldr	r3, [pc, #380]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d116      	bne.n	8008f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008eda:	4b5c      	ldr	r3, [pc, #368]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <HAL_RCC_OscConfig+0x152>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d001      	beq.n	8008ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e1bb      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ef2:	4b56      	ldr	r3, [pc, #344]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	4952      	ldr	r1, [pc, #328]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f06:	e03a      	b.n	8008f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d020      	beq.n	8008f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f10:	4b4f      	ldr	r3, [pc, #316]	; (8009050 <HAL_RCC_OscConfig+0x2b0>)
 8008f12:	2201      	movs	r2, #1
 8008f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f16:	f7fc f809 	bl	8004f2c <HAL_GetTick>
 8008f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f1c:	e008      	b.n	8008f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f1e:	f7fc f805 	bl	8004f2c <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d901      	bls.n	8008f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e19c      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f30:	4b46      	ldr	r3, [pc, #280]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d0f0      	beq.n	8008f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f3c:	4b43      	ldr	r3, [pc, #268]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	4940      	ldr	r1, [pc, #256]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	600b      	str	r3, [r1, #0]
 8008f50:	e015      	b.n	8008f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f52:	4b3f      	ldr	r3, [pc, #252]	; (8009050 <HAL_RCC_OscConfig+0x2b0>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f58:	f7fb ffe8 	bl	8004f2c <HAL_GetTick>
 8008f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f5e:	e008      	b.n	8008f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f60:	f7fb ffe4 	bl	8004f2c <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e17b      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f72:	4b36      	ldr	r3, [pc, #216]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1f0      	bne.n	8008f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0308 	and.w	r3, r3, #8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d030      	beq.n	8008fec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d016      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f92:	4b30      	ldr	r3, [pc, #192]	; (8009054 <HAL_RCC_OscConfig+0x2b4>)
 8008f94:	2201      	movs	r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f98:	f7fb ffc8 	bl	8004f2c <HAL_GetTick>
 8008f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fa0:	f7fb ffc4 	bl	8004f2c <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e15b      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fb2:	4b26      	ldr	r3, [pc, #152]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0f0      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x200>
 8008fbe:	e015      	b.n	8008fec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fc0:	4b24      	ldr	r3, [pc, #144]	; (8009054 <HAL_RCC_OscConfig+0x2b4>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fc6:	f7fb ffb1 	bl	8004f2c <HAL_GetTick>
 8008fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fcc:	e008      	b.n	8008fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fce:	f7fb ffad 	bl	8004f2c <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d901      	bls.n	8008fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e144      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8008fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1f0      	bne.n	8008fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 80a0 	beq.w	800913a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ffe:	4b13      	ldr	r3, [pc, #76]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8009000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10f      	bne.n	800902a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800900a:	2300      	movs	r3, #0
 800900c:	60bb      	str	r3, [r7, #8]
 800900e:	4b0f      	ldr	r3, [pc, #60]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	4a0e      	ldr	r2, [pc, #56]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 8009014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009018:	6413      	str	r3, [r2, #64]	; 0x40
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <HAL_RCC_OscConfig+0x2ac>)
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009022:	60bb      	str	r3, [r7, #8]
 8009024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009026:	2301      	movs	r3, #1
 8009028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800902a:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <HAL_RCC_OscConfig+0x2b8>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009032:	2b00      	cmp	r3, #0
 8009034:	d121      	bne.n	800907a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009036:	4b08      	ldr	r3, [pc, #32]	; (8009058 <HAL_RCC_OscConfig+0x2b8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a07      	ldr	r2, [pc, #28]	; (8009058 <HAL_RCC_OscConfig+0x2b8>)
 800903c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009042:	f7fb ff73 	bl	8004f2c <HAL_GetTick>
 8009046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009048:	e011      	b.n	800906e <HAL_RCC_OscConfig+0x2ce>
 800904a:	bf00      	nop
 800904c:	40023800 	.word	0x40023800
 8009050:	42470000 	.word	0x42470000
 8009054:	42470e80 	.word	0x42470e80
 8009058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800905c:	f7fb ff66 	bl	8004f2c <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d901      	bls.n	800906e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e0fd      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800906e:	4b81      	ldr	r3, [pc, #516]	; (8009274 <HAL_RCC_OscConfig+0x4d4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0f0      	beq.n	800905c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d106      	bne.n	8009090 <HAL_RCC_OscConfig+0x2f0>
 8009082:	4b7d      	ldr	r3, [pc, #500]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 8009084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009086:	4a7c      	ldr	r2, [pc, #496]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 8009088:	f043 0301 	orr.w	r3, r3, #1
 800908c:	6713      	str	r3, [r2, #112]	; 0x70
 800908e:	e01c      	b.n	80090ca <HAL_RCC_OscConfig+0x32a>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	2b05      	cmp	r3, #5
 8009096:	d10c      	bne.n	80090b2 <HAL_RCC_OscConfig+0x312>
 8009098:	4b77      	ldr	r3, [pc, #476]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 800909a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800909c:	4a76      	ldr	r2, [pc, #472]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 800909e:	f043 0304 	orr.w	r3, r3, #4
 80090a2:	6713      	str	r3, [r2, #112]	; 0x70
 80090a4:	4b74      	ldr	r3, [pc, #464]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80090a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a8:	4a73      	ldr	r2, [pc, #460]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80090aa:	f043 0301 	orr.w	r3, r3, #1
 80090ae:	6713      	str	r3, [r2, #112]	; 0x70
 80090b0:	e00b      	b.n	80090ca <HAL_RCC_OscConfig+0x32a>
 80090b2:	4b71      	ldr	r3, [pc, #452]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80090b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b6:	4a70      	ldr	r2, [pc, #448]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80090b8:	f023 0301 	bic.w	r3, r3, #1
 80090bc:	6713      	str	r3, [r2, #112]	; 0x70
 80090be:	4b6e      	ldr	r3, [pc, #440]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80090c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c2:	4a6d      	ldr	r2, [pc, #436]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80090c4:	f023 0304 	bic.w	r3, r3, #4
 80090c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d015      	beq.n	80090fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d2:	f7fb ff2b 	bl	8004f2c <HAL_GetTick>
 80090d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090d8:	e00a      	b.n	80090f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090da:	f7fb ff27 	bl	8004f2c <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d901      	bls.n	80090f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e0bc      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090f0:	4b61      	ldr	r3, [pc, #388]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80090f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0ee      	beq.n	80090da <HAL_RCC_OscConfig+0x33a>
 80090fc:	e014      	b.n	8009128 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090fe:	f7fb ff15 	bl	8004f2c <HAL_GetTick>
 8009102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009104:	e00a      	b.n	800911c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009106:	f7fb ff11 	bl	8004f2c <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	f241 3288 	movw	r2, #5000	; 0x1388
 8009114:	4293      	cmp	r3, r2
 8009116:	d901      	bls.n	800911c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e0a6      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800911c:	4b56      	ldr	r3, [pc, #344]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 800911e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1ee      	bne.n	8009106 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d105      	bne.n	800913a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800912e:	4b52      	ldr	r3, [pc, #328]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 8009130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009132:	4a51      	ldr	r2, [pc, #324]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 8009134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 8092 	beq.w	8009268 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009144:	4b4c      	ldr	r3, [pc, #304]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f003 030c 	and.w	r3, r3, #12
 800914c:	2b08      	cmp	r3, #8
 800914e:	d05c      	beq.n	800920a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d141      	bne.n	80091dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009158:	4b48      	ldr	r3, [pc, #288]	; (800927c <HAL_RCC_OscConfig+0x4dc>)
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800915e:	f7fb fee5 	bl	8004f2c <HAL_GetTick>
 8009162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009164:	e008      	b.n	8009178 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009166:	f7fb fee1 	bl	8004f2c <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	d901      	bls.n	8009178 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e078      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009178:	4b3f      	ldr	r3, [pc, #252]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1f0      	bne.n	8009166 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	69da      	ldr	r2, [r3, #28]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	431a      	orrs	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	019b      	lsls	r3, r3, #6
 8009194:	431a      	orrs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919a:	085b      	lsrs	r3, r3, #1
 800919c:	3b01      	subs	r3, #1
 800919e:	041b      	lsls	r3, r3, #16
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	061b      	lsls	r3, r3, #24
 80091a8:	4933      	ldr	r1, [pc, #204]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091ae:	4b33      	ldr	r3, [pc, #204]	; (800927c <HAL_RCC_OscConfig+0x4dc>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091b4:	f7fb feba 	bl	8004f2c <HAL_GetTick>
 80091b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091ba:	e008      	b.n	80091ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091bc:	f7fb feb6 	bl	8004f2c <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d901      	bls.n	80091ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e04d      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091ce:	4b2a      	ldr	r3, [pc, #168]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0f0      	beq.n	80091bc <HAL_RCC_OscConfig+0x41c>
 80091da:	e045      	b.n	8009268 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091dc:	4b27      	ldr	r3, [pc, #156]	; (800927c <HAL_RCC_OscConfig+0x4dc>)
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091e2:	f7fb fea3 	bl	8004f2c <HAL_GetTick>
 80091e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091e8:	e008      	b.n	80091fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091ea:	f7fb fe9f 	bl	8004f2c <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d901      	bls.n	80091fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e036      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091fc:	4b1e      	ldr	r3, [pc, #120]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1f0      	bne.n	80091ea <HAL_RCC_OscConfig+0x44a>
 8009208:	e02e      	b.n	8009268 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d101      	bne.n	8009216 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e029      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009216:	4b18      	ldr	r3, [pc, #96]	; (8009278 <HAL_RCC_OscConfig+0x4d8>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	429a      	cmp	r2, r3
 8009228:	d11c      	bne.n	8009264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009234:	429a      	cmp	r2, r3
 8009236:	d115      	bne.n	8009264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800923e:	4013      	ands	r3, r2
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009244:	4293      	cmp	r3, r2
 8009246:	d10d      	bne.n	8009264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009252:	429a      	cmp	r2, r3
 8009254:	d106      	bne.n	8009264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009260:	429a      	cmp	r2, r3
 8009262:	d001      	beq.n	8009268 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e000      	b.n	800926a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40007000 	.word	0x40007000
 8009278:	40023800 	.word	0x40023800
 800927c:	42470060 	.word	0x42470060

08009280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e0cc      	b.n	800942e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009294:	4b68      	ldr	r3, [pc, #416]	; (8009438 <HAL_RCC_ClockConfig+0x1b8>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 030f 	and.w	r3, r3, #15
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d90c      	bls.n	80092bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092a2:	4b65      	ldr	r3, [pc, #404]	; (8009438 <HAL_RCC_ClockConfig+0x1b8>)
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	b2d2      	uxtb	r2, r2
 80092a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092aa:	4b63      	ldr	r3, [pc, #396]	; (8009438 <HAL_RCC_ClockConfig+0x1b8>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 030f 	and.w	r3, r3, #15
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d001      	beq.n	80092bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e0b8      	b.n	800942e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d020      	beq.n	800930a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80092d4:	4b59      	ldr	r3, [pc, #356]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	4a58      	ldr	r2, [pc, #352]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 80092da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80092de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0308 	and.w	r3, r3, #8
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80092ec:	4b53      	ldr	r3, [pc, #332]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	4a52      	ldr	r2, [pc, #328]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 80092f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80092f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092f8:	4b50      	ldr	r3, [pc, #320]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	494d      	ldr	r1, [pc, #308]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 8009306:	4313      	orrs	r3, r2
 8009308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d044      	beq.n	80093a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d107      	bne.n	800932e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800931e:	4b47      	ldr	r3, [pc, #284]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d119      	bne.n	800935e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e07f      	b.n	800942e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2b02      	cmp	r3, #2
 8009334:	d003      	beq.n	800933e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800933a:	2b03      	cmp	r3, #3
 800933c:	d107      	bne.n	800934e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800933e:	4b3f      	ldr	r3, [pc, #252]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e06f      	b.n	800942e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800934e:	4b3b      	ldr	r3, [pc, #236]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e067      	b.n	800942e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800935e:	4b37      	ldr	r3, [pc, #220]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f023 0203 	bic.w	r2, r3, #3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	4934      	ldr	r1, [pc, #208]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 800936c:	4313      	orrs	r3, r2
 800936e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009370:	f7fb fddc 	bl	8004f2c <HAL_GetTick>
 8009374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009376:	e00a      	b.n	800938e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009378:	f7fb fdd8 	bl	8004f2c <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	f241 3288 	movw	r2, #5000	; 0x1388
 8009386:	4293      	cmp	r3, r2
 8009388:	d901      	bls.n	800938e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e04f      	b.n	800942e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800938e:	4b2b      	ldr	r3, [pc, #172]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f003 020c 	and.w	r2, r3, #12
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	429a      	cmp	r2, r3
 800939e:	d1eb      	bne.n	8009378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093a0:	4b25      	ldr	r3, [pc, #148]	; (8009438 <HAL_RCC_ClockConfig+0x1b8>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d20c      	bcs.n	80093c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ae:	4b22      	ldr	r3, [pc, #136]	; (8009438 <HAL_RCC_ClockConfig+0x1b8>)
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093b6:	4b20      	ldr	r3, [pc, #128]	; (8009438 <HAL_RCC_ClockConfig+0x1b8>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d001      	beq.n	80093c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e032      	b.n	800942e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d008      	beq.n	80093e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093d4:	4b19      	ldr	r3, [pc, #100]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	4916      	ldr	r1, [pc, #88]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0308 	and.w	r3, r3, #8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d009      	beq.n	8009406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	490e      	ldr	r1, [pc, #56]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 8009402:	4313      	orrs	r3, r2
 8009404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009406:	f000 f821 	bl	800944c <HAL_RCC_GetSysClockFreq>
 800940a:	4601      	mov	r1, r0
 800940c:	4b0b      	ldr	r3, [pc, #44]	; (800943c <HAL_RCC_ClockConfig+0x1bc>)
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	091b      	lsrs	r3, r3, #4
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	4a0a      	ldr	r2, [pc, #40]	; (8009440 <HAL_RCC_ClockConfig+0x1c0>)
 8009418:	5cd3      	ldrb	r3, [r2, r3]
 800941a:	fa21 f303 	lsr.w	r3, r1, r3
 800941e:	4a09      	ldr	r2, [pc, #36]	; (8009444 <HAL_RCC_ClockConfig+0x1c4>)
 8009420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009422:	4b09      	ldr	r3, [pc, #36]	; (8009448 <HAL_RCC_ClockConfig+0x1c8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f7f8 fe98 	bl	800215c <HAL_InitTick>

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	40023c00 	.word	0x40023c00
 800943c:	40023800 	.word	0x40023800
 8009440:	0800d464 	.word	0x0800d464
 8009444:	20000000 	.word	0x20000000
 8009448:	20000098 	.word	0x20000098

0800944c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800944c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	607b      	str	r3, [r7, #4]
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
 800945a:	2300      	movs	r3, #0
 800945c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009462:	4b63      	ldr	r3, [pc, #396]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f003 030c 	and.w	r3, r3, #12
 800946a:	2b04      	cmp	r3, #4
 800946c:	d007      	beq.n	800947e <HAL_RCC_GetSysClockFreq+0x32>
 800946e:	2b08      	cmp	r3, #8
 8009470:	d008      	beq.n	8009484 <HAL_RCC_GetSysClockFreq+0x38>
 8009472:	2b00      	cmp	r3, #0
 8009474:	f040 80b4 	bne.w	80095e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009478:	4b5e      	ldr	r3, [pc, #376]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800947a:	60bb      	str	r3, [r7, #8]
       break;
 800947c:	e0b3      	b.n	80095e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800947e:	4b5e      	ldr	r3, [pc, #376]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009480:	60bb      	str	r3, [r7, #8]
      break;
 8009482:	e0b0      	b.n	80095e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009484:	4b5a      	ldr	r3, [pc, #360]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800948c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800948e:	4b58      	ldr	r3, [pc, #352]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d04a      	beq.n	8009530 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800949a:	4b55      	ldr	r3, [pc, #340]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	099b      	lsrs	r3, r3, #6
 80094a0:	f04f 0400 	mov.w	r4, #0
 80094a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	ea03 0501 	and.w	r5, r3, r1
 80094b0:	ea04 0602 	and.w	r6, r4, r2
 80094b4:	4629      	mov	r1, r5
 80094b6:	4632      	mov	r2, r6
 80094b8:	f04f 0300 	mov.w	r3, #0
 80094bc:	f04f 0400 	mov.w	r4, #0
 80094c0:	0154      	lsls	r4, r2, #5
 80094c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80094c6:	014b      	lsls	r3, r1, #5
 80094c8:	4619      	mov	r1, r3
 80094ca:	4622      	mov	r2, r4
 80094cc:	1b49      	subs	r1, r1, r5
 80094ce:	eb62 0206 	sbc.w	r2, r2, r6
 80094d2:	f04f 0300 	mov.w	r3, #0
 80094d6:	f04f 0400 	mov.w	r4, #0
 80094da:	0194      	lsls	r4, r2, #6
 80094dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80094e0:	018b      	lsls	r3, r1, #6
 80094e2:	1a5b      	subs	r3, r3, r1
 80094e4:	eb64 0402 	sbc.w	r4, r4, r2
 80094e8:	f04f 0100 	mov.w	r1, #0
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	00e2      	lsls	r2, r4, #3
 80094f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80094f6:	00d9      	lsls	r1, r3, #3
 80094f8:	460b      	mov	r3, r1
 80094fa:	4614      	mov	r4, r2
 80094fc:	195b      	adds	r3, r3, r5
 80094fe:	eb44 0406 	adc.w	r4, r4, r6
 8009502:	f04f 0100 	mov.w	r1, #0
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	0262      	lsls	r2, r4, #9
 800950c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009510:	0259      	lsls	r1, r3, #9
 8009512:	460b      	mov	r3, r1
 8009514:	4614      	mov	r4, r2
 8009516:	4618      	mov	r0, r3
 8009518:	4621      	mov	r1, r4
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f04f 0400 	mov.w	r4, #0
 8009520:	461a      	mov	r2, r3
 8009522:	4623      	mov	r3, r4
 8009524:	f7f6 fe64 	bl	80001f0 <__aeabi_uldivmod>
 8009528:	4603      	mov	r3, r0
 800952a:	460c      	mov	r4, r1
 800952c:	60fb      	str	r3, [r7, #12]
 800952e:	e049      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009530:	4b2f      	ldr	r3, [pc, #188]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	099b      	lsrs	r3, r3, #6
 8009536:	f04f 0400 	mov.w	r4, #0
 800953a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800953e:	f04f 0200 	mov.w	r2, #0
 8009542:	ea03 0501 	and.w	r5, r3, r1
 8009546:	ea04 0602 	and.w	r6, r4, r2
 800954a:	4629      	mov	r1, r5
 800954c:	4632      	mov	r2, r6
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	f04f 0400 	mov.w	r4, #0
 8009556:	0154      	lsls	r4, r2, #5
 8009558:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800955c:	014b      	lsls	r3, r1, #5
 800955e:	4619      	mov	r1, r3
 8009560:	4622      	mov	r2, r4
 8009562:	1b49      	subs	r1, r1, r5
 8009564:	eb62 0206 	sbc.w	r2, r2, r6
 8009568:	f04f 0300 	mov.w	r3, #0
 800956c:	f04f 0400 	mov.w	r4, #0
 8009570:	0194      	lsls	r4, r2, #6
 8009572:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009576:	018b      	lsls	r3, r1, #6
 8009578:	1a5b      	subs	r3, r3, r1
 800957a:	eb64 0402 	sbc.w	r4, r4, r2
 800957e:	f04f 0100 	mov.w	r1, #0
 8009582:	f04f 0200 	mov.w	r2, #0
 8009586:	00e2      	lsls	r2, r4, #3
 8009588:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800958c:	00d9      	lsls	r1, r3, #3
 800958e:	460b      	mov	r3, r1
 8009590:	4614      	mov	r4, r2
 8009592:	195b      	adds	r3, r3, r5
 8009594:	eb44 0406 	adc.w	r4, r4, r6
 8009598:	f04f 0100 	mov.w	r1, #0
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	02a2      	lsls	r2, r4, #10
 80095a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80095a6:	0299      	lsls	r1, r3, #10
 80095a8:	460b      	mov	r3, r1
 80095aa:	4614      	mov	r4, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	4621      	mov	r1, r4
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f04f 0400 	mov.w	r4, #0
 80095b6:	461a      	mov	r2, r3
 80095b8:	4623      	mov	r3, r4
 80095ba:	f7f6 fe19 	bl	80001f0 <__aeabi_uldivmod>
 80095be:	4603      	mov	r3, r0
 80095c0:	460c      	mov	r4, r1
 80095c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80095c4:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	0c1b      	lsrs	r3, r3, #16
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	3301      	adds	r3, #1
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095dc:	60bb      	str	r3, [r7, #8]
      break;
 80095de:	e002      	b.n	80095e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095e0:	4b04      	ldr	r3, [pc, #16]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80095e2:	60bb      	str	r3, [r7, #8]
      break;
 80095e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095e6:	68bb      	ldr	r3, [r7, #8]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f0:	40023800 	.word	0x40023800
 80095f4:	00f42400 	.word	0x00f42400
 80095f8:	007a1200 	.word	0x007a1200

080095fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095fc:	b480      	push	{r7}
 80095fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009600:	4b03      	ldr	r3, [pc, #12]	; (8009610 <HAL_RCC_GetHCLKFreq+0x14>)
 8009602:	681b      	ldr	r3, [r3, #0]
}
 8009604:	4618      	mov	r0, r3
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	20000000 	.word	0x20000000

08009614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009618:	f7ff fff0 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 800961c:	4601      	mov	r1, r0
 800961e:	4b05      	ldr	r3, [pc, #20]	; (8009634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	0a9b      	lsrs	r3, r3, #10
 8009624:	f003 0307 	and.w	r3, r3, #7
 8009628:	4a03      	ldr	r2, [pc, #12]	; (8009638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800962a:	5cd3      	ldrb	r3, [r2, r3]
 800962c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009630:	4618      	mov	r0, r3
 8009632:	bd80      	pop	{r7, pc}
 8009634:	40023800 	.word	0x40023800
 8009638:	0800d474 	.word	0x0800d474

0800963c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009640:	f7ff ffdc 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 8009644:	4601      	mov	r1, r0
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	0b5b      	lsrs	r3, r3, #13
 800964c:	f003 0307 	and.w	r3, r3, #7
 8009650:	4a03      	ldr	r2, [pc, #12]	; (8009660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009652:	5cd3      	ldrb	r3, [r2, r3]
 8009654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009658:	4618      	mov	r0, r3
 800965a:	bd80      	pop	{r7, pc}
 800965c:	40023800 	.word	0x40023800
 8009660:	0800d474 	.word	0x0800d474

08009664 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	220f      	movs	r2, #15
 8009672:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009674:	4b12      	ldr	r3, [pc, #72]	; (80096c0 <HAL_RCC_GetClockConfig+0x5c>)
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f003 0203 	and.w	r2, r3, #3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009680:	4b0f      	ldr	r3, [pc, #60]	; (80096c0 <HAL_RCC_GetClockConfig+0x5c>)
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800968c:	4b0c      	ldr	r3, [pc, #48]	; (80096c0 <HAL_RCC_GetClockConfig+0x5c>)
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009698:	4b09      	ldr	r3, [pc, #36]	; (80096c0 <HAL_RCC_GetClockConfig+0x5c>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	08db      	lsrs	r3, r3, #3
 800969e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096a6:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <HAL_RCC_GetClockConfig+0x60>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 020f 	and.w	r2, r3, #15
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	601a      	str	r2, [r3, #0]
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	40023800 	.word	0x40023800
 80096c4:	40023c00 	.word	0x40023c00

080096c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0301 	and.w	r3, r3, #1
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10b      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d105      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d075      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80096fc:	4bad      	ldr	r3, [pc, #692]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009702:	f7fb fc13 	bl	8004f2c <HAL_GetTick>
 8009706:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009708:	e008      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800970a:	f7fb fc0f 	bl	8004f2c <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b02      	cmp	r3, #2
 8009716:	d901      	bls.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e18b      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800971c:	4ba6      	ldr	r3, [pc, #664]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1f0      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	d009      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	019a      	lsls	r2, r3, #6
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	071b      	lsls	r3, r3, #28
 8009740:	499d      	ldr	r1, [pc, #628]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0302 	and.w	r3, r3, #2
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01f      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009754:	4b98      	ldr	r3, [pc, #608]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800975a:	0f1b      	lsrs	r3, r3, #28
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	019a      	lsls	r2, r3, #6
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	431a      	orrs	r2, r3
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	071b      	lsls	r3, r3, #28
 8009774:	4990      	ldr	r1, [pc, #576]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009776:	4313      	orrs	r3, r2
 8009778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800977c:	4b8e      	ldr	r3, [pc, #568]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800977e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009782:	f023 021f 	bic.w	r2, r3, #31
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	3b01      	subs	r3, #1
 800978c:	498a      	ldr	r1, [pc, #552]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800978e:	4313      	orrs	r3, r2
 8009790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00d      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	019a      	lsls	r2, r3, #6
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	061b      	lsls	r3, r3, #24
 80097ac:	431a      	orrs	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	071b      	lsls	r3, r3, #28
 80097b4:	4980      	ldr	r1, [pc, #512]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80097bc:	4b7d      	ldr	r3, [pc, #500]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80097be:	2201      	movs	r2, #1
 80097c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097c2:	f7fb fbb3 	bl	8004f2c <HAL_GetTick>
 80097c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097c8:	e008      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80097ca:	f7fb fbaf 	bl	8004f2c <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d901      	bls.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e12b      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097dc:	4b76      	ldr	r3, [pc, #472]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0f0      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d105      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d079      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009800:	4b6e      	ldr	r3, [pc, #440]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009806:	f7fb fb91 	bl	8004f2c <HAL_GetTick>
 800980a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800980c:	e008      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800980e:	f7fb fb8d 	bl	8004f2c <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b02      	cmp	r3, #2
 800981a:	d901      	bls.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e109      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009820:	4b65      	ldr	r3, [pc, #404]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800982c:	d0ef      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0304 	and.w	r3, r3, #4
 8009836:	2b00      	cmp	r3, #0
 8009838:	d020      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800983a:	4b5f      	ldr	r3, [pc, #380]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800983c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009840:	0f1b      	lsrs	r3, r3, #28
 8009842:	f003 0307 	and.w	r3, r3, #7
 8009846:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	019a      	lsls	r2, r3, #6
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	061b      	lsls	r3, r3, #24
 8009854:	431a      	orrs	r2, r3
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	071b      	lsls	r3, r3, #28
 800985a:	4957      	ldr	r1, [pc, #348]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800985c:	4313      	orrs	r3, r2
 800985e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009862:	4b55      	ldr	r3, [pc, #340]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009868:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	3b01      	subs	r3, #1
 8009872:	021b      	lsls	r3, r3, #8
 8009874:	4950      	ldr	r1, [pc, #320]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009876:	4313      	orrs	r3, r2
 8009878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01e      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009888:	4b4b      	ldr	r3, [pc, #300]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800988a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988e:	0e1b      	lsrs	r3, r3, #24
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	019a      	lsls	r2, r3, #6
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	061b      	lsls	r3, r3, #24
 80098a0:	431a      	orrs	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	071b      	lsls	r3, r3, #28
 80098a8:	4943      	ldr	r1, [pc, #268]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80098b0:	4b41      	ldr	r3, [pc, #260]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80098b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	493e      	ldr	r1, [pc, #248]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80098c6:	4b3d      	ldr	r3, [pc, #244]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098c8:	2201      	movs	r2, #1
 80098ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80098cc:	f7fb fb2e 	bl	8004f2c <HAL_GetTick>
 80098d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098d2:	e008      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80098d4:	f7fb fb2a 	bl	8004f2c <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d901      	bls.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e0a6      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098e6:	4b34      	ldr	r3, [pc, #208]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f2:	d1ef      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0320 	and.w	r3, r3, #32
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 808d 	beq.w	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	4b2c      	ldr	r3, [pc, #176]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990a:	4a2b      	ldr	r2, [pc, #172]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800990c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009910:	6413      	str	r3, [r2, #64]	; 0x40
 8009912:	4b29      	ldr	r3, [pc, #164]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800991e:	4b28      	ldr	r3, [pc, #160]	; (80099c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a27      	ldr	r2, [pc, #156]	; (80099c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009928:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800992a:	f7fb faff 	bl	8004f2c <HAL_GetTick>
 800992e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009930:	e008      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009932:	f7fb fafb 	bl	8004f2c <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	2b02      	cmp	r3, #2
 800993e:	d901      	bls.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e077      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009944:	4b1e      	ldr	r3, [pc, #120]	; (80099c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0f0      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009950:	4b19      	ldr	r3, [pc, #100]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009958:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d039      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	429a      	cmp	r2, r3
 800996c:	d032      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800996e:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009976:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009978:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800997a:	2201      	movs	r2, #1
 800997c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800997e:	4b11      	ldr	r3, [pc, #68]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009984:	4a0c      	ldr	r2, [pc, #48]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800998a:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800998c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b01      	cmp	r3, #1
 8009994:	d11e      	bne.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009996:	f7fb fac9 	bl	8004f2c <HAL_GetTick>
 800999a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800999c:	e014      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800999e:	f7fb fac5 	bl	8004f2c <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d90b      	bls.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e03f      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80099b4:	42470068 	.word	0x42470068
 80099b8:	40023800 	.word	0x40023800
 80099bc:	42470070 	.word	0x42470070
 80099c0:	40007000 	.word	0x40007000
 80099c4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099c8:	4b1c      	ldr	r3, [pc, #112]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80099ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0e4      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099e0:	d10d      	bne.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x336>
 80099e2:	4b16      	ldr	r3, [pc, #88]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f6:	4911      	ldr	r1, [pc, #68]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80099f8:	4313      	orrs	r3, r2
 80099fa:	608b      	str	r3, [r1, #8]
 80099fc:	e005      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	4a0e      	ldr	r2, [pc, #56]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009a04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009a08:	6093      	str	r3, [r2, #8]
 8009a0a:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009a0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a16:	4909      	ldr	r1, [pc, #36]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0310 	and.w	r3, r3, #16
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d004      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009a2e:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009a30:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	40023800 	.word	0x40023800
 8009a40:	424711e0 	.word	0x424711e0

08009a44 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e025      	b.n	8009aa4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d106      	bne.n	8009a72 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7f7 f997 	bl	8000da0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2202      	movs	r2, #2
 8009a76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4619      	mov	r1, r3
 8009a84:	4610      	mov	r0, r2
 8009a86:	f001 fdb1 	bl	800b5ec <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	461a      	mov	r2, r3
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	f001 fe1c 	bl	800b6d2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d101      	bne.n	8009ac8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e018      	b.n	8009afa <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 fe79 	bl	800b7d0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d104      	bne.n	8009af0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2205      	movs	r2, #5
 8009aea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009aee:	e003      	b.n	8009af8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d101      	bne.n	8009b1c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e00e      	b.n	8009b3a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f001 fe8c 	bl	800b848 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e056      	b.n	8009c02 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d106      	bne.n	8009b74 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7f8 fa62 	bl	8002038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	431a      	orrs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	ea42 0103 	orr.w	r1, r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	0c1b      	lsrs	r3, r3, #16
 8009bd2:	f003 0104 	and.w	r1, r3, #4
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	69da      	ldr	r2, [r3, #28]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e01a      	b.n	8009c52 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c32:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7f8 fa47 	bl	80020c8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b088      	sub	sp, #32
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	603b      	str	r3, [r7, #0]
 8009c66:	4613      	mov	r3, r2
 8009c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d101      	bne.n	8009c7c <HAL_SPI_Transmit+0x22>
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e11e      	b.n	8009eba <HAL_SPI_Transmit+0x260>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c84:	f7fb f952 	bl	8004f2c <HAL_GetTick>
 8009c88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009c8a:	88fb      	ldrh	r3, [r7, #6]
 8009c8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d002      	beq.n	8009ca0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c9e:	e103      	b.n	8009ea8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <HAL_SPI_Transmit+0x52>
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d102      	bne.n	8009cb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009cb0:	e0fa      	b.n	8009ea8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2203      	movs	r2, #3
 8009cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	88fa      	ldrh	r2, [r7, #6]
 8009cca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	88fa      	ldrh	r2, [r7, #6]
 8009cd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cf8:	d107      	bne.n	8009d0a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d14:	2b40      	cmp	r3, #64	; 0x40
 8009d16:	d007      	beq.n	8009d28 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d30:	d14b      	bne.n	8009dca <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <HAL_SPI_Transmit+0xe6>
 8009d3a:	8afb      	ldrh	r3, [r7, #22]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d13e      	bne.n	8009dbe <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d44:	881a      	ldrh	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d50:	1c9a      	adds	r2, r3, #2
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d64:	e02b      	b.n	8009dbe <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f003 0302 	and.w	r3, r3, #2
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d112      	bne.n	8009d9a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d78:	881a      	ldrh	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d84:	1c9a      	adds	r2, r3, #2
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	3b01      	subs	r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d98:	e011      	b.n	8009dbe <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d9a:	f7fb f8c7 	bl	8004f2c <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d803      	bhi.n	8009db2 <HAL_SPI_Transmit+0x158>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db0:	d102      	bne.n	8009db8 <HAL_SPI_Transmit+0x15e>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009dbc:	e074      	b.n	8009ea8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1ce      	bne.n	8009d66 <HAL_SPI_Transmit+0x10c>
 8009dc8:	e04c      	b.n	8009e64 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <HAL_SPI_Transmit+0x17e>
 8009dd2:	8afb      	ldrh	r3, [r7, #22]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d140      	bne.n	8009e5a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	330c      	adds	r3, #12
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009dfe:	e02c      	b.n	8009e5a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d113      	bne.n	8009e36 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	330c      	adds	r3, #12
 8009e18:	7812      	ldrb	r2, [r2, #0]
 8009e1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e34:	e011      	b.n	8009e5a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e36:	f7fb f879 	bl	8004f2c <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d803      	bhi.n	8009e4e <HAL_SPI_Transmit+0x1f4>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4c:	d102      	bne.n	8009e54 <HAL_SPI_Transmit+0x1fa>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d102      	bne.n	8009e5a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009e58:	e026      	b.n	8009ea8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1cd      	bne.n	8009e00 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e64:	69ba      	ldr	r2, [r7, #24]
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 fbb3 	bl	800a5d4 <SPI_EndRxTxTransaction>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2220      	movs	r2, #32
 8009e78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10a      	bne.n	8009e98 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e82:	2300      	movs	r3, #0
 8009e84:	613b      	str	r3, [r7, #16]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	613b      	str	r3, [r7, #16]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	613b      	str	r3, [r7, #16]
 8009e96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	77fb      	strb	r3, [r7, #31]
 8009ea4:	e000      	b.n	8009ea8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8009ea6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009eb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3720      	adds	r7, #32
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b088      	sub	sp, #32
 8009ec6:	af02      	add	r7, sp, #8
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	603b      	str	r3, [r7, #0]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ede:	d112      	bne.n	8009f06 <HAL_SPI_Receive+0x44>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10e      	bne.n	8009f06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2204      	movs	r2, #4
 8009eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009ef0:	88fa      	ldrh	r2, [r7, #6]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	68b9      	ldr	r1, [r7, #8]
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f000 f8e9 	bl	800a0d4 <HAL_SPI_TransmitReceive>
 8009f02:	4603      	mov	r3, r0
 8009f04:	e0e2      	b.n	800a0cc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d101      	bne.n	8009f14 <HAL_SPI_Receive+0x52>
 8009f10:	2302      	movs	r3, #2
 8009f12:	e0db      	b.n	800a0cc <HAL_SPI_Receive+0x20a>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f1c:	f7fb f806 	bl	8004f2c <HAL_GetTick>
 8009f20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d002      	beq.n	8009f34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009f2e:	2302      	movs	r3, #2
 8009f30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f32:	e0c2      	b.n	800a0ba <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <HAL_SPI_Receive+0x7e>
 8009f3a:	88fb      	ldrh	r3, [r7, #6]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d102      	bne.n	8009f46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f44:	e0b9      	b.n	800a0ba <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2204      	movs	r2, #4
 8009f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	88fa      	ldrh	r2, [r7, #6]
 8009f5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	88fa      	ldrh	r2, [r7, #6]
 8009f64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f8c:	d107      	bne.n	8009f9e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	d007      	beq.n	8009fbc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d162      	bne.n	800a08a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009fc4:	e02e      	b.n	800a024 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d115      	bne.n	800a000 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f103 020c 	add.w	r2, r3, #12
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	7812      	ldrb	r2, [r2, #0]
 8009fe2:	b2d2      	uxtb	r2, r2
 8009fe4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ffe:	e011      	b.n	800a024 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a000:	f7fa ff94 	bl	8004f2c <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d803      	bhi.n	800a018 <HAL_SPI_Receive+0x156>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a016:	d102      	bne.n	800a01e <HAL_SPI_Receive+0x15c>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d102      	bne.n	800a024 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a022:	e04a      	b.n	800a0ba <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a028:	b29b      	uxth	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1cb      	bne.n	8009fc6 <HAL_SPI_Receive+0x104>
 800a02e:	e031      	b.n	800a094 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d113      	bne.n	800a066 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68da      	ldr	r2, [r3, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a048:	b292      	uxth	r2, r2
 800a04a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	1c9a      	adds	r2, r3, #2
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a064:	e011      	b.n	800a08a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a066:	f7fa ff61 	bl	8004f2c <HAL_GetTick>
 800a06a:	4602      	mov	r2, r0
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d803      	bhi.n	800a07e <HAL_SPI_Receive+0x1bc>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07c:	d102      	bne.n	800a084 <HAL_SPI_Receive+0x1c2>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a088:	e017      	b.n	800a0ba <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a08e:	b29b      	uxth	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1cd      	bne.n	800a030 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 fa35 	bl	800a508 <SPI_EndRxTransaction>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	75fb      	strb	r3, [r7, #23]
 800a0b6:	e000      	b.n	800a0ba <HAL_SPI_Receive+0x1f8>
  }

error :
 800a0b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	; 0x30
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d101      	bne.n	800a0fa <HAL_SPI_TransmitReceive+0x26>
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	e18a      	b.n	800a410 <HAL_SPI_TransmitReceive+0x33c>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a102:	f7fa ff13 	bl	8004f2c <HAL_GetTick>
 800a106:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a10e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a118:	887b      	ldrh	r3, [r7, #2]
 800a11a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a11c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a120:	2b01      	cmp	r3, #1
 800a122:	d00f      	beq.n	800a144 <HAL_SPI_TransmitReceive+0x70>
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a12a:	d107      	bne.n	800a13c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d103      	bne.n	800a13c <HAL_SPI_TransmitReceive+0x68>
 800a134:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a138:	2b04      	cmp	r3, #4
 800a13a:	d003      	beq.n	800a144 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a13c:	2302      	movs	r3, #2
 800a13e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a142:	e15b      	b.n	800a3fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d005      	beq.n	800a156 <HAL_SPI_TransmitReceive+0x82>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <HAL_SPI_TransmitReceive+0x82>
 800a150:	887b      	ldrh	r3, [r7, #2]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d103      	bne.n	800a15e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a15c:	e14e      	b.n	800a3fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b04      	cmp	r3, #4
 800a168:	d003      	beq.n	800a172 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2205      	movs	r2, #5
 800a16e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	887a      	ldrh	r2, [r7, #2]
 800a182:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	887a      	ldrh	r2, [r7, #2]
 800a188:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	887a      	ldrh	r2, [r7, #2]
 800a194:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	887a      	ldrh	r2, [r7, #2]
 800a19a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b2:	2b40      	cmp	r3, #64	; 0x40
 800a1b4:	d007      	beq.n	800a1c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ce:	d178      	bne.n	800a2c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <HAL_SPI_TransmitReceive+0x10a>
 800a1d8:	8b7b      	ldrh	r3, [r7, #26]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d166      	bne.n	800a2ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e2:	881a      	ldrh	r2, [r3, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ee:	1c9a      	adds	r2, r3, #2
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a202:	e053      	b.n	800a2ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d11b      	bne.n	800a24a <HAL_SPI_TransmitReceive+0x176>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a216:	b29b      	uxth	r3, r3
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d016      	beq.n	800a24a <HAL_SPI_TransmitReceive+0x176>
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d113      	bne.n	800a24a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	881a      	ldrh	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a232:	1c9a      	adds	r2, r3, #2
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	b29a      	uxth	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	f003 0301 	and.w	r3, r3, #1
 800a254:	2b01      	cmp	r3, #1
 800a256:	d119      	bne.n	800a28c <HAL_SPI_TransmitReceive+0x1b8>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d014      	beq.n	800a28c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68da      	ldr	r2, [r3, #12]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	b292      	uxth	r2, r2
 800a26e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a274:	1c9a      	adds	r2, r3, #2
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a27e:	b29b      	uxth	r3, r3
 800a280:	3b01      	subs	r3, #1
 800a282:	b29a      	uxth	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a288:	2301      	movs	r3, #1
 800a28a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a28c:	f7fa fe4e 	bl	8004f2c <HAL_GetTick>
 800a290:	4602      	mov	r2, r0
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a298:	429a      	cmp	r2, r3
 800a29a:	d807      	bhi.n	800a2ac <HAL_SPI_TransmitReceive+0x1d8>
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a2:	d003      	beq.n	800a2ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a2aa:	e0a7      	b.n	800a3fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1a6      	bne.n	800a204 <HAL_SPI_TransmitReceive+0x130>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1a1      	bne.n	800a204 <HAL_SPI_TransmitReceive+0x130>
 800a2c0:	e07c      	b.n	800a3bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <HAL_SPI_TransmitReceive+0x1fc>
 800a2ca:	8b7b      	ldrh	r3, [r7, #26]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d16b      	bne.n	800a3a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	330c      	adds	r3, #12
 800a2da:	7812      	ldrb	r2, [r2, #0]
 800a2dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2f6:	e057      	b.n	800a3a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b02      	cmp	r3, #2
 800a304:	d11c      	bne.n	800a340 <HAL_SPI_TransmitReceive+0x26c>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d017      	beq.n	800a340 <HAL_SPI_TransmitReceive+0x26c>
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a312:	2b01      	cmp	r3, #1
 800a314:	d114      	bne.n	800a340 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	330c      	adds	r3, #12
 800a320:	7812      	ldrb	r2, [r2, #0]
 800a322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a332:	b29b      	uxth	r3, r3
 800a334:	3b01      	subs	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d119      	bne.n	800a382 <HAL_SPI_TransmitReceive+0x2ae>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a352:	b29b      	uxth	r3, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	d014      	beq.n	800a382 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68da      	ldr	r2, [r3, #12]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a374:	b29b      	uxth	r3, r3
 800a376:	3b01      	subs	r3, #1
 800a378:	b29a      	uxth	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a37e:	2301      	movs	r3, #1
 800a380:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a382:	f7fa fdd3 	bl	8004f2c <HAL_GetTick>
 800a386:	4602      	mov	r2, r0
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a38e:	429a      	cmp	r2, r3
 800a390:	d803      	bhi.n	800a39a <HAL_SPI_TransmitReceive+0x2c6>
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a398:	d102      	bne.n	800a3a0 <HAL_SPI_TransmitReceive+0x2cc>
 800a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d103      	bne.n	800a3a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a3a6:	e029      	b.n	800a3fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1a2      	bne.n	800a2f8 <HAL_SPI_TransmitReceive+0x224>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d19d      	bne.n	800a2f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f000 f907 	bl	800a5d4 <SPI_EndRxTxTransaction>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d006      	beq.n	800a3da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a3d8:	e010      	b.n	800a3fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10b      	bne.n	800a3fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	617b      	str	r3, [r7, #20]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	617b      	str	r3, [r7, #20]
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	e000      	b.n	800a3fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a3fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a40c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a410:	4618      	mov	r0, r3
 800a412:	3730      	adds	r7, #48	; 0x30
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a426:	b2db      	uxtb	r3, r3
}
 800a428:	4618      	mov	r0, r3
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	4613      	mov	r3, r2
 800a442:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a444:	e04c      	b.n	800a4e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44c:	d048      	beq.n	800a4e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a44e:	f7fa fd6d 	bl	8004f2c <HAL_GetTick>
 800a452:	4602      	mov	r2, r0
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d902      	bls.n	800a464 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d13d      	bne.n	800a4e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a472:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a47c:	d111      	bne.n	800a4a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a486:	d004      	beq.n	800a492 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a490:	d107      	bne.n	800a4a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4aa:	d10f      	bne.n	800a4cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e00f      	b.n	800a500 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	bf0c      	ite	eq
 800a4f0:	2301      	moveq	r3, #1
 800a4f2:	2300      	movne	r3, #0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	79fb      	ldrb	r3, [r7, #7]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d1a3      	bne.n	800a446 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a51c:	d111      	bne.n	800a542 <SPI_EndRxTransaction+0x3a>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a526:	d004      	beq.n	800a532 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a530:	d107      	bne.n	800a542 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a540:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a54a:	d12a      	bne.n	800a5a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a554:	d012      	beq.n	800a57c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	2200      	movs	r2, #0
 800a55e:	2180      	movs	r1, #128	; 0x80
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff ff67 	bl	800a434 <SPI_WaitFlagStateUntilTimeout>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d02d      	beq.n	800a5c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a570:	f043 0220 	orr.w	r2, r3, #32
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e026      	b.n	800a5ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2200      	movs	r2, #0
 800a584:	2101      	movs	r1, #1
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff ff54 	bl	800a434 <SPI_WaitFlagStateUntilTimeout>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d01a      	beq.n	800a5c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a596:	f043 0220 	orr.w	r2, r3, #32
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e013      	b.n	800a5ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7ff ff41 	bl	800a434 <SPI_WaitFlagStateUntilTimeout>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d007      	beq.n	800a5c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5bc:	f043 0220 	orr.w	r2, r3, #32
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e000      	b.n	800a5ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af02      	add	r7, sp, #8
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a5e0:	4b1b      	ldr	r3, [pc, #108]	; (800a650 <SPI_EndRxTxTransaction+0x7c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a1b      	ldr	r2, [pc, #108]	; (800a654 <SPI_EndRxTxTransaction+0x80>)
 800a5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ea:	0d5b      	lsrs	r3, r3, #21
 800a5ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5f0:	fb02 f303 	mul.w	r3, r2, r3
 800a5f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5fe:	d112      	bne.n	800a626 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2200      	movs	r2, #0
 800a608:	2180      	movs	r1, #128	; 0x80
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff ff12 	bl	800a434 <SPI_WaitFlagStateUntilTimeout>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d016      	beq.n	800a644 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61a:	f043 0220 	orr.w	r2, r3, #32
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e00f      	b.n	800a646 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00a      	beq.n	800a642 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	3b01      	subs	r3, #1
 800a630:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a63c:	2b80      	cmp	r3, #128	; 0x80
 800a63e:	d0f2      	beq.n	800a626 <SPI_EndRxTxTransaction+0x52>
 800a640:	e000      	b.n	800a644 <SPI_EndRxTxTransaction+0x70>
        break;
 800a642:	bf00      	nop
  }

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20000000 	.word	0x20000000
 800a654:	165e9f81 	.word	0x165e9f81

0800a658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d101      	bne.n	800a66a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e01d      	b.n	800a6a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d106      	bne.n	800a684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7f7 feac 	bl	80023dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2202      	movs	r2, #2
 800a688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3304      	adds	r3, #4
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	f000 fa14 	bl	800aac4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b085      	sub	sp, #20
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f042 0201 	orr.w	r2, r2, #1
 800a6c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	f003 0307 	and.w	r3, r3, #7
 800a6d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2b06      	cmp	r3, #6
 800a6d6:	d007      	beq.n	800a6e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f042 0201 	orr.w	r2, r2, #1
 800a6e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d122      	bne.n	800a752 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b02      	cmp	r3, #2
 800a718:	d11b      	bne.n	800a752 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f06f 0202 	mvn.w	r2, #2
 800a722:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	f003 0303 	and.w	r3, r3, #3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f9a5 	bl	800aa88 <HAL_TIM_IC_CaptureCallback>
 800a73e:	e005      	b.n	800a74c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f997 	bl	800aa74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f9a8 	bl	800aa9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d122      	bne.n	800a7a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f003 0304 	and.w	r3, r3, #4
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	d11b      	bne.n	800a7a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f06f 0204 	mvn.w	r2, #4
 800a776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2202      	movs	r2, #2
 800a77c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f97b 	bl	800aa88 <HAL_TIM_IC_CaptureCallback>
 800a792:	e005      	b.n	800a7a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f96d 	bl	800aa74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f97e 	bl	800aa9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d122      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f003 0308 	and.w	r3, r3, #8
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d11b      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f06f 0208 	mvn.w	r2, #8
 800a7ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2204      	movs	r2, #4
 800a7d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	69db      	ldr	r3, [r3, #28]
 800a7d8:	f003 0303 	and.w	r3, r3, #3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d003      	beq.n	800a7e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f951 	bl	800aa88 <HAL_TIM_IC_CaptureCallback>
 800a7e6:	e005      	b.n	800a7f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f943 	bl	800aa74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f954 	bl	800aa9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0310 	and.w	r3, r3, #16
 800a804:	2b10      	cmp	r3, #16
 800a806:	d122      	bne.n	800a84e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f003 0310 	and.w	r3, r3, #16
 800a812:	2b10      	cmp	r3, #16
 800a814:	d11b      	bne.n	800a84e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f06f 0210 	mvn.w	r2, #16
 800a81e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2208      	movs	r2, #8
 800a824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	69db      	ldr	r3, [r3, #28]
 800a82c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f927 	bl	800aa88 <HAL_TIM_IC_CaptureCallback>
 800a83a:	e005      	b.n	800a848 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f919 	bl	800aa74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f92a 	bl	800aa9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d10e      	bne.n	800a87a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b01      	cmp	r3, #1
 800a868:	d107      	bne.n	800a87a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f06f 0201 	mvn.w	r2, #1
 800a872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7f7 faff 	bl	8001e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a884:	2b80      	cmp	r3, #128	; 0x80
 800a886:	d10e      	bne.n	800a8a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a892:	2b80      	cmp	r3, #128	; 0x80
 800a894:	d107      	bne.n	800a8a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 facf 	bl	800ae44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b0:	2b40      	cmp	r3, #64	; 0x40
 800a8b2:	d10e      	bne.n	800a8d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	d107      	bne.n	800a8d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f8ef 	bl	800aab0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	f003 0320 	and.w	r3, r3, #32
 800a8dc:	2b20      	cmp	r3, #32
 800a8de:	d10e      	bne.n	800a8fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	f003 0320 	and.w	r3, r3, #32
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	d107      	bne.n	800a8fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f06f 0220 	mvn.w	r2, #32
 800a8f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fa99 	bl	800ae30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8fe:	bf00      	nop
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a916:	2b01      	cmp	r3, #1
 800a918:	d101      	bne.n	800a91e <HAL_TIM_ConfigClockSource+0x18>
 800a91a:	2302      	movs	r3, #2
 800a91c:	e0a6      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x166>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2202      	movs	r2, #2
 800a92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a93c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a944:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b40      	cmp	r3, #64	; 0x40
 800a954:	d067      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x120>
 800a956:	2b40      	cmp	r3, #64	; 0x40
 800a958:	d80b      	bhi.n	800a972 <HAL_TIM_ConfigClockSource+0x6c>
 800a95a:	2b10      	cmp	r3, #16
 800a95c:	d073      	beq.n	800aa46 <HAL_TIM_ConfigClockSource+0x140>
 800a95e:	2b10      	cmp	r3, #16
 800a960:	d802      	bhi.n	800a968 <HAL_TIM_ConfigClockSource+0x62>
 800a962:	2b00      	cmp	r3, #0
 800a964:	d06f      	beq.n	800aa46 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a966:	e078      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a968:	2b20      	cmp	r3, #32
 800a96a:	d06c      	beq.n	800aa46 <HAL_TIM_ConfigClockSource+0x140>
 800a96c:	2b30      	cmp	r3, #48	; 0x30
 800a96e:	d06a      	beq.n	800aa46 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a970:	e073      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a972:	2b70      	cmp	r3, #112	; 0x70
 800a974:	d00d      	beq.n	800a992 <HAL_TIM_ConfigClockSource+0x8c>
 800a976:	2b70      	cmp	r3, #112	; 0x70
 800a978:	d804      	bhi.n	800a984 <HAL_TIM_ConfigClockSource+0x7e>
 800a97a:	2b50      	cmp	r3, #80	; 0x50
 800a97c:	d033      	beq.n	800a9e6 <HAL_TIM_ConfigClockSource+0xe0>
 800a97e:	2b60      	cmp	r3, #96	; 0x60
 800a980:	d041      	beq.n	800aa06 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a982:	e06a      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a988:	d066      	beq.n	800aa58 <HAL_TIM_ConfigClockSource+0x152>
 800a98a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a98e:	d017      	beq.n	800a9c0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a990:	e063      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6818      	ldr	r0, [r3, #0]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	6899      	ldr	r1, [r3, #8]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	f000 f9a9 	bl	800acf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	609a      	str	r2, [r3, #8]
      break;
 800a9be:	e04c      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6818      	ldr	r0, [r3, #0]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	6899      	ldr	r1, [r3, #8]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f000 f992 	bl	800acf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689a      	ldr	r2, [r3, #8]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9e2:	609a      	str	r2, [r3, #8]
      break;
 800a9e4:	e039      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6818      	ldr	r0, [r3, #0]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	6859      	ldr	r1, [r3, #4]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	f000 f906 	bl	800ac04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2150      	movs	r1, #80	; 0x50
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 f95f 	bl	800acc2 <TIM_ITRx_SetConfig>
      break;
 800aa04:	e029      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	6859      	ldr	r1, [r3, #4]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f000 f925 	bl	800ac62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2160      	movs	r1, #96	; 0x60
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 f94f 	bl	800acc2 <TIM_ITRx_SetConfig>
      break;
 800aa24:	e019      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	6859      	ldr	r1, [r3, #4]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	461a      	mov	r2, r3
 800aa34:	f000 f8e6 	bl	800ac04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2140      	movs	r1, #64	; 0x40
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 f93f 	bl	800acc2 <TIM_ITRx_SetConfig>
      break;
 800aa44:	e009      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4610      	mov	r0, r2
 800aa52:	f000 f936 	bl	800acc2 <TIM_ITRx_SetConfig>
      break;
 800aa56:	e000      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x154>
      break;
 800aa58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a40      	ldr	r2, [pc, #256]	; (800abd8 <TIM_Base_SetConfig+0x114>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d013      	beq.n	800ab04 <TIM_Base_SetConfig+0x40>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae2:	d00f      	beq.n	800ab04 <TIM_Base_SetConfig+0x40>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a3d      	ldr	r2, [pc, #244]	; (800abdc <TIM_Base_SetConfig+0x118>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d00b      	beq.n	800ab04 <TIM_Base_SetConfig+0x40>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a3c      	ldr	r2, [pc, #240]	; (800abe0 <TIM_Base_SetConfig+0x11c>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d007      	beq.n	800ab04 <TIM_Base_SetConfig+0x40>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a3b      	ldr	r2, [pc, #236]	; (800abe4 <TIM_Base_SetConfig+0x120>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d003      	beq.n	800ab04 <TIM_Base_SetConfig+0x40>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a3a      	ldr	r2, [pc, #232]	; (800abe8 <TIM_Base_SetConfig+0x124>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d108      	bne.n	800ab16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a2f      	ldr	r2, [pc, #188]	; (800abd8 <TIM_Base_SetConfig+0x114>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d02b      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab24:	d027      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a2c      	ldr	r2, [pc, #176]	; (800abdc <TIM_Base_SetConfig+0x118>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d023      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a2b      	ldr	r2, [pc, #172]	; (800abe0 <TIM_Base_SetConfig+0x11c>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d01f      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a2a      	ldr	r2, [pc, #168]	; (800abe4 <TIM_Base_SetConfig+0x120>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d01b      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a29      	ldr	r2, [pc, #164]	; (800abe8 <TIM_Base_SetConfig+0x124>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d017      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a28      	ldr	r2, [pc, #160]	; (800abec <TIM_Base_SetConfig+0x128>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d013      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a27      	ldr	r2, [pc, #156]	; (800abf0 <TIM_Base_SetConfig+0x12c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d00f      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a26      	ldr	r2, [pc, #152]	; (800abf4 <TIM_Base_SetConfig+0x130>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d00b      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a25      	ldr	r2, [pc, #148]	; (800abf8 <TIM_Base_SetConfig+0x134>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d007      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a24      	ldr	r2, [pc, #144]	; (800abfc <TIM_Base_SetConfig+0x138>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d003      	beq.n	800ab76 <TIM_Base_SetConfig+0xb2>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a23      	ldr	r2, [pc, #140]	; (800ac00 <TIM_Base_SetConfig+0x13c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d108      	bne.n	800ab88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a0a      	ldr	r2, [pc, #40]	; (800abd8 <TIM_Base_SetConfig+0x114>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d003      	beq.n	800abbc <TIM_Base_SetConfig+0xf8>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a0c      	ldr	r2, [pc, #48]	; (800abe8 <TIM_Base_SetConfig+0x124>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d103      	bne.n	800abc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	691a      	ldr	r2, [r3, #16]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	615a      	str	r2, [r3, #20]
}
 800abca:	bf00      	nop
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	40010000 	.word	0x40010000
 800abdc:	40000400 	.word	0x40000400
 800abe0:	40000800 	.word	0x40000800
 800abe4:	40000c00 	.word	0x40000c00
 800abe8:	40010400 	.word	0x40010400
 800abec:	40014000 	.word	0x40014000
 800abf0:	40014400 	.word	0x40014400
 800abf4:	40014800 	.word	0x40014800
 800abf8:	40001800 	.word	0x40001800
 800abfc:	40001c00 	.word	0x40001c00
 800ac00:	40002000 	.word	0x40002000

0800ac04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b087      	sub	sp, #28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a1b      	ldr	r3, [r3, #32]
 800ac14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	f023 0201 	bic.w	r2, r3, #1
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f023 030a 	bic.w	r3, r3, #10
 800ac40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	621a      	str	r2, [r3, #32]
}
 800ac56:	bf00      	nop
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b087      	sub	sp, #28
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	60f8      	str	r0, [r7, #12]
 800ac6a:	60b9      	str	r1, [r7, #8]
 800ac6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	f023 0210 	bic.w	r2, r3, #16
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	031b      	lsls	r3, r3, #12
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	621a      	str	r2, [r3, #32]
}
 800acb6:	bf00      	nop
 800acb8:	371c      	adds	r7, #28
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b085      	sub	sp, #20
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4313      	orrs	r3, r2
 800ace0:	f043 0307 	orr.w	r3, r3, #7
 800ace4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	609a      	str	r2, [r3, #8]
}
 800acec:	bf00      	nop
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b087      	sub	sp, #28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	021a      	lsls	r2, r3, #8
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	609a      	str	r2, [r3, #8]
}
 800ad2c:	bf00      	nop
 800ad2e:	371c      	adds	r7, #28
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d101      	bne.n	800ad50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	e05a      	b.n	800ae06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a21      	ldr	r2, [pc, #132]	; (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d022      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad9c:	d01d      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a1d      	ldr	r2, [pc, #116]	; (800ae18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d018      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a1b      	ldr	r2, [pc, #108]	; (800ae1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d013      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a1a      	ldr	r2, [pc, #104]	; (800ae20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d00e      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a18      	ldr	r2, [pc, #96]	; (800ae24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d009      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a17      	ldr	r2, [pc, #92]	; (800ae28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d004      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a15      	ldr	r2, [pc, #84]	; (800ae2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d10c      	bne.n	800adf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ade0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	4313      	orrs	r3, r2
 800adea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	40010000 	.word	0x40010000
 800ae18:	40000400 	.word	0x40000400
 800ae1c:	40000800 	.word	0x40000800
 800ae20:	40000c00 	.word	0x40000c00
 800ae24:	40010400 	.word	0x40010400
 800ae28:	40014000 	.word	0x40014000
 800ae2c:	40001800 	.word	0x40001800

0800ae30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e03f      	b.n	800aeea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d106      	bne.n	800ae84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7f7 fcec 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2224      	movs	r2, #36	; 0x24
 800ae88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68da      	ldr	r2, [r3, #12]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f829 	bl	800aef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	691a      	ldr	r2, [r3, #16]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aeb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	695a      	ldr	r2, [r3, #20]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aec0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68da      	ldr	r2, [r3, #12]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aed0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2220      	movs	r2, #32
 800aedc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2220      	movs	r2, #32
 800aee4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
	...

0800aef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef8:	b085      	sub	sp, #20
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	430a      	orrs	r2, r1
 800af12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	431a      	orrs	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	431a      	orrs	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800af36:	f023 030c 	bic.w	r3, r3, #12
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6812      	ldr	r2, [r2, #0]
 800af3e:	68f9      	ldr	r1, [r7, #12]
 800af40:	430b      	orrs	r3, r1
 800af42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	699a      	ldr	r2, [r3, #24]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	430a      	orrs	r2, r1
 800af58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af62:	f040 818b 	bne.w	800b27c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4ac1      	ldr	r2, [pc, #772]	; (800b270 <UART_SetConfig+0x37c>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d005      	beq.n	800af7c <UART_SetConfig+0x88>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4abf      	ldr	r2, [pc, #764]	; (800b274 <UART_SetConfig+0x380>)
 800af76:	4293      	cmp	r3, r2
 800af78:	f040 80bd 	bne.w	800b0f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af7c:	f7fe fb5e 	bl	800963c <HAL_RCC_GetPCLK2Freq>
 800af80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	461d      	mov	r5, r3
 800af86:	f04f 0600 	mov.w	r6, #0
 800af8a:	46a8      	mov	r8, r5
 800af8c:	46b1      	mov	r9, r6
 800af8e:	eb18 0308 	adds.w	r3, r8, r8
 800af92:	eb49 0409 	adc.w	r4, r9, r9
 800af96:	4698      	mov	r8, r3
 800af98:	46a1      	mov	r9, r4
 800af9a:	eb18 0805 	adds.w	r8, r8, r5
 800af9e:	eb49 0906 	adc.w	r9, r9, r6
 800afa2:	f04f 0100 	mov.w	r1, #0
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800afae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800afb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800afb6:	4688      	mov	r8, r1
 800afb8:	4691      	mov	r9, r2
 800afba:	eb18 0005 	adds.w	r0, r8, r5
 800afbe:	eb49 0106 	adc.w	r1, r9, r6
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	461d      	mov	r5, r3
 800afc8:	f04f 0600 	mov.w	r6, #0
 800afcc:	196b      	adds	r3, r5, r5
 800afce:	eb46 0406 	adc.w	r4, r6, r6
 800afd2:	461a      	mov	r2, r3
 800afd4:	4623      	mov	r3, r4
 800afd6:	f7f5 f90b 	bl	80001f0 <__aeabi_uldivmod>
 800afda:	4603      	mov	r3, r0
 800afdc:	460c      	mov	r4, r1
 800afde:	461a      	mov	r2, r3
 800afe0:	4ba5      	ldr	r3, [pc, #660]	; (800b278 <UART_SetConfig+0x384>)
 800afe2:	fba3 2302 	umull	r2, r3, r3, r2
 800afe6:	095b      	lsrs	r3, r3, #5
 800afe8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	461d      	mov	r5, r3
 800aff0:	f04f 0600 	mov.w	r6, #0
 800aff4:	46a9      	mov	r9, r5
 800aff6:	46b2      	mov	sl, r6
 800aff8:	eb19 0309 	adds.w	r3, r9, r9
 800affc:	eb4a 040a 	adc.w	r4, sl, sl
 800b000:	4699      	mov	r9, r3
 800b002:	46a2      	mov	sl, r4
 800b004:	eb19 0905 	adds.w	r9, r9, r5
 800b008:	eb4a 0a06 	adc.w	sl, sl, r6
 800b00c:	f04f 0100 	mov.w	r1, #0
 800b010:	f04f 0200 	mov.w	r2, #0
 800b014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b01c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b020:	4689      	mov	r9, r1
 800b022:	4692      	mov	sl, r2
 800b024:	eb19 0005 	adds.w	r0, r9, r5
 800b028:	eb4a 0106 	adc.w	r1, sl, r6
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	461d      	mov	r5, r3
 800b032:	f04f 0600 	mov.w	r6, #0
 800b036:	196b      	adds	r3, r5, r5
 800b038:	eb46 0406 	adc.w	r4, r6, r6
 800b03c:	461a      	mov	r2, r3
 800b03e:	4623      	mov	r3, r4
 800b040:	f7f5 f8d6 	bl	80001f0 <__aeabi_uldivmod>
 800b044:	4603      	mov	r3, r0
 800b046:	460c      	mov	r4, r1
 800b048:	461a      	mov	r2, r3
 800b04a:	4b8b      	ldr	r3, [pc, #556]	; (800b278 <UART_SetConfig+0x384>)
 800b04c:	fba3 1302 	umull	r1, r3, r3, r2
 800b050:	095b      	lsrs	r3, r3, #5
 800b052:	2164      	movs	r1, #100	; 0x64
 800b054:	fb01 f303 	mul.w	r3, r1, r3
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	3332      	adds	r3, #50	; 0x32
 800b05e:	4a86      	ldr	r2, [pc, #536]	; (800b278 <UART_SetConfig+0x384>)
 800b060:	fba2 2303 	umull	r2, r3, r2, r3
 800b064:	095b      	lsrs	r3, r3, #5
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b06c:	4498      	add	r8, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	461d      	mov	r5, r3
 800b072:	f04f 0600 	mov.w	r6, #0
 800b076:	46a9      	mov	r9, r5
 800b078:	46b2      	mov	sl, r6
 800b07a:	eb19 0309 	adds.w	r3, r9, r9
 800b07e:	eb4a 040a 	adc.w	r4, sl, sl
 800b082:	4699      	mov	r9, r3
 800b084:	46a2      	mov	sl, r4
 800b086:	eb19 0905 	adds.w	r9, r9, r5
 800b08a:	eb4a 0a06 	adc.w	sl, sl, r6
 800b08e:	f04f 0100 	mov.w	r1, #0
 800b092:	f04f 0200 	mov.w	r2, #0
 800b096:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b09a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b09e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b0a2:	4689      	mov	r9, r1
 800b0a4:	4692      	mov	sl, r2
 800b0a6:	eb19 0005 	adds.w	r0, r9, r5
 800b0aa:	eb4a 0106 	adc.w	r1, sl, r6
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	461d      	mov	r5, r3
 800b0b4:	f04f 0600 	mov.w	r6, #0
 800b0b8:	196b      	adds	r3, r5, r5
 800b0ba:	eb46 0406 	adc.w	r4, r6, r6
 800b0be:	461a      	mov	r2, r3
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	f7f5 f895 	bl	80001f0 <__aeabi_uldivmod>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	4b6a      	ldr	r3, [pc, #424]	; (800b278 <UART_SetConfig+0x384>)
 800b0ce:	fba3 1302 	umull	r1, r3, r3, r2
 800b0d2:	095b      	lsrs	r3, r3, #5
 800b0d4:	2164      	movs	r1, #100	; 0x64
 800b0d6:	fb01 f303 	mul.w	r3, r1, r3
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	00db      	lsls	r3, r3, #3
 800b0de:	3332      	adds	r3, #50	; 0x32
 800b0e0:	4a65      	ldr	r2, [pc, #404]	; (800b278 <UART_SetConfig+0x384>)
 800b0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e6:	095b      	lsrs	r3, r3, #5
 800b0e8:	f003 0207 	and.w	r2, r3, #7
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4442      	add	r2, r8
 800b0f2:	609a      	str	r2, [r3, #8]
 800b0f4:	e26f      	b.n	800b5d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0f6:	f7fe fa8d 	bl	8009614 <HAL_RCC_GetPCLK1Freq>
 800b0fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	461d      	mov	r5, r3
 800b100:	f04f 0600 	mov.w	r6, #0
 800b104:	46a8      	mov	r8, r5
 800b106:	46b1      	mov	r9, r6
 800b108:	eb18 0308 	adds.w	r3, r8, r8
 800b10c:	eb49 0409 	adc.w	r4, r9, r9
 800b110:	4698      	mov	r8, r3
 800b112:	46a1      	mov	r9, r4
 800b114:	eb18 0805 	adds.w	r8, r8, r5
 800b118:	eb49 0906 	adc.w	r9, r9, r6
 800b11c:	f04f 0100 	mov.w	r1, #0
 800b120:	f04f 0200 	mov.w	r2, #0
 800b124:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b128:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b12c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b130:	4688      	mov	r8, r1
 800b132:	4691      	mov	r9, r2
 800b134:	eb18 0005 	adds.w	r0, r8, r5
 800b138:	eb49 0106 	adc.w	r1, r9, r6
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	461d      	mov	r5, r3
 800b142:	f04f 0600 	mov.w	r6, #0
 800b146:	196b      	adds	r3, r5, r5
 800b148:	eb46 0406 	adc.w	r4, r6, r6
 800b14c:	461a      	mov	r2, r3
 800b14e:	4623      	mov	r3, r4
 800b150:	f7f5 f84e 	bl	80001f0 <__aeabi_uldivmod>
 800b154:	4603      	mov	r3, r0
 800b156:	460c      	mov	r4, r1
 800b158:	461a      	mov	r2, r3
 800b15a:	4b47      	ldr	r3, [pc, #284]	; (800b278 <UART_SetConfig+0x384>)
 800b15c:	fba3 2302 	umull	r2, r3, r3, r2
 800b160:	095b      	lsrs	r3, r3, #5
 800b162:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	461d      	mov	r5, r3
 800b16a:	f04f 0600 	mov.w	r6, #0
 800b16e:	46a9      	mov	r9, r5
 800b170:	46b2      	mov	sl, r6
 800b172:	eb19 0309 	adds.w	r3, r9, r9
 800b176:	eb4a 040a 	adc.w	r4, sl, sl
 800b17a:	4699      	mov	r9, r3
 800b17c:	46a2      	mov	sl, r4
 800b17e:	eb19 0905 	adds.w	r9, r9, r5
 800b182:	eb4a 0a06 	adc.w	sl, sl, r6
 800b186:	f04f 0100 	mov.w	r1, #0
 800b18a:	f04f 0200 	mov.w	r2, #0
 800b18e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b19a:	4689      	mov	r9, r1
 800b19c:	4692      	mov	sl, r2
 800b19e:	eb19 0005 	adds.w	r0, r9, r5
 800b1a2:	eb4a 0106 	adc.w	r1, sl, r6
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	461d      	mov	r5, r3
 800b1ac:	f04f 0600 	mov.w	r6, #0
 800b1b0:	196b      	adds	r3, r5, r5
 800b1b2:	eb46 0406 	adc.w	r4, r6, r6
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	f7f5 f819 	bl	80001f0 <__aeabi_uldivmod>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	4b2c      	ldr	r3, [pc, #176]	; (800b278 <UART_SetConfig+0x384>)
 800b1c6:	fba3 1302 	umull	r1, r3, r3, r2
 800b1ca:	095b      	lsrs	r3, r3, #5
 800b1cc:	2164      	movs	r1, #100	; 0x64
 800b1ce:	fb01 f303 	mul.w	r3, r1, r3
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	3332      	adds	r3, #50	; 0x32
 800b1d8:	4a27      	ldr	r2, [pc, #156]	; (800b278 <UART_SetConfig+0x384>)
 800b1da:	fba2 2303 	umull	r2, r3, r2, r3
 800b1de:	095b      	lsrs	r3, r3, #5
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b1e6:	4498      	add	r8, r3
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	461d      	mov	r5, r3
 800b1ec:	f04f 0600 	mov.w	r6, #0
 800b1f0:	46a9      	mov	r9, r5
 800b1f2:	46b2      	mov	sl, r6
 800b1f4:	eb19 0309 	adds.w	r3, r9, r9
 800b1f8:	eb4a 040a 	adc.w	r4, sl, sl
 800b1fc:	4699      	mov	r9, r3
 800b1fe:	46a2      	mov	sl, r4
 800b200:	eb19 0905 	adds.w	r9, r9, r5
 800b204:	eb4a 0a06 	adc.w	sl, sl, r6
 800b208:	f04f 0100 	mov.w	r1, #0
 800b20c:	f04f 0200 	mov.w	r2, #0
 800b210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b214:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b218:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b21c:	4689      	mov	r9, r1
 800b21e:	4692      	mov	sl, r2
 800b220:	eb19 0005 	adds.w	r0, r9, r5
 800b224:	eb4a 0106 	adc.w	r1, sl, r6
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	461d      	mov	r5, r3
 800b22e:	f04f 0600 	mov.w	r6, #0
 800b232:	196b      	adds	r3, r5, r5
 800b234:	eb46 0406 	adc.w	r4, r6, r6
 800b238:	461a      	mov	r2, r3
 800b23a:	4623      	mov	r3, r4
 800b23c:	f7f4 ffd8 	bl	80001f0 <__aeabi_uldivmod>
 800b240:	4603      	mov	r3, r0
 800b242:	460c      	mov	r4, r1
 800b244:	461a      	mov	r2, r3
 800b246:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <UART_SetConfig+0x384>)
 800b248:	fba3 1302 	umull	r1, r3, r3, r2
 800b24c:	095b      	lsrs	r3, r3, #5
 800b24e:	2164      	movs	r1, #100	; 0x64
 800b250:	fb01 f303 	mul.w	r3, r1, r3
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	00db      	lsls	r3, r3, #3
 800b258:	3332      	adds	r3, #50	; 0x32
 800b25a:	4a07      	ldr	r2, [pc, #28]	; (800b278 <UART_SetConfig+0x384>)
 800b25c:	fba2 2303 	umull	r2, r3, r2, r3
 800b260:	095b      	lsrs	r3, r3, #5
 800b262:	f003 0207 	and.w	r2, r3, #7
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4442      	add	r2, r8
 800b26c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b26e:	e1b2      	b.n	800b5d6 <UART_SetConfig+0x6e2>
 800b270:	40011000 	.word	0x40011000
 800b274:	40011400 	.word	0x40011400
 800b278:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4ad7      	ldr	r2, [pc, #860]	; (800b5e0 <UART_SetConfig+0x6ec>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d005      	beq.n	800b292 <UART_SetConfig+0x39e>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4ad6      	ldr	r2, [pc, #856]	; (800b5e4 <UART_SetConfig+0x6f0>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	f040 80d1 	bne.w	800b434 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b292:	f7fe f9d3 	bl	800963c <HAL_RCC_GetPCLK2Freq>
 800b296:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	469a      	mov	sl, r3
 800b29c:	f04f 0b00 	mov.w	fp, #0
 800b2a0:	46d0      	mov	r8, sl
 800b2a2:	46d9      	mov	r9, fp
 800b2a4:	eb18 0308 	adds.w	r3, r8, r8
 800b2a8:	eb49 0409 	adc.w	r4, r9, r9
 800b2ac:	4698      	mov	r8, r3
 800b2ae:	46a1      	mov	r9, r4
 800b2b0:	eb18 080a 	adds.w	r8, r8, sl
 800b2b4:	eb49 090b 	adc.w	r9, r9, fp
 800b2b8:	f04f 0100 	mov.w	r1, #0
 800b2bc:	f04f 0200 	mov.w	r2, #0
 800b2c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b2c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b2c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b2cc:	4688      	mov	r8, r1
 800b2ce:	4691      	mov	r9, r2
 800b2d0:	eb1a 0508 	adds.w	r5, sl, r8
 800b2d4:	eb4b 0609 	adc.w	r6, fp, r9
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	f04f 0200 	mov.w	r2, #0
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	f04f 0400 	mov.w	r4, #0
 800b2ea:	0094      	lsls	r4, r2, #2
 800b2ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b2f0:	008b      	lsls	r3, r1, #2
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	4623      	mov	r3, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	4631      	mov	r1, r6
 800b2fa:	f7f4 ff79 	bl	80001f0 <__aeabi_uldivmod>
 800b2fe:	4603      	mov	r3, r0
 800b300:	460c      	mov	r4, r1
 800b302:	461a      	mov	r2, r3
 800b304:	4bb8      	ldr	r3, [pc, #736]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b306:	fba3 2302 	umull	r2, r3, r3, r2
 800b30a:	095b      	lsrs	r3, r3, #5
 800b30c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	469b      	mov	fp, r3
 800b314:	f04f 0c00 	mov.w	ip, #0
 800b318:	46d9      	mov	r9, fp
 800b31a:	46e2      	mov	sl, ip
 800b31c:	eb19 0309 	adds.w	r3, r9, r9
 800b320:	eb4a 040a 	adc.w	r4, sl, sl
 800b324:	4699      	mov	r9, r3
 800b326:	46a2      	mov	sl, r4
 800b328:	eb19 090b 	adds.w	r9, r9, fp
 800b32c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b330:	f04f 0100 	mov.w	r1, #0
 800b334:	f04f 0200 	mov.w	r2, #0
 800b338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b33c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b344:	4689      	mov	r9, r1
 800b346:	4692      	mov	sl, r2
 800b348:	eb1b 0509 	adds.w	r5, fp, r9
 800b34c:	eb4c 060a 	adc.w	r6, ip, sl
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	4619      	mov	r1, r3
 800b356:	f04f 0200 	mov.w	r2, #0
 800b35a:	f04f 0300 	mov.w	r3, #0
 800b35e:	f04f 0400 	mov.w	r4, #0
 800b362:	0094      	lsls	r4, r2, #2
 800b364:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b368:	008b      	lsls	r3, r1, #2
 800b36a:	461a      	mov	r2, r3
 800b36c:	4623      	mov	r3, r4
 800b36e:	4628      	mov	r0, r5
 800b370:	4631      	mov	r1, r6
 800b372:	f7f4 ff3d 	bl	80001f0 <__aeabi_uldivmod>
 800b376:	4603      	mov	r3, r0
 800b378:	460c      	mov	r4, r1
 800b37a:	461a      	mov	r2, r3
 800b37c:	4b9a      	ldr	r3, [pc, #616]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b37e:	fba3 1302 	umull	r1, r3, r3, r2
 800b382:	095b      	lsrs	r3, r3, #5
 800b384:	2164      	movs	r1, #100	; 0x64
 800b386:	fb01 f303 	mul.w	r3, r1, r3
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	011b      	lsls	r3, r3, #4
 800b38e:	3332      	adds	r3, #50	; 0x32
 800b390:	4a95      	ldr	r2, [pc, #596]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b392:	fba2 2303 	umull	r2, r3, r2, r3
 800b396:	095b      	lsrs	r3, r3, #5
 800b398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b39c:	4498      	add	r8, r3
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	469b      	mov	fp, r3
 800b3a2:	f04f 0c00 	mov.w	ip, #0
 800b3a6:	46d9      	mov	r9, fp
 800b3a8:	46e2      	mov	sl, ip
 800b3aa:	eb19 0309 	adds.w	r3, r9, r9
 800b3ae:	eb4a 040a 	adc.w	r4, sl, sl
 800b3b2:	4699      	mov	r9, r3
 800b3b4:	46a2      	mov	sl, r4
 800b3b6:	eb19 090b 	adds.w	r9, r9, fp
 800b3ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b3be:	f04f 0100 	mov.w	r1, #0
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b3ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b3d2:	4689      	mov	r9, r1
 800b3d4:	4692      	mov	sl, r2
 800b3d6:	eb1b 0509 	adds.w	r5, fp, r9
 800b3da:	eb4c 060a 	adc.w	r6, ip, sl
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	f04f 0200 	mov.w	r2, #0
 800b3e8:	f04f 0300 	mov.w	r3, #0
 800b3ec:	f04f 0400 	mov.w	r4, #0
 800b3f0:	0094      	lsls	r4, r2, #2
 800b3f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b3f6:	008b      	lsls	r3, r1, #2
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4623      	mov	r3, r4
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	4631      	mov	r1, r6
 800b400:	f7f4 fef6 	bl	80001f0 <__aeabi_uldivmod>
 800b404:	4603      	mov	r3, r0
 800b406:	460c      	mov	r4, r1
 800b408:	461a      	mov	r2, r3
 800b40a:	4b77      	ldr	r3, [pc, #476]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b40c:	fba3 1302 	umull	r1, r3, r3, r2
 800b410:	095b      	lsrs	r3, r3, #5
 800b412:	2164      	movs	r1, #100	; 0x64
 800b414:	fb01 f303 	mul.w	r3, r1, r3
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	011b      	lsls	r3, r3, #4
 800b41c:	3332      	adds	r3, #50	; 0x32
 800b41e:	4a72      	ldr	r2, [pc, #456]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b420:	fba2 2303 	umull	r2, r3, r2, r3
 800b424:	095b      	lsrs	r3, r3, #5
 800b426:	f003 020f 	and.w	r2, r3, #15
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4442      	add	r2, r8
 800b430:	609a      	str	r2, [r3, #8]
 800b432:	e0d0      	b.n	800b5d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b434:	f7fe f8ee 	bl	8009614 <HAL_RCC_GetPCLK1Freq>
 800b438:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	469a      	mov	sl, r3
 800b43e:	f04f 0b00 	mov.w	fp, #0
 800b442:	46d0      	mov	r8, sl
 800b444:	46d9      	mov	r9, fp
 800b446:	eb18 0308 	adds.w	r3, r8, r8
 800b44a:	eb49 0409 	adc.w	r4, r9, r9
 800b44e:	4698      	mov	r8, r3
 800b450:	46a1      	mov	r9, r4
 800b452:	eb18 080a 	adds.w	r8, r8, sl
 800b456:	eb49 090b 	adc.w	r9, r9, fp
 800b45a:	f04f 0100 	mov.w	r1, #0
 800b45e:	f04f 0200 	mov.w	r2, #0
 800b462:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b466:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b46a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b46e:	4688      	mov	r8, r1
 800b470:	4691      	mov	r9, r2
 800b472:	eb1a 0508 	adds.w	r5, sl, r8
 800b476:	eb4b 0609 	adc.w	r6, fp, r9
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	4619      	mov	r1, r3
 800b480:	f04f 0200 	mov.w	r2, #0
 800b484:	f04f 0300 	mov.w	r3, #0
 800b488:	f04f 0400 	mov.w	r4, #0
 800b48c:	0094      	lsls	r4, r2, #2
 800b48e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b492:	008b      	lsls	r3, r1, #2
 800b494:	461a      	mov	r2, r3
 800b496:	4623      	mov	r3, r4
 800b498:	4628      	mov	r0, r5
 800b49a:	4631      	mov	r1, r6
 800b49c:	f7f4 fea8 	bl	80001f0 <__aeabi_uldivmod>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4b50      	ldr	r3, [pc, #320]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b4a8:	fba3 2302 	umull	r2, r3, r3, r2
 800b4ac:	095b      	lsrs	r3, r3, #5
 800b4ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	469b      	mov	fp, r3
 800b4b6:	f04f 0c00 	mov.w	ip, #0
 800b4ba:	46d9      	mov	r9, fp
 800b4bc:	46e2      	mov	sl, ip
 800b4be:	eb19 0309 	adds.w	r3, r9, r9
 800b4c2:	eb4a 040a 	adc.w	r4, sl, sl
 800b4c6:	4699      	mov	r9, r3
 800b4c8:	46a2      	mov	sl, r4
 800b4ca:	eb19 090b 	adds.w	r9, r9, fp
 800b4ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b4d2:	f04f 0100 	mov.w	r1, #0
 800b4d6:	f04f 0200 	mov.w	r2, #0
 800b4da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b4e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b4e6:	4689      	mov	r9, r1
 800b4e8:	4692      	mov	sl, r2
 800b4ea:	eb1b 0509 	adds.w	r5, fp, r9
 800b4ee:	eb4c 060a 	adc.w	r6, ip, sl
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	f04f 0200 	mov.w	r2, #0
 800b4fc:	f04f 0300 	mov.w	r3, #0
 800b500:	f04f 0400 	mov.w	r4, #0
 800b504:	0094      	lsls	r4, r2, #2
 800b506:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b50a:	008b      	lsls	r3, r1, #2
 800b50c:	461a      	mov	r2, r3
 800b50e:	4623      	mov	r3, r4
 800b510:	4628      	mov	r0, r5
 800b512:	4631      	mov	r1, r6
 800b514:	f7f4 fe6c 	bl	80001f0 <__aeabi_uldivmod>
 800b518:	4603      	mov	r3, r0
 800b51a:	460c      	mov	r4, r1
 800b51c:	461a      	mov	r2, r3
 800b51e:	4b32      	ldr	r3, [pc, #200]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b520:	fba3 1302 	umull	r1, r3, r3, r2
 800b524:	095b      	lsrs	r3, r3, #5
 800b526:	2164      	movs	r1, #100	; 0x64
 800b528:	fb01 f303 	mul.w	r3, r1, r3
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	011b      	lsls	r3, r3, #4
 800b530:	3332      	adds	r3, #50	; 0x32
 800b532:	4a2d      	ldr	r2, [pc, #180]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b534:	fba2 2303 	umull	r2, r3, r2, r3
 800b538:	095b      	lsrs	r3, r3, #5
 800b53a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b53e:	4498      	add	r8, r3
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	469b      	mov	fp, r3
 800b544:	f04f 0c00 	mov.w	ip, #0
 800b548:	46d9      	mov	r9, fp
 800b54a:	46e2      	mov	sl, ip
 800b54c:	eb19 0309 	adds.w	r3, r9, r9
 800b550:	eb4a 040a 	adc.w	r4, sl, sl
 800b554:	4699      	mov	r9, r3
 800b556:	46a2      	mov	sl, r4
 800b558:	eb19 090b 	adds.w	r9, r9, fp
 800b55c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b560:	f04f 0100 	mov.w	r1, #0
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b56c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b574:	4689      	mov	r9, r1
 800b576:	4692      	mov	sl, r2
 800b578:	eb1b 0509 	adds.w	r5, fp, r9
 800b57c:	eb4c 060a 	adc.w	r6, ip, sl
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	4619      	mov	r1, r3
 800b586:	f04f 0200 	mov.w	r2, #0
 800b58a:	f04f 0300 	mov.w	r3, #0
 800b58e:	f04f 0400 	mov.w	r4, #0
 800b592:	0094      	lsls	r4, r2, #2
 800b594:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b598:	008b      	lsls	r3, r1, #2
 800b59a:	461a      	mov	r2, r3
 800b59c:	4623      	mov	r3, r4
 800b59e:	4628      	mov	r0, r5
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	f7f4 fe25 	bl	80001f0 <__aeabi_uldivmod>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	4b0e      	ldr	r3, [pc, #56]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b5ae:	fba3 1302 	umull	r1, r3, r3, r2
 800b5b2:	095b      	lsrs	r3, r3, #5
 800b5b4:	2164      	movs	r1, #100	; 0x64
 800b5b6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	3332      	adds	r3, #50	; 0x32
 800b5c0:	4a09      	ldr	r2, [pc, #36]	; (800b5e8 <UART_SetConfig+0x6f4>)
 800b5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c6:	095b      	lsrs	r3, r3, #5
 800b5c8:	f003 020f 	and.w	r2, r3, #15
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4442      	add	r2, r8
 800b5d2:	609a      	str	r2, [r3, #8]
}
 800b5d4:	e7ff      	b.n	800b5d6 <UART_SetConfig+0x6e2>
 800b5d6:	bf00      	nop
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e0:	40011000 	.word	0x40011000
 800b5e4:	40011400 	.word	0x40011400
 800b5e8:	51eb851f 	.word	0x51eb851f

0800b5ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d029      	beq.n	800b65a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b612:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b616:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b620:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800b626:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800b62c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800b632:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800b638:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800b63e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800b644:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800b64a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	4313      	orrs	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	e034      	b.n	800b6c4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b666:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b670:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b676:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b68a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b68e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b698:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800b69e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800b6a4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800b6aa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800b6b0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b087      	sub	sp, #28
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	60f8      	str	r0, [r7, #12]
 800b6da:	60b9      	str	r1, [r7, #8]
 800b6dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d02e      	beq.n	800b74a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b6f8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	3b01      	subs	r3, #1
 800b706:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b708:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	3b01      	subs	r3, #1
 800b710:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800b712:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	3b01      	subs	r3, #1
 800b71a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800b71c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	3b01      	subs	r3, #1
 800b724:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b726:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800b730:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	3b01      	subs	r3, #1
 800b738:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b73a:	4313      	orrs	r3, r2
 800b73c:	697a      	ldr	r2, [r7, #20]
 800b73e:	4313      	orrs	r3, r2
 800b740:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	697a      	ldr	r2, [r7, #20]
 800b746:	609a      	str	r2, [r3, #8]
 800b748:	e03b      	b.n	800b7c2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b756:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b75a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	3b01      	subs	r3, #1
 800b762:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	3b01      	subs	r3, #1
 800b76a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b76c:	4313      	orrs	r3, r2
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	4313      	orrs	r3, r2
 800b772:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b780:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b790:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	3b01      	subs	r3, #1
 800b798:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800b79a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800b7a4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	371c      	adds	r7, #28
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b7ec:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b7f6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b7fe:	4313      	orrs	r3, r2
 800b800:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800b808:	f7f9 fb90 	bl	8004f2c <HAL_GetTick>
 800b80c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b80e:	e010      	b.n	800b832 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b816:	d00c      	beq.n	800b832 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d007      	beq.n	800b82e <FMC_SDRAM_SendCommand+0x5e>
 800b81e:	f7f9 fb85 	bl	8004f2c <HAL_GetTick>
 800b822:	4602      	mov	r2, r0
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d201      	bcs.n	800b832 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800b82e:	2303      	movs	r3, #3
 800b830:	e006      	b.n	800b840 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	699b      	ldr	r3, [r3, #24]
 800b836:	f003 0320 	and.w	r3, r3, #32
 800b83a:	2b20      	cmp	r3, #32
 800b83c:	d0e8      	beq.n	800b810 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	695a      	ldr	r2, [r3, #20]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	431a      	orrs	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f043 0201 	orr.w	r2, r3, #1
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	f023 0201 	bic.w	r2, r3, #1
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
	...

0800b8b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	019b      	lsls	r3, r3, #6
 800b8c6:	f043 0220 	orr.w	r2, r3, #32
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4a09      	ldr	r2, [pc, #36]	; (800b8fc <USB_FlushTxFifo+0x48>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d901      	bls.n	800b8e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e006      	b.n	800b8ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	f003 0320 	and.w	r3, r3, #32
 800b8e8:	2b20      	cmp	r3, #32
 800b8ea:	d0f0      	beq.n	800b8ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	00030d40 	.word	0x00030d40

0800b900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2210      	movs	r2, #16
 800b910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	3301      	adds	r3, #1
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4a09      	ldr	r2, [pc, #36]	; (800b940 <USB_FlushRxFifo+0x40>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d901      	bls.n	800b924 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e006      	b.n	800b932 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	f003 0310 	and.w	r3, r3, #16
 800b92c:	2b10      	cmp	r3, #16
 800b92e:	d0f0      	beq.n	800b912 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	00030d40 	.word	0x00030d40

0800b944 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b944:	b480      	push	{r7}
 800b946:	b089      	sub	sp, #36	; 0x24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	4613      	mov	r3, r2
 800b950:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b95a:	88fb      	ldrh	r3, [r7, #6]
 800b95c:	3303      	adds	r3, #3
 800b95e:	089b      	lsrs	r3, r3, #2
 800b960:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b962:	2300      	movs	r3, #0
 800b964:	61bb      	str	r3, [r7, #24]
 800b966:	e00b      	b.n	800b980 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	601a      	str	r2, [r3, #0]
    pDest++;
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	3304      	adds	r3, #4
 800b978:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	3301      	adds	r3, #1
 800b97e:	61bb      	str	r3, [r7, #24]
 800b980:	69ba      	ldr	r2, [r7, #24]
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	429a      	cmp	r2, r3
 800b986:	d3ef      	bcc.n	800b968 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b988:	69fb      	ldr	r3, [r7, #28]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3724      	adds	r7, #36	; 0x24
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b996:	b480      	push	{r7}
 800b998:	b085      	sub	sp, #20
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3714      	adds	r7, #20
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	695b      	ldr	r3, [r3, #20]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9f6:	f023 0303 	bic.w	r3, r3, #3
 800b9fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	f003 0303 	and.w	r3, r3, #3
 800ba0a:	68f9      	ldr	r1, [r7, #12]
 800ba0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ba10:	4313      	orrs	r3, r2
 800ba12:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ba14:	78fb      	ldrb	r3, [r7, #3]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d107      	bne.n	800ba2a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba20:	461a      	mov	r2, r3
 800ba22:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ba26:	6053      	str	r3, [r2, #4]
 800ba28:	e009      	b.n	800ba3e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ba2a:	78fb      	ldrb	r3, [r7, #3]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d106      	bne.n	800ba3e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba36:	461a      	mov	r2, r3
 800ba38:	f241 7370 	movw	r3, #6000	; 0x1770
 800ba3c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	b29b      	uxth	r3, r3
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3714      	adds	r7, #20
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b087      	sub	sp, #28
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	460b      	mov	r3, r1
 800ba78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ba7e:	78fb      	ldrb	r3, [r7, #3]
 800ba80:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ba82:	2300      	movs	r3, #0
 800ba84:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	015a      	lsls	r2, r3, #5
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	0c9b      	lsrs	r3, r3, #18
 800ba96:	f003 0303 	and.w	r3, r3, #3
 800ba9a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <USB_HC_Halt+0x3a>
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d16c      	bne.n	800bb82 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	693a      	ldr	r2, [r7, #16]
 800babc:	440a      	add	r2, r1
 800babe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bac6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bacc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d143      	bne.n	800bb5c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	4413      	add	r3, r2
 800badc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	0151      	lsls	r1, r2, #5
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	440a      	add	r2, r1
 800baea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800baee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800baf2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	015a      	lsls	r2, r3, #5
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	0151      	lsls	r1, r2, #5
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	440a      	add	r2, r1
 800bb0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	0151      	lsls	r1, r2, #5
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	440a      	add	r2, r1
 800bb2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb32:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	3301      	adds	r3, #1
 800bb38:	617b      	str	r3, [r7, #20]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb40:	d81d      	bhi.n	800bb7e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	015a      	lsls	r2, r3, #5
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	4413      	add	r3, r2
 800bb4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb58:	d0ec      	beq.n	800bb34 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb5a:	e080      	b.n	800bc5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	0151      	lsls	r1, r2, #5
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	440a      	add	r2, r1
 800bb72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb7a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb7c:	e06f      	b.n	800bc5e <USB_HC_Halt+0x1f0>
          break;
 800bb7e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb80:	e06d      	b.n	800bc5e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	015a      	lsls	r2, r3, #5
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	4413      	add	r3, r2
 800bb8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	0151      	lsls	r1, r2, #5
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	440a      	add	r2, r1
 800bb98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bba0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d143      	bne.n	800bc3a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	0151      	lsls	r1, r2, #5
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	440a      	add	r2, r1
 800bbc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbd0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	015a      	lsls	r2, r3, #5
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	4413      	add	r3, r2
 800bbda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	0151      	lsls	r1, r2, #5
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	440a      	add	r2, r1
 800bbe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbf0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	0151      	lsls	r1, r2, #5
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	440a      	add	r2, r1
 800bc08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc10:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	3301      	adds	r3, #1
 800bc16:	617b      	str	r3, [r7, #20]
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc1e:	d81d      	bhi.n	800bc5c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	015a      	lsls	r2, r3, #5
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc36:	d0ec      	beq.n	800bc12 <USB_HC_Halt+0x1a4>
 800bc38:	e011      	b.n	800bc5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	015a      	lsls	r2, r3, #5
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	4413      	add	r3, r2
 800bc42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	0151      	lsls	r1, r2, #5
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	440a      	add	r2, r1
 800bc50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc58:	6013      	str	r3, [r2, #0]
 800bc5a:	e000      	b.n	800bc5e <USB_HC_Halt+0x1f0>
          break;
 800bc5c:	bf00      	nop
    }
  }

  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	371c      	adds	r7, #28
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff fe07 	bl	800b890 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800bc82:	2110      	movs	r1, #16
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7ff fe15 	bl	800b8b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7ff fe38 	bl	800b900 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bc90:	2300      	movs	r3, #0
 800bc92:	613b      	str	r3, [r7, #16]
 800bc94:	e01f      	b.n	800bcd6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	015a      	lsls	r2, r3, #5
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bcbc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcca:	461a      	mov	r2, r3
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	613b      	str	r3, [r7, #16]
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	2b0f      	cmp	r3, #15
 800bcda:	d9dc      	bls.n	800bc96 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bcdc:	2300      	movs	r3, #0
 800bcde:	613b      	str	r3, [r7, #16]
 800bce0:	e034      	b.n	800bd4c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcf8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd00:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd08:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	015a      	lsls	r2, r3, #5
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	4413      	add	r3, r2
 800bd12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd16:	461a      	mov	r2, r3
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	617b      	str	r3, [r7, #20]
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd28:	d80c      	bhi.n	800bd44 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	015a      	lsls	r2, r3, #5
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	4413      	add	r3, r2
 800bd32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd40:	d0ec      	beq.n	800bd1c <USB_StopHost+0xb0>
 800bd42:	e000      	b.n	800bd46 <USB_StopHost+0xda>
        break;
 800bd44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	613b      	str	r3, [r7, #16]
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	2b0f      	cmp	r3, #15
 800bd50:	d9c7      	bls.n	800bce2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd58:	461a      	mov	r2, r3
 800bd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f04f 32ff 	mov.w	r2, #4294967295
 800bd66:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff fd80 	bl	800b86e <USB_EnableGlobalInt>

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f804 	bl	800bd9c <USBH_HandleSof>
}
 800bd94:	bf00      	nop
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	2b0b      	cmp	r3, #11
 800bdac:	d10a      	bne.n	800bdc4 <USBH_HandleSof+0x28>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	4798      	blx	r3
  }
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	f000 f8ae 	bl	800bf54 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800bdf8:	bf00      	nop
}
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800be10:	bf00      	nop
}
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2201      	movs	r2, #1
 800be28:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800be50:	2200      	movs	r2, #0
 800be52:	4619      	mov	r1, r3
 800be54:	f000 f87e 	bl	800bf54 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b082      	sub	sp, #8
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2201      	movs	r2, #1
 800be6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f001 f8fe 	bl	800d084 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	791b      	ldrb	r3, [r3, #4]
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f830 	bl	800bef4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	795b      	ldrb	r3, [r3, #5]
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f82a 	bl	800bef4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800beb4:	2200      	movs	r2, #0
 800beb6:	4619      	mov	r1, r3
 800beb8:	f000 f84c 	bl	800bf54 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b082      	sub	sp, #8
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bee2:	2200      	movs	r2, #0
 800bee4:	4619      	mov	r1, r3
 800bee6:	f000 f835 	bl	800bf54 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bf00:	78fb      	ldrb	r3, [r7, #3]
 800bf02:	2b0a      	cmp	r3, #10
 800bf04:	d80d      	bhi.n	800bf22 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bf06:	78fb      	ldrb	r3, [r7, #3]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	33e0      	adds	r3, #224	; 0xe0
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4413      	add	r3, r2
 800bf10:	685a      	ldr	r2, [r3, #4]
 800bf12:	78fb      	ldrb	r3, [r7, #3]
 800bf14:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bf18:	6879      	ldr	r1, [r7, #4]
 800bf1a:	33e0      	adds	r3, #224	; 0xe0
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	440b      	add	r3, r1
 800bf20:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf36:	f3ef 8305 	mrs	r3, IPSR
 800bf3a:	607b      	str	r3, [r7, #4]
  return(result);
 800bf3c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bf14      	ite	ne
 800bf42:	2301      	movne	r3, #1
 800bf44:	2300      	moveq	r3, #0
 800bf46:	b2db      	uxtb	r3, r3
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bf60:	2300      	movs	r3, #0
 800bf62:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d101      	bne.n	800bf72 <osMessagePut+0x1e>
    ticks = 1;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bf72:	f7ff ffdd 	bl	800bf30 <inHandlerMode>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d018      	beq.n	800bfae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bf7c:	f107 0210 	add.w	r2, r7, #16
 800bf80:	f107 0108 	add.w	r1, r7, #8
 800bf84:	2300      	movs	r3, #0
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f000 f9a6 	bl	800c2d8 <xQueueGenericSendFromISR>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d001      	beq.n	800bf96 <osMessagePut+0x42>
      return osErrorOS;
 800bf92:	23ff      	movs	r3, #255	; 0xff
 800bf94:	e018      	b.n	800bfc8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d014      	beq.n	800bfc6 <osMessagePut+0x72>
 800bf9c:	4b0c      	ldr	r3, [pc, #48]	; (800bfd0 <osMessagePut+0x7c>)
 800bf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	e00b      	b.n	800bfc6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bfae:	f107 0108 	add.w	r1, r7, #8
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	697a      	ldr	r2, [r7, #20]
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 f894 	bl	800c0e4 <xQueueGenericSend>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d001      	beq.n	800bfc6 <osMessagePut+0x72>
      return osErrorOS;
 800bfc2:	23ff      	movs	r3, #255	; 0xff
 800bfc4:	e000      	b.n	800bfc8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3718      	adds	r7, #24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	e000ed04 	.word	0xe000ed04

0800bfd4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	689a      	ldr	r2, [r3, #8]
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	601a      	str	r2, [r3, #0]
}
 800c010:	bf00      	nop
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c032:	d103      	bne.n	800c03c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	60fb      	str	r3, [r7, #12]
 800c03a:	e00c      	b.n	800c056 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3308      	adds	r3, #8
 800c040:	60fb      	str	r3, [r7, #12]
 800c042:	e002      	b.n	800c04a <vListInsert+0x2e>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	60fb      	str	r3, [r7, #12]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	429a      	cmp	r2, r3
 800c054:	d2f6      	bcs.n	800c044 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	601a      	str	r2, [r3, #0]
}
 800c082:	bf00      	nop
 800c084:	3714      	adds	r7, #20
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c08e:	b480      	push	{r7}
 800c090:	b085      	sub	sp, #20
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	6892      	ldr	r2, [r2, #8]
 800c0a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	6852      	ldr	r2, [r2, #4]
 800c0ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d103      	bne.n	800c0c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	689a      	ldr	r2, [r3, #8]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	1e5a      	subs	r2, r3, #1
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b08e      	sub	sp, #56	; 0x38
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
 800c0f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d109      	bne.n	800c114 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	62bb      	str	r3, [r7, #40]	; 0x28
 800c112:	e7fe      	b.n	800c112 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d103      	bne.n	800c122 <xQueueGenericSend+0x3e>
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <xQueueGenericSend+0x42>
 800c122:	2301      	movs	r3, #1
 800c124:	e000      	b.n	800c128 <xQueueGenericSend+0x44>
 800c126:	2300      	movs	r3, #0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d109      	bne.n	800c140 <xQueueGenericSend+0x5c>
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	627b      	str	r3, [r7, #36]	; 0x24
 800c13e:	e7fe      	b.n	800c13e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2b02      	cmp	r3, #2
 800c144:	d103      	bne.n	800c14e <xQueueGenericSend+0x6a>
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d101      	bne.n	800c152 <xQueueGenericSend+0x6e>
 800c14e:	2301      	movs	r3, #1
 800c150:	e000      	b.n	800c154 <xQueueGenericSend+0x70>
 800c152:	2300      	movs	r3, #0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d109      	bne.n	800c16c <xQueueGenericSend+0x88>
 800c158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15c:	f383 8811 	msr	BASEPRI, r3
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	623b      	str	r3, [r7, #32]
 800c16a:	e7fe      	b.n	800c16a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c16c:	f000 fd26 	bl	800cbbc <xTaskGetSchedulerState>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d102      	bne.n	800c17c <xQueueGenericSend+0x98>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d101      	bne.n	800c180 <xQueueGenericSend+0x9c>
 800c17c:	2301      	movs	r3, #1
 800c17e:	e000      	b.n	800c182 <xQueueGenericSend+0x9e>
 800c180:	2300      	movs	r3, #0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d109      	bne.n	800c19a <xQueueGenericSend+0xb6>
 800c186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	61fb      	str	r3, [r7, #28]
 800c198:	e7fe      	b.n	800c198 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c19a:	f000 fe2d 	bl	800cdf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d302      	bcc.n	800c1b0 <xQueueGenericSend+0xcc>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d129      	bne.n	800c204 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	68b9      	ldr	r1, [r7, #8]
 800c1b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1b6:	f000 f923 	bl	800c400 <prvCopyDataToQueue>
 800c1ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d010      	beq.n	800c1e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c6:	3324      	adds	r3, #36	; 0x24
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f000 fbf3 	bl	800c9b4 <xTaskRemoveFromEventList>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d013      	beq.n	800c1fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c1d4:	4b3f      	ldr	r3, [pc, #252]	; (800c2d4 <xQueueGenericSend+0x1f0>)
 800c1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1da:	601a      	str	r2, [r3, #0]
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	e00a      	b.n	800c1fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d007      	beq.n	800c1fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1ec:	4b39      	ldr	r3, [pc, #228]	; (800c2d4 <xQueueGenericSend+0x1f0>)
 800c1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1fc:	f000 fe2a 	bl	800ce54 <vPortExitCritical>
				return pdPASS;
 800c200:	2301      	movs	r3, #1
 800c202:	e063      	b.n	800c2cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d103      	bne.n	800c212 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c20a:	f000 fe23 	bl	800ce54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	e05c      	b.n	800c2cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c214:	2b00      	cmp	r3, #0
 800c216:	d106      	bne.n	800c226 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c218:	f107 0314 	add.w	r3, r7, #20
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 fc2b 	bl	800ca78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c222:	2301      	movs	r3, #1
 800c224:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c226:	f000 fe15 	bl	800ce54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c22a:	f000 f9bd 	bl	800c5a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c22e:	f000 fde3 	bl	800cdf8 <vPortEnterCritical>
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c238:	b25b      	sxtb	r3, r3
 800c23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23e:	d103      	bne.n	800c248 <xQueueGenericSend+0x164>
 800c240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c242:	2200      	movs	r2, #0
 800c244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c24e:	b25b      	sxtb	r3, r3
 800c250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c254:	d103      	bne.n	800c25e <xQueueGenericSend+0x17a>
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c25e:	f000 fdf9 	bl	800ce54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c262:	1d3a      	adds	r2, r7, #4
 800c264:	f107 0314 	add.w	r3, r7, #20
 800c268:	4611      	mov	r1, r2
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 fc1a 	bl	800caa4 <xTaskCheckForTimeOut>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d124      	bne.n	800c2c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c278:	f000 f97e 	bl	800c578 <prvIsQueueFull>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d018      	beq.n	800c2b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	3310      	adds	r3, #16
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	4611      	mov	r1, r2
 800c28a:	4618      	mov	r0, r3
 800c28c:	f000 fb6e 	bl	800c96c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c292:	f000 f91f 	bl	800c4d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c296:	f000 f995 	bl	800c5c4 <xTaskResumeAll>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f47f af7c 	bne.w	800c19a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c2a2:	4b0c      	ldr	r3, [pc, #48]	; (800c2d4 <xQueueGenericSend+0x1f0>)
 800c2a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	e772      	b.n	800c19a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c2b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2b6:	f000 f90d 	bl	800c4d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2ba:	f000 f983 	bl	800c5c4 <xTaskResumeAll>
 800c2be:	e76c      	b.n	800c19a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c2c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2c2:	f000 f907 	bl	800c4d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2c6:	f000 f97d 	bl	800c5c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c2ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3738      	adds	r7, #56	; 0x38
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	e000ed04 	.word	0xe000ed04

0800c2d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08e      	sub	sp, #56	; 0x38
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d109      	bne.n	800c304 <xQueueGenericSendFromISR+0x2c>
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	627b      	str	r3, [r7, #36]	; 0x24
 800c302:	e7fe      	b.n	800c302 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d103      	bne.n	800c312 <xQueueGenericSendFromISR+0x3a>
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <xQueueGenericSendFromISR+0x3e>
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <xQueueGenericSendFromISR+0x40>
 800c316:	2300      	movs	r3, #0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d109      	bne.n	800c330 <xQueueGenericSendFromISR+0x58>
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	623b      	str	r3, [r7, #32]
 800c32e:	e7fe      	b.n	800c32e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	2b02      	cmp	r3, #2
 800c334:	d103      	bne.n	800c33e <xQueueGenericSendFromISR+0x66>
 800c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d101      	bne.n	800c342 <xQueueGenericSendFromISR+0x6a>
 800c33e:	2301      	movs	r3, #1
 800c340:	e000      	b.n	800c344 <xQueueGenericSendFromISR+0x6c>
 800c342:	2300      	movs	r3, #0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d109      	bne.n	800c35c <xQueueGenericSendFromISR+0x84>
 800c348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	61fb      	str	r3, [r7, #28]
 800c35a:	e7fe      	b.n	800c35a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c35c:	f000 fdfc 	bl	800cf58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c360:	f3ef 8211 	mrs	r2, BASEPRI
 800c364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c368:	f383 8811 	msr	BASEPRI, r3
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	61ba      	str	r2, [r7, #24]
 800c376:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c378:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c37a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c384:	429a      	cmp	r2, r3
 800c386:	d302      	bcc.n	800c38e <xQueueGenericSendFromISR+0xb6>
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d12c      	bne.n	800c3e8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	68b9      	ldr	r1, [r7, #8]
 800c39c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c39e:	f000 f82f 	bl	800c400 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3aa:	d112      	bne.n	800c3d2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d016      	beq.n	800c3e2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	3324      	adds	r3, #36	; 0x24
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 fafb 	bl	800c9b4 <xTaskRemoveFromEventList>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00e      	beq.n	800c3e2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00b      	beq.n	800c3e2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	e007      	b.n	800c3e2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	b25a      	sxtb	r2, r3
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c3e6:	e001      	b.n	800c3ec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3738      	adds	r7, #56	; 0x38
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c40c:	2300      	movs	r3, #0
 800c40e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10d      	bne.n	800c43a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d14d      	bne.n	800c4c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f000 fbe4 	bl	800cbf8 <xTaskPriorityDisinherit>
 800c430:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	609a      	str	r2, [r3, #8]
 800c438:	e043      	b.n	800c4c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d119      	bne.n	800c474 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6858      	ldr	r0, [r3, #4]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c448:	461a      	mov	r2, r3
 800c44a:	68b9      	ldr	r1, [r7, #8]
 800c44c:	f000 feae 	bl	800d1ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c458:	441a      	add	r2, r3
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	429a      	cmp	r2, r3
 800c468:	d32b      	bcc.n	800c4c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	605a      	str	r2, [r3, #4]
 800c472:	e026      	b.n	800c4c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	68d8      	ldr	r0, [r3, #12]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47c:	461a      	mov	r2, r3
 800c47e:	68b9      	ldr	r1, [r7, #8]
 800c480:	f000 fe94 	bl	800d1ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	68da      	ldr	r2, [r3, #12]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48c:	425b      	negs	r3, r3
 800c48e:	441a      	add	r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	68da      	ldr	r2, [r3, #12]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d207      	bcs.n	800c4b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	689a      	ldr	r2, [r3, #8]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a8:	425b      	negs	r3, r3
 800c4aa:	441a      	add	r2, r3
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d105      	bne.n	800c4c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	1c5a      	adds	r2, r3, #1
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c4ca:	697b      	ldr	r3, [r7, #20]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c4dc:	f000 fc8c 	bl	800cdf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4e8:	e011      	b.n	800c50e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d012      	beq.n	800c518 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	3324      	adds	r3, #36	; 0x24
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 fa5c 	bl	800c9b4 <xTaskRemoveFromEventList>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d001      	beq.n	800c506 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c502:	f000 fb2f 	bl	800cb64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c506:	7bfb      	ldrb	r3, [r7, #15]
 800c508:	3b01      	subs	r3, #1
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c50e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c512:	2b00      	cmp	r3, #0
 800c514:	dce9      	bgt.n	800c4ea <prvUnlockQueue+0x16>
 800c516:	e000      	b.n	800c51a <prvUnlockQueue+0x46>
					break;
 800c518:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	22ff      	movs	r2, #255	; 0xff
 800c51e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c522:	f000 fc97 	bl	800ce54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c526:	f000 fc67 	bl	800cdf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c530:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c532:	e011      	b.n	800c558 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d012      	beq.n	800c562 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3310      	adds	r3, #16
 800c540:	4618      	mov	r0, r3
 800c542:	f000 fa37 	bl	800c9b4 <xTaskRemoveFromEventList>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c54c:	f000 fb0a 	bl	800cb64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c550:	7bbb      	ldrb	r3, [r7, #14]
 800c552:	3b01      	subs	r3, #1
 800c554:	b2db      	uxtb	r3, r3
 800c556:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	dce9      	bgt.n	800c534 <prvUnlockQueue+0x60>
 800c560:	e000      	b.n	800c564 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c562:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	22ff      	movs	r2, #255	; 0xff
 800c568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c56c:	f000 fc72 	bl	800ce54 <vPortExitCritical>
}
 800c570:	bf00      	nop
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c580:	f000 fc3a 	bl	800cdf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d102      	bne.n	800c596 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c590:	2301      	movs	r3, #1
 800c592:	60fb      	str	r3, [r7, #12]
 800c594:	e001      	b.n	800c59a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c59a:	f000 fc5b 	bl	800ce54 <vPortExitCritical>

	return xReturn;
 800c59e:	68fb      	ldr	r3, [r7, #12]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c5ac:	4b04      	ldr	r3, [pc, #16]	; (800c5c0 <vTaskSuspendAll+0x18>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	4a03      	ldr	r2, [pc, #12]	; (800c5c0 <vTaskSuspendAll+0x18>)
 800c5b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c5b6:	bf00      	nop
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	200003ec 	.word	0x200003ec

0800c5c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5d2:	4b41      	ldr	r3, [pc, #260]	; (800c6d8 <xTaskResumeAll+0x114>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d109      	bne.n	800c5ee <xTaskResumeAll+0x2a>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	603b      	str	r3, [r7, #0]
 800c5ec:	e7fe      	b.n	800c5ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5ee:	f000 fc03 	bl	800cdf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5f2:	4b39      	ldr	r3, [pc, #228]	; (800c6d8 <xTaskResumeAll+0x114>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	4a37      	ldr	r2, [pc, #220]	; (800c6d8 <xTaskResumeAll+0x114>)
 800c5fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5fc:	4b36      	ldr	r3, [pc, #216]	; (800c6d8 <xTaskResumeAll+0x114>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d161      	bne.n	800c6c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c604:	4b35      	ldr	r3, [pc, #212]	; (800c6dc <xTaskResumeAll+0x118>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d05d      	beq.n	800c6c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c60c:	e02e      	b.n	800c66c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c60e:	4b34      	ldr	r3, [pc, #208]	; (800c6e0 <xTaskResumeAll+0x11c>)
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3318      	adds	r3, #24
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff fd37 	bl	800c08e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3304      	adds	r3, #4
 800c624:	4618      	mov	r0, r3
 800c626:	f7ff fd32 	bl	800c08e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62e:	2201      	movs	r2, #1
 800c630:	409a      	lsls	r2, r3
 800c632:	4b2c      	ldr	r3, [pc, #176]	; (800c6e4 <xTaskResumeAll+0x120>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4313      	orrs	r3, r2
 800c638:	4a2a      	ldr	r2, [pc, #168]	; (800c6e4 <xTaskResumeAll+0x120>)
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c640:	4613      	mov	r3, r2
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4413      	add	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4a27      	ldr	r2, [pc, #156]	; (800c6e8 <xTaskResumeAll+0x124>)
 800c64a:	441a      	add	r2, r3
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	3304      	adds	r3, #4
 800c650:	4619      	mov	r1, r3
 800c652:	4610      	mov	r0, r2
 800c654:	f7ff fcbe 	bl	800bfd4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c65c:	4b23      	ldr	r3, [pc, #140]	; (800c6ec <xTaskResumeAll+0x128>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c662:	429a      	cmp	r2, r3
 800c664:	d302      	bcc.n	800c66c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800c666:	4b22      	ldr	r3, [pc, #136]	; (800c6f0 <xTaskResumeAll+0x12c>)
 800c668:	2201      	movs	r2, #1
 800c66a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c66c:	4b1c      	ldr	r3, [pc, #112]	; (800c6e0 <xTaskResumeAll+0x11c>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1cc      	bne.n	800c60e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c67a:	f000 fa7f 	bl	800cb7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c67e:	4b1d      	ldr	r3, [pc, #116]	; (800c6f4 <xTaskResumeAll+0x130>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d010      	beq.n	800c6ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c68a:	f000 f837 	bl	800c6fc <xTaskIncrementTick>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800c694:	4b16      	ldr	r3, [pc, #88]	; (800c6f0 <xTaskResumeAll+0x12c>)
 800c696:	2201      	movs	r2, #1
 800c698:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1f1      	bne.n	800c68a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800c6a6:	4b13      	ldr	r3, [pc, #76]	; (800c6f4 <xTaskResumeAll+0x130>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6ac:	4b10      	ldr	r3, [pc, #64]	; (800c6f0 <xTaskResumeAll+0x12c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d009      	beq.n	800c6c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6b8:	4b0f      	ldr	r3, [pc, #60]	; (800c6f8 <xTaskResumeAll+0x134>)
 800c6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6be:	601a      	str	r2, [r3, #0]
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6c8:	f000 fbc4 	bl	800ce54 <vPortExitCritical>

	return xAlreadyYielded;
 800c6cc:	68bb      	ldr	r3, [r7, #8]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	200003ec 	.word	0x200003ec
 800c6dc:	200003cc 	.word	0x200003cc
 800c6e0:	200003a4 	.word	0x200003a4
 800c6e4:	200003d4 	.word	0x200003d4
 800c6e8:	20000310 	.word	0x20000310
 800c6ec:	2000030c 	.word	0x2000030c
 800c6f0:	200003e0 	.word	0x200003e0
 800c6f4:	200003dc 	.word	0x200003dc
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c702:	2300      	movs	r3, #0
 800c704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c706:	4b4e      	ldr	r3, [pc, #312]	; (800c840 <xTaskIncrementTick+0x144>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f040 8087 	bne.w	800c81e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c710:	4b4c      	ldr	r3, [pc, #304]	; (800c844 <xTaskIncrementTick+0x148>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	3301      	adds	r3, #1
 800c716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c718:	4a4a      	ldr	r2, [pc, #296]	; (800c844 <xTaskIncrementTick+0x148>)
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d11f      	bne.n	800c764 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c724:	4b48      	ldr	r3, [pc, #288]	; (800c848 <xTaskIncrementTick+0x14c>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d009      	beq.n	800c742 <xTaskIncrementTick+0x46>
 800c72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	603b      	str	r3, [r7, #0]
 800c740:	e7fe      	b.n	800c740 <xTaskIncrementTick+0x44>
 800c742:	4b41      	ldr	r3, [pc, #260]	; (800c848 <xTaskIncrementTick+0x14c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	4b40      	ldr	r3, [pc, #256]	; (800c84c <xTaskIncrementTick+0x150>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a3e      	ldr	r2, [pc, #248]	; (800c848 <xTaskIncrementTick+0x14c>)
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	4a3e      	ldr	r2, [pc, #248]	; (800c84c <xTaskIncrementTick+0x150>)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	4b3e      	ldr	r3, [pc, #248]	; (800c850 <xTaskIncrementTick+0x154>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3301      	adds	r3, #1
 800c75c:	4a3c      	ldr	r2, [pc, #240]	; (800c850 <xTaskIncrementTick+0x154>)
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	f000 fa0c 	bl	800cb7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c764:	4b3b      	ldr	r3, [pc, #236]	; (800c854 <xTaskIncrementTick+0x158>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	693a      	ldr	r2, [r7, #16]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d348      	bcc.n	800c800 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c76e:	4b36      	ldr	r3, [pc, #216]	; (800c848 <xTaskIncrementTick+0x14c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d104      	bne.n	800c782 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c778:	4b36      	ldr	r3, [pc, #216]	; (800c854 <xTaskIncrementTick+0x158>)
 800c77a:	f04f 32ff 	mov.w	r2, #4294967295
 800c77e:	601a      	str	r2, [r3, #0]
					break;
 800c780:	e03e      	b.n	800c800 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c782:	4b31      	ldr	r3, [pc, #196]	; (800c848 <xTaskIncrementTick+0x14c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	429a      	cmp	r2, r3
 800c798:	d203      	bcs.n	800c7a2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c79a:	4a2e      	ldr	r2, [pc, #184]	; (800c854 <xTaskIncrementTick+0x158>)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7a0:	e02e      	b.n	800c800 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fc71 	bl	800c08e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d004      	beq.n	800c7be <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	3318      	adds	r3, #24
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fc68 	bl	800c08e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	409a      	lsls	r2, r3
 800c7c6:	4b24      	ldr	r3, [pc, #144]	; (800c858 <xTaskIncrementTick+0x15c>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	4a22      	ldr	r2, [pc, #136]	; (800c858 <xTaskIncrementTick+0x15c>)
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4a1f      	ldr	r2, [pc, #124]	; (800c85c <xTaskIncrementTick+0x160>)
 800c7de:	441a      	add	r2, r3
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	f7ff fbf4 	bl	800bfd4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7f0:	4b1b      	ldr	r3, [pc, #108]	; (800c860 <xTaskIncrementTick+0x164>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d3b9      	bcc.n	800c76e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7fe:	e7b6      	b.n	800c76e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c800:	4b17      	ldr	r3, [pc, #92]	; (800c860 <xTaskIncrementTick+0x164>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c806:	4915      	ldr	r1, [pc, #84]	; (800c85c <xTaskIncrementTick+0x160>)
 800c808:	4613      	mov	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	4413      	add	r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	440b      	add	r3, r1
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d907      	bls.n	800c828 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c818:	2301      	movs	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e004      	b.n	800c828 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c81e:	4b11      	ldr	r3, [pc, #68]	; (800c864 <xTaskIncrementTick+0x168>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	3301      	adds	r3, #1
 800c824:	4a0f      	ldr	r2, [pc, #60]	; (800c864 <xTaskIncrementTick+0x168>)
 800c826:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c828:	4b0f      	ldr	r3, [pc, #60]	; (800c868 <xTaskIncrementTick+0x16c>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c830:	2301      	movs	r3, #1
 800c832:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c834:	697b      	ldr	r3, [r7, #20]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	200003ec 	.word	0x200003ec
 800c844:	200003d0 	.word	0x200003d0
 800c848:	2000039c 	.word	0x2000039c
 800c84c:	200003a0 	.word	0x200003a0
 800c850:	200003e4 	.word	0x200003e4
 800c854:	200003e8 	.word	0x200003e8
 800c858:	200003d4 	.word	0x200003d4
 800c85c:	20000310 	.word	0x20000310
 800c860:	2000030c 	.word	0x2000030c
 800c864:	200003dc 	.word	0x200003dc
 800c868:	200003e0 	.word	0x200003e0

0800c86c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c872:	4b39      	ldr	r3, [pc, #228]	; (800c958 <vTaskSwitchContext+0xec>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c87a:	4b38      	ldr	r3, [pc, #224]	; (800c95c <vTaskSwitchContext+0xf0>)
 800c87c:	2201      	movs	r2, #1
 800c87e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c880:	e065      	b.n	800c94e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800c882:	4b36      	ldr	r3, [pc, #216]	; (800c95c <vTaskSwitchContext+0xf0>)
 800c884:	2200      	movs	r2, #0
 800c886:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c888:	4b35      	ldr	r3, [pc, #212]	; (800c960 <vTaskSwitchContext+0xf4>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88e:	61fb      	str	r3, [r7, #28]
 800c890:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c894:	61bb      	str	r3, [r7, #24]
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	69ba      	ldr	r2, [r7, #24]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d111      	bne.n	800c8c4 <vTaskSwitchContext+0x58>
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	3304      	adds	r3, #4
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	69ba      	ldr	r2, [r7, #24]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d10b      	bne.n	800c8c4 <vTaskSwitchContext+0x58>
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	69ba      	ldr	r2, [r7, #24]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d105      	bne.n	800c8c4 <vTaskSwitchContext+0x58>
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	330c      	adds	r3, #12
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	69ba      	ldr	r2, [r7, #24]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d008      	beq.n	800c8d6 <vTaskSwitchContext+0x6a>
 800c8c4:	4b26      	ldr	r3, [pc, #152]	; (800c960 <vTaskSwitchContext+0xf4>)
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	4b25      	ldr	r3, [pc, #148]	; (800c960 <vTaskSwitchContext+0xf4>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3334      	adds	r3, #52	; 0x34
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	f7f4 fa6f 	bl	8000db4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8d6:	4b23      	ldr	r3, [pc, #140]	; (800c964 <vTaskSwitchContext+0xf8>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	fab3 f383 	clz	r3, r3
 800c8e2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c8e4:	7afb      	ldrb	r3, [r7, #11]
 800c8e6:	f1c3 031f 	rsb	r3, r3, #31
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	491e      	ldr	r1, [pc, #120]	; (800c968 <vTaskSwitchContext+0xfc>)
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	4413      	add	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	440b      	add	r3, r1
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d109      	bne.n	800c914 <vTaskSwitchContext+0xa8>
	__asm volatile
 800c900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c904:	f383 8811 	msr	BASEPRI, r3
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	607b      	str	r3, [r7, #4]
 800c912:	e7fe      	b.n	800c912 <vTaskSwitchContext+0xa6>
 800c914:	697a      	ldr	r2, [r7, #20]
 800c916:	4613      	mov	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	4a12      	ldr	r2, [pc, #72]	; (800c968 <vTaskSwitchContext+0xfc>)
 800c920:	4413      	add	r3, r2
 800c922:	613b      	str	r3, [r7, #16]
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	605a      	str	r2, [r3, #4]
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	3308      	adds	r3, #8
 800c936:	429a      	cmp	r2, r3
 800c938:	d104      	bne.n	800c944 <vTaskSwitchContext+0xd8>
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	605a      	str	r2, [r3, #4]
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	4a05      	ldr	r2, [pc, #20]	; (800c960 <vTaskSwitchContext+0xf4>)
 800c94c:	6013      	str	r3, [r2, #0]
}
 800c94e:	bf00      	nop
 800c950:	3720      	adds	r7, #32
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	200003ec 	.word	0x200003ec
 800c95c:	200003e0 	.word	0x200003e0
 800c960:	2000030c 	.word	0x2000030c
 800c964:	200003d4 	.word	0x200003d4
 800c968:	20000310 	.word	0x20000310

0800c96c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d109      	bne.n	800c990 <vTaskPlaceOnEventList+0x24>
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	60fb      	str	r3, [r7, #12]
 800c98e:	e7fe      	b.n	800c98e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c990:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <vTaskPlaceOnEventList+0x44>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3318      	adds	r3, #24
 800c996:	4619      	mov	r1, r3
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff fb3f 	bl	800c01c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c99e:	2101      	movs	r1, #1
 800c9a0:	6838      	ldr	r0, [r7, #0]
 800c9a2:	f000 f9ad 	bl	800cd00 <prvAddCurrentTaskToDelayedList>
}
 800c9a6:	bf00      	nop
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	2000030c 	.word	0x2000030c

0800c9b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d109      	bne.n	800c9de <xTaskRemoveFromEventList+0x2a>
 800c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	e7fe      	b.n	800c9dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	3318      	adds	r3, #24
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff fb53 	bl	800c08e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9e8:	4b1d      	ldr	r3, [pc, #116]	; (800ca60 <xTaskRemoveFromEventList+0xac>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d11c      	bne.n	800ca2a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7ff fb4a 	bl	800c08e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fe:	2201      	movs	r2, #1
 800ca00:	409a      	lsls	r2, r3
 800ca02:	4b18      	ldr	r3, [pc, #96]	; (800ca64 <xTaskRemoveFromEventList+0xb0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	4a16      	ldr	r2, [pc, #88]	; (800ca64 <xTaskRemoveFromEventList+0xb0>)
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca10:	4613      	mov	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	4a13      	ldr	r2, [pc, #76]	; (800ca68 <xTaskRemoveFromEventList+0xb4>)
 800ca1a:	441a      	add	r2, r3
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	3304      	adds	r3, #4
 800ca20:	4619      	mov	r1, r3
 800ca22:	4610      	mov	r0, r2
 800ca24:	f7ff fad6 	bl	800bfd4 <vListInsertEnd>
 800ca28:	e005      	b.n	800ca36 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	3318      	adds	r3, #24
 800ca2e:	4619      	mov	r1, r3
 800ca30:	480e      	ldr	r0, [pc, #56]	; (800ca6c <xTaskRemoveFromEventList+0xb8>)
 800ca32:	f7ff facf 	bl	800bfd4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca3a:	4b0d      	ldr	r3, [pc, #52]	; (800ca70 <xTaskRemoveFromEventList+0xbc>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d905      	bls.n	800ca50 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca44:	2301      	movs	r3, #1
 800ca46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca48:	4b0a      	ldr	r3, [pc, #40]	; (800ca74 <xTaskRemoveFromEventList+0xc0>)
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	e001      	b.n	800ca54 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ca50:	2300      	movs	r3, #0
 800ca52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca54:	697b      	ldr	r3, [r7, #20]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	200003ec 	.word	0x200003ec
 800ca64:	200003d4 	.word	0x200003d4
 800ca68:	20000310 	.word	0x20000310
 800ca6c:	200003a4 	.word	0x200003a4
 800ca70:	2000030c 	.word	0x2000030c
 800ca74:	200003e0 	.word	0x200003e0

0800ca78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca80:	4b06      	ldr	r3, [pc, #24]	; (800ca9c <vTaskInternalSetTimeOutState+0x24>)
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca88:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <vTaskInternalSetTimeOutState+0x28>)
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	605a      	str	r2, [r3, #4]
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	200003e4 	.word	0x200003e4
 800caa0:	200003d0 	.word	0x200003d0

0800caa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b088      	sub	sp, #32
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d109      	bne.n	800cac8 <xTaskCheckForTimeOut+0x24>
 800cab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	613b      	str	r3, [r7, #16]
 800cac6:	e7fe      	b.n	800cac6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d109      	bne.n	800cae2 <xTaskCheckForTimeOut+0x3e>
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	e7fe      	b.n	800cae0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800cae2:	f000 f989 	bl	800cdf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cae6:	4b1d      	ldr	r3, [pc, #116]	; (800cb5c <xTaskCheckForTimeOut+0xb8>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafe:	d102      	bne.n	800cb06 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb00:	2300      	movs	r3, #0
 800cb02:	61fb      	str	r3, [r7, #28]
 800cb04:	e023      	b.n	800cb4e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	4b15      	ldr	r3, [pc, #84]	; (800cb60 <xTaskCheckForTimeOut+0xbc>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d007      	beq.n	800cb22 <xTaskCheckForTimeOut+0x7e>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	69ba      	ldr	r2, [r7, #24]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d302      	bcc.n	800cb22 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	61fb      	str	r3, [r7, #28]
 800cb20:	e015      	b.n	800cb4e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d20b      	bcs.n	800cb44 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	1ad2      	subs	r2, r2, r3
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7ff ff9d 	bl	800ca78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	61fb      	str	r3, [r7, #28]
 800cb42:	e004      	b.n	800cb4e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb4e:	f000 f981 	bl	800ce54 <vPortExitCritical>

	return xReturn;
 800cb52:	69fb      	ldr	r3, [r7, #28]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3720      	adds	r7, #32
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	200003d0 	.word	0x200003d0
 800cb60:	200003e4 	.word	0x200003e4

0800cb64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb64:	b480      	push	{r7}
 800cb66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb68:	4b03      	ldr	r3, [pc, #12]	; (800cb78 <vTaskMissedYield+0x14>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]
}
 800cb6e:	bf00      	nop
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr
 800cb78:	200003e0 	.word	0x200003e0

0800cb7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb82:	4b0c      	ldr	r3, [pc, #48]	; (800cbb4 <prvResetNextTaskUnblockTime+0x38>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d104      	bne.n	800cb96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb8c:	4b0a      	ldr	r3, [pc, #40]	; (800cbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800cb8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb94:	e008      	b.n	800cba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb96:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <prvResetNextTaskUnblockTime+0x38>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	4a04      	ldr	r2, [pc, #16]	; (800cbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800cba6:	6013      	str	r3, [r2, #0]
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	2000039c 	.word	0x2000039c
 800cbb8:	200003e8 	.word	0x200003e8

0800cbbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cbc2:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <xTaskGetSchedulerState+0x34>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d102      	bne.n	800cbd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	607b      	str	r3, [r7, #4]
 800cbce:	e008      	b.n	800cbe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbd0:	4b08      	ldr	r3, [pc, #32]	; (800cbf4 <xTaskGetSchedulerState+0x38>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d102      	bne.n	800cbde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cbd8:	2302      	movs	r3, #2
 800cbda:	607b      	str	r3, [r7, #4]
 800cbdc:	e001      	b.n	800cbe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cbe2:	687b      	ldr	r3, [r7, #4]
	}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	200003d8 	.word	0x200003d8
 800cbf4:	200003ec 	.word	0x200003ec

0800cbf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc04:	2300      	movs	r3, #0
 800cc06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d06c      	beq.n	800cce8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc0e:	4b39      	ldr	r3, [pc, #228]	; (800ccf4 <xTaskPriorityDisinherit+0xfc>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d009      	beq.n	800cc2c <xTaskPriorityDisinherit+0x34>
 800cc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	e7fe      	b.n	800cc2a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d109      	bne.n	800cc48 <xTaskPriorityDisinherit+0x50>
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	60bb      	str	r3, [r7, #8]
 800cc46:	e7fe      	b.n	800cc46 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc4c:	1e5a      	subs	r2, r3, #1
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d044      	beq.n	800cce8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d140      	bne.n	800cce8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff fa0f 	bl	800c08e <uxListRemove>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d115      	bne.n	800cca2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7a:	491f      	ldr	r1, [pc, #124]	; (800ccf8 <xTaskPriorityDisinherit+0x100>)
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	4413      	add	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	440b      	add	r3, r1
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10a      	bne.n	800cca2 <xTaskPriorityDisinherit+0xaa>
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc90:	2201      	movs	r2, #1
 800cc92:	fa02 f303 	lsl.w	r3, r2, r3
 800cc96:	43da      	mvns	r2, r3
 800cc98:	4b18      	ldr	r3, [pc, #96]	; (800ccfc <xTaskPriorityDisinherit+0x104>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	4a17      	ldr	r2, [pc, #92]	; (800ccfc <xTaskPriorityDisinherit+0x104>)
 800cca0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccae:	f1c3 0207 	rsb	r2, r3, #7
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccba:	2201      	movs	r2, #1
 800ccbc:	409a      	lsls	r2, r3
 800ccbe:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <xTaskPriorityDisinherit+0x104>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	4a0d      	ldr	r2, [pc, #52]	; (800ccfc <xTaskPriorityDisinherit+0x104>)
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cccc:	4613      	mov	r3, r2
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4a08      	ldr	r2, [pc, #32]	; (800ccf8 <xTaskPriorityDisinherit+0x100>)
 800ccd6:	441a      	add	r2, r3
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	3304      	adds	r3, #4
 800ccdc:	4619      	mov	r1, r3
 800ccde:	4610      	mov	r0, r2
 800cce0:	f7ff f978 	bl	800bfd4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cce4:	2301      	movs	r3, #1
 800cce6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cce8:	697b      	ldr	r3, [r7, #20]
	}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3718      	adds	r7, #24
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	2000030c 	.word	0x2000030c
 800ccf8:	20000310 	.word	0x20000310
 800ccfc:	200003d4 	.word	0x200003d4

0800cd00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd0a:	4b29      	ldr	r3, [pc, #164]	; (800cdb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd10:	4b28      	ldr	r3, [pc, #160]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3304      	adds	r3, #4
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff f9b9 	bl	800c08e <uxListRemove>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10b      	bne.n	800cd3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cd22:	4b24      	ldr	r3, [pc, #144]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd28:	2201      	movs	r2, #1
 800cd2a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd2e:	43da      	mvns	r2, r3
 800cd30:	4b21      	ldr	r3, [pc, #132]	; (800cdb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4013      	ands	r3, r2
 800cd36:	4a20      	ldr	r2, [pc, #128]	; (800cdb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cd38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd40:	d10a      	bne.n	800cd58 <prvAddCurrentTaskToDelayedList+0x58>
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d007      	beq.n	800cd58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd48:	4b1a      	ldr	r3, [pc, #104]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	4619      	mov	r1, r3
 800cd50:	481a      	ldr	r0, [pc, #104]	; (800cdbc <prvAddCurrentTaskToDelayedList+0xbc>)
 800cd52:	f7ff f93f 	bl	800bfd4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd56:	e026      	b.n	800cda6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd60:	4b14      	ldr	r3, [pc, #80]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d209      	bcs.n	800cd84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd70:	4b13      	ldr	r3, [pc, #76]	; (800cdc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	4b0f      	ldr	r3, [pc, #60]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	3304      	adds	r3, #4
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	f7ff f94d 	bl	800c01c <vListInsert>
}
 800cd82:	e010      	b.n	800cda6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd84:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	4b0a      	ldr	r3, [pc, #40]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	4619      	mov	r1, r3
 800cd90:	4610      	mov	r0, r2
 800cd92:	f7ff f943 	bl	800c01c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd96:	4b0c      	ldr	r3, [pc, #48]	; (800cdc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d202      	bcs.n	800cda6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cda0:	4a09      	ldr	r2, [pc, #36]	; (800cdc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	6013      	str	r3, [r2, #0]
}
 800cda6:	bf00      	nop
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	200003d0 	.word	0x200003d0
 800cdb4:	2000030c 	.word	0x2000030c
 800cdb8:	200003d4 	.word	0x200003d4
 800cdbc:	200003b8 	.word	0x200003b8
 800cdc0:	200003a0 	.word	0x200003a0
 800cdc4:	2000039c 	.word	0x2000039c
 800cdc8:	200003e8 	.word	0x200003e8
 800cdcc:	00000000 	.word	0x00000000

0800cdd0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cdd0:	4b07      	ldr	r3, [pc, #28]	; (800cdf0 <pxCurrentTCBConst2>)
 800cdd2:	6819      	ldr	r1, [r3, #0]
 800cdd4:	6808      	ldr	r0, [r1, #0]
 800cdd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdda:	f380 8809 	msr	PSP, r0
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f04f 0000 	mov.w	r0, #0
 800cde6:	f380 8811 	msr	BASEPRI, r0
 800cdea:	4770      	bx	lr
 800cdec:	f3af 8000 	nop.w

0800cdf0 <pxCurrentTCBConst2>:
 800cdf0:	2000030c 	.word	0x2000030c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cdf4:	bf00      	nop
 800cdf6:	bf00      	nop

0800cdf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce10:	4b0e      	ldr	r3, [pc, #56]	; (800ce4c <vPortEnterCritical+0x54>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3301      	adds	r3, #1
 800ce16:	4a0d      	ldr	r2, [pc, #52]	; (800ce4c <vPortEnterCritical+0x54>)
 800ce18:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce1a:	4b0c      	ldr	r3, [pc, #48]	; (800ce4c <vPortEnterCritical+0x54>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d10e      	bne.n	800ce40 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce22:	4b0b      	ldr	r3, [pc, #44]	; (800ce50 <vPortEnterCritical+0x58>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d009      	beq.n	800ce40 <vPortEnterCritical+0x48>
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	603b      	str	r3, [r7, #0]
 800ce3e:	e7fe      	b.n	800ce3e <vPortEnterCritical+0x46>
	}
}
 800ce40:	bf00      	nop
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	200000a0 	.word	0x200000a0
 800ce50:	e000ed04 	.word	0xe000ed04

0800ce54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce5a:	4b11      	ldr	r3, [pc, #68]	; (800cea0 <vPortExitCritical+0x4c>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d109      	bne.n	800ce76 <vPortExitCritical+0x22>
 800ce62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce66:	f383 8811 	msr	BASEPRI, r3
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	607b      	str	r3, [r7, #4]
 800ce74:	e7fe      	b.n	800ce74 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ce76:	4b0a      	ldr	r3, [pc, #40]	; (800cea0 <vPortExitCritical+0x4c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	4a08      	ldr	r2, [pc, #32]	; (800cea0 <vPortExitCritical+0x4c>)
 800ce7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce80:	4b07      	ldr	r3, [pc, #28]	; (800cea0 <vPortExitCritical+0x4c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d104      	bne.n	800ce92 <vPortExitCritical+0x3e>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce92:	bf00      	nop
 800ce94:	370c      	adds	r7, #12
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	200000a0 	.word	0x200000a0
	...

0800ceb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ceb0:	f3ef 8009 	mrs	r0, PSP
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	4b15      	ldr	r3, [pc, #84]	; (800cf10 <pxCurrentTCBConst>)
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	f01e 0f10 	tst.w	lr, #16
 800cec0:	bf08      	it	eq
 800cec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceca:	6010      	str	r0, [r2, #0]
 800cecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ced0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ced4:	f380 8811 	msr	BASEPRI, r0
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f7ff fcc4 	bl	800c86c <vTaskSwitchContext>
 800cee4:	f04f 0000 	mov.w	r0, #0
 800cee8:	f380 8811 	msr	BASEPRI, r0
 800ceec:	bc09      	pop	{r0, r3}
 800ceee:	6819      	ldr	r1, [r3, #0]
 800cef0:	6808      	ldr	r0, [r1, #0]
 800cef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef6:	f01e 0f10 	tst.w	lr, #16
 800cefa:	bf08      	it	eq
 800cefc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf00:	f380 8809 	msr	PSP, r0
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	f3af 8000 	nop.w

0800cf10 <pxCurrentTCBConst>:
 800cf10:	2000030c 	.word	0x2000030c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf14:	bf00      	nop
 800cf16:	bf00      	nop

0800cf18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf30:	f7ff fbe4 	bl	800c6fc <xTaskIncrementTick>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d003      	beq.n	800cf42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf3a:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <SysTick_Handler+0x3c>)
 800cf3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf40:	601a      	str	r2, [r3, #0]
 800cf42:	2300      	movs	r3, #0
 800cf44:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf4c:	bf00      	nop
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	e000ed04 	.word	0xe000ed04

0800cf58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf5e:	f3ef 8305 	mrs	r3, IPSR
 800cf62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b0f      	cmp	r3, #15
 800cf68:	d913      	bls.n	800cf92 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf6a:	4a16      	ldr	r2, [pc, #88]	; (800cfc4 <vPortValidateInterruptPriority+0x6c>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4413      	add	r3, r2
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf74:	4b14      	ldr	r3, [pc, #80]	; (800cfc8 <vPortValidateInterruptPriority+0x70>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	7afa      	ldrb	r2, [r7, #11]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d209      	bcs.n	800cf92 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	607b      	str	r3, [r7, #4]
 800cf90:	e7fe      	b.n	800cf90 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf92:	4b0e      	ldr	r3, [pc, #56]	; (800cfcc <vPortValidateInterruptPriority+0x74>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf9a:	4b0d      	ldr	r3, [pc, #52]	; (800cfd0 <vPortValidateInterruptPriority+0x78>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d909      	bls.n	800cfb6 <vPortValidateInterruptPriority+0x5e>
 800cfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa6:	f383 8811 	msr	BASEPRI, r3
 800cfaa:	f3bf 8f6f 	isb	sy
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	e7fe      	b.n	800cfb4 <vPortValidateInterruptPriority+0x5c>
	}
 800cfb6:	bf00      	nop
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	e000e3f0 	.word	0xe000e3f0
 800cfc8:	200003f0 	.word	0x200003f0
 800cfcc:	e000ed0c 	.word	0xe000ed0c
 800cfd0:	200003f4 	.word	0x200003f4

0800cfd4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fe fec8 	bl	800bd78 <USBH_LL_IncTimer>
}
 800cfe8:	bf00      	nop
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fe ff0c 	bl	800be1c <USBH_LL_Connect>
}
 800d004:	bf00      	nop
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe ff21 	bl	800be62 <USBH_LL_Disconnect>
}
 800d020:	bf00      	nop
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	460b      	mov	r3, r1
 800d032:	70fb      	strb	r3, [r7, #3]
 800d034:	4613      	mov	r3, r2
 800d036:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe ff41 	bl	800bec6 <USBH_LL_NotifyURBChange>
#endif
}
 800d044:	bf00      	nop
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fe feb6 	bl	800bdcc <USBH_LL_PortEnabled>
}
 800d060:	bf00      	nop
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d076:	4618      	mov	r0, r3
 800d078:	f7fe fec2 	bl	800be00 <USBH_LL_PortDisabled>
}
 800d07c:	bf00      	nop
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7f9 f99b 	bl	80063d6 <HAL_HCD_Stop>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f000 f808 	bl	800d0bc <USBH_Get_USB_Status>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
	...

0800d0bc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0ca:	79fb      	ldrb	r3, [r7, #7]
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d817      	bhi.n	800d100 <USBH_Get_USB_Status+0x44>
 800d0d0:	a201      	add	r2, pc, #4	; (adr r2, 800d0d8 <USBH_Get_USB_Status+0x1c>)
 800d0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d6:	bf00      	nop
 800d0d8:	0800d0e9 	.word	0x0800d0e9
 800d0dc:	0800d0ef 	.word	0x0800d0ef
 800d0e0:	0800d0f5 	.word	0x0800d0f5
 800d0e4:	0800d0fb 	.word	0x0800d0fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ec:	e00b      	b.n	800d106 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d0ee:	2302      	movs	r3, #2
 800d0f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f2:	e008      	b.n	800d106 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f8:	e005      	b.n	800d106 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d0fe:	e002      	b.n	800d106 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d100:	2302      	movs	r3, #2
 800d102:	73fb      	strb	r3, [r7, #15]
    break;
 800d104:	bf00      	nop
  }
  return usb_status;
 800d106:	7bfb      	ldrb	r3, [r7, #15]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <__errno>:
 800d114:	4b01      	ldr	r3, [pc, #4]	; (800d11c <__errno+0x8>)
 800d116:	6818      	ldr	r0, [r3, #0]
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	200000a4 	.word	0x200000a4

0800d120 <__libc_init_array>:
 800d120:	b570      	push	{r4, r5, r6, lr}
 800d122:	4e0d      	ldr	r6, [pc, #52]	; (800d158 <__libc_init_array+0x38>)
 800d124:	4c0d      	ldr	r4, [pc, #52]	; (800d15c <__libc_init_array+0x3c>)
 800d126:	1ba4      	subs	r4, r4, r6
 800d128:	10a4      	asrs	r4, r4, #2
 800d12a:	2500      	movs	r5, #0
 800d12c:	42a5      	cmp	r5, r4
 800d12e:	d109      	bne.n	800d144 <__libc_init_array+0x24>
 800d130:	4e0b      	ldr	r6, [pc, #44]	; (800d160 <__libc_init_array+0x40>)
 800d132:	4c0c      	ldr	r4, [pc, #48]	; (800d164 <__libc_init_array+0x44>)
 800d134:	f000 f92c 	bl	800d390 <_init>
 800d138:	1ba4      	subs	r4, r4, r6
 800d13a:	10a4      	asrs	r4, r4, #2
 800d13c:	2500      	movs	r5, #0
 800d13e:	42a5      	cmp	r5, r4
 800d140:	d105      	bne.n	800d14e <__libc_init_array+0x2e>
 800d142:	bd70      	pop	{r4, r5, r6, pc}
 800d144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d148:	4798      	blx	r3
 800d14a:	3501      	adds	r5, #1
 800d14c:	e7ee      	b.n	800d12c <__libc_init_array+0xc>
 800d14e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d152:	4798      	blx	r3
 800d154:	3501      	adds	r5, #1
 800d156:	e7f2      	b.n	800d13e <__libc_init_array+0x1e>
 800d158:	08010e9c 	.word	0x08010e9c
 800d15c:	08010e9c 	.word	0x08010e9c
 800d160:	08010e9c 	.word	0x08010e9c
 800d164:	08010ea0 	.word	0x08010ea0

0800d168 <__itoa>:
 800d168:	1e93      	subs	r3, r2, #2
 800d16a:	2b22      	cmp	r3, #34	; 0x22
 800d16c:	b510      	push	{r4, lr}
 800d16e:	460c      	mov	r4, r1
 800d170:	d904      	bls.n	800d17c <__itoa+0x14>
 800d172:	2300      	movs	r3, #0
 800d174:	700b      	strb	r3, [r1, #0]
 800d176:	461c      	mov	r4, r3
 800d178:	4620      	mov	r0, r4
 800d17a:	bd10      	pop	{r4, pc}
 800d17c:	2a0a      	cmp	r2, #10
 800d17e:	d109      	bne.n	800d194 <__itoa+0x2c>
 800d180:	2800      	cmp	r0, #0
 800d182:	da07      	bge.n	800d194 <__itoa+0x2c>
 800d184:	232d      	movs	r3, #45	; 0x2d
 800d186:	700b      	strb	r3, [r1, #0]
 800d188:	4240      	negs	r0, r0
 800d18a:	2101      	movs	r1, #1
 800d18c:	4421      	add	r1, r4
 800d18e:	f000 f8bf 	bl	800d310 <__utoa>
 800d192:	e7f1      	b.n	800d178 <__itoa+0x10>
 800d194:	2100      	movs	r1, #0
 800d196:	e7f9      	b.n	800d18c <__itoa+0x24>

0800d198 <itoa>:
 800d198:	f7ff bfe6 	b.w	800d168 <__itoa>

0800d19c <malloc>:
 800d19c:	4b02      	ldr	r3, [pc, #8]	; (800d1a8 <malloc+0xc>)
 800d19e:	4601      	mov	r1, r0
 800d1a0:	6818      	ldr	r0, [r3, #0]
 800d1a2:	f000 b817 	b.w	800d1d4 <_malloc_r>
 800d1a6:	bf00      	nop
 800d1a8:	200000a4 	.word	0x200000a4

0800d1ac <memcpy>:
 800d1ac:	b510      	push	{r4, lr}
 800d1ae:	1e43      	subs	r3, r0, #1
 800d1b0:	440a      	add	r2, r1
 800d1b2:	4291      	cmp	r1, r2
 800d1b4:	d100      	bne.n	800d1b8 <memcpy+0xc>
 800d1b6:	bd10      	pop	{r4, pc}
 800d1b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1c0:	e7f7      	b.n	800d1b2 <memcpy+0x6>

0800d1c2 <memset>:
 800d1c2:	4402      	add	r2, r0
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d100      	bne.n	800d1cc <memset+0xa>
 800d1ca:	4770      	bx	lr
 800d1cc:	f803 1b01 	strb.w	r1, [r3], #1
 800d1d0:	e7f9      	b.n	800d1c6 <memset+0x4>
	...

0800d1d4 <_malloc_r>:
 800d1d4:	b570      	push	{r4, r5, r6, lr}
 800d1d6:	1ccd      	adds	r5, r1, #3
 800d1d8:	f025 0503 	bic.w	r5, r5, #3
 800d1dc:	3508      	adds	r5, #8
 800d1de:	2d0c      	cmp	r5, #12
 800d1e0:	bf38      	it	cc
 800d1e2:	250c      	movcc	r5, #12
 800d1e4:	2d00      	cmp	r5, #0
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	db01      	blt.n	800d1ee <_malloc_r+0x1a>
 800d1ea:	42a9      	cmp	r1, r5
 800d1ec:	d903      	bls.n	800d1f6 <_malloc_r+0x22>
 800d1ee:	230c      	movs	r3, #12
 800d1f0:	6033      	str	r3, [r6, #0]
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	bd70      	pop	{r4, r5, r6, pc}
 800d1f6:	f000 f8c9 	bl	800d38c <__malloc_lock>
 800d1fa:	4a21      	ldr	r2, [pc, #132]	; (800d280 <_malloc_r+0xac>)
 800d1fc:	6814      	ldr	r4, [r2, #0]
 800d1fe:	4621      	mov	r1, r4
 800d200:	b991      	cbnz	r1, 800d228 <_malloc_r+0x54>
 800d202:	4c20      	ldr	r4, [pc, #128]	; (800d284 <_malloc_r+0xb0>)
 800d204:	6823      	ldr	r3, [r4, #0]
 800d206:	b91b      	cbnz	r3, 800d210 <_malloc_r+0x3c>
 800d208:	4630      	mov	r0, r6
 800d20a:	f000 f871 	bl	800d2f0 <_sbrk_r>
 800d20e:	6020      	str	r0, [r4, #0]
 800d210:	4629      	mov	r1, r5
 800d212:	4630      	mov	r0, r6
 800d214:	f000 f86c 	bl	800d2f0 <_sbrk_r>
 800d218:	1c43      	adds	r3, r0, #1
 800d21a:	d124      	bne.n	800d266 <_malloc_r+0x92>
 800d21c:	230c      	movs	r3, #12
 800d21e:	6033      	str	r3, [r6, #0]
 800d220:	4630      	mov	r0, r6
 800d222:	f000 f8b4 	bl	800d38e <__malloc_unlock>
 800d226:	e7e4      	b.n	800d1f2 <_malloc_r+0x1e>
 800d228:	680b      	ldr	r3, [r1, #0]
 800d22a:	1b5b      	subs	r3, r3, r5
 800d22c:	d418      	bmi.n	800d260 <_malloc_r+0x8c>
 800d22e:	2b0b      	cmp	r3, #11
 800d230:	d90f      	bls.n	800d252 <_malloc_r+0x7e>
 800d232:	600b      	str	r3, [r1, #0]
 800d234:	50cd      	str	r5, [r1, r3]
 800d236:	18cc      	adds	r4, r1, r3
 800d238:	4630      	mov	r0, r6
 800d23a:	f000 f8a8 	bl	800d38e <__malloc_unlock>
 800d23e:	f104 000b 	add.w	r0, r4, #11
 800d242:	1d23      	adds	r3, r4, #4
 800d244:	f020 0007 	bic.w	r0, r0, #7
 800d248:	1ac3      	subs	r3, r0, r3
 800d24a:	d0d3      	beq.n	800d1f4 <_malloc_r+0x20>
 800d24c:	425a      	negs	r2, r3
 800d24e:	50e2      	str	r2, [r4, r3]
 800d250:	e7d0      	b.n	800d1f4 <_malloc_r+0x20>
 800d252:	428c      	cmp	r4, r1
 800d254:	684b      	ldr	r3, [r1, #4]
 800d256:	bf16      	itet	ne
 800d258:	6063      	strne	r3, [r4, #4]
 800d25a:	6013      	streq	r3, [r2, #0]
 800d25c:	460c      	movne	r4, r1
 800d25e:	e7eb      	b.n	800d238 <_malloc_r+0x64>
 800d260:	460c      	mov	r4, r1
 800d262:	6849      	ldr	r1, [r1, #4]
 800d264:	e7cc      	b.n	800d200 <_malloc_r+0x2c>
 800d266:	1cc4      	adds	r4, r0, #3
 800d268:	f024 0403 	bic.w	r4, r4, #3
 800d26c:	42a0      	cmp	r0, r4
 800d26e:	d005      	beq.n	800d27c <_malloc_r+0xa8>
 800d270:	1a21      	subs	r1, r4, r0
 800d272:	4630      	mov	r0, r6
 800d274:	f000 f83c 	bl	800d2f0 <_sbrk_r>
 800d278:	3001      	adds	r0, #1
 800d27a:	d0cf      	beq.n	800d21c <_malloc_r+0x48>
 800d27c:	6025      	str	r5, [r4, #0]
 800d27e:	e7db      	b.n	800d238 <_malloc_r+0x64>
 800d280:	200003f8 	.word	0x200003f8
 800d284:	200003fc 	.word	0x200003fc

0800d288 <rand>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4b13      	ldr	r3, [pc, #76]	; (800d2d8 <rand+0x50>)
 800d28c:	681c      	ldr	r4, [r3, #0]
 800d28e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d290:	b97b      	cbnz	r3, 800d2b2 <rand+0x2a>
 800d292:	2018      	movs	r0, #24
 800d294:	f7ff ff82 	bl	800d19c <malloc>
 800d298:	4a10      	ldr	r2, [pc, #64]	; (800d2dc <rand+0x54>)
 800d29a:	4b11      	ldr	r3, [pc, #68]	; (800d2e0 <rand+0x58>)
 800d29c:	63a0      	str	r0, [r4, #56]	; 0x38
 800d29e:	e9c0 2300 	strd	r2, r3, [r0]
 800d2a2:	4b10      	ldr	r3, [pc, #64]	; (800d2e4 <rand+0x5c>)
 800d2a4:	6083      	str	r3, [r0, #8]
 800d2a6:	230b      	movs	r3, #11
 800d2a8:	8183      	strh	r3, [r0, #12]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d2b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d2b4:	480c      	ldr	r0, [pc, #48]	; (800d2e8 <rand+0x60>)
 800d2b6:	690a      	ldr	r2, [r1, #16]
 800d2b8:	694b      	ldr	r3, [r1, #20]
 800d2ba:	4c0c      	ldr	r4, [pc, #48]	; (800d2ec <rand+0x64>)
 800d2bc:	4350      	muls	r0, r2
 800d2be:	fb04 0003 	mla	r0, r4, r3, r0
 800d2c2:	fba2 2304 	umull	r2, r3, r2, r4
 800d2c6:	4403      	add	r3, r0
 800d2c8:	1c54      	adds	r4, r2, #1
 800d2ca:	f143 0500 	adc.w	r5, r3, #0
 800d2ce:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800d2d2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800d2d6:	bd38      	pop	{r3, r4, r5, pc}
 800d2d8:	200000a4 	.word	0x200000a4
 800d2dc:	abcd330e 	.word	0xabcd330e
 800d2e0:	e66d1234 	.word	0xe66d1234
 800d2e4:	0005deec 	.word	0x0005deec
 800d2e8:	5851f42d 	.word	0x5851f42d
 800d2ec:	4c957f2d 	.word	0x4c957f2d

0800d2f0 <_sbrk_r>:
 800d2f0:	b538      	push	{r3, r4, r5, lr}
 800d2f2:	4c06      	ldr	r4, [pc, #24]	; (800d30c <_sbrk_r+0x1c>)
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	4608      	mov	r0, r1
 800d2fa:	6023      	str	r3, [r4, #0]
 800d2fc:	f7f4 ffd2 	bl	80022a4 <_sbrk>
 800d300:	1c43      	adds	r3, r0, #1
 800d302:	d102      	bne.n	800d30a <_sbrk_r+0x1a>
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	b103      	cbz	r3, 800d30a <_sbrk_r+0x1a>
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
 800d30c:	20000a64 	.word	0x20000a64

0800d310 <__utoa>:
 800d310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d312:	4b1d      	ldr	r3, [pc, #116]	; (800d388 <__utoa+0x78>)
 800d314:	b08b      	sub	sp, #44	; 0x2c
 800d316:	4605      	mov	r5, r0
 800d318:	460c      	mov	r4, r1
 800d31a:	466e      	mov	r6, sp
 800d31c:	f103 0c20 	add.w	ip, r3, #32
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	6859      	ldr	r1, [r3, #4]
 800d324:	4637      	mov	r7, r6
 800d326:	c703      	stmia	r7!, {r0, r1}
 800d328:	3308      	adds	r3, #8
 800d32a:	4563      	cmp	r3, ip
 800d32c:	463e      	mov	r6, r7
 800d32e:	d1f7      	bne.n	800d320 <__utoa+0x10>
 800d330:	6818      	ldr	r0, [r3, #0]
 800d332:	791b      	ldrb	r3, [r3, #4]
 800d334:	713b      	strb	r3, [r7, #4]
 800d336:	1e93      	subs	r3, r2, #2
 800d338:	2b22      	cmp	r3, #34	; 0x22
 800d33a:	6038      	str	r0, [r7, #0]
 800d33c:	f04f 0300 	mov.w	r3, #0
 800d340:	d904      	bls.n	800d34c <__utoa+0x3c>
 800d342:	7023      	strb	r3, [r4, #0]
 800d344:	461c      	mov	r4, r3
 800d346:	4620      	mov	r0, r4
 800d348:	b00b      	add	sp, #44	; 0x2c
 800d34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d34c:	1e66      	subs	r6, r4, #1
 800d34e:	fbb5 f0f2 	udiv	r0, r5, r2
 800d352:	af0a      	add	r7, sp, #40	; 0x28
 800d354:	fb02 5510 	mls	r5, r2, r0, r5
 800d358:	443d      	add	r5, r7
 800d35a:	1c59      	adds	r1, r3, #1
 800d35c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800d360:	f806 5f01 	strb.w	r5, [r6, #1]!
 800d364:	4605      	mov	r5, r0
 800d366:	b968      	cbnz	r0, 800d384 <__utoa+0x74>
 800d368:	5460      	strb	r0, [r4, r1]
 800d36a:	4423      	add	r3, r4
 800d36c:	4622      	mov	r2, r4
 800d36e:	1b19      	subs	r1, r3, r4
 800d370:	1b10      	subs	r0, r2, r4
 800d372:	4281      	cmp	r1, r0
 800d374:	dde7      	ble.n	800d346 <__utoa+0x36>
 800d376:	7811      	ldrb	r1, [r2, #0]
 800d378:	7818      	ldrb	r0, [r3, #0]
 800d37a:	f802 0b01 	strb.w	r0, [r2], #1
 800d37e:	f803 1901 	strb.w	r1, [r3], #-1
 800d382:	e7f4      	b.n	800d36e <__utoa+0x5e>
 800d384:	460b      	mov	r3, r1
 800d386:	e7e2      	b.n	800d34e <__utoa+0x3e>
 800d388:	08010e6c 	.word	0x08010e6c

0800d38c <__malloc_lock>:
 800d38c:	4770      	bx	lr

0800d38e <__malloc_unlock>:
 800d38e:	4770      	bx	lr

0800d390 <_init>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	bf00      	nop
 800d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d396:	bc08      	pop	{r3}
 800d398:	469e      	mov	lr, r3
 800d39a:	4770      	bx	lr

0800d39c <_fini>:
 800d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39e:	bf00      	nop
 800d3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a2:	bc08      	pop	{r3}
 800d3a4:	469e      	mov	lr, r3
 800d3a6:	4770      	bx	lr
