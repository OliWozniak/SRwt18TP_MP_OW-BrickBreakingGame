
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fac  0800bf10  0800bf10  0001bf10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800debc  0800debc  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800debc  0800debc  0001debc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dec4  0800dec4  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dec4  0800dec4  0001dec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dec8  0800dec8  0001dec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800decc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  200000f0  0800dfbc  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a18  0800dfbc  00020a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003eb98  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000720c  00000000  00000000  0005ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002748  00000000  00000000  00065ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002430  00000000  00000000  00068610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003017a  00000000  00000000  0006aa40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000290c6  00000000  00000000  0009abba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f675f  00000000  00000000  000c3c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ba3df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a548  00000000  00000000  001ba45c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bef8 	.word	0x0800bef8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	0800bef8 	.word	0x0800bef8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BBG_init>:
////
////	bbg->kulka = kulka;
////	rysuj_kulke(bbg->kulka);
//}

void BBG_init(BBG* bbg, Platforma * platforma, Klocek ** klocki, Kulka * kulka, int lkl) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
    bbg->liczba_klockow = lkl;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	60da      	str	r2, [r3, #12]
    bbg->platforma = platforma;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	601a      	str	r2, [r3, #0]
    rysuj_platforme(bbg->platforma);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f001 f8ec 	bl	80016ec <rysuj_platforme>

    bbg->klocki = klocki;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e00b      	b.n	8000538 <BBG_init+0x48>
        rysuj_klocek(bbg->klocki[i]);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fc6f 	bl	8000e10 <rysuj_klocek>
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbee      	blt.n	8000520 <BBG_init+0x30>
    }

    bbg->kulka = kulka;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	609a      	str	r2, [r3, #8]
    rysuj_kulke(bbg->kulka);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fc99 	bl	8000e84 <rysuj_kulke>
}
 8000552:	bf00      	nop
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <BBG_obsluga_zbicia_klocka>:




void BBG_obsluga_zbicia_klocka(BBG* bbg) {
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e0ad      	b.n	80006c6 <BBG_obsluga_zbicia_klocka+0x16a>
        // Sprawdź, czy kulka zderzyła się z klockiem
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	685a      	ldr	r2, [r3, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	441a      	add	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6859      	ldr	r1, [r3, #4]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	f2c0 809a 	blt.w	80006c0 <BBG_obsluga_zbicia_klocka+0x164>
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	1ad2      	subs	r2, r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6859      	ldr	r1, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	440b      	add	r3, r1
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6859      	ldr	r1, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6858      	ldr	r0, [r3, #4]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4403      	add	r3, r0
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	440b      	add	r3, r1
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 80005b8:	429a      	cmp	r2, r3
 80005ba:	f300 8081 	bgt.w	80006c0 <BBG_obsluga_zbicia_klocka+0x164>
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	441a      	add	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6859      	ldr	r1, [r3, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005da:	429a      	cmp	r2, r3
 80005dc:	db70      	blt.n	80006c0 <BBG_obsluga_zbicia_klocka+0x164>
            bbg->kulka->polozenie_x - bbg->kulka->promien <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc) {
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	1ad2      	subs	r2, r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6859      	ldr	r1, [r3, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	440b      	add	r3, r1
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6858      	ldr	r0, [r3, #4]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4403      	add	r3, r0
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	440b      	add	r3, r1
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 800060a:	429a      	cmp	r2, r3
 800060c:	dc58      	bgt.n	80006c0 <BBG_obsluga_zbicia_klocka+0x164>

            // Odwróć kierunek prędkości kulki
            bbg->kulka->predkosc_x *= -1;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	68da      	ldr	r2, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4252      	negs	r2, r2
 800061a:	60da      	str	r2, [r3, #12]
            bbg->kulka->predkosc_y *= -1;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	691a      	ldr	r2, [r3, #16]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4252      	negs	r2, r2
 8000628:	611a      	str	r2, [r3, #16]

            // zamaluj miejsce zbitego klocka
            BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800062a:	482d      	ldr	r0, [pc, #180]	; (80006e0 <BBG_obsluga_zbicia_klocka+0x184>)
 800062c:	f002 fc3c 	bl	8002ea8 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000630:	482b      	ldr	r0, [pc, #172]	; (80006e0 <BBG_obsluga_zbicia_klocka+0x184>)
 8000632:	f002 fc21 	bl	8002e78 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	b298      	uxth	r0, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	b299      	uxth	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	b29c      	uxth	r4, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4622      	mov	r2, r4
 8000678:	f002 fda0 	bl	80031bc <BSP_LCD_FillRect>

            // Usuń trafiony klocek z tablicy klocków
            //free(bbg->klocki[i]);

            // Przesuń pozostałe klocki w tablicy, aby zapełnić lukę po usuniętym klocku
            for (int j = i; j < bbg->liczba_klockow - 1; j++) {
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	e00f      	b.n	80006a2 <BBG_obsluga_zbicia_klocka+0x146>
                bbg->klocki[j] = bbg->klocki[j + 1];
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3301      	adds	r3, #1
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	441a      	add	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6859      	ldr	r1, [r3, #4]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	440b      	add	r3, r1
 8000698:	6812      	ldr	r2, [r2, #0]
 800069a:	601a      	str	r2, [r3, #0]
            for (int j = i; j < bbg->liczba_klockow - 1; j++) {
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	3301      	adds	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dbe9      	blt.n	8000682 <BBG_obsluga_zbicia_klocka+0x126>
            }

            // Zmniejsz liczbę klocków o 1
            bbg->liczba_klockow--;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	1e5a      	subs	r2, r3, #1
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60da      	str	r2, [r3, #12]

            // Przerwij pętlę, gdy trafiony zostanie tylko jeden klocek
            if (bbg->liczba_klockow == 0) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d009      	beq.n	80006d4 <BBG_obsluga_zbicia_klocka+0x178>
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	f6ff af4c 	blt.w	800056a <BBG_obsluga_zbicia_klocka+0xe>
                break;
            }
        }
    }
}
 80006d2:	e000      	b.n	80006d6 <BBG_obsluga_zbicia_klocka+0x17a>
                break;
 80006d4:	bf00      	nop
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	bf00      	nop
 80006e0:	ffff0000 	.word	0xffff0000

080006e4 <BBG_ruchKulki>:
    // Przykładowa obsługa dotyku
    printf("Obsługa dotyku ekranu\n");
}

// Ruch kulki (przykładowa implementacja)
void BBG_ruchKulki(BBG* bbg) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    // Przykładowy ruch kulki
    Kulka_ruch(bbg->kulka);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fbe1 	bl	8000eb8 <Kulka_ruch>
    rysuj_kulke(bbg->kulka);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fbc2 	bl	8000e84 <rysuj_kulke>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CRC_Init+0x20>)
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <MX_CRC_Init+0x24>)
 8000710:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_CRC_Init+0x20>)
 8000714:	f003 fada 	bl	8003ccc <HAL_CRC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800071e:	f000 ffbf 	bl	80016a0 <Error_Handler>
  }

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200003bc 	.word	0x200003bc
 800072c:	40023000 	.word	0x40023000

08000730 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0b      	ldr	r2, [pc, #44]	; (800076c <HAL_CRC_MspInit+0x3c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d10d      	bne.n	800075e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_CRC_MspInit+0x40>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a09      	ldr	r2, [pc, #36]	; (8000770 <HAL_CRC_MspInit+0x40>)
 800074c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <HAL_CRC_MspInit+0x40>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023000 	.word	0x40023000
 8000770:	40023800 	.word	0x40023800

08000774 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <MX_DMA2D_Init+0x60>)
 800077c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007aa:	f003 fc67 	bl	800407c <HAL_DMA2D_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007b4:	f000 ff74 	bl	80016a0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007b8:	2101      	movs	r1, #1
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007bc:	f003 fecc 	bl	8004558 <HAL_DMA2D_ConfigLayer>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007c6:	f000 ff6b 	bl	80016a0 <Error_Handler>
  }

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200003c4 	.word	0x200003c4
 80007d4:	4002b000 	.word	0x4002b000

080007d8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_DMA2D_MspInit+0x48>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d115      	bne.n	8000816 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_DMA2D_MspInit+0x4c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <HAL_DMA2D_MspInit+0x4c>)
 80007f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_DMA2D_MspInit+0x4c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2105      	movs	r1, #5
 800080a:	205a      	movs	r0, #90	; 0x5a
 800080c:	f003 fa34 	bl	8003c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000810:	205a      	movs	r0, #90	; 0x5a
 8000812:	f003 fa4d 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	4002b000 	.word	0x4002b000
 8000824:	40023800 	.word	0x40023800

08000828 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_FMC_Init+0x98>)
 8000842:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <MX_FMC_Init+0x9c>)
 8000844:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_FMC_Init+0x98>)
 8000848:	2201      	movs	r2, #1
 800084a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_FMC_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_FMC_Init+0x98>)
 8000854:	2204      	movs	r2, #4
 8000856:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_FMC_Init+0x98>)
 800085a:	2210      	movs	r2, #16
 800085c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_FMC_Init+0x98>)
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_FMC_Init+0x98>)
 8000866:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800086a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_FMC_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_FMC_Init+0x98>)
 8000874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000878:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_FMC_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_FMC_Init+0x98>)
 8000882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000894:	2307      	movs	r3, #7
 8000896:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000898:	2303      	movs	r3, #3
 800089a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_FMC_Init+0x98>)
 80008aa:	f007 ff09 	bl	80086c0 <HAL_SDRAM_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008b4:	f000 fef4 	bl	80016a0 <Error_Handler>
  }

}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000404 	.word	0x20000404
 80008c4:	a0000140 	.word	0xa0000140

080008c8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80008dc:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <HAL_FMC_MspInit+0x104>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d16f      	bne.n	80009c4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80008e4:	4b39      	ldr	r3, [pc, #228]	; (80009cc <HAL_FMC_MspInit+0x104>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_FMC_MspInit+0x108>)
 80008f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <HAL_FMC_MspInit+0x108>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6393      	str	r3, [r2, #56]	; 0x38
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_FMC_MspInit+0x108>)
 80008fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000906:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800090a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000918:	230c      	movs	r3, #12
 800091a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	482c      	ldr	r0, [pc, #176]	; (80009d4 <HAL_FMC_MspInit+0x10c>)
 8000922:	f003 ff47 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000936:	230c      	movs	r3, #12
 8000938:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4826      	ldr	r0, [pc, #152]	; (80009d8 <HAL_FMC_MspInit+0x110>)
 8000940:	f003 ff38 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000944:	f248 1333 	movw	r3, #33075	; 0x8133
 8000948:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000956:	230c      	movs	r3, #12
 8000958:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	4619      	mov	r1, r3
 800095e:	481f      	ldr	r0, [pc, #124]	; (80009dc <HAL_FMC_MspInit+0x114>)
 8000960:	f003 ff28 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000964:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000968:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000976:	230c      	movs	r3, #12
 8000978:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4818      	ldr	r0, [pc, #96]	; (80009e0 <HAL_FMC_MspInit+0x118>)
 8000980:	f003 ff18 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000984:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000988:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <HAL_FMC_MspInit+0x11c>)
 80009a0:	f003 ff08 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80009a4:	2360      	movs	r3, #96	; 0x60
 80009a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b4:	230c      	movs	r3, #12
 80009b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <HAL_FMC_MspInit+0x120>)
 80009be:	f003 fef9 	bl	80047b4 <HAL_GPIO_Init>
 80009c2:	e000      	b.n	80009c6 <HAL_FMC_MspInit+0xfe>
    return;
 80009c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000010c 	.word	0x2000010c
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40021400 	.word	0x40021400
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	40020400 	.word	0x40020400

080009ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80009f4:	f7ff ff68 	bl	80008c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	; 0x38
 8000a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
 8000a32:	4b7a      	ldr	r3, [pc, #488]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a79      	ldr	r2, [pc, #484]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b77      	ldr	r3, [pc, #476]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	623b      	str	r3, [r7, #32]
 8000a48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a72      	ldr	r2, [pc, #456]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b70      	ldr	r3, [pc, #448]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a6b      	ldr	r2, [pc, #428]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b69      	ldr	r3, [pc, #420]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	4b65      	ldr	r3, [pc, #404]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a64      	ldr	r2, [pc, #400]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b62      	ldr	r3, [pc, #392]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a5d      	ldr	r2, [pc, #372]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b5b      	ldr	r3, [pc, #364]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a56      	ldr	r2, [pc, #344]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a4f      	ldr	r2, [pc, #316]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b49      	ldr	r3, [pc, #292]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a48      	ldr	r2, [pc, #288]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2116      	movs	r1, #22
 8000b12:	4843      	ldr	r0, [pc, #268]	; (8000c20 <MX_GPIO_Init+0x208>)
 8000b14:	f004 f902 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	4841      	ldr	r0, [pc, #260]	; (8000c24 <MX_GPIO_Init+0x20c>)
 8000b1e:	f004 f8fd 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b28:	483f      	ldr	r0, [pc, #252]	; (8000c28 <MX_GPIO_Init+0x210>)
 8000b2a:	f004 f8f7 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b34:	483d      	ldr	r0, [pc, #244]	; (8000c2c <MX_GPIO_Init+0x214>)
 8000b36:	f004 f8f1 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b3a:	2316      	movs	r3, #22
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4833      	ldr	r0, [pc, #204]	; (8000c20 <MX_GPIO_Init+0x208>)
 8000b52:	f003 fe2f 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b56:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <MX_GPIO_Init+0x218>)
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482e      	ldr	r0, [pc, #184]	; (8000c24 <MX_GPIO_Init+0x20c>)
 8000b6c:	f003 fe22 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4827      	ldr	r0, [pc, #156]	; (8000c24 <MX_GPIO_Init+0x20c>)
 8000b88:	f003 fe14 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_GPIO_Init+0x218>)
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4820      	ldr	r0, [pc, #128]	; (8000c20 <MX_GPIO_Init+0x208>)
 8000ba0:	f003 fe08 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481f      	ldr	r0, [pc, #124]	; (8000c34 <MX_GPIO_Init+0x21c>)
 8000bb8:	f003 fdfc 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <MX_GPIO_Init+0x210>)
 8000bd2:	f003 fdef 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000bd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_GPIO_Init+0x210>)
 8000bf0:	f003 fde0 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bf4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_GPIO_Init+0x214>)
 8000c0e:	f003 fdd1 	bl	80047b4 <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	; 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020c00 	.word	0x40020c00
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	10120000 	.word	0x10120000
 8000c34:	40020400 	.word	0x40020400

08000c38 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <MX_I2C3_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c44:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <MX_I2C3_Init+0x7c>)
 8000c46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c76:	f005 fa55 	bl	8006124 <HAL_I2C_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f000 fd0e 	bl	80016a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c88:	f006 fa3d 	bl	8007106 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000c92:	f000 fd05 	bl	80016a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c9a:	f006 fa70 	bl	800717e <HAL_I2CEx_ConfigDigitalFilter>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000ca4:	f000 fcfc 	bl	80016a0 <Error_Handler>
  }

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000438 	.word	0x20000438
 8000cb0:	40005c00 	.word	0x40005c00
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <HAL_I2C_MspInit+0xc4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d14b      	bne.n	8000d72 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a20      	ldr	r2, [pc, #128]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d24:	2304      	movs	r3, #4
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4815      	ldr	r0, [pc, #84]	; (8000d84 <HAL_I2C_MspInit+0xcc>)
 8000d30:	f003 fd40 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d46:	2304      	movs	r3, #4
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <HAL_I2C_MspInit+0xd0>)
 8000d52:	f003 fd2f 	bl	80047b4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40005c00 	.word	0x40005c00
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020000 	.word	0x40020000

08000d8c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_I2C_MspDeInit+0x3c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10f      	bne.n	8000dbe <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_I2C_MspDeInit+0x40>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_I2C_MspDeInit+0x40>)
 8000da4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <HAL_I2C_MspDeInit+0x44>)
 8000db0:	f003 feaa 	bl	8004b08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <HAL_I2C_MspDeInit+0x48>)
 8000dba:	f003 fea5 	bl	8004b08 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40005c00 	.word	0x40005c00
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <Klocek_init>:
#include "klocek.h"
#include "main.h"


// Inicjalizacja struktury Klocek
void Klocek_init(Klocek* k, int x, int y, int w, int h, uint32_t kol) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
    k->pozycja_x = x;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	601a      	str	r2, [r3, #0]
    k->pozycja_y = y;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	605a      	str	r2, [r3, #4]
    k->szerokosc = w;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	609a      	str	r2, [r3, #8]
    k->wysokosc = h;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	60da      	str	r2, [r3, #12]
    k->kolor = kol;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	611a      	str	r2, [r3, #16]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <rysuj_klocek>:

void rysuj_klocek(Klocek* k){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(k->kolor);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	691b      	ldr	r3, [r3, #16]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 f82b 	bl	8002e78 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(k->pozycja_x, k->pozycja_y, k->szerokosc, k->wysokosc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	b298      	uxth	r0, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f002 f9bf 	bl	80031bc <BSP_LCD_FillRect>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <Kulka_init>:
 */
#include "Kulka.h"
#include "main.h"

// Inicjalizacja struktury Kulka
void Kulka_init(Kulka* kulka, int x, int y, int r, int vx, int vy, uint32_t kol) {
 8000e46:	b480      	push	{r7}
 8000e48:	b085      	sub	sp, #20
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	603b      	str	r3, [r7, #0]
    kulka->polozenie_x = x;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	601a      	str	r2, [r3, #0]
    kulka->polozenie_y = y;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	605a      	str	r2, [r3, #4]
    kulka->promien = r;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	609a      	str	r2, [r3, #8]
    kulka->predkosc_x = vx;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
    kulka->predkosc_y = vy;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	611a      	str	r2, [r3, #16]
    kulka->kolor = kol;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6a3a      	ldr	r2, [r7, #32]
 8000e76:	615a      	str	r2, [r3, #20]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <rysuj_kulke>:

void rysuj_kulke(Kulka* kulka){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(kulka->kolor);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fff1 	bl	8002e78 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	b298      	uxth	r0, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f002 f9e1 	bl	8003270 <BSP_LCD_FillCircle>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <Kulka_ruch>:
void Kulka_ruch(Kulka* kulka) {
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	// Zamaluj stary stan kulki
	BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8000ec0:	482f      	ldr	r0, [pc, #188]	; (8000f80 <Kulka_ruch+0xc8>)
 8000ec2:	f001 ffd9 	bl	8002e78 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	b298      	uxth	r0, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	b299      	uxth	r1, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f002 f9c9 	bl	8003270 <BSP_LCD_FillCircle>

	// Oblicz nowe położenie kulki
	int nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
	int nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60bb      	str	r3, [r7, #8]

	// Sprawdź zderzenie z lewą i prawą krawędzią ekranu
	if (nowe_polozenie_x - kulka->promien < 0 || nowe_polozenie_x + kulka->promien > BSP_LCD_GetXSize()) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db09      	blt.n	8000f16 <Kulka_ruch+0x5e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	461c      	mov	r4, r3
 8000f0c:	f001 fed6 	bl	8002cbc <BSP_LCD_GetXSize>
 8000f10:	4603      	mov	r3, r0
 8000f12:	429c      	cmp	r4, r3
 8000f14:	d904      	bls.n	8000f20 <Kulka_ruch+0x68>
		// Zderzenie z lewą lub prawą krawędzią, zmień kierunek prędkości poziomej
		kulka->predkosc_x = -kulka->predkosc_x;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	425a      	negs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	60da      	str	r2, [r3, #12]
	}

	// Sprawdź zderzenie z górną i dolną krawędzią ekranu
	if (nowe_polozenie_y - kulka->promien < 0 || nowe_polozenie_y + kulka->promien > BSP_LCD_GetYSize()) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db09      	blt.n	8000f40 <Kulka_ruch+0x88>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4413      	add	r3, r2
 8000f34:	461c      	mov	r4, r3
 8000f36:	f001 fecd 	bl	8002cd4 <BSP_LCD_GetYSize>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	429c      	cmp	r4, r3
 8000f3e:	d904      	bls.n	8000f4a <Kulka_ruch+0x92>
		// Zderzenie z górną lub dolną krawędzią, zmień kierunek prędkości pionowej
		kulka->predkosc_y = -kulka->predkosc_y;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	425a      	negs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	611a      	str	r2, [r3, #16]
	}

	// Aktualizuj położenie kulki na nowe pozycje
	kulka->polozenie_x = nowe_polozenie_x;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = nowe_polozenie_y;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	605a      	str	r2, [r3, #4]

	// Narysuj kulke na nowej pozycji
	BSP_LCD_SetTextColor(kulka->kolor);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 ff8c 	bl	8002e78 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b298      	uxth	r0, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	f002 f97c 	bl	8003270 <BSP_LCD_FillCircle>
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	ffff0000 	.word	0xffff0000

08000f84 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09a      	sub	sp, #104	; 0x68
 8000f88:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8e:	2234      	movs	r2, #52	; 0x34
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00a ff3b 	bl	800be0e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2234      	movs	r2, #52	; 0x34
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00a ff35 	bl	800be0e <memset>

  hltdc.Instance = LTDC;
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fa6:	4a50      	ldr	r2, [pc, #320]	; (80010e8 <MX_LTDC_Init+0x164>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000faa:	4b4e      	ldr	r3, [pc, #312]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fb6:	4b4b      	ldr	r3, [pc, #300]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fbc:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000fc2:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fc4:	2209      	movs	r2, #9
 8000fc6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000fc8:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000fce:	4b45      	ldr	r3, [pc, #276]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fd0:	221d      	movs	r2, #29
 8000fd2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000fd4:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000fda:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fdc:	f240 120d 	movw	r2, #269	; 0x10d
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fe4:	f240 1243 	movw	r2, #323	; 0x143
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fec:	f240 1217 	movw	r2, #279	; 0x117
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000ff2:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000ff4:	f240 1247 	movw	r2, #327	; 0x147
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <MX_LTDC_Init+0x160>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800100a:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <MX_LTDC_Init+0x160>)
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001012:	4834      	ldr	r0, [pc, #208]	; (80010e4 <MX_LTDC_Init+0x160>)
 8001014:	f006 f8f2 	bl	80071fc <HAL_LTDC_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800101e:	f000 fb3f 	bl	80016a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8001026:	23f0      	movs	r3, #240	; 0xf0
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800102e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001034:	2302      	movs	r3, #2
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001038:	23ff      	movs	r3, #255	; 0xff
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001040:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001044:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001046:	2307      	movs	r3, #7
 8001048:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 800104a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800104e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001050:	23f0      	movs	r3, #240	; 0xf0
 8001052:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001054:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001058:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800106c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	481b      	ldr	r0, [pc, #108]	; (80010e4 <MX_LTDC_Init+0x160>)
 8001076:	f006 fa53 	bl	8007520 <HAL_LTDC_ConfigLayer>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8001080:	f000 fb0e 	bl	80016a0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800109c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80010a2:	2305      	movs	r3, #5
 80010a4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_LTDC_Init+0x160>)
 80010cc:	f006 fa28 	bl	8007520 <HAL_LTDC_ConfigLayer>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 80010d6:	f000 fae3 	bl	80016a0 <Error_Handler>
  }

}
 80010da:	bf00      	nop
 80010dc:	3768      	adds	r7, #104	; 0x68
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000048c 	.word	0x2000048c
 80010e8:	40016800 	.word	0x40016800

080010ec <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a7b      	ldr	r2, [pc, #492]	; (80012f8 <HAL_LTDC_MspInit+0x20c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	f040 80f0 	bne.w	80012f0 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
 8001114:	4b79      	ldr	r3, [pc, #484]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	4a78      	ldr	r2, [pc, #480]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 800111a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800111e:	6453      	str	r3, [r2, #68]	; 0x44
 8001120:	4b76      	ldr	r3, [pc, #472]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001128:	623b      	str	r3, [r7, #32]
 800112a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	4b72      	ldr	r3, [pc, #456]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a71      	ldr	r2, [pc, #452]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a6a      	ldr	r2, [pc, #424]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b68      	ldr	r3, [pc, #416]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	4b64      	ldr	r3, [pc, #400]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a63      	ldr	r2, [pc, #396]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b61      	ldr	r3, [pc, #388]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	4b5d      	ldr	r3, [pc, #372]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 800118a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4b56      	ldr	r3, [pc, #344]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4a55      	ldr	r2, [pc, #340]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
 80011ac:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b4f      	ldr	r3, [pc, #316]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <HAL_LTDC_MspInit+0x210>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e6:	230e      	movs	r3, #14
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4843      	ldr	r0, [pc, #268]	; (8001300 <HAL_LTDC_MspInit+0x214>)
 80011f2:	f003 fadf 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011f6:	f641 0358 	movw	r3, #6232	; 0x1858
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001208:	230e      	movs	r3, #14
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	483c      	ldr	r0, [pc, #240]	; (8001304 <HAL_LTDC_MspInit+0x218>)
 8001214:	f003 face 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001218:	2303      	movs	r3, #3
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001228:	2309      	movs	r3, #9
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	4835      	ldr	r0, [pc, #212]	; (8001308 <HAL_LTDC_MspInit+0x21c>)
 8001234:	f003 fabe 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001238:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800124a:	230e      	movs	r3, #14
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	4619      	mov	r1, r3
 8001254:	482c      	ldr	r0, [pc, #176]	; (8001308 <HAL_LTDC_MspInit+0x21c>)
 8001256:	f003 faad 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800125a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800126c:	230e      	movs	r3, #14
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	4825      	ldr	r0, [pc, #148]	; (800130c <HAL_LTDC_MspInit+0x220>)
 8001278:	f003 fa9c 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800127c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800128e:	230e      	movs	r3, #14
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	481d      	ldr	r0, [pc, #116]	; (8001310 <HAL_LTDC_MspInit+0x224>)
 800129a:	f003 fa8b 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800129e:	2348      	movs	r3, #72	; 0x48
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ae:	230e      	movs	r3, #14
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	4619      	mov	r1, r3
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <HAL_LTDC_MspInit+0x228>)
 80012ba:	f003 fa7b 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012d0:	2309      	movs	r3, #9
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <HAL_LTDC_MspInit+0x220>)
 80012dc:	f003 fa6a 	bl	80047b4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2105      	movs	r1, #5
 80012e4:	2058      	movs	r0, #88	; 0x58
 80012e6:	f002 fcc7 	bl	8003c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012ea:	2058      	movs	r0, #88	; 0x58
 80012ec:	f002 fce0 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3738      	adds	r7, #56	; 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40016800 	.word	0x40016800
 80012fc:	40023800 	.word	0x40023800
 8001300:	40021400 	.word	0x40021400
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	40021800 	.word	0x40021800
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b0a1      	sub	sp, #132	; 0x84
 800131c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f002 fb8f 	bl	8003a40 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f927 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f7ff fb77 	bl	8000a18 <MX_GPIO_Init>
  MX_CRC_Init();
 800132a:	f7ff f9ed 	bl	8000708 <MX_CRC_Init>
  MX_DMA2D_Init();
 800132e:	f7ff fa21 	bl	8000774 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001332:	f7ff fa79 	bl	8000828 <MX_FMC_Init>
  MX_I2C3_Init();
 8001336:	f7ff fc7f 	bl	8000c38 <MX_I2C3_Init>
  MX_LTDC_Init();
 800133a:	f7ff fe23 	bl	8000f84 <MX_LTDC_Init>
  MX_SPI5_Init();
 800133e:	f000 f9f1 	bl	8001724 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001342:	f000 fba7 	bl	8001a94 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fc17 	bl	8001b78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800134a:	f001 fc4d 	bl	8002be8 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 800134e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001352:	2001      	movs	r0, #1
 8001354:	f001 fcca 	bl	8002cec <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);
 8001358:	2001      	movs	r0, #1
 800135a:	f001 fd2b 	bl	8002db4 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLUE);
 800135e:	4881      	ldr	r0, [pc, #516]	; (8001564 <main+0x24c>)
 8001360:	f001 fdd6 	bl	8002f10 <BSP_LCD_Clear>
    //HAL_Delay(1000);
    BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	2001      	movs	r0, #1
 800136a:	f001 fd71 	bl	8002e50 <BSP_LCD_SetColorKeying>
    BSP_LCD_SetLayerVisible(1, DISABLE);
 800136e:	2100      	movs	r1, #0
 8001370:	2001      	movs	r0, #1
 8001372:	f001 fd2f 	bl	8002dd4 <BSP_LCD_SetLayerVisible>

    BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8001376:	497c      	ldr	r1, [pc, #496]	; (8001568 <main+0x250>)
 8001378:	2000      	movs	r0, #0
 800137a:	f001 fcb7 	bl	8002cec <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(0);
 800137e:	2000      	movs	r0, #0
 8001380:	f001 fd18 	bl	8002db4 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 8001384:	f002 f814 	bl	80033b0 <BSP_LCD_DisplayOn>

    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f001 fdc0 	bl	8002f10 <BSP_LCD_Clear>

    BSP_LCD_SetFont(&Font12);
 8001390:	4876      	ldr	r0, [pc, #472]	; (800156c <main+0x254>)
 8001392:	f001 fda3 	bl	8002edc <BSP_LCD_SetFont>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001396:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800139a:	f001 fd6d 	bl	8002e78 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800139e:	f04f 30ff 	mov.w	r0, #4294967295
 80013a2:	f001 fd81 	bl	8002ea8 <BSP_LCD_SetBackColor>

//    Touchscreen_Calibration();
    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80013a6:	f001 fc89 	bl	8002cbc <BSP_LCD_GetXSize>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b29c      	uxth	r4, r3
 80013ae:	f001 fc91 	bl	8002cd4 <BSP_LCD_GetYSize>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	4620      	mov	r0, r4
 80013ba:	f002 fb07 	bl	80039cc <BSP_TS_Init>
    BSP_LCD_Clear(LCD_COLOR_RED);
 80013be:	486c      	ldr	r0, [pc, #432]	; (8001570 <main+0x258>)
 80013c0:	f001 fda6 	bl	8002f10 <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80013c4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013c8:	f001 fd6e 	bl	8002ea8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80013cc:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80013d0:	f001 fd52 	bl	8002e78 <BSP_LCD_SetTextColor>

    // kulka
    int kulka_pocz_x = 155;
 80013d4:	239b      	movs	r3, #155	; 0x9b
 80013d6:	663b      	str	r3, [r7, #96]	; 0x60
    int kulka_pocz_y = 255;
 80013d8:	23ff      	movs	r3, #255	; 0xff
 80013da:	65fb      	str	r3, [r7, #92]	; 0x5c
    int kulka_r = 8;
 80013dc:	2308      	movs	r3, #8
 80013de:	65bb      	str	r3, [r7, #88]	; 0x58
    int kulka_vx = -5;
 80013e0:	f06f 0304 	mvn.w	r3, #4
 80013e4:	657b      	str	r3, [r7, #84]	; 0x54
    int kulka_vy = -5;
 80013e6:	f06f 0304 	mvn.w	r3, #4
 80013ea:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t kulka_kolor = LCD_COLOR_BLACK;
 80013ec:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80013f0:	64fb      	str	r3, [r7, #76]	; 0x4c

    // platforma
    int platforma_x = 120;
 80013f2:	2378      	movs	r3, #120	; 0x78
 80013f4:	64bb      	str	r3, [r7, #72]	; 0x48
    int platforma_y = 300;
 80013f6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
    int platforma_krok = 5;
 80013fc:	2305      	movs	r3, #5
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
    int platforma_wysokosc = 10;
 8001400:	230a      	movs	r3, #10
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
    int platforma_szerokosc = 50;
 8001404:	2332      	movs	r3, #50	; 0x32
 8001406:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t platforma_kolor = LCD_COLOR_YELLOW;
 8001408:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
//    int klocek_szerokosc = 30;
//    int klocek_wysokosc = 10;
//    int liczba_klockow = 16;
//    int liczba_wierszy = 4;

    int odswiezanie = 16; // 1000ms / 16 = 60HZ
 800140e:	2310      	movs	r3, #16
 8001410:	633b      	str	r3, [r7, #48]	; 0x30

    Platforma* platforma = (Platforma*)malloc(sizeof(Platforma));
 8001412:	2018      	movs	r0, #24
 8001414:	f00a fce8 	bl	800bde8 <malloc>
 8001418:	4603      	mov	r3, r0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Kulka* kulka = (Kulka*)malloc(sizeof(Kulka));
 800141c:	2018      	movs	r0, #24
 800141e:	f00a fce3 	bl	800bde8 <malloc>
 8001422:	4603      	mov	r3, r0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
    int liczba_klockow = 32; // lub inna odpowiednia wartość
 8001426:	2320      	movs	r3, #32
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    int klocek_szerokosc = BSP_LCD_GetXSize() / 8; // Zakładając, że chcesz 8 klocków na szerokość ekranu
 800142a:	f001 fc47 	bl	8002cbc <BSP_LCD_GetXSize>
 800142e:	4603      	mov	r3, r0
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	623b      	str	r3, [r7, #32]
    int klocek_wysokosc = BSP_LCD_GetYSize() / (liczba_klockow / 8); // Liczba wierszy klocków
 8001434:	f001 fc4e 	bl	8002cd4 <BSP_LCD_GetYSize>
 8001438:	4602      	mov	r2, r0
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	2b00      	cmp	r3, #0
 800143e:	da00      	bge.n	8001442 <main+0x12a>
 8001440:	3307      	adds	r3, #7
 8001442:	10db      	asrs	r3, r3, #3
 8001444:	fbb2 f3f3 	udiv	r3, r2, r3
 8001448:	61fb      	str	r3, [r7, #28]

    Klocek** klocki = (Klocek**)malloc(liczba_klockow * sizeof(Klocek*));
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4618      	mov	r0, r3
 8001450:	f00a fcca 	bl	800bde8 <malloc>
 8001454:	4603      	mov	r3, r0
 8001456:	61bb      	str	r3, [r7, #24]
    int licznik = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	66fb      	str	r3, [r7, #108]	; 0x6c

    for (int kk = 0; kk < liczba_klockow / 8; kk++) {
 800145c:	2300      	movs	r3, #0
 800145e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001460:	e04a      	b.n	80014f8 <main+0x1e0>
        for (int k = 0; k < 8; k++, licznik++) {
 8001462:	2300      	movs	r3, #0
 8001464:	667b      	str	r3, [r7, #100]	; 0x64
 8001466:	e041      	b.n	80014ec <main+0x1d4>
            klocki[licznik] = (Klocek*)malloc(sizeof(Klocek));
 8001468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	18d4      	adds	r4, r2, r3
 8001470:	2014      	movs	r0, #20
 8001472:	f00a fcb9 	bl	800bde8 <malloc>
 8001476:	4603      	mov	r3, r0
 8001478:	6023      	str	r3, [r4, #0]
            uint32_t kolor_klocka = ((k % 2 == 0 && kk % 2 == 1) || (k % 2 == 1 && kk % 2 == 0)) ? LCD_COLOR_BLUE : LCD_COLOR_YELLOW;
 800147a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d107      	bne.n	8001494 <main+0x17c>
 8001484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001486:	2b00      	cmp	r3, #0
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	bfb8      	it	lt
 800148e:	425b      	neglt	r3, r3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d00c      	beq.n	80014ae <main+0x196>
 8001494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001496:	2b00      	cmp	r3, #0
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	bfb8      	it	lt
 800149e:	425b      	neglt	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d106      	bne.n	80014b2 <main+0x19a>
 80014a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <main+0x19a>
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <main+0x24c>)
 80014b0:	e001      	b.n	80014b6 <main+0x19e>
 80014b2:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80014b6:	617b      	str	r3, [r7, #20]
            Klocek_init(klocki[licznik], k * klocek_szerokosc, kk * klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka);
 80014b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4413      	add	r3, r2
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	fb02 f103 	mul.w	r1, r2, r3
 80014ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	fb02 f203 	mul.w	r2, r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f7ff fc7c 	bl	8000dd8 <Klocek_init>
        for (int k = 0; k < 8; k++, licznik++) {
 80014e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e2:	3301      	adds	r3, #1
 80014e4:	667b      	str	r3, [r7, #100]	; 0x64
 80014e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014e8:	3301      	adds	r3, #1
 80014ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	ddba      	ble.n	8001468 <main+0x150>
    for (int kk = 0; kk < liczba_klockow / 8; kk++) {
 80014f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014f4:	3301      	adds	r3, #1
 80014f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da00      	bge.n	8001500 <main+0x1e8>
 80014fe:	3307      	adds	r3, #7
 8001500:	10db      	asrs	r3, r3, #3
 8001502:	461a      	mov	r2, r3
 8001504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001506:	4293      	cmp	r3, r2
 8001508:	dbab      	blt.n	8001462 <main+0x14a>
        }
    }

    Platforma_init(platforma, platforma_x, platforma_y, platforma_szerokosc, platforma_wysokosc, platforma_krok, platforma_kolor);
 800150a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800151a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800151c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800151e:	f000 f8c6 	bl	80016ae <Platforma_init>
    Kulka_init(kulka, kulka_pocz_x, kulka_pocz_y, kulka_r, kulka_vx, kulka_vy, kulka_kolor);
 8001522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001532:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001536:	f7ff fc86 	bl	8000e46 <Kulka_init>

    BBG bbg;
    BBG_init(&bbg, platforma, klocki, kulka, liczba_klockow);
 800153a:	4638      	mov	r0, r7
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001546:	f7fe ffd3 	bl	80004f0 <BBG_init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BBG_ruchKulki(&bbg);
 800154a:	463b      	mov	r3, r7
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f8c9 	bl	80006e4 <BBG_ruchKulki>
	  BBG_obsluga_zbicia_klocka(&bbg);
 8001552:	463b      	mov	r3, r7
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f801 	bl	800055c <BBG_obsluga_zbicia_klocka>
	  HAL_Delay(odswiezanie);
 800155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155c:	4618      	mov	r0, r3
 800155e:	f002 fab1 	bl	8003ac4 <HAL_Delay>
	  BBG_ruchKulki(&bbg);
 8001562:	e7f2      	b.n	800154a <main+0x232>
 8001564:	ff0000ff 	.word	0xff0000ff
 8001568:	d0130000 	.word	0xd0130000
 800156c:	20000074 	.word	0x20000074
 8001570:	ffff0000 	.word	0xffff0000

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0a0      	sub	sp, #128	; 0x80
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800157e:	2230      	movs	r2, #48	; 0x30
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f00a fc43 	bl	800be0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2230      	movs	r2, #48	; 0x30
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00a fc34 	bl	800be0e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b32      	ldr	r3, [pc, #200]	; (8001674 <SystemClock_Config+0x100>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a31      	ldr	r2, [pc, #196]	; (8001674 <SystemClock_Config+0x100>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <SystemClock_Config+0x100>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <SystemClock_Config+0x104>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015ce:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <SystemClock_Config+0x104>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <SystemClock_Config+0x104>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ec:	2302      	movs	r3, #2
 80015ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015fa:	2348      	movs	r3, #72	; 0x48
 80015fc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015fe:	2302      	movs	r3, #2
 8001600:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001602:	2303      	movs	r3, #3
 8001604:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001606:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800160a:	4618      	mov	r0, r3
 800160c:	f006 fa06 	bl	8007a1c <HAL_RCC_OscConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001616:	f000 f843 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161e:	2302      	movs	r3, #2
 8001620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f006 fc60 	bl	8007efc <HAL_RCC_ClockConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001642:	f000 f82d 	bl	80016a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001646:	2308      	movs	r3, #8
 8001648:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800164a:	2332      	movs	r3, #50	; 0x32
 800164c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800164e:	2302      	movs	r3, #2
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001652:	2300      	movs	r3, #0
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4618      	mov	r0, r3
 800165c:	f006 fe72 	bl	8008344 <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001666:	f000 f81b 	bl	80016a0 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3780      	adds	r7, #128	; 0x80
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800168e:	f002 f9f9 	bl	8003a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40001000 	.word	0x40001000

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */


  /* USER CODE END Error_Handler_Debug */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <Platforma_init>:

#include "Platforma.h"
#include "main.h"

// Inicjalizacja struktury Platforma
void Platforma_init(Platforma* platforma, int x, int y ,int w, int h, int k, uint32_t kol) {
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	603b      	str	r3, [r7, #0]
    platforma->polozenie_x = x;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	601a      	str	r2, [r3, #0]
    platforma->polozenie_y = y;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	605a      	str	r2, [r3, #4]
    platforma->szerokosc = w;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	609a      	str	r2, [r3, #8]
    platforma->wysokosc = h;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	60da      	str	r2, [r3, #12]
    platforma->krok = k;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	611a      	str	r2, [r3, #16]
    platforma->kolor = kol;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a3a      	ldr	r2, [r7, #32]
 80016de:	615a      	str	r2, [r3, #20]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <rysuj_platforme>:
void rysuj_platforme(Platforma* platforma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(platforma->kolor);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 fbbd 	bl	8002e78 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b298      	uxth	r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	b299      	uxth	r1, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	b29a      	uxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f001 fd51 	bl	80031bc <BSP_LCD_FillRect>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_SPI5_Init+0x64>)
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <MX_SPI5_Init+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_SPI5_Init+0x64>)
 8001730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001734:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_SPI5_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_SPI5_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_SPI5_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_SPI5_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <MX_SPI5_Init+0x64>)
 8001750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001754:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MX_SPI5_Init+0x64>)
 8001758:	2218      	movs	r2, #24
 800175a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <MX_SPI5_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_SPI5_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <MX_SPI5_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_SPI5_Init+0x64>)
 8001770:	220a      	movs	r2, #10
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <MX_SPI5_Init+0x64>)
 8001776:	f007 f822 	bl	80087be <HAL_SPI_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001780:	f7ff ff8e 	bl	80016a0 <Error_Handler>
  }

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000534 	.word	0x20000534
 800178c:	40015000 	.word	0x40015000

08001790 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a19      	ldr	r2, [pc, #100]	; (8001814 <HAL_SPI_MspInit+0x84>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d12c      	bne.n	800180c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017d8:	f043 0320 	orr.w	r3, r3, #32
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_SPI_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80017ea:	f44f 7360 	mov.w	r3, #896	; 0x380
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017fc:	2305      	movs	r3, #5
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_SPI_MspInit+0x8c>)
 8001808:	f002 ffd4 	bl	80047b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40015000 	.word	0x40015000
 8001818:	40023800 	.word	0x40023800
 800181c:	40021400 	.word	0x40021400

08001820 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_SPI_MspDeInit+0x30>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d10a      	bne.n	8001848 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_SPI_MspDeInit+0x34>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_SPI_MspDeInit+0x34>)
 8001838:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800183e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_SPI_MspDeInit+0x38>)
 8001844:	f003 f960 	bl	8004b08 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40015000 	.word	0x40015000
 8001854:	40023800 	.word	0x40023800
 8001858:	40021400 	.word	0x40021400

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_MspInit+0x54>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <HAL_MspInit+0x54>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x54>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_MspInit+0x54>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_MspInit+0x54>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_MspInit+0x54>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	210f      	movs	r1, #15
 800189e:	f06f 0001 	mvn.w	r0, #1
 80018a2:	f002 f9e9 	bl	8003c78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	2036      	movs	r0, #54	; 0x36
 80018ca:	f002 f9d5 	bl	8003c78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ce:	2036      	movs	r0, #54	; 0x36
 80018d0:	f002 f9ee 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_InitTick+0xa4>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_InitTick+0xa4>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_InitTick+0xa4>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018f0:	f107 0210 	add.w	r2, r7, #16
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f006 fcf0 	bl	80082e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001900:	f006 fcc6 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 8001904:	4603      	mov	r3, r0
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_InitTick+0xa8>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	3b01      	subs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_InitTick+0xac>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <HAL_InitTick+0xb0>)
 800191c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_InitTick+0xac>)
 8001920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001924:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_InitTick+0xac>)
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_InitTick+0xac>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_InitTick+0xac>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <HAL_InitTick+0xac>)
 800193a:	f007 fccb 	bl	80092d4 <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001944:	4806      	ldr	r0, [pc, #24]	; (8001960 <HAL_InitTick+0xac>)
 8001946:	f007 fcf0 	bl	800932a <HAL_TIM_Base_Start_IT>
 800194a:	4603      	mov	r3, r0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3730      	adds	r7, #48	; 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	431bde83 	.word	0x431bde83
 8001960:	2000058c 	.word	0x2000058c
 8001964:	40001000 	.word	0x40001000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_Clear(0xFF000000); // czarny
 800197a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800197e:	f001 fac7 	bl	8002f10 <BSP_LCD_Clear>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0xc>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  BSP_LCD_Clear(0xFFFFFF00); // zolty
 8001988:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800198c:	f001 fac0 	bl	8002f10 <BSP_LCD_Clear>
 8001990:	e7fa      	b.n	8001988 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM6_DAC_IRQHandler+0x10>)
 80019b2:	f007 fcde 	bl	8009372 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000058c 	.word	0x2000058c

080019c0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <OTG_HS_IRQHandler+0x10>)
 80019c6:	f003 f9c2 	bl	8004d4e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000750 	.word	0x20000750

080019d4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <LTDC_IRQHandler+0x10>)
 80019da:	f005 fcdf 	bl	800739c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000048c 	.word	0x2000048c

080019e8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <DMA2D_IRQHandler+0x10>)
 80019ee:	f002 fca2 	bl	8004336 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200003c4 	.word	0x200003c4

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f00a f9b2 	bl	800bd94 <__errno>
 8001a30:	4602      	mov	r2, r0
 8001a32:	230c      	movs	r3, #12
 8001a34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20030000 	.word	0x20030000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	20000110 	.word	0x20000110
 8001a64:	20000a18 	.word	0x20000a18

08001a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <SystemInit+0x28>)
 8001a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a72:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <SystemInit+0x28>)
 8001a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SystemInit+0x28>)
 8001a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a82:	609a      	str	r2, [r3, #8]
#endif
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <MX_TIM1_Init+0x9c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001adc:	4813      	ldr	r0, [pc, #76]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ade:	f007 fbf9 	bl	80092d4 <HAL_TIM_Base_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ae8:	f7ff fdda 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001afa:	f007 fd42 	bl	8009582 <HAL_TIM_ConfigClockSource>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b04:	f7ff fdcc 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001b16:	f007 ff4d 	bl	80099b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b20:	f7ff fdbe 	bl	80016a0 <Error_Handler>
  }

}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200005cc 	.word	0x200005cc
 8001b30:	40010000 	.word	0x40010000

08001b34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_TIM_Base_MspInit+0x3c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10d      	bne.n	8001b62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_TIM_Base_MspInit+0x40>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_TIM_Base_MspInit+0x40>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <HAL_TIM_Base_MspInit+0x40>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40023800 	.word	0x40023800

08001b78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <MX_USART1_UART_Init+0x50>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001bb0:	f007 ff90 	bl	8009ad4 <HAL_UART_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bba:	f7ff fd71 	bl	80016a0 <Error_Handler>
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000060c 	.word	0x2000060c
 8001bc8:	40011000 	.word	0x40011000

08001bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <HAL_UART_MspInit+0x84>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d12c      	bne.n	8001c48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001bf8:	f043 0310 	orr.w	r3, r3, #16
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c38:	2307      	movs	r3, #7
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_UART_MspInit+0x8c>)
 8001c44:	f002 fdb6 	bl	80047b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c94 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c62:	e003      	b.n	8001c6c <LoopCopyDataInit>

08001c64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c6a:	3104      	adds	r1, #4

08001c6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c74:	d3f6      	bcc.n	8001c64 <CopyDataInit>
  ldr  r2, =_sbss
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c78:	e002      	b.n	8001c80 <LoopFillZerobss>

08001c7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c7c:	f842 3b04 	str.w	r3, [r2], #4

08001c80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c84:	d3f9      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c86:	f7ff feef 	bl	8001a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f00a f889 	bl	800bda0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f7ff fb43 	bl	8001318 <main>
  bx  lr    
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c94:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c98:	0800decc 	.word	0x0800decc
  ldr  r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ca0:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8001ca4:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8001ca8:	20000a18 	.word	0x20000a18

08001cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC_IRQHandler>

08001cae <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001cb2:	f000 fe4b 	bl	800294c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001cb6:	20ca      	movs	r0, #202	; 0xca
 8001cb8:	f000 f95d 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001cbc:	20c3      	movs	r0, #195	; 0xc3
 8001cbe:	f000 f967 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001cc2:	2008      	movs	r0, #8
 8001cc4:	f000 f964 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001cc8:	2050      	movs	r0, #80	; 0x50
 8001cca:	f000 f961 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001cce:	20cf      	movs	r0, #207	; 0xcf
 8001cd0:	f000 f951 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f000 f95b 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001cda:	20c1      	movs	r0, #193	; 0xc1
 8001cdc:	f000 f958 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001ce0:	2030      	movs	r0, #48	; 0x30
 8001ce2:	f000 f955 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001ce6:	20ed      	movs	r0, #237	; 0xed
 8001ce8:	f000 f945 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001cec:	2064      	movs	r0, #100	; 0x64
 8001cee:	f000 f94f 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f000 f94c 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001cf8:	2012      	movs	r0, #18
 8001cfa:	f000 f949 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001cfe:	2081      	movs	r0, #129	; 0x81
 8001d00:	f000 f946 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001d04:	20e8      	movs	r0, #232	; 0xe8
 8001d06:	f000 f936 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001d0a:	2085      	movs	r0, #133	; 0x85
 8001d0c:	f000 f940 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f000 f93d 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d16:	2078      	movs	r0, #120	; 0x78
 8001d18:	f000 f93a 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001d1c:	20cb      	movs	r0, #203	; 0xcb
 8001d1e:	f000 f92a 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001d22:	2039      	movs	r0, #57	; 0x39
 8001d24:	f000 f934 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001d28:	202c      	movs	r0, #44	; 0x2c
 8001d2a:	f000 f931 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f92e 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001d34:	2034      	movs	r0, #52	; 0x34
 8001d36:	f000 f92b 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f000 f928 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001d40:	20f7      	movs	r0, #247	; 0xf7
 8001d42:	f000 f918 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001d46:	2020      	movs	r0, #32
 8001d48:	f000 f922 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001d4c:	20ea      	movs	r0, #234	; 0xea
 8001d4e:	f000 f912 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f91c 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f000 f919 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001d5e:	20b1      	movs	r0, #177	; 0xb1
 8001d60:	f000 f909 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f913 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001d6a:	201b      	movs	r0, #27
 8001d6c:	f000 f910 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d70:	20b6      	movs	r0, #182	; 0xb6
 8001d72:	f000 f900 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d76:	200a      	movs	r0, #10
 8001d78:	f000 f90a 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001d7c:	20a2      	movs	r0, #162	; 0xa2
 8001d7e:	f000 f907 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001d82:	20c0      	movs	r0, #192	; 0xc0
 8001d84:	f000 f8f7 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001d88:	2010      	movs	r0, #16
 8001d8a:	f000 f901 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001d8e:	20c1      	movs	r0, #193	; 0xc1
 8001d90:	f000 f8f1 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001d94:	2010      	movs	r0, #16
 8001d96:	f000 f8fb 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001d9a:	20c5      	movs	r0, #197	; 0xc5
 8001d9c:	f000 f8eb 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001da0:	2045      	movs	r0, #69	; 0x45
 8001da2:	f000 f8f5 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001da6:	2015      	movs	r0, #21
 8001da8:	f000 f8f2 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001dac:	20c7      	movs	r0, #199	; 0xc7
 8001dae:	f000 f8e2 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001db2:	2090      	movs	r0, #144	; 0x90
 8001db4:	f000 f8ec 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001db8:	2036      	movs	r0, #54	; 0x36
 8001dba:	f000 f8dc 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001dbe:	20c8      	movs	r0, #200	; 0xc8
 8001dc0:	f000 f8e6 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001dc4:	20f2      	movs	r0, #242	; 0xf2
 8001dc6:	f000 f8d6 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f000 f8e0 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001dd0:	20b0      	movs	r0, #176	; 0xb0
 8001dd2:	f000 f8d0 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001dd6:	20c2      	movs	r0, #194	; 0xc2
 8001dd8:	f000 f8da 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001ddc:	20b6      	movs	r0, #182	; 0xb6
 8001dde:	f000 f8ca 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001de2:	200a      	movs	r0, #10
 8001de4:	f000 f8d4 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001de8:	20a7      	movs	r0, #167	; 0xa7
 8001dea:	f000 f8d1 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001dee:	2027      	movs	r0, #39	; 0x27
 8001df0:	f000 f8ce 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001df4:	2004      	movs	r0, #4
 8001df6:	f000 f8cb 	bl	8001f90 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f000 f8bb 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f000 f8c5 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f000 f8c2 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f000 f8bf 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001e12:	20ef      	movs	r0, #239	; 0xef
 8001e14:	f000 f8bc 	bl	8001f90 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001e18:	202b      	movs	r0, #43	; 0x2b
 8001e1a:	f000 f8ac 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f8b6 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f000 f8b3 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 f8b0 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001e30:	203f      	movs	r0, #63	; 0x3f
 8001e32:	f000 f8ad 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001e36:	20f6      	movs	r0, #246	; 0xf6
 8001e38:	f000 f89d 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f000 f8a7 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f8a4 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001e48:	2006      	movs	r0, #6
 8001e4a:	f000 f8a1 	bl	8001f90 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001e4e:	202c      	movs	r0, #44	; 0x2c
 8001e50:	f000 f891 	bl	8001f76 <ili9341_WriteReg>
  LCD_Delay(200);
 8001e54:	20c8      	movs	r0, #200	; 0xc8
 8001e56:	f000 fe67 	bl	8002b28 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001e5a:	2026      	movs	r0, #38	; 0x26
 8001e5c:	f000 f88b 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f000 f895 	bl	8001f90 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001e66:	20e0      	movs	r0, #224	; 0xe0
 8001e68:	f000 f885 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001e6c:	200f      	movs	r0, #15
 8001e6e:	f000 f88f 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001e72:	2029      	movs	r0, #41	; 0x29
 8001e74:	f000 f88c 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001e78:	2024      	movs	r0, #36	; 0x24
 8001e7a:	f000 f889 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001e7e:	200c      	movs	r0, #12
 8001e80:	f000 f886 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001e84:	200e      	movs	r0, #14
 8001e86:	f000 f883 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001e8a:	2009      	movs	r0, #9
 8001e8c:	f000 f880 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001e90:	204e      	movs	r0, #78	; 0x4e
 8001e92:	f000 f87d 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001e96:	2078      	movs	r0, #120	; 0x78
 8001e98:	f000 f87a 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001e9c:	203c      	movs	r0, #60	; 0x3c
 8001e9e:	f000 f877 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ea2:	2009      	movs	r0, #9
 8001ea4:	f000 f874 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001ea8:	2013      	movs	r0, #19
 8001eaa:	f000 f871 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001eae:	2005      	movs	r0, #5
 8001eb0:	f000 f86e 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001eb4:	2017      	movs	r0, #23
 8001eb6:	f000 f86b 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001eba:	2011      	movs	r0, #17
 8001ebc:	f000 f868 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f000 f865 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001ec6:	20e1      	movs	r0, #225	; 0xe1
 8001ec8:	f000 f855 	bl	8001f76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f000 f85f 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001ed2:	2016      	movs	r0, #22
 8001ed4:	f000 f85c 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001ed8:	201b      	movs	r0, #27
 8001eda:	f000 f859 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001ede:	2004      	movs	r0, #4
 8001ee0:	f000 f856 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ee4:	2011      	movs	r0, #17
 8001ee6:	f000 f853 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001eea:	2007      	movs	r0, #7
 8001eec:	f000 f850 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001ef0:	2031      	movs	r0, #49	; 0x31
 8001ef2:	f000 f84d 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001ef6:	2033      	movs	r0, #51	; 0x33
 8001ef8:	f000 f84a 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001efc:	2042      	movs	r0, #66	; 0x42
 8001efe:	f000 f847 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f02:	2005      	movs	r0, #5
 8001f04:	f000 f844 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f08:	200c      	movs	r0, #12
 8001f0a:	f000 f841 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001f0e:	200a      	movs	r0, #10
 8001f10:	f000 f83e 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001f14:	2028      	movs	r0, #40	; 0x28
 8001f16:	f000 f83b 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001f1a:	202f      	movs	r0, #47	; 0x2f
 8001f1c:	f000 f838 	bl	8001f90 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001f20:	200f      	movs	r0, #15
 8001f22:	f000 f835 	bl	8001f90 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001f26:	2011      	movs	r0, #17
 8001f28:	f000 f825 	bl	8001f76 <ili9341_WriteReg>
  LCD_Delay(200);
 8001f2c:	20c8      	movs	r0, #200	; 0xc8
 8001f2e:	f000 fdfb 	bl	8002b28 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f32:	2029      	movs	r0, #41	; 0x29
 8001f34:	f000 f81f 	bl	8001f76 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001f38:	202c      	movs	r0, #44	; 0x2c
 8001f3a:	f000 f81c 	bl	8001f76 <ili9341_WriteReg>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001f46:	f000 fd01 	bl	800294c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	20d3      	movs	r0, #211	; 0xd3
 8001f4e:	f000 f82c 	bl	8001faa <ili9341_ReadData>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29b      	uxth	r3, r3
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f5e:	2029      	movs	r0, #41	; 0x29
 8001f60:	f000 f809 	bl	8001f76 <ili9341_WriteReg>
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001f6c:	2028      	movs	r0, #40	; 0x28
 8001f6e:	f000 f802 	bl	8001f76 <ili9341_WriteReg>
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fd7c 	bl	8002a80 <LCD_IO_WriteReg>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fd4d 	bl	8002a3c <LCD_IO_WriteData>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	80fb      	strh	r3, [r7, #6]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001fba:	797a      	ldrb	r2, [r7, #5]
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fd7f 	bl	8002ac4 <LCD_IO_ReadData>
 8001fc6:	4603      	mov	r3, r0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001fd4:	23f0      	movs	r3, #240	; 0xf0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001fe4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fa59 	bl	80024b8 <stmpe811_GetInstance>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	2bff      	cmp	r3, #255	; 0xff
 800200e:	d112      	bne.n	8002036 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002010:	2000      	movs	r0, #0
 8002012:	f000 fa51 	bl	80024b8 <stmpe811_GetInstance>
 8002016:	4603      	mov	r3, r0
 8002018:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d80a      	bhi.n	8002036 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002020:	7bbb      	ldrb	r3, [r7, #14]
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	b2d1      	uxtb	r1, r2
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <stmpe811_Init+0x4c>)
 8002028:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800202a:	f000 fd88 	bl	8002b3e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 f807 	bl	8002044 <stmpe811_Reset>
    }
  }
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000114 	.word	0x20000114

08002044 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2202      	movs	r2, #2
 8002054:	2103      	movs	r1, #3
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fd7d 	bl	8002b56 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800205c:	200a      	movs	r0, #10
 800205e:	f000 fdb7 	bl	8002bd0 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2200      	movs	r2, #0
 8002068:	2103      	movs	r1, #3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fd73 	bl	8002b56 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002070:	2002      	movs	r0, #2
 8002072:	f000 fdad 	bl	8002bd0 <IOE_Delay>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800207e:	b590      	push	{r4, r7, lr}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002088:	f000 fd59 	bl	8002b3e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fd72 	bl	8002b7c <IOE_Read>
 8002098:	4603      	mov	r3, r0
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2101      	movs	r1, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fd69 	bl	8002b7c <IOE_Read>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80020ae:	4323      	orrs	r3, r4
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	b29b      	uxth	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}

080020bc <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2109      	movs	r1, #9
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fd53 	bl	8002b7c <IOE_Read>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	2109      	movs	r1, #9
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fd33 	bl	8002b56 <IOE_Write>
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2109      	movs	r1, #9
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fd35 	bl	8002b7c <IOE_Read>
 8002112:	4603      	mov	r3, r0
 8002114:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	2109      	movs	r1, #9
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fd15 	bl	8002b56 <IOE_Write>
    
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	460a      	mov	r2, r1
 800213e:	80fb      	strh	r3, [r7, #6]
 8002140:	4613      	mov	r3, r2
 8002142:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	210a      	movs	r1, #10
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fd14 	bl	8002b7c <IOE_Read>
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	797b      	ldrb	r3, [r7, #5]
 800215c:	4313      	orrs	r3, r2
 800215e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	210a      	movs	r1, #10
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fcf4 	bl	8002b56 <IOE_Write>
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	460a      	mov	r2, r1
 8002180:	80fb      	strh	r3, [r7, #6]
 8002182:	4613      	mov	r3, r2
 8002184:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	210a      	movs	r1, #10
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fcf3 	bl	8002b7c <IOE_Read>
 8002196:	4603      	mov	r3, r0
 8002198:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800219a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800219e:	43db      	mvns	r3, r3
 80021a0:	b25a      	sxtb	r2, r3
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4013      	ands	r3, r2
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	210a      	movs	r1, #10
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fcce 	bl	8002b56 <IOE_Write>
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	460a      	mov	r2, r1
 80021cc:	80fb      	strh	r3, [r7, #6]
 80021ce:	4613      	mov	r3, r2
 80021d0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	210b      	movs	r1, #11
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fccf 	bl	8002b7c <IOE_Read>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	797b      	ldrb	r3, [r7, #5]
 80021e4:	4013      	ands	r3, r2
 80021e6:	b2db      	uxtb	r3, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	460a      	mov	r2, r1
 80021fa:	80fb      	strh	r3, [r7, #6]
 80021fc:	4613      	mov	r3, r2
 80021fe:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	797a      	ldrb	r2, [r7, #5]
 8002206:	210b      	movs	r1, #11
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fca4 	bl	8002b56 <IOE_Write>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	6039      	str	r1, [r7, #0]
 8002220:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2117      	movs	r1, #23
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fca5 	bl	8002b7c <IOE_Read>
 8002232:	4603      	mov	r3, r0
 8002234:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b25b      	sxtb	r3, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	b25a      	sxtb	r2, r3
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4013      	ands	r3, r2
 8002244:	b25b      	sxtb	r3, r3
 8002246:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	2117      	movs	r1, #23
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fc80 	bl	8002b56 <IOE_Write>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2104      	movs	r1, #4
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fc84 	bl	8002b7c <IOE_Read>
 8002274:	4603      	mov	r3, r0
 8002276:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	f023 0304 	bic.w	r3, r3, #4
 800227e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	2104      	movs	r1, #4
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fc64 	bl	8002b56 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	21f0      	movs	r1, #240	; 0xf0
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ffbf 	bl	8002216 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	2104      	movs	r1, #4
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fc54 	bl	8002b56 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2249      	movs	r2, #73	; 0x49
 80022b4:	2120      	movs	r1, #32
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fc4d 	bl	8002b56 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80022bc:	2002      	movs	r0, #2
 80022be:	f000 fc87 	bl	8002bd0 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2201      	movs	r2, #1
 80022c8:	2121      	movs	r1, #33	; 0x21
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fc43 	bl	8002b56 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	229a      	movs	r2, #154	; 0x9a
 80022d6:	2141      	movs	r1, #65	; 0x41
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fc3c 	bl	8002b56 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2201      	movs	r2, #1
 80022e4:	214a      	movs	r1, #74	; 0x4a
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fc35 	bl	8002b56 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	214b      	movs	r1, #75	; 0x4b
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fc2e 	bl	8002b56 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2200      	movs	r2, #0
 8002300:	214b      	movs	r1, #75	; 0x4b
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fc27 	bl	8002b56 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2201      	movs	r2, #1
 800230e:	2156      	movs	r1, #86	; 0x56
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fc20 	bl	8002b56 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2201      	movs	r2, #1
 800231c:	2158      	movs	r1, #88	; 0x58
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fc19 	bl	8002b56 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2201      	movs	r2, #1
 800232a:	2140      	movs	r1, #64	; 0x40
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fc12 	bl	8002b56 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	22ff      	movs	r2, #255	; 0xff
 8002338:	210b      	movs	r1, #11
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fc0b 	bl	8002b56 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002340:	2002      	movs	r0, #2
 8002342:	f000 fc45 	bl	8002bd0 <IOE_Delay>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fc0a 	bl	8002b7c <IOE_Read>
 8002368:	4603      	mov	r3, r0
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	2b80      	cmp	r3, #128	; 0x80
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	214c      	movs	r1, #76	; 0x4c
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fbf8 	bl	8002b7c <IOE_Read>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d010      	beq.n	80023b4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e00d      	b.n	80023b4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2201      	movs	r2, #1
 800239e:	214b      	movs	r1, #75	; 0x4b
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fbd8 	bl	8002b56 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2200      	movs	r2, #0
 80023ac:	214b      	movs	r1, #75	; 0x4b
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fbd1 	bl	8002b56 <IOE_Write>
  }
  
  return ret;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	b2d8      	uxtb	r0, r3
 80023d0:	f107 0210 	add.w	r2, r7, #16
 80023d4:	2304      	movs	r3, #4
 80023d6:	21d7      	movs	r1, #215	; 0xd7
 80023d8:	f000 fbe3 	bl	8002ba2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80023dc:	7c3b      	ldrb	r3, [r7, #16]
 80023de:	061a      	lsls	r2, r3, #24
 80023e0:	7c7b      	ldrb	r3, [r7, #17]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	7cbb      	ldrb	r3, [r7, #18]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	4313      	orrs	r3, r2
 80023ec:	7cfa      	ldrb	r2, [r7, #19]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	0d1b      	lsrs	r3, r3, #20
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	b29b      	uxth	r3, r3
 8002402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002406:	b29a      	uxth	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800240c:	89fb      	ldrh	r3, [r7, #14]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2201      	movs	r2, #1
 8002412:	214b      	movs	r1, #75	; 0x4b
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fb9e 	bl	8002b56 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800241a:	89fb      	ldrh	r3, [r7, #14]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2200      	movs	r2, #0
 8002420:	214b      	movs	r1, #75	; 0x4b
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fb97 	bl	8002b56 <IOE_Write>
}
 8002428:	bf00      	nop
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800243a:	f000 fb86 	bl	8002b4a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	211f      	movs	r1, #31
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fe76 	bl	8002134 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe36 	bl	80020bc <stmpe811_EnableGlobalIT>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fe47 	bl	80020f8 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	211f      	movs	r1, #31
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe81 	bl	8002176 <stmpe811_DisableITSource>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	211f      	movs	r1, #31
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fe99 	bl	80021c2 <stmpe811_ReadGITStatus>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	211f      	movs	r1, #31
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fea1 	bl	80021f0 <stmpe811_ClearGlobalIT>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e00b      	b.n	80024e4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <stmpe811_GetInstance+0x40>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	88fa      	ldrh	r2, [r7, #6]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d101      	bne.n	80024de <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	e006      	b.n	80024ec <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	3301      	adds	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d9f0      	bls.n	80024cc <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80024ea:	23ff      	movs	r3, #255	; 0xff
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	20000114 	.word	0x20000114

080024fc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <I2Cx_MspInit+0xdc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d15f      	bne.n	80025ce <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <I2Cx_MspInit+0xe0>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a31      	ldr	r2, [pc, #196]	; (80025dc <I2Cx_MspInit+0xe0>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <I2Cx_MspInit+0xe0>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <I2Cx_MspInit+0xe0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <I2Cx_MspInit+0xe0>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <I2Cx_MspInit+0xe0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800254c:	2312      	movs	r3, #18
 800254e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002554:	2302      	movs	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002558:	2304      	movs	r3, #4
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4619      	mov	r1, r3
 8002562:	481f      	ldr	r0, [pc, #124]	; (80025e0 <I2Cx_MspInit+0xe4>)
 8002564:	f002 f926 	bl	80047b4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	481b      	ldr	r0, [pc, #108]	; (80025e4 <I2Cx_MspInit+0xe8>)
 8002576:	f002 f91d 	bl	80047b4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <I2Cx_MspInit+0xe0>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <I2Cx_MspInit+0xe0>)
 8002584:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <I2Cx_MspInit+0xe0>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <I2Cx_MspInit+0xe0>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <I2Cx_MspInit+0xe0>)
 800259c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025a0:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <I2Cx_MspInit+0xe0>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <I2Cx_MspInit+0xe0>)
 80025a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025ac:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	210f      	movs	r1, #15
 80025b2:	2048      	movs	r0, #72	; 0x48
 80025b4:	f001 fb60 	bl	8003c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80025b8:	2048      	movs	r0, #72	; 0x48
 80025ba:	f001 fb79 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	210f      	movs	r1, #15
 80025c2:	2049      	movs	r0, #73	; 0x49
 80025c4:	f001 fb58 	bl	8003c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80025c8:	2049      	movs	r0, #73	; 0x49
 80025ca:	f001 fb71 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80025ce:	bf00      	nop
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40005c00 	.word	0x40005c00
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40020000 	.word	0x40020000
 80025e4:	40020800 	.word	0x40020800

080025e8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80025ec:	4814      	ldr	r0, [pc, #80]	; (8002640 <I2Cx_Init+0x58>)
 80025ee:	f004 fa21 	bl	8006a34 <HAL_I2C_GetState>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d121      	bne.n	800263c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <I2Cx_Init+0x58>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <I2Cx_Init+0x5c>)
 80025fc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <I2Cx_Init+0x58>)
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <I2Cx_Init+0x60>)
 8002602:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <I2Cx_Init+0x58>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <I2Cx_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <I2Cx_Init+0x58>)
 8002612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002616:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <I2Cx_Init+0x58>)
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <I2Cx_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <I2Cx_Init+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <I2Cx_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <I2Cx_Init+0x58>)
 8002632:	f7ff ff63 	bl	80024fc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002636:	4802      	ldr	r0, [pc, #8]	; (8002640 <I2Cx_Init+0x58>)
 8002638:	f003 fd74 	bl	8006124 <HAL_I2C_Init>
  }
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	2000064c 	.word	0x2000064c
 8002644:	40005c00 	.word	0x40005c00
 8002648:	000186a0 	.word	0x000186a0

0800264c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <I2Cx_ITConfig+0x58>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <I2Cx_ITConfig+0x58>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <I2Cx_ITConfig+0x58>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800266e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002672:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002674:	2301      	movs	r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <I2Cx_ITConfig+0x5c>)
 800267e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	4619      	mov	r1, r3
 8002684:	4809      	ldr	r0, [pc, #36]	; (80026ac <I2Cx_ITConfig+0x60>)
 8002686:	f002 f895 	bl	80047b4 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800268a:	2200      	movs	r2, #0
 800268c:	210f      	movs	r1, #15
 800268e:	2028      	movs	r0, #40	; 0x28
 8002690:	f001 faf2 	bl	8003c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002694:	2028      	movs	r0, #40	; 0x28
 8002696:	f001 fb0b 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	10210000 	.word	0x10210000
 80026ac:	40020000 	.word	0x40020000

080026b0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af04      	add	r7, sp, #16
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
 80026ba:	460b      	mov	r3, r1
 80026bc:	71bb      	strb	r3, [r7, #6]
 80026be:	4613      	mov	r3, r2
 80026c0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	b299      	uxth	r1, r3
 80026ca:	79bb      	ldrb	r3, [r7, #6]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <I2Cx_WriteData+0x4c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	2301      	movs	r3, #1
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	1d7b      	adds	r3, r7, #5
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	4808      	ldr	r0, [pc, #32]	; (8002700 <I2Cx_WriteData+0x50>)
 80026e0:	f003 fe88 	bl	80063f4 <HAL_I2C_Mem_Write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80026ee:	f000 f863 	bl	80027b8 <I2Cx_Error>
  }        
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000064 	.word	0x20000064
 8002700:	2000064c 	.word	0x2000064c

08002704 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af04      	add	r7, sp, #16
 800270a:	4603      	mov	r3, r0
 800270c:	460a      	mov	r2, r1
 800270e:	71fb      	strb	r3, [r7, #7]
 8002710:	4613      	mov	r3, r2
 8002712:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	b299      	uxth	r1, r3
 8002720:	79bb      	ldrb	r3, [r7, #6]
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <I2Cx_ReadData+0x50>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	2301      	movs	r3, #1
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	f107 030e 	add.w	r3, r7, #14
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	4808      	ldr	r0, [pc, #32]	; (8002758 <I2Cx_ReadData+0x54>)
 8002738:	f003 ff56 	bl	80065e8 <HAL_I2C_Mem_Read>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002746:	f000 f837 	bl	80027b8 <I2Cx_Error>
  
  }
  return value;
 800274a:	7bbb      	ldrb	r3, [r7, #14]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000064 	.word	0x20000064
 8002758:	2000064c 	.word	0x2000064c

0800275c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af04      	add	r7, sp, #16
 8002762:	603a      	str	r2, [r7, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
 800276a:	460b      	mov	r3, r1
 800276c:	71bb      	strb	r3, [r7, #6]
 800276e:	4613      	mov	r3, r2
 8002770:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	b299      	uxth	r1, r3
 800277a:	79bb      	ldrb	r3, [r7, #6]
 800277c:	b29a      	uxth	r2, r3
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <I2Cx_ReadBuffer+0x54>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	9302      	str	r3, [sp, #8]
 8002784:	88bb      	ldrh	r3, [r7, #4]
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2301      	movs	r3, #1
 800278e:	4809      	ldr	r0, [pc, #36]	; (80027b4 <I2Cx_ReadBuffer+0x58>)
 8002790:	f003 ff2a 	bl	80065e8 <HAL_I2C_Mem_Read>
 8002794:	4603      	mov	r3, r0
 8002796:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	e002      	b.n	80027a8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80027a2:	f000 f809 	bl	80027b8 <I2Cx_Error>

    return 1;
 80027a6:	2301      	movs	r3, #1
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000064 	.word	0x20000064
 80027b4:	2000064c 	.word	0x2000064c

080027b8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80027bc:	4803      	ldr	r0, [pc, #12]	; (80027cc <I2Cx_Error+0x14>)
 80027be:	f003 fde9 	bl	8006394 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80027c2:	f7ff ff11 	bl	80025e8 <I2Cx_Init>
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2000064c 	.word	0x2000064c

080027d0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80027d4:	4819      	ldr	r0, [pc, #100]	; (800283c <SPIx_Init+0x6c>)
 80027d6:	f006 fc5d 	bl	8009094 <HAL_SPI_GetState>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d12b      	bne.n	8002838 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <SPIx_Init+0x6c>)
 80027e2:	4a17      	ldr	r2, [pc, #92]	; (8002840 <SPIx_Init+0x70>)
 80027e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <SPIx_Init+0x6c>)
 80027e8:	2218      	movs	r2, #24
 80027ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <SPIx_Init+0x6c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <SPIx_Init+0x6c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <SPIx_Init+0x6c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <SPIx_Init+0x6c>)
 8002800:	2200      	movs	r2, #0
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <SPIx_Init+0x6c>)
 8002806:	2207      	movs	r2, #7
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <SPIx_Init+0x6c>)
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <SPIx_Init+0x6c>)
 8002812:	2200      	movs	r2, #0
 8002814:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <SPIx_Init+0x6c>)
 8002818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <SPIx_Init+0x6c>)
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SPIx_Init+0x6c>)
 8002826:	f44f 7282 	mov.w	r2, #260	; 0x104
 800282a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800282c:	4803      	ldr	r0, [pc, #12]	; (800283c <SPIx_Init+0x6c>)
 800282e:	f000 f853 	bl	80028d8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002832:	4802      	ldr	r0, [pc, #8]	; (800283c <SPIx_Init+0x6c>)
 8002834:	f005 ffc3 	bl	80087be <HAL_SPI_Init>
  } 
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000118 	.word	0x20000118
 8002840:	40015000 	.word	0x40015000

08002844 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	b29a      	uxth	r2, r3
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <SPIx_Read+0x38>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f107 0108 	add.w	r1, r7, #8
 800285e:	4808      	ldr	r0, [pc, #32]	; (8002880 <SPIx_Read+0x3c>)
 8002860:	f006 f96d 	bl	8008b3e <HAL_SPI_Receive>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800286e:	f000 f827 	bl	80028c0 <SPIx_Error>
  }
  
  return readvalue;
 8002872:	68bb      	ldr	r3, [r7, #8]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000068 	.word	0x20000068
 8002880:	20000118 	.word	0x20000118

08002884 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <SPIx_Write+0x34>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1db9      	adds	r1, r7, #6
 8002898:	2201      	movs	r2, #1
 800289a:	4808      	ldr	r0, [pc, #32]	; (80028bc <SPIx_Write+0x38>)
 800289c:	f006 f81b 	bl	80088d6 <HAL_SPI_Transmit>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80028aa:	f000 f809 	bl	80028c0 <SPIx_Error>
  }
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000068 	.word	0x20000068
 80028bc:	20000118 	.word	0x20000118

080028c0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80028c4:	4803      	ldr	r0, [pc, #12]	; (80028d4 <SPIx_Error+0x14>)
 80028c6:	f005 ffde 	bl	8008886 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80028ca:	f7ff ff81 	bl	80027d0 <SPIx_Init>
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000118 	.word	0x20000118

080028d8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <SPIx_MspInit+0x6c>)
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	4a16      	ldr	r2, [pc, #88]	; (8002944 <SPIx_MspInit+0x6c>)
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ee:	6453      	str	r3, [r2, #68]	; 0x44
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <SPIx_MspInit+0x6c>)
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <SPIx_MspInit+0x6c>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <SPIx_MspInit+0x6c>)
 8002906:	f043 0320 	orr.w	r3, r3, #32
 800290a:	6313      	str	r3, [r2, #48]	; 0x30
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <SPIx_MspInit+0x6c>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002918:	f44f 7360 	mov.w	r3, #896	; 0x380
 800291c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002922:	2302      	movs	r3, #2
 8002924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002926:	2301      	movs	r3, #1
 8002928:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800292a:	2305      	movs	r3, #5
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <SPIx_MspInit+0x70>)
 8002936:	f001 ff3d 	bl	80047b4 <HAL_GPIO_Init>
}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40021400 	.word	0x40021400

0800294c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002952:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <LCD_IO_Init+0xe0>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d164      	bne.n	8002a24 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800295a:	4b34      	ldr	r3, [pc, #208]	; (8002a2c <LCD_IO_Init+0xe0>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <LCD_IO_Init+0xe4>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a31      	ldr	r2, [pc, #196]	; (8002a30 <LCD_IO_Init+0xe4>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <LCD_IO_Init+0xe4>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800297c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002980:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002982:	2301      	movs	r3, #1
 8002984:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	4619      	mov	r1, r3
 8002994:	4827      	ldr	r0, [pc, #156]	; (8002a34 <LCD_IO_Init+0xe8>)
 8002996:	f001 ff0d 	bl	80047b4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <LCD_IO_Init+0xe4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <LCD_IO_Init+0xe4>)
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <LCD_IO_Init+0xe4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80029b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029bc:	2301      	movs	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029c4:	2302      	movs	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	4619      	mov	r1, r3
 80029ce:	4819      	ldr	r0, [pc, #100]	; (8002a34 <LCD_IO_Init+0xe8>)
 80029d0:	f001 fef0 	bl	80047b4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <LCD_IO_Init+0xe4>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <LCD_IO_Init+0xe4>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6313      	str	r3, [r2, #48]	; 0x30
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <LCD_IO_Init+0xe4>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80029f0:	2304      	movs	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029f4:	2301      	movs	r3, #1
 80029f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	4619      	mov	r1, r3
 8002a06:	480c      	ldr	r0, [pc, #48]	; (8002a38 <LCD_IO_Init+0xec>)
 8002a08:	f001 fed4 	bl	80047b4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2104      	movs	r1, #4
 8002a10:	4809      	ldr	r0, [pc, #36]	; (8002a38 <LCD_IO_Init+0xec>)
 8002a12:	f002 f983 	bl	8004d1c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002a16:	2201      	movs	r2, #1
 8002a18:	2104      	movs	r1, #4
 8002a1a:	4807      	ldr	r0, [pc, #28]	; (8002a38 <LCD_IO_Init+0xec>)
 8002a1c:	f002 f97e 	bl	8004d1c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002a20:	f7ff fed6 	bl	80027d0 <SPIx_Init>
  }
}
 8002a24:	bf00      	nop
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000170 	.word	0x20000170
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40020800 	.word	0x40020800

08002a3c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a46:	2201      	movs	r2, #1
 8002a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a4c:	480a      	ldr	r0, [pc, #40]	; (8002a78 <LCD_IO_WriteData+0x3c>)
 8002a4e:	f002 f965 	bl	8004d1c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002a52:	2200      	movs	r2, #0
 8002a54:	2104      	movs	r1, #4
 8002a56:	4809      	ldr	r0, [pc, #36]	; (8002a7c <LCD_IO_WriteData+0x40>)
 8002a58:	f002 f960 	bl	8004d1c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff10 	bl	8002884 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a64:	2201      	movs	r2, #1
 8002a66:	2104      	movs	r1, #4
 8002a68:	4804      	ldr	r0, [pc, #16]	; (8002a7c <LCD_IO_WriteData+0x40>)
 8002a6a:	f002 f957 	bl	8004d1c <HAL_GPIO_WritePin>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40020800 	.word	0x40020800

08002a80 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a90:	480a      	ldr	r0, [pc, #40]	; (8002abc <LCD_IO_WriteReg+0x3c>)
 8002a92:	f002 f943 	bl	8004d1c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002a96:	2200      	movs	r2, #0
 8002a98:	2104      	movs	r1, #4
 8002a9a:	4809      	ldr	r0, [pc, #36]	; (8002ac0 <LCD_IO_WriteReg+0x40>)
 8002a9c:	f002 f93e 	bl	8004d1c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff feed 	bl	8002884 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002aaa:	2201      	movs	r2, #1
 8002aac:	2104      	movs	r1, #4
 8002aae:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <LCD_IO_WriteReg+0x40>)
 8002ab0:	f002 f934 	bl	8004d1c <HAL_GPIO_WritePin>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	40020800 	.word	0x40020800

08002ac4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	460a      	mov	r2, r1
 8002ace:	80fb      	strh	r3, [r7, #6]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2104      	movs	r1, #4
 8002adc:	4810      	ldr	r0, [pc, #64]	; (8002b20 <LCD_IO_ReadData+0x5c>)
 8002ade:	f002 f91d 	bl	8004d1c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ae8:	480e      	ldr	r0, [pc, #56]	; (8002b24 <LCD_IO_ReadData+0x60>)
 8002aea:	f002 f917 	bl	8004d1c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fec7 	bl	8002884 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002af6:	797b      	ldrb	r3, [r7, #5]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fea3 	bl	8002844 <SPIx_Read>
 8002afe:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002b00:	2201      	movs	r2, #1
 8002b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b06:	4807      	ldr	r0, [pc, #28]	; (8002b24 <LCD_IO_ReadData+0x60>)
 8002b08:	f002 f908 	bl	8004d1c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2104      	movs	r1, #4
 8002b10:	4803      	ldr	r0, [pc, #12]	; (8002b20 <LCD_IO_ReadData+0x5c>)
 8002b12:	f002 f903 	bl	8004d1c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00

08002b28 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 ffc7 	bl	8003ac4 <HAL_Delay>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002b42:	f7ff fd51 	bl	80025e8 <I2Cx_Init>
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002b4e:	f7ff fd7d 	bl	800264c <I2Cx_ITConfig>
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71fb      	strb	r3, [r7, #7]
 8002b60:	460b      	mov	r3, r1
 8002b62:	71bb      	strb	r3, [r7, #6]
 8002b64:	4613      	mov	r3, r2
 8002b66:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002b68:	797a      	ldrb	r2, [r7, #5]
 8002b6a:	79b9      	ldrb	r1, [r7, #6]
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fd9e 	bl	80026b0 <I2Cx_WriteData>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	460a      	mov	r2, r1
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002b8c:	79ba      	ldrb	r2, [r7, #6]
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fdb6 	bl	8002704 <I2Cx_ReadData>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	603a      	str	r2, [r7, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	71bb      	strb	r3, [r7, #6]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002bb8:	88bb      	ldrh	r3, [r7, #4]
 8002bba:	79b9      	ldrb	r1, [r7, #6]
 8002bbc:	79f8      	ldrb	r0, [r7, #7]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	f7ff fdcc 	bl	800275c <I2Cx_ReadBuffer>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b29b      	uxth	r3, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 ff73 	bl	8003ac4 <HAL_Delay>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002bee:	4a2e      	ldr	r2, [pc, #184]	; (8002ca8 <BSP_LCD_Init+0xc0>)
 8002bf0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002bf4:	2209      	movs	r2, #9
 8002bf6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c00:	221d      	movs	r2, #29
 8002c02:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c06:	2203      	movs	r2, #3
 8002c08:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c0c:	f240 120d 	movw	r2, #269	; 0x10d
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c14:	f240 1243 	movw	r2, #323	; 0x143
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c1c:	f240 1217 	movw	r2, #279	; 0x117
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c24:	f240 1247 	movw	r2, #327	; 0x147
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <BSP_LCD_Init+0xc4>)
 8002c44:	2208      	movs	r2, #8
 8002c46:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <BSP_LCD_Init+0xc4>)
 8002c4a:	22c0      	movs	r2, #192	; 0xc0
 8002c4c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <BSP_LCD_Init+0xc4>)
 8002c50:	2204      	movs	r2, #4
 8002c52:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002c54:	4b15      	ldr	r3, [pc, #84]	; (8002cac <BSP_LCD_Init+0xc4>)
 8002c56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002c5c:	4813      	ldr	r0, [pc, #76]	; (8002cac <BSP_LCD_Init+0xc4>)
 8002c5e:	f005 fb71 	bl	8008344 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002c7a:	f000 fba9 	bl	80033d0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002c7e:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <BSP_LCD_Init+0xbc>)
 8002c80:	f004 fabc 	bl	80071fc <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <BSP_LCD_Init+0xc8>)
 8002c86:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <BSP_LCD_Init+0xcc>)
 8002c88:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <BSP_LCD_Init+0xc8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002c92:	f000 fcd1 	bl	8003638 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c96:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <BSP_LCD_Init+0xd0>)
 8002c98:	f000 f920 	bl	8002edc <BSP_LCD_SetFont>

  return LCD_OK;
 8002c9c:	2300      	movs	r3, #0
}  
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200006a0 	.word	0x200006a0
 8002ca8:	40016800 	.word	0x40016800
 8002cac:	200001b4 	.word	0x200001b4
 8002cb0:	20000748 	.word	0x20000748
 8002cb4:	20000004 	.word	0x20000004
 8002cb8:	2000006c 	.word	0x2000006c

08002cbc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <BSP_LCD_GetXSize+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	4798      	blx	r3
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000748 	.word	0x20000748

08002cd4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <BSP_LCD_GetYSize+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	4798      	blx	r3
 8002ce0:	4603      	mov	r3, r0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000748 	.word	0x20000748

08002cec <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b090      	sub	sp, #64	; 0x40
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002cfc:	f7ff ffde 	bl	8002cbc <BSP_LCD_GetXSize>
 8002d00:	4603      	mov	r3, r0
 8002d02:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002d08:	f7ff ffe4 	bl	8002cd4 <BSP_LCD_GetYSize>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002d18:	23ff      	movs	r3, #255	; 0xff
 8002d1a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002d32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002d38:	2307      	movs	r3, #7
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002d3c:	f7ff ffbe 	bl	8002cbc <BSP_LCD_GetXSize>
 8002d40:	4603      	mov	r3, r0
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002d44:	f7ff ffc6 	bl	8002cd4 <BSP_LCD_GetYSize>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	f107 030c 	add.w	r3, r7, #12
 8002d52:	4619      	mov	r1, r3
 8002d54:	4814      	ldr	r0, [pc, #80]	; (8002da8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d56:	f004 fbe3 	bl	8007520 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	4913      	ldr	r1, [pc, #76]	; (8002dac <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3304      	adds	r3, #4
 8002d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	490e      	ldr	r1, [pc, #56]	; (8002dac <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3308      	adds	r3, #8
 8002d80:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002d82:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	4909      	ldr	r1, [pc, #36]	; (8002dac <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002d96:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002d98:	4803      	ldr	r0, [pc, #12]	; (8002da8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d9a:	f004 fc7d 	bl	8007698 <HAL_LTDC_EnableDither>
}
 8002d9e:	bf00      	nop
 8002da0:	3740      	adds	r7, #64	; 0x40
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200006a0 	.word	0x200006a0
 8002dac:	200001e8 	.word	0x200001e8
 8002db0:	2000006c 	.word	0x2000006c

08002db4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <BSP_LCD_SelectLayer+0x1c>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6013      	str	r3, [r2, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	200001e4 	.word	0x200001e4

08002dd4 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d112      	bne.n	8002e0c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8002de6:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <BSP_LCD_SetLayerVisible+0x78>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	01db      	lsls	r3, r3, #7
 8002df0:	4413      	add	r3, r2
 8002df2:	3384      	adds	r3, #132	; 0x84
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <BSP_LCD_SetLayerVisible+0x78>)
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	01d2      	lsls	r2, r2, #7
 8002e00:	440a      	add	r2, r1
 8002e02:	3284      	adds	r2, #132	; 0x84
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e011      	b.n	8002e30 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <BSP_LCD_SetLayerVisible+0x78>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	01db      	lsls	r3, r3, #7
 8002e16:	4413      	add	r3, r2
 8002e18:	3384      	adds	r3, #132	; 0x84
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <BSP_LCD_SetLayerVisible+0x78>)
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	4611      	mov	r1, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	01d2      	lsls	r2, r2, #7
 8002e26:	440a      	add	r2, r1
 8002e28:	3284      	adds	r2, #132	; 0x84
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <BSP_LCD_SetLayerVisible+0x78>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <BSP_LCD_SetLayerVisible+0x78>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	200006a0 	.word	0x200006a0

08002e50 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6839      	ldr	r1, [r7, #0]
 8002e5e:	4805      	ldr	r0, [pc, #20]	; (8002e74 <BSP_LCD_SetColorKeying+0x24>)
 8002e60:	f004 fb9c 	bl	800759c <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4803      	ldr	r0, [pc, #12]	; (8002e74 <BSP_LCD_SetColorKeying+0x24>)
 8002e68:	f004 fbdc 	bl	8007624 <HAL_LTDC_EnableColorKeying>
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	200006a0 	.word	0x200006a0

08002e78 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <BSP_LCD_SetTextColor+0x28>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <BSP_LCD_SetTextColor+0x2c>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	200001e4 	.word	0x200001e4
 8002ea4:	200001e8 	.word	0x200001e8

08002ea8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <BSP_LCD_SetBackColor+0x2c>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <BSP_LCD_SetBackColor+0x30>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	200001e4 	.word	0x200001e4
 8002ed8:	200001e8 	.word	0x200001e8

08002edc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <BSP_LCD_SetFont+0x2c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4908      	ldr	r1, [pc, #32]	; (8002f0c <BSP_LCD_SetFont+0x30>)
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	601a      	str	r2, [r3, #0]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	200001e4 	.word	0x200001e4
 8002f0c:	200001e8 	.word	0x200001e8

08002f10 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <BSP_LCD_Clear+0x48>)
 8002f1a:	681c      	ldr	r4, [r3, #0]
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <BSP_LCD_Clear+0x48>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <BSP_LCD_Clear+0x4c>)
 8002f22:	2134      	movs	r1, #52	; 0x34
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	335c      	adds	r3, #92	; 0x5c
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461d      	mov	r5, r3
 8002f30:	f7ff fec4 	bl	8002cbc <BSP_LCD_GetXSize>
 8002f34:	4606      	mov	r6, r0
 8002f36:	f7ff fecd 	bl	8002cd4 <BSP_LCD_GetYSize>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	2300      	movs	r3, #0
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	4632      	mov	r2, r6
 8002f48:	4629      	mov	r1, r5
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f000 fb3c 	bl	80035c8 <FillBuffer>
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f58:	200001e4 	.word	0x200001e4
 8002f5c:	200006a0 	.word	0x200006a0

08002f60 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	4603      	mov	r3, r0
 8002f68:	80fb      	strh	r3, [r7, #6]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	80bb      	strh	r3, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <BSP_LCD_DrawHLine+0x70>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <BSP_LCD_DrawHLine+0x74>)
 8002f7c:	2134      	movs	r1, #52	; 0x34
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	335c      	adds	r3, #92	; 0x5c
 8002f86:	681c      	ldr	r4, [r3, #0]
 8002f88:	f7ff fe98 	bl	8002cbc <BSP_LCD_GetXSize>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	88bb      	ldrh	r3, [r7, #4]
 8002f90:	fb03 f202 	mul.w	r2, r3, r2
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4423      	add	r3, r4
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <BSP_LCD_DrawHLine+0x70>)
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	68fc      	ldr	r4, [r7, #12]
 8002fa4:	887d      	ldrh	r5, [r7, #2]
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <BSP_LCD_DrawHLine+0x70>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	490b      	ldr	r1, [pc, #44]	; (8002fd8 <BSP_LCD_DrawHLine+0x78>)
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	462a      	mov	r2, r5
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	f000 fb00 	bl	80035c8 <FillBuffer>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd0:	200001e4 	.word	0x200001e4
 8002fd4:	200006a0 	.word	0x200006a0
 8002fd8:	200001e8 	.word	0x200001e8

08002fdc <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	80bb      	strh	r3, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	f1c3 0303 	rsb	r3, r3, #3
 8002ff6:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003000:	e0cf      	b.n	80031a2 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	b29a      	uxth	r2, r3
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	4413      	add	r3, r2
 800300a:	b298      	uxth	r0, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	b29b      	uxth	r3, r3
 8003010:	88ba      	ldrh	r2, [r7, #4]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	b29c      	uxth	r4, r3
 8003016:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <BSP_LCD_DrawCircle+0x1d8>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4967      	ldr	r1, [pc, #412]	; (80031b8 <BSP_LCD_DrawCircle+0x1dc>)
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4621      	mov	r1, r4
 800302c:	f000 faa6 	bl	800357c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	b29b      	uxth	r3, r3
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	b298      	uxth	r0, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	b29b      	uxth	r3, r3
 800303e:	88ba      	ldrh	r2, [r7, #4]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	b29c      	uxth	r4, r3
 8003044:	4b5b      	ldr	r3, [pc, #364]	; (80031b4 <BSP_LCD_DrawCircle+0x1d8>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	495b      	ldr	r1, [pc, #364]	; (80031b8 <BSP_LCD_DrawCircle+0x1dc>)
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	4621      	mov	r1, r4
 800305a:	f000 fa8f 	bl	800357c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	b29a      	uxth	r2, r3
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	4413      	add	r3, r2
 8003066:	b298      	uxth	r0, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	b29b      	uxth	r3, r3
 800306c:	88ba      	ldrh	r2, [r7, #4]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	b29c      	uxth	r4, r3
 8003072:	4b50      	ldr	r3, [pc, #320]	; (80031b4 <BSP_LCD_DrawCircle+0x1d8>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4950      	ldr	r1, [pc, #320]	; (80031b8 <BSP_LCD_DrawCircle+0x1dc>)
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	4621      	mov	r1, r4
 8003088:	f000 fa78 	bl	800357c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	b29b      	uxth	r3, r3
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b298      	uxth	r0, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	b29b      	uxth	r3, r3
 800309a:	88ba      	ldrh	r2, [r7, #4]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	b29c      	uxth	r4, r3
 80030a0:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <BSP_LCD_DrawCircle+0x1d8>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4944      	ldr	r1, [pc, #272]	; (80031b8 <BSP_LCD_DrawCircle+0x1dc>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4621      	mov	r1, r4
 80030b6:	f000 fa61 	bl	800357c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	4413      	add	r3, r2
 80030c2:	b298      	uxth	r0, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	88bb      	ldrh	r3, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	b29c      	uxth	r4, r3
 80030ce:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <BSP_LCD_DrawCircle+0x1d8>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4939      	ldr	r1, [pc, #228]	; (80031b8 <BSP_LCD_DrawCircle+0x1dc>)
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4621      	mov	r1, r4
 80030e4:	f000 fa4a 	bl	800357c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	b298      	uxth	r0, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	88bb      	ldrh	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	b29c      	uxth	r4, r3
 80030fc:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <BSP_LCD_DrawCircle+0x1d8>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	492d      	ldr	r1, [pc, #180]	; (80031b8 <BSP_LCD_DrawCircle+0x1dc>)
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	4621      	mov	r1, r4
 8003112:	f000 fa33 	bl	800357c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	b29a      	uxth	r2, r3
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	4413      	add	r3, r2
 800311e:	b298      	uxth	r0, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	b29a      	uxth	r2, r3
 8003124:	88bb      	ldrh	r3, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	b29c      	uxth	r4, r3
 800312a:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <BSP_LCD_DrawCircle+0x1d8>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4922      	ldr	r1, [pc, #136]	; (80031b8 <BSP_LCD_DrawCircle+0x1dc>)
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4621      	mov	r1, r4
 8003140:	f000 fa1c 	bl	800357c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	b29b      	uxth	r3, r3
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	b298      	uxth	r0, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	b29a      	uxth	r2, r3
 8003152:	88bb      	ldrh	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	b29c      	uxth	r4, r3
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <BSP_LCD_DrawCircle+0x1d8>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4916      	ldr	r1, [pc, #88]	; (80031b8 <BSP_LCD_DrawCircle+0x1dc>)
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	4621      	mov	r1, r4
 800316e:	f000 fa05 	bl	800357c <BSP_LCD_DrawPixel>

    if (d < 0)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	da06      	bge.n	8003186 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	4413      	add	r3, r2
 8003180:	3306      	adds	r3, #6
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e00a      	b.n	800319c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	009a      	lsls	r2, r3, #2
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	4413      	add	r3, r2
 8003192:	330a      	adds	r3, #10
 8003194:	617b      	str	r3, [r7, #20]
      cury--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3b01      	subs	r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	3301      	adds	r3, #1
 80031a0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	f67f af2b 	bls.w	8003002 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd90      	pop	{r4, r7, pc}
 80031b4:	200001e4 	.word	0x200001e4
 80031b8:	200001e8 	.word	0x200001e8

080031bc <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80031bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af02      	add	r7, sp, #8
 80031c4:	4604      	mov	r4, r0
 80031c6:	4608      	mov	r0, r1
 80031c8:	4611      	mov	r1, r2
 80031ca:	461a      	mov	r2, r3
 80031cc:	4623      	mov	r3, r4
 80031ce:	80fb      	strh	r3, [r7, #6]
 80031d0:	4603      	mov	r3, r0
 80031d2:	80bb      	strh	r3, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
 80031d8:	4613      	mov	r3, r2
 80031da:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031e0:	4b20      	ldr	r3, [pc, #128]	; (8003264 <BSP_LCD_FillRect+0xa8>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4920      	ldr	r1, [pc, #128]	; (8003268 <BSP_LCD_FillRect+0xac>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fe40 	bl	8002e78 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <BSP_LCD_FillRect+0xa8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <BSP_LCD_FillRect+0xb0>)
 80031fe:	2134      	movs	r1, #52	; 0x34
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	335c      	adds	r3, #92	; 0x5c
 8003208:	681c      	ldr	r4, [r3, #0]
 800320a:	f7ff fd57 	bl	8002cbc <BSP_LCD_GetXSize>
 800320e:	4602      	mov	r2, r0
 8003210:	88bb      	ldrh	r3, [r7, #4]
 8003212:	fb03 f202 	mul.w	r2, r3, r2
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4423      	add	r3, r4
 800321e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <BSP_LCD_FillRect+0xa8>)
 8003222:	681c      	ldr	r4, [r3, #0]
 8003224:	68fd      	ldr	r5, [r7, #12]
 8003226:	887e      	ldrh	r6, [r7, #2]
 8003228:	f8b7 8000 	ldrh.w	r8, [r7]
 800322c:	f7ff fd46 	bl	8002cbc <BSP_LCD_GetXSize>
 8003230:	4602      	mov	r2, r0
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	1ad1      	subs	r1, r2, r3
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <BSP_LCD_FillRect+0xa8>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	480b      	ldr	r0, [pc, #44]	; (8003268 <BSP_LCD_FillRect+0xac>)
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4403      	add	r3, r0
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	9100      	str	r1, [sp, #0]
 800324c:	4643      	mov	r3, r8
 800324e:	4632      	mov	r2, r6
 8003250:	4629      	mov	r1, r5
 8003252:	4620      	mov	r0, r4
 8003254:	f000 f9b8 	bl	80035c8 <FillBuffer>
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003262:	bf00      	nop
 8003264:	200001e4 	.word	0x200001e4
 8003268:	200001e8 	.word	0x200001e8
 800326c:	200006a0 	.word	0x200006a0

08003270 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	80fb      	strh	r3, [r7, #6]
 800327a:	460b      	mov	r3, r1
 800327c:	80bb      	strh	r3, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	f1c3 0303 	rsb	r3, r3, #3
 800328a:	617b      	str	r3, [r7, #20]

  curx = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003294:	4b44      	ldr	r3, [pc, #272]	; (80033a8 <BSP_LCD_FillCircle+0x138>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4944      	ldr	r1, [pc, #272]	; (80033ac <BSP_LCD_FillCircle+0x13c>)
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fde6 	bl	8002e78 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80032ac:	e061      	b.n	8003372 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d021      	beq.n	80032f8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	b298      	uxth	r0, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	88bb      	ldrh	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	b299      	uxth	r1, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	f7ff fe45 	bl	8002f60 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	b298      	uxth	r0, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	88ba      	ldrh	r2, [r7, #4]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	b299      	uxth	r1, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	f7ff fe34 	bl	8002f60 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d021      	beq.n	8003342 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	b29b      	uxth	r3, r3
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	b298      	uxth	r0, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	b29b      	uxth	r3, r3
 800330c:	88ba      	ldrh	r2, [r7, #4]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	b299      	uxth	r1, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	b29b      	uxth	r3, r3
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	f7ff fe20 	bl	8002f60 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	b29b      	uxth	r3, r3
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	b298      	uxth	r0, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	b29a      	uxth	r2, r3
 800332e:	88bb      	ldrh	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	b299      	uxth	r1, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	b29b      	uxth	r3, r3
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	b29b      	uxth	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	f7ff fe0f 	bl	8002f60 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	da06      	bge.n	8003356 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	009a      	lsls	r2, r3, #2
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4413      	add	r3, r2
 8003350:	3306      	adds	r3, #6
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e00a      	b.n	800336c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	009a      	lsls	r2, r3, #2
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	4413      	add	r3, r2
 8003362:	330a      	adds	r3, #10
 8003364:	617b      	str	r3, [r7, #20]
      cury--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3b01      	subs	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	3301      	adds	r3, #1
 8003370:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	429a      	cmp	r2, r3
 8003378:	d999      	bls.n	80032ae <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <BSP_LCD_FillCircle+0x138>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	490b      	ldr	r1, [pc, #44]	; (80033ac <BSP_LCD_FillCircle+0x13c>)
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fd73 	bl	8002e78 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	88b9      	ldrh	r1, [r7, #4]
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fe1f 	bl	8002fdc <BSP_LCD_DrawCircle>
}
 800339e:	bf00      	nop
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	200001e4 	.word	0x200001e4
 80033ac:	200001e8 	.word	0x200001e8

080033b0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <BSP_LCD_DisplayOn+0x1c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80033be:	4b03      	ldr	r3, [pc, #12]	; (80033cc <BSP_LCD_DisplayOn+0x1c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4798      	blx	r3
  }
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000748 	.word	0x20000748

080033d0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08e      	sub	sp, #56	; 0x38
 80033d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	4b61      	ldr	r3, [pc, #388]	; (8003560 <BSP_LCD_MspInit+0x190>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	4a60      	ldr	r2, [pc, #384]	; (8003560 <BSP_LCD_MspInit+0x190>)
 80033e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033e4:	6453      	str	r3, [r2, #68]	; 0x44
 80033e6:	4b5e      	ldr	r3, [pc, #376]	; (8003560 <BSP_LCD_MspInit+0x190>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	4b5a      	ldr	r3, [pc, #360]	; (8003560 <BSP_LCD_MspInit+0x190>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a59      	ldr	r2, [pc, #356]	; (8003560 <BSP_LCD_MspInit+0x190>)
 80033fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b57      	ldr	r3, [pc, #348]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	4b53      	ldr	r3, [pc, #332]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a52      	ldr	r2, [pc, #328]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b50      	ldr	r3, [pc, #320]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a4b      	ldr	r2, [pc, #300]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b49      	ldr	r3, [pc, #292]	; (8003560 <BSP_LCD_MspInit+0x190>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	4b45      	ldr	r3, [pc, #276]	; (8003560 <BSP_LCD_MspInit+0x190>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a44      	ldr	r2, [pc, #272]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b42      	ldr	r3, [pc, #264]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a3d      	ldr	r2, [pc, #244]	; (8003560 <BSP_LCD_MspInit+0x190>)
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a36      	ldr	r2, [pc, #216]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003488:	f043 0320 	orr.w	r3, r3, #32
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b34      	ldr	r3, [pc, #208]	; (8003560 <BSP_LCD_MspInit+0x190>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	4b30      	ldr	r3, [pc, #192]	; (8003560 <BSP_LCD_MspInit+0x190>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a2f      	ldr	r2, [pc, #188]	; (8003560 <BSP_LCD_MspInit+0x190>)
 80034a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <BSP_LCD_MspInit+0x190>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80034b6:	f641 0358 	movw	r3, #6232	; 0x1858
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80034c4:	2302      	movs	r3, #2
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80034c8:	230e      	movs	r3, #14
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80034cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d0:	4619      	mov	r1, r3
 80034d2:	4824      	ldr	r0, [pc, #144]	; (8003564 <BSP_LCD_MspInit+0x194>)
 80034d4:	f001 f96e 	bl	80047b4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80034d8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e2:	4619      	mov	r1, r3
 80034e4:	4820      	ldr	r0, [pc, #128]	; (8003568 <BSP_LCD_MspInit+0x198>)
 80034e6:	f001 f965 	bl	80047b4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80034ea:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80034f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f4:	4619      	mov	r1, r3
 80034f6:	481d      	ldr	r0, [pc, #116]	; (800356c <BSP_LCD_MspInit+0x19c>)
 80034f8:	f001 f95c 	bl	80047b4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80034fc:	2348      	movs	r3, #72	; 0x48
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	481a      	ldr	r0, [pc, #104]	; (8003570 <BSP_LCD_MspInit+0x1a0>)
 8003508:	f001 f954 	bl	80047b4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800350c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003516:	4619      	mov	r1, r3
 8003518:	4816      	ldr	r0, [pc, #88]	; (8003574 <BSP_LCD_MspInit+0x1a4>)
 800351a:	f001 f94b 	bl	80047b4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800351e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003528:	4619      	mov	r1, r3
 800352a:	4813      	ldr	r0, [pc, #76]	; (8003578 <BSP_LCD_MspInit+0x1a8>)
 800352c:	f001 f942 	bl	80047b4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003530:	2303      	movs	r3, #3
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003534:	2309      	movs	r3, #9
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353c:	4619      	mov	r1, r3
 800353e:	480a      	ldr	r0, [pc, #40]	; (8003568 <BSP_LCD_MspInit+0x198>)
 8003540:	f001 f938 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003544:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800354a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800354e:	4619      	mov	r1, r3
 8003550:	4809      	ldr	r0, [pc, #36]	; (8003578 <BSP_LCD_MspInit+0x1a8>)
 8003552:	f001 f92f 	bl	80047b4 <HAL_GPIO_Init>
}
 8003556:	bf00      	nop
 8003558:	3738      	adds	r7, #56	; 0x38
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40020000 	.word	0x40020000
 8003568:	40020400 	.word	0x40020400
 800356c:	40020800 	.word	0x40020800
 8003570:	40020c00 	.word	0x40020c00
 8003574:	40021400 	.word	0x40021400
 8003578:	40021800 	.word	0x40021800

0800357c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800357c:	b5b0      	push	{r4, r5, r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	603a      	str	r2, [r7, #0]
 8003586:	80fb      	strh	r3, [r7, #6]
 8003588:	460b      	mov	r3, r1
 800358a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <BSP_LCD_DrawPixel+0x44>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <BSP_LCD_DrawPixel+0x48>)
 8003592:	2134      	movs	r1, #52	; 0x34
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	335c      	adds	r3, #92	; 0x5c
 800359c:	681c      	ldr	r4, [r3, #0]
 800359e:	88bd      	ldrh	r5, [r7, #4]
 80035a0:	f7ff fb8c 	bl	8002cbc <BSP_LCD_GetXSize>
 80035a4:	4603      	mov	r3, r0
 80035a6:	fb03 f205 	mul.w	r2, r3, r5
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4423      	add	r3, r4
 80035b2:	461a      	mov	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6013      	str	r3, [r2, #0]
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bdb0      	pop	{r4, r5, r7, pc}
 80035c0:	200001e4 	.word	0x200001e4
 80035c4:	200006a0 	.word	0x200006a0

080035c8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80035d6:	4b16      	ldr	r3, [pc, #88]	; (8003630 <FillBuffer+0x68>)
 80035d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035dc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <FillBuffer+0x68>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80035e4:	4a12      	ldr	r2, [pc, #72]	; (8003630 <FillBuffer+0x68>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80035ea:	4b11      	ldr	r3, [pc, #68]	; (8003630 <FillBuffer+0x68>)
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <FillBuffer+0x6c>)
 80035ee:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80035f0:	480f      	ldr	r0, [pc, #60]	; (8003630 <FillBuffer+0x68>)
 80035f2:	f000 fd43 	bl	800407c <HAL_DMA2D_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d115      	bne.n	8003628 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	480c      	ldr	r0, [pc, #48]	; (8003630 <FillBuffer+0x68>)
 8003600:	f000 ffaa 	bl	8004558 <HAL_DMA2D_ConfigLayer>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69f9      	ldr	r1, [r7, #28]
 8003614:	4806      	ldr	r0, [pc, #24]	; (8003630 <FillBuffer+0x68>)
 8003616:	f000 fd7a 	bl	800410e <HAL_DMA2D_Start>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003620:	210a      	movs	r1, #10
 8003622:	4803      	ldr	r0, [pc, #12]	; (8003630 <FillBuffer+0x68>)
 8003624:	f000 fd9e 	bl	8004164 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000174 	.word	0x20000174
 8003634:	4002b000 	.word	0x4002b000

08003638 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800363c:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 800363e:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <BSP_SDRAM_Init+0xb0>)
 8003640:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003642:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <BSP_SDRAM_Init+0xb4>)
 8003644:	2202      	movs	r2, #2
 8003646:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003648:	4b28      	ldr	r3, [pc, #160]	; (80036ec <BSP_SDRAM_Init+0xb4>)
 800364a:	2207      	movs	r2, #7
 800364c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800364e:	4b27      	ldr	r3, [pc, #156]	; (80036ec <BSP_SDRAM_Init+0xb4>)
 8003650:	2204      	movs	r2, #4
 8003652:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <BSP_SDRAM_Init+0xb4>)
 8003656:	2207      	movs	r2, #7
 8003658:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <BSP_SDRAM_Init+0xb4>)
 800365c:	2202      	movs	r2, #2
 800365e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003660:	4b22      	ldr	r3, [pc, #136]	; (80036ec <BSP_SDRAM_Init+0xb4>)
 8003662:	2202      	movs	r2, #2
 8003664:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <BSP_SDRAM_Init+0xb4>)
 8003668:	2202      	movs	r2, #2
 800366a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 800366e:	2201      	movs	r2, #1
 8003670:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003672:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003678:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 800367a:	2204      	movs	r2, #4
 800367c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 8003680:	2210      	movs	r2, #16
 8003682:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 800368c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003690:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 8003694:	2200      	movs	r2, #0
 8003696:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 800369a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800369e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80036a6:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 80036a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036ac:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80036ae:	2100      	movs	r1, #0
 80036b0:	480c      	ldr	r0, [pc, #48]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 80036b2:	f000 f87f 	bl	80037b4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80036b6:	490d      	ldr	r1, [pc, #52]	; (80036ec <BSP_SDRAM_Init+0xb4>)
 80036b8:	480a      	ldr	r0, [pc, #40]	; (80036e4 <BSP_SDRAM_Init+0xac>)
 80036ba:	f005 f801 	bl	80086c0 <HAL_SDRAM_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <BSP_SDRAM_Init+0xb8>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e002      	b.n	80036d2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <BSP_SDRAM_Init+0xb8>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80036d2:	f240 506a 	movw	r0, #1386	; 0x56a
 80036d6:	f000 f80d 	bl	80036f4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <BSP_SDRAM_Init+0xb8>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000200 	.word	0x20000200
 80036e8:	a0000140 	.word	0xa0000140
 80036ec:	20000234 	.word	0x20000234
 80036f0:	2000007c 	.word	0x2000007c

080036f4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003706:	4b29      	ldr	r3, [pc, #164]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003708:	2208      	movs	r2, #8
 800370a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800370c:	4b27      	ldr	r3, [pc, #156]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370e:	2201      	movs	r2, #1
 8003710:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003712:	4b26      	ldr	r3, [pc, #152]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003714:	2200      	movs	r2, #0
 8003716:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800371c:	4923      	ldr	r1, [pc, #140]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800371e:	4824      	ldr	r0, [pc, #144]	; (80037b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003720:	f005 f802 	bl	8008728 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003724:	2001      	movs	r0, #1
 8003726:	f000 f9cd 	bl	8003ac4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800372c:	2202      	movs	r2, #2
 800372e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003732:	2208      	movs	r2, #8
 8003734:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003738:	2201      	movs	r2, #1
 800373a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800373c:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003746:	4919      	ldr	r1, [pc, #100]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003748:	4819      	ldr	r0, [pc, #100]	; (80037b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800374a:	f004 ffed 	bl	8008728 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800374e:	4b17      	ldr	r3, [pc, #92]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003750:	2203      	movs	r2, #3
 8003752:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003754:	4b15      	ldr	r3, [pc, #84]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003756:	2208      	movs	r2, #8
 8003758:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375c:	2204      	movs	r2, #4
 800375e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800376a:	4910      	ldr	r1, [pc, #64]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800376c:	4810      	ldr	r0, [pc, #64]	; (80037b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800376e:	f004 ffdb 	bl	8008728 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003772:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003776:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377a:	2204      	movs	r2, #4
 800377c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003780:	2208      	movs	r2, #8
 8003782:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003786:	2201      	movs	r2, #1
 8003788:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a07      	ldr	r2, [pc, #28]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800378e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003794:	4905      	ldr	r1, [pc, #20]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003796:	4806      	ldr	r0, [pc, #24]	; (80037b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003798:	f004 ffc6 	bl	8008728 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4804      	ldr	r0, [pc, #16]	; (80037b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037a0:	f004 ffed 	bl	800877e <HAL_SDRAM_ProgramRefreshRate>
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000250 	.word	0x20000250
 80037b0:	20000200 	.word	0x20000200

080037b4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b090      	sub	sp, #64	; 0x40
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80ec 	beq.w	800399e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ca:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	4a76      	ldr	r2, [pc, #472]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6393      	str	r3, [r2, #56]	; 0x38
 80037d6:	4b74      	ldr	r3, [pc, #464]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	4b70      	ldr	r3, [pc, #448]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	4a6f      	ldr	r2, [pc, #444]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 80037ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037f0:	6313      	str	r3, [r2, #48]	; 0x30
 80037f2:	4b6d      	ldr	r3, [pc, #436]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	4b69      	ldr	r3, [pc, #420]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	4a68      	ldr	r2, [pc, #416]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003808:	f043 0302 	orr.w	r3, r3, #2
 800380c:	6313      	str	r3, [r2, #48]	; 0x30
 800380e:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	623b      	str	r3, [r7, #32]
 8003818:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4a61      	ldr	r2, [pc, #388]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6313      	str	r3, [r2, #48]	; 0x30
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	4a5a      	ldr	r2, [pc, #360]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003840:	f043 0308 	orr.w	r3, r3, #8
 8003844:	6313      	str	r3, [r2, #48]	; 0x30
 8003846:	4b58      	ldr	r3, [pc, #352]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	4b54      	ldr	r3, [pc, #336]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a53      	ldr	r2, [pc, #332]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 800385c:	f043 0310 	orr.w	r3, r3, #16
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a4c      	ldr	r2, [pc, #304]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003878:	f043 0320 	orr.w	r3, r3, #32
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b46      	ldr	r3, [pc, #280]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a45      	ldr	r2, [pc, #276]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 8003894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <BSP_SDRAM_MspInit+0x1f4>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80038aa:	2302      	movs	r3, #2
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80038b2:	230c      	movs	r3, #12
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80038b6:	2360      	movs	r3, #96	; 0x60
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80038ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038be:	4619      	mov	r1, r3
 80038c0:	483a      	ldr	r0, [pc, #232]	; (80039ac <BSP_SDRAM_MspInit+0x1f8>)
 80038c2:	f000 ff77 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80038c6:	2301      	movs	r3, #1
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80038ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ce:	4619      	mov	r1, r3
 80038d0:	4837      	ldr	r0, [pc, #220]	; (80039b0 <BSP_SDRAM_MspInit+0x1fc>)
 80038d2:	f000 ff6f 	bl	80047b4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80038d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80038dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038e0:	4619      	mov	r1, r3
 80038e2:	4834      	ldr	r0, [pc, #208]	; (80039b4 <BSP_SDRAM_MspInit+0x200>)
 80038e4:	f000 ff66 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80038e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80038ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f2:	4619      	mov	r1, r3
 80038f4:	4830      	ldr	r0, [pc, #192]	; (80039b8 <BSP_SDRAM_MspInit+0x204>)
 80038f6:	f000 ff5d 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80038fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003904:	4619      	mov	r1, r3
 8003906:	482d      	ldr	r0, [pc, #180]	; (80039bc <BSP_SDRAM_MspInit+0x208>)
 8003908:	f000 ff54 	bl	80047b4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800390c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003916:	4619      	mov	r1, r3
 8003918:	4829      	ldr	r0, [pc, #164]	; (80039c0 <BSP_SDRAM_MspInit+0x20c>)
 800391a:	f000 ff4b 	bl	80047b4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800391e:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 8003920:	2200      	movs	r2, #0
 8003922:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800392a:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 800392c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003930:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 8003934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003938:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 800393c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003940:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 8003944:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003948:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 8003952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003956:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 800395a:	2200      	movs	r2, #0
 800395c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 8003960:	2203      	movs	r2, #3
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003964:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 8003966:	2200      	movs	r2, #0
 8003968:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800396a:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003970:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 8003972:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <BSP_SDRAM_MspInit+0x214>)
 8003974:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
 800397c:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003982:	4810      	ldr	r0, [pc, #64]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 8003984:	f000 fa6c 	bl	8003e60 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003988:	480e      	ldr	r0, [pc, #56]	; (80039c4 <BSP_SDRAM_MspInit+0x210>)
 800398a:	f000 f9bb 	bl	8003d04 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	210f      	movs	r1, #15
 8003992:	2038      	movs	r0, #56	; 0x38
 8003994:	f000 f970 	bl	8003c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003998:	2038      	movs	r0, #56	; 0x38
 800399a:	f000 f989 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800399e:	bf00      	nop
 80039a0:	3740      	adds	r7, #64	; 0x40
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40020400 	.word	0x40020400
 80039b0:	40020800 	.word	0x40020800
 80039b4:	40020c00 	.word	0x40020c00
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40021400 	.word	0x40021400
 80039c0:	40021800 	.word	0x40021800
 80039c4:	20000260 	.word	0x20000260
 80039c8:	40026410 	.word	0x40026410

080039cc <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	460a      	mov	r2, r1
 80039d6:	80fb      	strh	r3, [r7, #6]
 80039d8:	4613      	mov	r3, r2
 80039da:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <BSP_TS_Init+0x64>)
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80039e6:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <BSP_TS_Init+0x68>)
 80039e8:	88bb      	ldrh	r3, [r7, #4]
 80039ea:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <BSP_TS_Init+0x6c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2082      	movs	r0, #130	; 0x82
 80039f2:	4798      	blx	r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	f640 0311 	movw	r3, #2065	; 0x811
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d104      	bne.n	8003a0a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <BSP_TS_Init+0x70>)
 8003a02:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <BSP_TS_Init+0x6c>)
 8003a04:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <BSP_TS_Init+0x70>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2082      	movs	r0, #130	; 0x82
 8003a18:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <BSP_TS_Init+0x70>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2082      	movs	r0, #130	; 0x82
 8003a22:	4798      	blx	r3
  }

  return ret;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200002c4 	.word	0x200002c4
 8003a34:	200002c6 	.word	0x200002c6
 8003a38:	2000003c 	.word	0x2000003c
 8003a3c:	200002c0 	.word	0x200002c0

08003a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_Init+0x40>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <HAL_Init+0x40>)
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_Init+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_Init+0x40>)
 8003a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <HAL_Init+0x40>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f000 f8fa 	bl	8003c62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7fd ff20 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a74:	f7fd fef2 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00

08003a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_IncTick+0x20>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_IncTick+0x24>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_IncTick+0x24>)
 8003a96:	6013      	str	r3, [r2, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000084 	.word	0x20000084
 8003aa8:	2000074c 	.word	0x2000074c

08003aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return uwTick;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <HAL_GetTick+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	2000074c 	.word	0x2000074c

08003ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003acc:	f7ff ffee 	bl	8003aac <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d005      	beq.n	8003aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_Delay+0x40>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aea:	bf00      	nop
 8003aec:	f7ff ffde 	bl	8003aac <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d8f7      	bhi.n	8003aec <HAL_Delay+0x28>
  {
  }
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000084 	.word	0x20000084

08003b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <__NVIC_SetPriorityGrouping+0x44>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b24:	4013      	ands	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <__NVIC_SetPriorityGrouping+0x44>)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	60d3      	str	r3, [r2, #12]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <__NVIC_GetPriorityGrouping+0x18>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	f003 0307 	and.w	r3, r3, #7
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	db0b      	blt.n	8003b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	f003 021f 	and.w	r2, r3, #31
 8003b84:	4907      	ldr	r1, [pc, #28]	; (8003ba4 <__NVIC_EnableIRQ+0x38>)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	e000e100 	.word	0xe000e100

08003ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	6039      	str	r1, [r7, #0]
 8003bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	db0a      	blt.n	8003bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	490c      	ldr	r1, [pc, #48]	; (8003bf4 <__NVIC_SetPriority+0x4c>)
 8003bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc6:	0112      	lsls	r2, r2, #4
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	440b      	add	r3, r1
 8003bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bd0:	e00a      	b.n	8003be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4908      	ldr	r1, [pc, #32]	; (8003bf8 <__NVIC_SetPriority+0x50>)
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	3b04      	subs	r3, #4
 8003be0:	0112      	lsls	r2, r2, #4
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	440b      	add	r3, r1
 8003be6:	761a      	strb	r2, [r3, #24]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	e000e100 	.word	0xe000e100
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b089      	sub	sp, #36	; 0x24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f1c3 0307 	rsb	r3, r3, #7
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	bf28      	it	cs
 8003c1a:	2304      	movcs	r3, #4
 8003c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d902      	bls.n	8003c2c <NVIC_EncodePriority+0x30>
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3b03      	subs	r3, #3
 8003c2a:	e000      	b.n	8003c2e <NVIC_EncodePriority+0x32>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c30:	f04f 32ff 	mov.w	r2, #4294967295
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	401a      	ands	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c44:	f04f 31ff 	mov.w	r1, #4294967295
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	43d9      	mvns	r1, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c54:	4313      	orrs	r3, r2
         );
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3724      	adds	r7, #36	; 0x24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ff4c 	bl	8003b08 <__NVIC_SetPriorityGrouping>
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c8a:	f7ff ff61 	bl	8003b50 <__NVIC_GetPriorityGrouping>
 8003c8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	6978      	ldr	r0, [r7, #20]
 8003c96:	f7ff ffb1 	bl	8003bfc <NVIC_EncodePriority>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff ff80 	bl	8003ba8 <__NVIC_SetPriority>
}
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff54 	bl	8003b6c <__NVIC_EnableIRQ>
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00e      	b.n	8003cfc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	795b      	ldrb	r3, [r3, #5]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc fd1e 	bl	8000730 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7ff fecc 	bl	8003aac <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e099      	b.n	8003e54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d40:	e00f      	b.n	8003d62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d42:	f7ff feb3 	bl	8003aac <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d908      	bls.n	8003d62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2203      	movs	r2, #3
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e078      	b.n	8003e54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e8      	bne.n	8003d42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <HAL_DMA_Init+0x158>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d107      	bne.n	8003dcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 0307 	bic.w	r3, r3, #7
 8003de2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d117      	bne.n	8003e26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00e      	beq.n	8003e26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f8bd 	bl	8003f88 <DMA_CheckFifoParam>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2240      	movs	r2, #64	; 0x40
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e22:	2301      	movs	r3, #1
 8003e24:	e016      	b.n	8003e54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f874 	bl	8003f1c <DMA_CalcBaseAndBitshift>
 8003e34:	4603      	mov	r3, r0
 8003e36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3c:	223f      	movs	r2, #63	; 0x3f
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	f010803f 	.word	0xf010803f

08003e60 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e050      	b.n	8003f14 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d101      	bne.n	8003e82 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e048      	b.n	8003f14 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2221      	movs	r2, #33	; 0x21
 8003ec0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f82a 	bl	8003f1c <DMA_CalcBaseAndBitshift>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	223f      	movs	r2, #63	; 0x3f
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	3b10      	subs	r3, #16
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <DMA_CalcBaseAndBitshift+0x64>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <DMA_CalcBaseAndBitshift+0x68>)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d909      	bls.n	8003f5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f52:	f023 0303 	bic.w	r3, r3, #3
 8003f56:	1d1a      	adds	r2, r3, #4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f5c:	e007      	b.n	8003f6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	aaaaaaab 	.word	0xaaaaaaab
 8003f84:	0800de54 	.word	0x0800de54

08003f88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11f      	bne.n	8003fe2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d855      	bhi.n	8004054 <DMA_CheckFifoParam+0xcc>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <DMA_CheckFifoParam+0x28>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08003fd3 	.word	0x08003fd3
 8003fb8:	08003fc1 	.word	0x08003fc1
 8003fbc:	08004055 	.word	0x08004055
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d045      	beq.n	8004058 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd0:	e042      	b.n	8004058 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fda:	d13f      	bne.n	800405c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe0:	e03c      	b.n	800405c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fea:	d121      	bne.n	8004030 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d836      	bhi.n	8004060 <DMA_CheckFifoParam+0xd8>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <DMA_CheckFifoParam+0x70>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	0800400f 	.word	0x0800400f
 8004000:	08004009 	.word	0x08004009
 8004004:	08004021 	.word	0x08004021
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      break;
 800400c:	e02f      	b.n	800406e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d024      	beq.n	8004064 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401e:	e021      	b.n	8004064 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004028:	d11e      	bne.n	8004068 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800402e:	e01b      	b.n	8004068 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d902      	bls.n	800403c <DMA_CheckFifoParam+0xb4>
 8004036:	2b03      	cmp	r3, #3
 8004038:	d003      	beq.n	8004042 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800403a:	e018      	b.n	800406e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
      break;
 8004040:	e015      	b.n	800406e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00e      	beq.n	800406c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
      break;
 8004052:	e00b      	b.n	800406c <DMA_CheckFifoParam+0xe4>
      break;
 8004054:	bf00      	nop
 8004056:	e00a      	b.n	800406e <DMA_CheckFifoParam+0xe6>
      break;
 8004058:	bf00      	nop
 800405a:	e008      	b.n	800406e <DMA_CheckFifoParam+0xe6>
      break;
 800405c:	bf00      	nop
 800405e:	e006      	b.n	800406e <DMA_CheckFifoParam+0xe6>
      break;
 8004060:	bf00      	nop
 8004062:	e004      	b.n	800406e <DMA_CheckFifoParam+0xe6>
      break;
 8004064:	bf00      	nop
 8004066:	e002      	b.n	800406e <DMA_CheckFifoParam+0xe6>
      break;   
 8004068:	bf00      	nop
 800406a:	e000      	b.n	800406e <DMA_CheckFifoParam+0xe6>
      break;
 800406c:	bf00      	nop
    }
  } 
  
  return status; 
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e03b      	b.n	8004106 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc fb98 	bl	80007d8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	f023 0107 	bic.w	r1, r3, #7
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68d1      	ldr	r1, [r2, #12]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	430b      	orrs	r3, r1
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af02      	add	r7, sp, #8
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_DMA2D_Start+0x1c>
 8004126:	2302      	movs	r3, #2
 8004128:	e018      	b.n	800415c <HAL_DMA2D_Start+0x4e>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fa99 	bl	800467c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0201 	orr.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d056      	beq.n	800422e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004180:	f7ff fc94 	bl	8003aac <HAL_GetTick>
 8004184:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004186:	e04b      	b.n	8004220 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004196:	2b00      	cmp	r3, #0
 8004198:	d023      	beq.n	80041e2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	f043 0202 	orr.w	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041be:	f043 0201 	orr.w	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2221      	movs	r2, #33	; 0x21
 80041cc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2204      	movs	r2, #4
 80041d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e0a5      	b.n	800432e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d01a      	beq.n	8004220 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80041ea:	f7ff fc5f 	bl	8003aac <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d302      	bcc.n	8004200 <HAL_DMA2D_PollForTransfer+0x9c>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10f      	bne.n	8004220 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2203      	movs	r2, #3
 8004210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e086      	b.n	800432e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0ac      	beq.n	8004188 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d061      	beq.n	8004314 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004250:	f7ff fc2c 	bl	8003aac <HAL_GetTick>
 8004254:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004256:	e056      	b.n	8004306 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004266:	2b00      	cmp	r3, #0
 8004268:	d02e      	beq.n	80042c8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	f043 0204 	orr.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	f043 0202 	orr.w	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	f043 0201 	orr.w	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2229      	movs	r2, #41	; 0x29
 80042b2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2204      	movs	r2, #4
 80042b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e032      	b.n	800432e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d01a      	beq.n	8004306 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80042d0:	f7ff fbec 	bl	8003aac <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d302      	bcc.n	80042e6 <HAL_DMA2D_PollForTransfer+0x182>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2203      	movs	r2, #3
 80042f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e013      	b.n	800432e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0a1      	beq.n	8004258 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2212      	movs	r2, #18
 800431a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d026      	beq.n	80043a6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d021      	beq.n	80043a6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004370:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	f043 0201 	orr.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2204      	movs	r2, #4
 800438a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d026      	beq.n	80043fe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d021      	beq.n	80043fe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2220      	movs	r2, #32
 80043d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	f043 0202 	orr.w	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2204      	movs	r2, #4
 80043e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d026      	beq.n	8004456 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440e:	2b00      	cmp	r3, #0
 8004410:	d021      	beq.n	8004456 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004420:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2208      	movs	r2, #8
 8004428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	f043 0204 	orr.w	r2, r3, #4
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00e      	beq.n	8004488 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004478:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2204      	movs	r2, #4
 8004480:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f853 	bl	800452e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d024      	beq.n	80044dc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01f      	beq.n	80044dc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044aa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2202      	movs	r2, #2
 80044b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01f      	beq.n	8004526 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01a      	beq.n	8004526 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2210      	movs	r2, #16
 8004506:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f80e 	bl	8004542 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_DMA2D_ConfigLayer+0x20>
 8004574:	2302      	movs	r3, #2
 8004576:	e079      	b.n	800466c <HAL_DMA2D_ConfigLayer+0x114>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	3318      	adds	r3, #24
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80045a2:	4b35      	ldr	r3, [pc, #212]	; (8004678 <HAL_DMA2D_ConfigLayer+0x120>)
 80045a4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b0a      	cmp	r3, #10
 80045ac:	d003      	beq.n	80045b6 <HAL_DMA2D_ConfigLayer+0x5e>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b09      	cmp	r3, #9
 80045b4:	d107      	bne.n	80045c6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e005      	b.n	80045d2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	061b      	lsls	r3, r3, #24
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d120      	bne.n	800461a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	ea02 0103 	and.w	r1, r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b0a      	cmp	r3, #10
 8004600:	d003      	beq.n	800460a <HAL_DMA2D_ConfigLayer+0xb2>
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b09      	cmp	r3, #9
 8004608:	d127      	bne.n	800465a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
 8004618:	e01f      	b.n	800465a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43db      	mvns	r3, r3
 8004624:	ea02 0103 	and.w	r1, r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	430a      	orrs	r2, r1
 8004630:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b0a      	cmp	r3, #10
 8004642:	d003      	beq.n	800464c <HAL_DMA2D_ConfigLayer+0xf4>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b09      	cmp	r3, #9
 800464a:	d106      	bne.n	800465a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004658:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	ff03000f 	.word	0xff03000f

0800467c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800467c:	b480      	push	{r7}
 800467e:	b08b      	sub	sp, #44	; 0x2c
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	041a      	lsls	r2, r3, #16
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	431a      	orrs	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046b4:	d174      	bne.n	80047a0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046bc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046c4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046cc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d108      	bne.n	80046ee <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
 80046ec:	e053      	b.n	8004796 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d106      	bne.n	8004704 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
 8004702:	e048      	b.n	8004796 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d111      	bne.n	8004730 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	0cdb      	lsrs	r3, r3, #19
 8004710:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	0a9b      	lsrs	r3, r3, #10
 8004716:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	08db      	lsrs	r3, r3, #3
 800471c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	02db      	lsls	r3, r3, #11
 8004726:	4313      	orrs	r3, r2
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	e032      	b.n	8004796 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d117      	bne.n	8004768 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	0fdb      	lsrs	r3, r3, #31
 800473c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	0cdb      	lsrs	r3, r3, #19
 8004742:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	0adb      	lsrs	r3, r3, #11
 8004748:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	029b      	lsls	r3, r3, #10
 8004758:	431a      	orrs	r2, r3
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	03db      	lsls	r3, r3, #15
 800475e:	4313      	orrs	r3, r2
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
 8004766:	e016      	b.n	8004796 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	0f1b      	lsrs	r3, r3, #28
 800476c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	0d1b      	lsrs	r3, r3, #20
 8004772:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	0b1b      	lsrs	r3, r3, #12
 8004778:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	011a      	lsls	r2, r3, #4
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	431a      	orrs	r2, r3
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	031b      	lsls	r3, r3, #12
 800478e:	4313      	orrs	r3, r2
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800479e:	e003      	b.n	80047a8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	60da      	str	r2, [r3, #12]
}
 80047a8:	bf00      	nop
 80047aa:	372c      	adds	r7, #44	; 0x2c
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b089      	sub	sp, #36	; 0x24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e177      	b.n	8004ac0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047d0:	2201      	movs	r2, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	f040 8166 	bne.w	8004aba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d00b      	beq.n	800480e <HAL_GPIO_Init+0x5a>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004802:	2b11      	cmp	r3, #17
 8004804:	d003      	beq.n	800480e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b12      	cmp	r3, #18
 800480c:	d130      	bne.n	8004870 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	2203      	movs	r2, #3
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004844:	2201      	movs	r2, #1
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 0201 	and.w	r2, r3, #1
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	2203      	movs	r2, #3
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0xfc>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b12      	cmp	r3, #18
 80048ae:	d123      	bne.n	80048f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	08da      	lsrs	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3208      	adds	r2, #8
 80048b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	220f      	movs	r2, #15
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0203 	and.w	r2, r3, #3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80c0 	beq.w	8004aba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4b65      	ldr	r3, [pc, #404]	; (8004ad4 <HAL_GPIO_Init+0x320>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	4a64      	ldr	r2, [pc, #400]	; (8004ad4 <HAL_GPIO_Init+0x320>)
 8004944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004948:	6453      	str	r3, [r2, #68]	; 0x44
 800494a:	4b62      	ldr	r3, [pc, #392]	; (8004ad4 <HAL_GPIO_Init+0x320>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004956:	4a60      	ldr	r2, [pc, #384]	; (8004ad8 <HAL_GPIO_Init+0x324>)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	3302      	adds	r3, #2
 800495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	220f      	movs	r2, #15
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a57      	ldr	r2, [pc, #348]	; (8004adc <HAL_GPIO_Init+0x328>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d037      	beq.n	80049f2 <HAL_GPIO_Init+0x23e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a56      	ldr	r2, [pc, #344]	; (8004ae0 <HAL_GPIO_Init+0x32c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d031      	beq.n	80049ee <HAL_GPIO_Init+0x23a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a55      	ldr	r2, [pc, #340]	; (8004ae4 <HAL_GPIO_Init+0x330>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d02b      	beq.n	80049ea <HAL_GPIO_Init+0x236>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a54      	ldr	r2, [pc, #336]	; (8004ae8 <HAL_GPIO_Init+0x334>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d025      	beq.n	80049e6 <HAL_GPIO_Init+0x232>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a53      	ldr	r2, [pc, #332]	; (8004aec <HAL_GPIO_Init+0x338>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01f      	beq.n	80049e2 <HAL_GPIO_Init+0x22e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a52      	ldr	r2, [pc, #328]	; (8004af0 <HAL_GPIO_Init+0x33c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d019      	beq.n	80049de <HAL_GPIO_Init+0x22a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a51      	ldr	r2, [pc, #324]	; (8004af4 <HAL_GPIO_Init+0x340>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_GPIO_Init+0x226>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a50      	ldr	r2, [pc, #320]	; (8004af8 <HAL_GPIO_Init+0x344>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00d      	beq.n	80049d6 <HAL_GPIO_Init+0x222>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a4f      	ldr	r2, [pc, #316]	; (8004afc <HAL_GPIO_Init+0x348>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d007      	beq.n	80049d2 <HAL_GPIO_Init+0x21e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a4e      	ldr	r2, [pc, #312]	; (8004b00 <HAL_GPIO_Init+0x34c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_GPIO_Init+0x21a>
 80049ca:	2309      	movs	r3, #9
 80049cc:	e012      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049ce:	230a      	movs	r3, #10
 80049d0:	e010      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049d2:	2308      	movs	r3, #8
 80049d4:	e00e      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049d6:	2307      	movs	r3, #7
 80049d8:	e00c      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049da:	2306      	movs	r3, #6
 80049dc:	e00a      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049de:	2305      	movs	r3, #5
 80049e0:	e008      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049e2:	2304      	movs	r3, #4
 80049e4:	e006      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049e6:	2303      	movs	r3, #3
 80049e8:	e004      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e002      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_GPIO_Init+0x240>
 80049f2:	2300      	movs	r3, #0
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	f002 0203 	and.w	r2, r2, #3
 80049fa:	0092      	lsls	r2, r2, #2
 80049fc:	4093      	lsls	r3, r2
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a04:	4934      	ldr	r1, [pc, #208]	; (8004ad8 <HAL_GPIO_Init+0x324>)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	089b      	lsrs	r3, r3, #2
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a12:	4b3c      	ldr	r3, [pc, #240]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a36:	4a33      	ldr	r2, [pc, #204]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a3c:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a60:	4a28      	ldr	r2, [pc, #160]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a90:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3301      	adds	r3, #1
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b0f      	cmp	r3, #15
 8004ac4:	f67f ae84 	bls.w	80047d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3724      	adds	r7, #36	; 0x24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	40013800 	.word	0x40013800
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	40020400 	.word	0x40020400
 8004ae4:	40020800 	.word	0x40020800
 8004ae8:	40020c00 	.word	0x40020c00
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40021400 	.word	0x40021400
 8004af4:	40021800 	.word	0x40021800
 8004af8:	40021c00 	.word	0x40021c00
 8004afc:	40022000 	.word	0x40022000
 8004b00:	40022400 	.word	0x40022400
 8004b04:	40013c00 	.word	0x40013c00

08004b08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e0d9      	b.n	8004cd8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b24:	2201      	movs	r2, #1
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4013      	ands	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	f040 80c9 	bne.w	8004cd2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b40:	4a6a      	ldr	r2, [pc, #424]	; (8004cec <HAL_GPIO_DeInit+0x1e4>)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	3302      	adds	r3, #2
 8004b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	220f      	movs	r2, #15
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a62      	ldr	r2, [pc, #392]	; (8004cf0 <HAL_GPIO_DeInit+0x1e8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d037      	beq.n	8004bda <HAL_GPIO_DeInit+0xd2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a61      	ldr	r2, [pc, #388]	; (8004cf4 <HAL_GPIO_DeInit+0x1ec>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d031      	beq.n	8004bd6 <HAL_GPIO_DeInit+0xce>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a60      	ldr	r2, [pc, #384]	; (8004cf8 <HAL_GPIO_DeInit+0x1f0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d02b      	beq.n	8004bd2 <HAL_GPIO_DeInit+0xca>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a5f      	ldr	r2, [pc, #380]	; (8004cfc <HAL_GPIO_DeInit+0x1f4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d025      	beq.n	8004bce <HAL_GPIO_DeInit+0xc6>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a5e      	ldr	r2, [pc, #376]	; (8004d00 <HAL_GPIO_DeInit+0x1f8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01f      	beq.n	8004bca <HAL_GPIO_DeInit+0xc2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a5d      	ldr	r2, [pc, #372]	; (8004d04 <HAL_GPIO_DeInit+0x1fc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d019      	beq.n	8004bc6 <HAL_GPIO_DeInit+0xbe>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a5c      	ldr	r2, [pc, #368]	; (8004d08 <HAL_GPIO_DeInit+0x200>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <HAL_GPIO_DeInit+0xba>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a5b      	ldr	r2, [pc, #364]	; (8004d0c <HAL_GPIO_DeInit+0x204>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00d      	beq.n	8004bbe <HAL_GPIO_DeInit+0xb6>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a5a      	ldr	r2, [pc, #360]	; (8004d10 <HAL_GPIO_DeInit+0x208>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d007      	beq.n	8004bba <HAL_GPIO_DeInit+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a59      	ldr	r2, [pc, #356]	; (8004d14 <HAL_GPIO_DeInit+0x20c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d101      	bne.n	8004bb6 <HAL_GPIO_DeInit+0xae>
 8004bb2:	2309      	movs	r3, #9
 8004bb4:	e012      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bb6:	230a      	movs	r3, #10
 8004bb8:	e010      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bba:	2308      	movs	r3, #8
 8004bbc:	e00e      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bbe:	2307      	movs	r3, #7
 8004bc0:	e00c      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	e00a      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bc6:	2305      	movs	r3, #5
 8004bc8:	e008      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	e006      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e004      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e002      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_GPIO_DeInit+0xd4>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	f002 0203 	and.w	r2, r2, #3
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	4093      	lsls	r3, r2
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d132      	bne.n	8004c52 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004bec:	4b4a      	ldr	r3, [pc, #296]	; (8004d18 <HAL_GPIO_DeInit+0x210>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	4948      	ldr	r1, [pc, #288]	; (8004d18 <HAL_GPIO_DeInit+0x210>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004bfa:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_GPIO_DeInit+0x210>)
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	4945      	ldr	r1, [pc, #276]	; (8004d18 <HAL_GPIO_DeInit+0x210>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c08:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <HAL_GPIO_DeInit+0x210>)
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	4941      	ldr	r1, [pc, #260]	; (8004d18 <HAL_GPIO_DeInit+0x210>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c16:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <HAL_GPIO_DeInit+0x210>)
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	493e      	ldr	r1, [pc, #248]	; (8004d18 <HAL_GPIO_DeInit+0x210>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004c34:	4a2d      	ldr	r2, [pc, #180]	; (8004cec <HAL_GPIO_DeInit+0x1e4>)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	43da      	mvns	r2, r3
 8004c44:	4829      	ldr	r0, [pc, #164]	; (8004cec <HAL_GPIO_DeInit+0x1e4>)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	089b      	lsrs	r3, r3, #2
 8004c4a:	400a      	ands	r2, r1
 8004c4c:	3302      	adds	r3, #2
 8004c4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2103      	movs	r1, #3
 8004c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	401a      	ands	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	08da      	lsrs	r2, r3, #3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3208      	adds	r2, #8
 8004c70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	220f      	movs	r2, #15
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	08d2      	lsrs	r2, r2, #3
 8004c88:	4019      	ands	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3208      	adds	r2, #8
 8004c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	2103      	movs	r1, #3
 8004c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	2101      	movs	r1, #1
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	2103      	movs	r1, #3
 8004cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	401a      	ands	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b0f      	cmp	r3, #15
 8004cdc:	f67f af22 	bls.w	8004b24 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	40013800 	.word	0x40013800
 8004cf0:	40020000 	.word	0x40020000
 8004cf4:	40020400 	.word	0x40020400
 8004cf8:	40020800 	.word	0x40020800
 8004cfc:	40020c00 	.word	0x40020c00
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40021400 	.word	0x40021400
 8004d08:	40021800 	.word	0x40021800
 8004d0c:	40021c00 	.word	0x40021c00
 8004d10:	40022000 	.word	0x40022000
 8004d14:	40022400 	.word	0x40022400
 8004d18:	40013c00 	.word	0x40013c00

08004d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	807b      	strh	r3, [r7, #2]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d2c:	787b      	ldrb	r3, [r7, #1]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d38:	e003      	b.n	8004d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d3a:	887b      	ldrh	r3, [r7, #2]
 8004d3c:	041a      	lsls	r2, r3, #16
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	619a      	str	r2, [r3, #24]
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b086      	sub	sp, #24
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f005 fc67 	bl	800a638 <USB_GetMode>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	f040 80ef 	bne.w	8004f50 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f005 fc4b 	bl	800a612 <USB_ReadInterrupts>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80e5 	beq.w	8004f4e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f005 fc42 	bl	800a612 <USB_ReadInterrupts>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d98:	d104      	bne.n	8004da4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004da2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f005 fc32 	bl	800a612 <USB_ReadInterrupts>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db8:	d104      	bne.n	8004dc4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f005 fc22 	bl	800a612 <USB_ReadInterrupts>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd8:	d104      	bne.n	8004de4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004de2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f005 fc12 	bl	800a612 <USB_ReadInterrupts>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d103      	bne.n	8004e00 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f005 fc04 	bl	800a612 <USB_ReadInterrupts>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e14:	d115      	bne.n	8004e42 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e1e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d108      	bne.n	8004e42 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f006 ff2b 	bl	800bc8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f005 fc09 	bl	800a654 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f005 fbe3 	bl	800a612 <USB_ReadInterrupts>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e56:	d102      	bne.n	8004e5e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 f8ef 	bl	800603c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f005 fbd5 	bl	800a612 <USB_ReadInterrupts>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d106      	bne.n	8004e80 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f006 feee 	bl	800bc54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f005 fbc4 	bl	800a612 <USB_ReadInterrupts>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e94:	d138      	bne.n	8004f08 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f005 fc14 	bl	800a6c8 <USB_HC_ReadInterrupt>
 8004ea0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e025      	b.n	8004ef4 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d018      	beq.n	8004eee <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed2:	d106      	bne.n	8004ee2 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f858 	bl	8004f90 <HCD_HC_IN_IRQHandler>
 8004ee0:	e005      	b.n	8004eee <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fc86 	bl	80057fa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d3d4      	bcc.n	8004ea8 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f005 fb80 	bl	800a612 <USB_ReadInterrupts>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d101      	bne.n	8004f20 <HAL_HCD_IRQHandler+0x1d2>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <HAL_HCD_IRQHandler+0x1d4>
 8004f20:	2300      	movs	r3, #0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d014      	beq.n	8004f50 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699a      	ldr	r2, [r3, #24]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0210 	bic.w	r2, r2, #16
 8004f34:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 ffd4 	bl	8005ee4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0210 	orr.w	r2, r2, #16
 8004f4a:	619a      	str	r2, [r3, #24]
 8004f4c:	e000      	b.n	8004f50 <HAL_HCD_IRQHandler+0x202>
      return;
 8004f4e:	bf00      	nop
    }
  }
}
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_HCD_Stop+0x16>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e00d      	b.n	8004f88 <HAL_HCD_Stop+0x32>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f005 fcb5 	bl	800a8e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d119      	bne.n	8004ff4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2304      	movs	r3, #4
 8004fd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	60d3      	str	r3, [r2, #12]
 8004ff2:	e0ce      	b.n	8005192 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500a:	d12c      	bne.n	8005066 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4413      	add	r3, r2
 8005014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005018:	461a      	mov	r2, r3
 800501a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800501e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	440b      	add	r3, r1
 800502e:	335d      	adds	r3, #93	; 0x5d
 8005030:	2207      	movs	r2, #7
 8005032:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	440a      	add	r2, r1
 800504a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800504e:	f043 0302 	orr.w	r3, r3, #2
 8005052:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f005 fb43 	bl	800a6ea <USB_HC_Halt>
 8005064:	e095      	b.n	8005192 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b20      	cmp	r3, #32
 800507a:	d109      	bne.n	8005090 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005088:	461a      	mov	r2, r3
 800508a:	2320      	movs	r3, #32
 800508c:	6093      	str	r3, [r2, #8]
 800508e:	e080      	b.n	8005192 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d134      	bne.n	8005110 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050c0:	f043 0302 	orr.w	r3, r3, #2
 80050c4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	440b      	add	r3, r1
 80050d4:	335d      	adds	r3, #93	; 0x5d
 80050d6:	2205      	movs	r2, #5
 80050d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	461a      	mov	r2, r3
 80050e8:	2310      	movs	r3, #16
 80050ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	461a      	mov	r2, r3
 80050fa:	2308      	movs	r3, #8
 80050fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f005 faee 	bl	800a6ea <USB_HC_Halt>
 800510e:	e040      	b.n	8005192 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4413      	add	r3, r2
 8005118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005126:	d134      	bne.n	8005192 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	440a      	add	r2, r1
 800513e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005142:	f043 0302 	orr.w	r3, r3, #2
 8005146:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	4611      	mov	r1, r2
 8005152:	4618      	mov	r0, r3
 8005154:	f005 fac9 	bl	800a6ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4413      	add	r3, r2
 8005160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005164:	461a      	mov	r2, r3
 8005166:	2310      	movs	r3, #16
 8005168:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	440b      	add	r3, r1
 8005178:	335d      	adds	r3, #93	; 0x5d
 800517a:	2208      	movs	r2, #8
 800517c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	461a      	mov	r2, r3
 800518c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005190:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a8:	d122      	bne.n	80051f0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051c4:	f043 0302 	orr.w	r3, r3, #2
 80051c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f005 fa88 	bl	800a6ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e6:	461a      	mov	r2, r3
 80051e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051ec:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80051ee:	e300      	b.n	80057f2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	f040 80fd 	bne.w	8005402 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01b      	beq.n	8005248 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	440b      	add	r3, r1
 800521e:	3348      	adds	r3, #72	; 0x48
 8005220:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	0159      	lsls	r1, r3, #5
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	440b      	add	r3, r1
 800522a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005234:	1ad1      	subs	r1, r2, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4403      	add	r3, r0
 8005244:	334c      	adds	r3, #76	; 0x4c
 8005246:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	440b      	add	r3, r1
 8005256:	335d      	adds	r3, #93	; 0x5d
 8005258:	2201      	movs	r2, #1
 800525a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	3358      	adds	r3, #88	; 0x58
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	461a      	mov	r2, r3
 800527e:	2301      	movs	r3, #1
 8005280:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	333f      	adds	r3, #63	; 0x3f
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	440b      	add	r3, r1
 80052a6:	333f      	adds	r3, #63	; 0x3f
 80052a8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d121      	bne.n	80052f2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c8:	f043 0302 	orr.w	r3, r3, #2
 80052cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f005 fa06 	bl	800a6ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	461a      	mov	r2, r3
 80052ec:	2310      	movs	r3, #16
 80052ee:	6093      	str	r3, [r2, #8]
 80052f0:	e070      	b.n	80053d4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	440b      	add	r3, r1
 8005300:	333f      	adds	r3, #63	; 0x3f
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b03      	cmp	r3, #3
 8005306:	d12a      	bne.n	800535e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	440a      	add	r2, r1
 800531e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005326:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	440b      	add	r3, r1
 8005336:	335c      	adds	r3, #92	; 0x5c
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	b2d8      	uxtb	r0, r3
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	440b      	add	r3, r1
 800534e:	335c      	adds	r3, #92	; 0x5c
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	4601      	mov	r1, r0
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f006 fca6 	bl	800bca8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800535c:	e03a      	b.n	80053d4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	440b      	add	r3, r1
 800536c:	333f      	adds	r3, #63	; 0x3f
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d12f      	bne.n	80053d4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	440b      	add	r3, r1
 8005382:	335c      	adds	r3, #92	; 0x5c
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	440b      	add	r3, r1
 8005396:	3350      	adds	r3, #80	; 0x50
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	f083 0301 	eor.w	r3, r3, #1
 800539e:	b2d8      	uxtb	r0, r3
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	440b      	add	r3, r1
 80053ae:	3350      	adds	r3, #80	; 0x50
 80053b0:	4602      	mov	r2, r0
 80053b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	b2d8      	uxtb	r0, r3
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	440b      	add	r3, r1
 80053c6:	335c      	adds	r3, #92	; 0x5c
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	4601      	mov	r1, r0
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f006 fc6a 	bl	800bca8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	440b      	add	r3, r1
 80053e2:	3350      	adds	r3, #80	; 0x50
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f083 0301 	eor.w	r3, r3, #1
 80053ea:	b2d8      	uxtb	r0, r3
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	440b      	add	r3, r1
 80053fa:	3350      	adds	r3, #80	; 0x50
 80053fc:	4602      	mov	r2, r0
 80053fe:	701a      	strb	r2, [r3, #0]
}
 8005400:	e1f7      	b.n	80057f2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	f040 811a 	bne.w	800564e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	440a      	add	r2, r1
 8005430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005434:	f023 0302 	bic.w	r3, r3, #2
 8005438:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	440b      	add	r3, r1
 8005448:	335d      	adds	r3, #93	; 0x5d
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10a      	bne.n	8005466 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	440b      	add	r3, r1
 800545e:	335c      	adds	r3, #92	; 0x5c
 8005460:	2201      	movs	r2, #1
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e0d9      	b.n	800561a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	335d      	adds	r3, #93	; 0x5d
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b05      	cmp	r3, #5
 800547a:	d10a      	bne.n	8005492 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	440b      	add	r3, r1
 800548a:	335c      	adds	r3, #92	; 0x5c
 800548c:	2205      	movs	r2, #5
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	e0c3      	b.n	800561a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	440b      	add	r3, r1
 80054a0:	335d      	adds	r3, #93	; 0x5d
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b06      	cmp	r3, #6
 80054a6:	d00a      	beq.n	80054be <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	440b      	add	r3, r1
 80054b6:	335d      	adds	r3, #93	; 0x5d
 80054b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d156      	bne.n	800556c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	440b      	add	r3, r1
 80054cc:	3358      	adds	r3, #88	; 0x58
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1c59      	adds	r1, r3, #1
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	4403      	add	r3, r0
 80054e0:	3358      	adds	r3, #88	; 0x58
 80054e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	440b      	add	r3, r1
 80054f2:	3358      	adds	r3, #88	; 0x58
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d914      	bls.n	8005524 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	440b      	add	r3, r1
 8005508:	3358      	adds	r3, #88	; 0x58
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	440b      	add	r3, r1
 800551c:	335c      	adds	r3, #92	; 0x5c
 800551e:	2204      	movs	r2, #4
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e009      	b.n	8005538 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	440b      	add	r3, r1
 8005532:	335c      	adds	r3, #92	; 0x5c
 8005534:	2202      	movs	r2, #2
 8005536:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800554e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005556:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005564:	461a      	mov	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e056      	b.n	800561a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	440b      	add	r3, r1
 800557a:	335d      	adds	r3, #93	; 0x5d
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b03      	cmp	r3, #3
 8005580:	d123      	bne.n	80055ca <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	440b      	add	r3, r1
 8005590:	335c      	adds	r3, #92	; 0x5c
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4413      	add	r3, r2
 800559e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055ac:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055b4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c2:	461a      	mov	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	e027      	b.n	800561a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	440b      	add	r3, r1
 80055d8:	335d      	adds	r3, #93	; 0x5d
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b07      	cmp	r3, #7
 80055de:	d11c      	bne.n	800561a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	440b      	add	r3, r1
 80055ee:	3358      	adds	r3, #88	; 0x58
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	1c59      	adds	r1, r3, #1
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4403      	add	r3, r0
 8005602:	3358      	adds	r3, #88	; 0x58
 8005604:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	440b      	add	r3, r1
 8005614:	335c      	adds	r3, #92	; 0x5c
 8005616:	2204      	movs	r2, #4
 8005618:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4413      	add	r3, r2
 8005622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005626:	461a      	mov	r2, r3
 8005628:	2302      	movs	r3, #2
 800562a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	b2d8      	uxtb	r0, r3
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	440b      	add	r3, r1
 800563e:	335c      	adds	r3, #92	; 0x5c
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	4601      	mov	r1, r0
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f006 fb2e 	bl	800bca8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800564c:	e0d1      	b.n	80057f2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4413      	add	r3, r2
 8005656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d13e      	bne.n	80056e2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	440a      	add	r2, r1
 800567a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800567e:	f043 0302 	orr.w	r3, r3, #2
 8005682:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	440b      	add	r3, r1
 8005692:	3358      	adds	r3, #88	; 0x58
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	1c59      	adds	r1, r3, #1
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4403      	add	r3, r0
 80056a6:	3358      	adds	r3, #88	; 0x58
 80056a8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	440b      	add	r3, r1
 80056b8:	335d      	adds	r3, #93	; 0x5d
 80056ba:	2206      	movs	r2, #6
 80056bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f005 f80e 	bl	800a6ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056da:	461a      	mov	r2, r3
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	6093      	str	r3, [r2, #8]
}
 80056e0:	e087      	b.n	80057f2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d17c      	bne.n	80057f2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	440b      	add	r3, r1
 8005706:	333f      	adds	r3, #63	; 0x3f
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d122      	bne.n	8005754 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	440b      	add	r3, r1
 800571c:	3358      	adds	r3, #88	; 0x58
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	440a      	add	r2, r1
 8005738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800573c:	f043 0302 	orr.w	r3, r3, #2
 8005740:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	4611      	mov	r1, r2
 800574c:	4618      	mov	r0, r3
 800574e:	f004 ffcc 	bl	800a6ea <USB_HC_Halt>
 8005752:	e045      	b.n	80057e0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	440b      	add	r3, r1
 8005762:	333f      	adds	r3, #63	; 0x3f
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	440b      	add	r3, r1
 8005778:	333f      	adds	r3, #63	; 0x3f
 800577a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800577c:	2b02      	cmp	r3, #2
 800577e:	d12f      	bne.n	80057e0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	440b      	add	r3, r1
 800578e:	3358      	adds	r3, #88	; 0x58
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d121      	bne.n	80057e0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	335d      	adds	r3, #93	; 0x5d
 80057ac:	2203      	movs	r2, #3
 80057ae:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ca:	f043 0302 	orr.w	r3, r3, #2
 80057ce:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f004 ff85 	bl	800a6ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ec:	461a      	mov	r2, r3
 80057ee:	2310      	movs	r3, #16
 80057f0:	6093      	str	r3, [r2, #8]
}
 80057f2:	bf00      	nop
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b04      	cmp	r3, #4
 8005828:	d119      	bne.n	800585e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4413      	add	r3, r2
 8005832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005836:	461a      	mov	r2, r3
 8005838:	2304      	movs	r3, #4
 800583a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	440a      	add	r2, r1
 8005852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005856:	f043 0302 	orr.w	r3, r3, #2
 800585a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800585c:	e33e      	b.n	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b20      	cmp	r3, #32
 8005872:	d141      	bne.n	80058f8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	461a      	mov	r2, r3
 8005882:	2320      	movs	r3, #32
 8005884:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	440b      	add	r3, r1
 8005894:	333d      	adds	r3, #61	; 0x3d
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	f040 831f 	bne.w	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	333d      	adds	r3, #61	; 0x3d
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	440b      	add	r3, r1
 80058c0:	335c      	adds	r3, #92	; 0x5c
 80058c2:	2202      	movs	r2, #2
 80058c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058e0:	f043 0302 	orr.w	r3, r3, #2
 80058e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f004 fefa 	bl	800a6ea <USB_HC_Halt>
}
 80058f6:	e2f1      	b.n	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d13f      	bne.n	800598e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	440b      	add	r3, r1
 800591c:	335d      	adds	r3, #93	; 0x5d
 800591e:	2204      	movs	r2, #4
 8005920:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	333d      	adds	r3, #61	; 0x3d
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	3358      	adds	r3, #88	; 0x58
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	440a      	add	r2, r1
 8005960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005964:	f043 0302 	orr.w	r3, r3, #2
 8005968:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f004 feb8 	bl	800a6ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4413      	add	r3, r2
 8005982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005986:	461a      	mov	r2, r3
 8005988:	2340      	movs	r3, #64	; 0x40
 800598a:	6093      	str	r3, [r2, #8]
}
 800598c:	e2a6      	b.n	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a4:	d122      	bne.n	80059ec <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c0:	f043 0302 	orr.w	r3, r3, #2
 80059c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	4611      	mov	r1, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f004 fe8a 	bl	800a6ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	461a      	mov	r2, r3
 80059e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e8:	6093      	str	r3, [r2, #8]
}
 80059ea:	e277      	b.n	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d135      	bne.n	8005a6e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	440b      	add	r3, r1
 8005a10:	3358      	adds	r3, #88	; 0x58
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a30:	f043 0302 	orr.w	r3, r3, #2
 8005a34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f004 fe52 	bl	800a6ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a52:	461a      	mov	r2, r3
 8005a54:	2301      	movs	r3, #1
 8005a56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	335d      	adds	r3, #93	; 0x5d
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
}
 8005a6c:	e236      	b.n	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d12b      	bne.n	8005adc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a90:	461a      	mov	r2, r3
 8005a92:	2308      	movs	r3, #8
 8005a94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab0:	f043 0302 	orr.w	r3, r3, #2
 8005ab4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	4611      	mov	r1, r2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f004 fe12 	bl	800a6ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	440b      	add	r3, r1
 8005ad4:	335d      	adds	r3, #93	; 0x5d
 8005ad6:	2205      	movs	r2, #5
 8005ad8:	701a      	strb	r2, [r3, #0]
}
 8005ada:	e1ff      	b.n	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d155      	bne.n	8005b9e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	440b      	add	r3, r1
 8005b00:	3358      	adds	r3, #88	; 0x58
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	440b      	add	r3, r1
 8005b14:	335d      	adds	r3, #93	; 0x5d
 8005b16:	2203      	movs	r2, #3
 8005b18:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	440b      	add	r3, r1
 8005b28:	333d      	adds	r3, #61	; 0x3d
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d114      	bne.n	8005b5a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	440b      	add	r3, r1
 8005b3e:	333c      	adds	r3, #60	; 0x3c
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	440b      	add	r3, r1
 8005b54:	333d      	adds	r3, #61	; 0x3d
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b74:	f043 0302 	orr.w	r3, r3, #2
 8005b78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f004 fdb0 	bl	800a6ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	461a      	mov	r2, r3
 8005b98:	2310      	movs	r3, #16
 8005b9a:	6093      	str	r3, [r2, #8]
}
 8005b9c:	e19e      	b.n	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b80      	cmp	r3, #128	; 0x80
 8005bb2:	d12b      	bne.n	8005c0c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bce:	f043 0302 	orr.w	r3, r3, #2
 8005bd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	4611      	mov	r1, r2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f004 fd83 	bl	800a6ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	440b      	add	r3, r1
 8005bf2:	335d      	adds	r3, #93	; 0x5d
 8005bf4:	2206      	movs	r2, #6
 8005bf6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c04:	461a      	mov	r2, r3
 8005c06:	2380      	movs	r3, #128	; 0x80
 8005c08:	6093      	str	r3, [r2, #8]
}
 8005c0a:	e167      	b.n	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c22:	d135      	bne.n	8005c90 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3e:	f043 0302 	orr.w	r3, r3, #2
 8005c42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f004 fd4b 	bl	800a6ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c60:	461a      	mov	r2, r3
 8005c62:	2310      	movs	r3, #16
 8005c64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c72:	461a      	mov	r2, r3
 8005c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	440b      	add	r3, r1
 8005c88:	335d      	adds	r3, #93	; 0x5d
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	701a      	strb	r2, [r3, #0]
}
 8005c8e:	e125      	b.n	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	f040 811a 	bne.w	8005edc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc2:	f023 0302 	bic.w	r3, r3, #2
 8005cc6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	440b      	add	r3, r1
 8005cd6:	335d      	adds	r3, #93	; 0x5d
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d137      	bne.n	8005d4e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	440b      	add	r3, r1
 8005cec:	335c      	adds	r3, #92	; 0x5c
 8005cee:	2201      	movs	r2, #1
 8005cf0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	440b      	add	r3, r1
 8005d00:	333f      	adds	r3, #63	; 0x3f
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d00b      	beq.n	8005d20 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	440b      	add	r3, r1
 8005d16:	333f      	adds	r3, #63	; 0x3f
 8005d18:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	f040 80c5 	bne.w	8005eaa <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3351      	adds	r3, #81	; 0x51
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f083 0301 	eor.w	r3, r3, #1
 8005d36:	b2d8      	uxtb	r0, r3
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	440b      	add	r3, r1
 8005d46:	3351      	adds	r3, #81	; 0x51
 8005d48:	4602      	mov	r2, r0
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e0ad      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	335d      	adds	r3, #93	; 0x5d
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d10a      	bne.n	8005d7a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	440b      	add	r3, r1
 8005d72:	335c      	adds	r3, #92	; 0x5c
 8005d74:	2202      	movs	r2, #2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	e097      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	440b      	add	r3, r1
 8005d88:	335d      	adds	r3, #93	; 0x5d
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d10a      	bne.n	8005da6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	440b      	add	r3, r1
 8005d9e:	335c      	adds	r3, #92	; 0x5c
 8005da0:	2202      	movs	r2, #2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	e081      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	440b      	add	r3, r1
 8005db4:	335d      	adds	r3, #93	; 0x5d
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b05      	cmp	r3, #5
 8005dba:	d10a      	bne.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	440b      	add	r3, r1
 8005dca:	335c      	adds	r3, #92	; 0x5c
 8005dcc:	2205      	movs	r2, #5
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e06b      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	440b      	add	r3, r1
 8005de0:	335d      	adds	r3, #93	; 0x5d
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b06      	cmp	r3, #6
 8005de6:	d00a      	beq.n	8005dfe <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	440b      	add	r3, r1
 8005df6:	335d      	adds	r3, #93	; 0x5d
 8005df8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d155      	bne.n	8005eaa <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	440b      	add	r3, r1
 8005e0c:	3358      	adds	r3, #88	; 0x58
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	1c59      	adds	r1, r3, #1
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4403      	add	r3, r0
 8005e20:	3358      	adds	r3, #88	; 0x58
 8005e22:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	440b      	add	r3, r1
 8005e32:	3358      	adds	r3, #88	; 0x58
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d914      	bls.n	8005e64 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	440b      	add	r3, r1
 8005e48:	3358      	adds	r3, #88	; 0x58
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	440b      	add	r3, r1
 8005e5c:	335c      	adds	r3, #92	; 0x5c
 8005e5e:	2204      	movs	r2, #4
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	e009      	b.n	8005e78 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	440b      	add	r3, r1
 8005e72:	335c      	adds	r3, #92	; 0x5c
 8005e74:	2202      	movs	r2, #2
 8005e76:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e8e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e96:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	2302      	movs	r3, #2
 8005eba:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	b2d8      	uxtb	r0, r3
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	440b      	add	r3, r1
 8005ece:	335c      	adds	r3, #92	; 0x5c
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	4601      	mov	r1, r0
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f005 fee6 	bl	800bca8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005edc:	bf00      	nop
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	0c5b      	lsrs	r3, r3, #17
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	091b      	lsrs	r3, r3, #4
 8005f14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f18:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d003      	beq.n	8005f28 <HCD_RXQLVL_IRQHandler+0x44>
 8005f20:	2b05      	cmp	r3, #5
 8005f22:	f000 8082 	beq.w	800602a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f26:	e083      	b.n	8006030 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d07f      	beq.n	800602e <HCD_RXQLVL_IRQHandler+0x14a>
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	440b      	add	r3, r1
 8005f3c:	3344      	adds	r3, #68	; 0x44
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d074      	beq.n	800602e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	440b      	add	r3, r1
 8005f56:	3344      	adds	r3, #68	; 0x44
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	f004 fb2e 	bl	800a5c0 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	440b      	add	r3, r1
 8005f72:	3344      	adds	r3, #68	; 0x44
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	18d1      	adds	r1, r2, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4403      	add	r3, r0
 8005f88:	3344      	adds	r3, #68	; 0x44
 8005f8a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	440b      	add	r3, r1
 8005f9a:	334c      	adds	r3, #76	; 0x4c
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	18d1      	adds	r1, r2, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4403      	add	r3, r0
 8005fb0:	334c      	adds	r3, #76	; 0x4c
 8005fb2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <HCD_RXQLVL_IRQHandler+0x154>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d031      	beq.n	800602e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fe0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fe8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	440b      	add	r3, r1
 800600a:	3350      	adds	r3, #80	; 0x50
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	f083 0301 	eor.w	r3, r3, #1
 8006012:	b2d8      	uxtb	r0, r3
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	440b      	add	r3, r1
 8006022:	3350      	adds	r3, #80	; 0x50
 8006024:	4602      	mov	r2, r0
 8006026:	701a      	strb	r2, [r3, #0]
      break;
 8006028:	e001      	b.n	800602e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800602e:	bf00      	nop
  }
}
 8006030:	bf00      	nop
 8006032:	3728      	adds	r7, #40	; 0x28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	1ff80000 	.word	0x1ff80000

0800603c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006068:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b02      	cmp	r3, #2
 8006072:	d10b      	bne.n	800608c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b01      	cmp	r3, #1
 800607c:	d102      	bne.n	8006084 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f005 fdf6 	bl	800bc70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f043 0302 	orr.w	r3, r3, #2
 800608a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b08      	cmp	r3, #8
 8006094:	d132      	bne.n	80060fc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f043 0308 	orr.w	r3, r3, #8
 800609c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d126      	bne.n	80060f6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d113      	bne.n	80060d8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060ba:	d106      	bne.n	80060ca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2102      	movs	r1, #2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f004 fac6 	bl	800a654 <USB_InitFSLSPClkSel>
 80060c8:	e011      	b.n	80060ee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2101      	movs	r1, #1
 80060d0:	4618      	mov	r0, r3
 80060d2:	f004 fabf 	bl	800a654 <USB_InitFSLSPClkSel>
 80060d6:	e00a      	b.n	80060ee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d106      	bne.n	80060ee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e6:	461a      	mov	r2, r3
 80060e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80060ec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f005 fdec 	bl	800bccc <HAL_HCD_PortEnabled_Callback>
 80060f4:	e002      	b.n	80060fc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f005 fdf6 	bl	800bce8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b20      	cmp	r3, #32
 8006104:	d103      	bne.n	800610e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f043 0320 	orr.w	r3, r3, #32
 800610c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006114:	461a      	mov	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6013      	str	r3, [r2, #0]
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e11f      	b.n	8006376 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fa fdb4 	bl	8000cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2224      	movs	r2, #36	; 0x24
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006186:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006188:	f002 f882 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 800618c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4a7b      	ldr	r2, [pc, #492]	; (8006380 <HAL_I2C_Init+0x25c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d807      	bhi.n	80061a8 <HAL_I2C_Init+0x84>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a7a      	ldr	r2, [pc, #488]	; (8006384 <HAL_I2C_Init+0x260>)
 800619c:	4293      	cmp	r3, r2
 800619e:	bf94      	ite	ls
 80061a0:	2301      	movls	r3, #1
 80061a2:	2300      	movhi	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	e006      	b.n	80061b6 <HAL_I2C_Init+0x92>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a77      	ldr	r2, [pc, #476]	; (8006388 <HAL_I2C_Init+0x264>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	bf94      	ite	ls
 80061b0:	2301      	movls	r3, #1
 80061b2:	2300      	movhi	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e0db      	b.n	8006376 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a72      	ldr	r2, [pc, #456]	; (800638c <HAL_I2C_Init+0x268>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	0c9b      	lsrs	r3, r3, #18
 80061c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4a64      	ldr	r2, [pc, #400]	; (8006380 <HAL_I2C_Init+0x25c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d802      	bhi.n	80061f8 <HAL_I2C_Init+0xd4>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	3301      	adds	r3, #1
 80061f6:	e009      	b.n	800620c <HAL_I2C_Init+0xe8>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	4a63      	ldr	r2, [pc, #396]	; (8006390 <HAL_I2C_Init+0x26c>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	099b      	lsrs	r3, r3, #6
 800620a:	3301      	adds	r3, #1
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	430b      	orrs	r3, r1
 8006212:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800621e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4956      	ldr	r1, [pc, #344]	; (8006380 <HAL_I2C_Init+0x25c>)
 8006228:	428b      	cmp	r3, r1
 800622a:	d80d      	bhi.n	8006248 <HAL_I2C_Init+0x124>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1e59      	subs	r1, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	fbb1 f3f3 	udiv	r3, r1, r3
 800623a:	3301      	adds	r3, #1
 800623c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006240:	2b04      	cmp	r3, #4
 8006242:	bf38      	it	cc
 8006244:	2304      	movcc	r3, #4
 8006246:	e04f      	b.n	80062e8 <HAL_I2C_Init+0x1c4>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d111      	bne.n	8006274 <HAL_I2C_Init+0x150>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	1e58      	subs	r0, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6859      	ldr	r1, [r3, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	440b      	add	r3, r1
 800625e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006262:	3301      	adds	r3, #1
 8006264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006268:	2b00      	cmp	r3, #0
 800626a:	bf0c      	ite	eq
 800626c:	2301      	moveq	r3, #1
 800626e:	2300      	movne	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	e012      	b.n	800629a <HAL_I2C_Init+0x176>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	1e58      	subs	r0, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6859      	ldr	r1, [r3, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	0099      	lsls	r1, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	fbb0 f3f3 	udiv	r3, r0, r3
 800628a:	3301      	adds	r3, #1
 800628c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006290:	2b00      	cmp	r3, #0
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <HAL_I2C_Init+0x17e>
 800629e:	2301      	movs	r3, #1
 80062a0:	e022      	b.n	80062e8 <HAL_I2C_Init+0x1c4>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10e      	bne.n	80062c8 <HAL_I2C_Init+0x1a4>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1e58      	subs	r0, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6859      	ldr	r1, [r3, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	440b      	add	r3, r1
 80062b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80062bc:	3301      	adds	r3, #1
 80062be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c6:	e00f      	b.n	80062e8 <HAL_I2C_Init+0x1c4>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	1e58      	subs	r0, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6859      	ldr	r1, [r3, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	0099      	lsls	r1, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	fbb0 f3f3 	udiv	r3, r0, r3
 80062de:	3301      	adds	r3, #1
 80062e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	6809      	ldr	r1, [r1, #0]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69da      	ldr	r2, [r3, #28]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6911      	ldr	r1, [r2, #16]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	68d2      	ldr	r2, [r2, #12]
 8006322:	4311      	orrs	r1, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6812      	ldr	r2, [r2, #0]
 8006328:	430b      	orrs	r3, r1
 800632a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695a      	ldr	r2, [r3, #20]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	000186a0 	.word	0x000186a0
 8006384:	001e847f 	.word	0x001e847f
 8006388:	003d08ff 	.word	0x003d08ff
 800638c:	431bde83 	.word	0x431bde83
 8006390:	10624dd3 	.word	0x10624dd3

08006394 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e021      	b.n	80063ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2224      	movs	r2, #36	; 0x24
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fa fce4 	bl	8000d8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	461a      	mov	r2, r3
 8006402:	4603      	mov	r3, r0
 8006404:	817b      	strh	r3, [r7, #10]
 8006406:	460b      	mov	r3, r1
 8006408:	813b      	strh	r3, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800640e:	f7fd fb4d 	bl	8003aac <HAL_GetTick>
 8006412:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b20      	cmp	r3, #32
 800641e:	f040 80d9 	bne.w	80065d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2319      	movs	r3, #25
 8006428:	2201      	movs	r2, #1
 800642a:	496d      	ldr	r1, [pc, #436]	; (80065e0 <HAL_I2C_Mem_Write+0x1ec>)
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fc8d 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006438:	2302      	movs	r3, #2
 800643a:	e0cc      	b.n	80065d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006442:	2b01      	cmp	r3, #1
 8006444:	d101      	bne.n	800644a <HAL_I2C_Mem_Write+0x56>
 8006446:	2302      	movs	r3, #2
 8006448:	e0c5      	b.n	80065d6 <HAL_I2C_Mem_Write+0x1e2>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b01      	cmp	r3, #1
 800645e:	d007      	beq.n	8006470 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2221      	movs	r2, #33	; 0x21
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2240      	movs	r2, #64	; 0x40
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a3a      	ldr	r2, [r7, #32]
 800649a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a4d      	ldr	r2, [pc, #308]	; (80065e4 <HAL_I2C_Mem_Write+0x1f0>)
 80064b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064b2:	88f8      	ldrh	r0, [r7, #6]
 80064b4:	893a      	ldrh	r2, [r7, #8]
 80064b6:	8979      	ldrh	r1, [r7, #10]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	4603      	mov	r3, r0
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fac4 	bl	8006a50 <I2C_RequestMemoryWrite>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d052      	beq.n	8006574 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e081      	b.n	80065d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fd0e 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00d      	beq.n	80064fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d107      	bne.n	80064fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e06b      	b.n	80065d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b04      	cmp	r3, #4
 800653a:	d11b      	bne.n	8006574 <HAL_I2C_Mem_Write+0x180>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	d017      	beq.n	8006574 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1aa      	bne.n	80064d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fcfa 	bl	8006f7a <I2C_WaitOnBTFFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00d      	beq.n	80065a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2b04      	cmp	r3, #4
 8006592:	d107      	bne.n	80065a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e016      	b.n	80065d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e000      	b.n	80065d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80065d4:	2302      	movs	r3, #2
  }
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	00100002 	.word	0x00100002
 80065e4:	ffff0000 	.word	0xffff0000

080065e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08c      	sub	sp, #48	; 0x30
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	817b      	strh	r3, [r7, #10]
 80065fa:	460b      	mov	r3, r1
 80065fc:	813b      	strh	r3, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006602:	f7fd fa53 	bl	8003aac <HAL_GetTick>
 8006606:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b20      	cmp	r3, #32
 8006612:	f040 8208 	bne.w	8006a26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	2319      	movs	r3, #25
 800661c:	2201      	movs	r2, #1
 800661e:	497b      	ldr	r1, [pc, #492]	; (800680c <HAL_I2C_Mem_Read+0x224>)
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fb93 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
 800662e:	e1fb      	b.n	8006a28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_I2C_Mem_Read+0x56>
 800663a:	2302      	movs	r3, #2
 800663c:	e1f4      	b.n	8006a28 <HAL_I2C_Mem_Read+0x440>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d007      	beq.n	8006664 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2222      	movs	r2, #34	; 0x22
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2240      	movs	r2, #64	; 0x40
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a5b      	ldr	r2, [pc, #364]	; (8006810 <HAL_I2C_Mem_Read+0x228>)
 80066a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066a6:	88f8      	ldrh	r0, [r7, #6]
 80066a8:	893a      	ldrh	r2, [r7, #8]
 80066aa:	8979      	ldrh	r1, [r7, #10]
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	4603      	mov	r3, r0
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 fa60 	bl	8006b7c <I2C_RequestMemoryRead>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e1b0      	b.n	8006a28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d113      	bne.n	80066f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ce:	2300      	movs	r3, #0
 80066d0:	623b      	str	r3, [r7, #32]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	623b      	str	r3, [r7, #32]
 80066e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	e184      	b.n	8006a00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d11b      	bne.n	8006736 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800670e:	2300      	movs	r3, #0
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e164      	b.n	8006a00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673a:	2b02      	cmp	r3, #2
 800673c:	d11b      	bne.n	8006776 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800675c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800675e:	2300      	movs	r3, #0
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	e144      	b.n	8006a00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800678c:	e138      	b.n	8006a00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006792:	2b03      	cmp	r3, #3
 8006794:	f200 80f1 	bhi.w	800697a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679c:	2b01      	cmp	r3, #1
 800679e:	d123      	bne.n	80067e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fc29 	bl	8006ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e139      	b.n	8006a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e6:	e10b      	b.n	8006a00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d14e      	bne.n	800688e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	2200      	movs	r2, #0
 80067f8:	4906      	ldr	r1, [pc, #24]	; (8006814 <HAL_I2C_Mem_Read+0x22c>)
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 faa6 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e10e      	b.n	8006a28 <HAL_I2C_Mem_Read+0x440>
 800680a:	bf00      	nop
 800680c:	00100002 	.word	0x00100002
 8006810:	ffff0000 	.word	0xffff0000
 8006814:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800688c:	e0b8      	b.n	8006a00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	2200      	movs	r2, #0
 8006896:	4966      	ldr	r1, [pc, #408]	; (8006a30 <HAL_I2C_Mem_Read+0x448>)
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fa57 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0bf      	b.n	8006a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	2200      	movs	r2, #0
 80068f2:	494f      	ldr	r1, [pc, #316]	; (8006a30 <HAL_I2C_Mem_Read+0x448>)
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fa29 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e091      	b.n	8006a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006978:	e042      	b.n	8006a00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800697a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 fb3c 	bl	8006ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e04c      	b.n	8006a28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d118      	bne.n	8006a00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f47f aec2 	bne.w	800678e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e000      	b.n	8006a28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a26:	2302      	movs	r3, #2
  }
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3728      	adds	r7, #40	; 0x28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	00010004 	.word	0x00010004

08006a34 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a42:	b2db      	uxtb	r3, r3
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	4608      	mov	r0, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	817b      	strh	r3, [r7, #10]
 8006a62:	460b      	mov	r3, r1
 8006a64:	813b      	strh	r3, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f960 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa0:	d103      	bne.n	8006aaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e05f      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006aae:	897b      	ldrh	r3, [r7, #10]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006abc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	6a3a      	ldr	r2, [r7, #32]
 8006ac2:	492d      	ldr	r1, [pc, #180]	; (8006b78 <I2C_RequestMemoryWrite+0x128>)
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f998 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e04c      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aec:	6a39      	ldr	r1, [r7, #32]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fa02 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d107      	bne.n	8006b12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e02b      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d105      	bne.n	8006b28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b1c:	893b      	ldrh	r3, [r7, #8]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	611a      	str	r2, [r3, #16]
 8006b26:	e021      	b.n	8006b6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b28:	893b      	ldrh	r3, [r7, #8]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b38:	6a39      	ldr	r1, [r7, #32]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f9dc 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d107      	bne.n	8006b5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e005      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b62:	893b      	ldrh	r3, [r7, #8]
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	00010002 	.word	0x00010002

08006b7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	4608      	mov	r0, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	817b      	strh	r3, [r7, #10]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	813b      	strh	r3, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ba4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 f8c2 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00d      	beq.n	8006bea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bdc:	d103      	bne.n	8006be6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e0aa      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bea:	897b      	ldrh	r3, [r7, #10]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	4952      	ldr	r1, [pc, #328]	; (8006d48 <I2C_RequestMemoryRead+0x1cc>)
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f8fa 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e097      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c28:	6a39      	ldr	r1, [r7, #32]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f964 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00d      	beq.n	8006c52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d107      	bne.n	8006c4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e076      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d105      	bne.n	8006c64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c58:	893b      	ldrh	r3, [r7, #8]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	611a      	str	r2, [r3, #16]
 8006c62:	e021      	b.n	8006ca8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c64:	893b      	ldrh	r3, [r7, #8]
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c74:	6a39      	ldr	r1, [r7, #32]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f93e 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00d      	beq.n	8006c9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d107      	bne.n	8006c9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e050      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c9e:	893b      	ldrh	r3, [r7, #8]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	6a39      	ldr	r1, [r7, #32]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f923 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00d      	beq.n	8006cd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d107      	bne.n	8006cd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e035      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f82b 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0a:	d103      	bne.n	8006d14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e013      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d18:	897b      	ldrh	r3, [r7, #10]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f043 0301 	orr.w	r3, r3, #1
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	4906      	ldr	r1, [pc, #24]	; (8006d48 <I2C_RequestMemoryRead+0x1cc>)
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f863 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	00010002 	.word	0x00010002

08006d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d5c:	e025      	b.n	8006daa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d64:	d021      	beq.n	8006daa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d66:	f7fc fea1 	bl	8003aac <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d302      	bcc.n	8006d7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d116      	bne.n	8006daa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e023      	b.n	8006df2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d10d      	bne.n	8006dd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	43da      	mvns	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf0c      	ite	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	2300      	movne	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	e00c      	b.n	8006dea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	43da      	mvns	r2, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	bf0c      	ite	eq
 8006de2:	2301      	moveq	r3, #1
 8006de4:	2300      	movne	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d0b6      	beq.n	8006d5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e08:	e051      	b.n	8006eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e18:	d123      	bne.n	8006e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	f043 0204 	orr.w	r2, r3, #4
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e046      	b.n	8006ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d021      	beq.n	8006eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e6a:	f7fc fe1f 	bl	8003aac <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d302      	bcc.n	8006e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d116      	bne.n	8006eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e020      	b.n	8006ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	0c1b      	lsrs	r3, r3, #16
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d10c      	bne.n	8006ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	43da      	mvns	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bf14      	ite	ne
 8006eca:	2301      	movne	r3, #1
 8006ecc:	2300      	moveq	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	e00b      	b.n	8006eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	43da      	mvns	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4013      	ands	r3, r2
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bf14      	ite	ne
 8006ee4:	2301      	movne	r3, #1
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d18d      	bne.n	8006e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f04:	e02d      	b.n	8006f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f8ce 	bl	80070a8 <I2C_IsAcknowledgeFailed>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e02d      	b.n	8006f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1c:	d021      	beq.n	8006f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1e:	f7fc fdc5 	bl	8003aac <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d302      	bcc.n	8006f34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d116      	bne.n	8006f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e007      	b.n	8006f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6c:	2b80      	cmp	r3, #128	; 0x80
 8006f6e:	d1ca      	bne.n	8006f06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f86:	e02d      	b.n	8006fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f88d 	bl	80070a8 <I2C_IsAcknowledgeFailed>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e02d      	b.n	8006ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	d021      	beq.n	8006fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa0:	f7fc fd84 	bl	8003aac <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d302      	bcc.n	8006fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d116      	bne.n	8006fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	f043 0220 	orr.w	r2, r3, #32
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e007      	b.n	8006ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d1ca      	bne.n	8006f88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007008:	e042      	b.n	8007090 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	f003 0310 	and.w	r3, r3, #16
 8007014:	2b10      	cmp	r3, #16
 8007016:	d119      	bne.n	800704c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0210 	mvn.w	r2, #16
 8007020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e029      	b.n	80070a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704c:	f7fc fd2e 	bl	8003aac <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	d302      	bcc.n	8007062 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d116      	bne.n	8007090 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	f043 0220 	orr.w	r2, r3, #32
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e007      	b.n	80070a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709a:	2b40      	cmp	r3, #64	; 0x40
 800709c:	d1b5      	bne.n	800700a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070be:	d11b      	bne.n	80070f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	f043 0204 	orr.w	r2, r3, #4
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b20      	cmp	r3, #32
 800711a:	d129      	bne.n	8007170 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2224      	movs	r2, #36	; 0x24
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0201 	bic.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0210 	bic.w	r2, r2, #16
 8007142:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	e000      	b.n	8007172 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007170:	2302      	movs	r3, #2
  }
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b20      	cmp	r3, #32
 8007196:	d12a      	bne.n	80071ee <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2224      	movs	r2, #36	; 0x24
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0201 	bic.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80071b8:	89fb      	ldrh	r3, [r7, #14]
 80071ba:	f023 030f 	bic.w	r3, r3, #15
 80071be:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	89fb      	ldrh	r3, [r7, #14]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	89fa      	ldrh	r2, [r7, #14]
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e000      	b.n	80071f0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80071ee:	2302      	movs	r3, #2
  }
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e0bf      	b.n	800738e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7f9 ff62 	bl	80010ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800723e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6999      	ldr	r1, [r3, #24]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007254:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6899      	ldr	r1, [r3, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4b4a      	ldr	r3, [pc, #296]	; (8007398 <HAL_LTDC_Init+0x19c>)
 8007270:	400b      	ands	r3, r1
 8007272:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	041b      	lsls	r3, r3, #16
 800727a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6899      	ldr	r1, [r3, #8]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68d9      	ldr	r1, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4b3e      	ldr	r3, [pc, #248]	; (8007398 <HAL_LTDC_Init+0x19c>)
 800729e:	400b      	ands	r3, r1
 80072a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	041b      	lsls	r3, r3, #16
 80072a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68d9      	ldr	r1, [r3, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1a      	ldr	r2, [r3, #32]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6919      	ldr	r1, [r3, #16]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	4b33      	ldr	r3, [pc, #204]	; (8007398 <HAL_LTDC_Init+0x19c>)
 80072cc:	400b      	ands	r3, r1
 80072ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	041b      	lsls	r3, r3, #16
 80072d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6919      	ldr	r1, [r3, #16]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6959      	ldr	r1, [r3, #20]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	4b27      	ldr	r3, [pc, #156]	; (8007398 <HAL_LTDC_Init+0x19c>)
 80072fa:	400b      	ands	r3, r1
 80072fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	041b      	lsls	r3, r3, #16
 8007304:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6959      	ldr	r1, [r3, #20]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800732c:	041b      	lsls	r3, r3, #16
 800732e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0206 	orr.w	r2, r2, #6
 800736a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	f000f800 	.word	0xf000f800

0800739c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d023      	beq.n	8007406 <HAL_LTDC_IRQHandler+0x6a>
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01e      	beq.n	8007406 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0204 	bic.w	r2, r2, #4
 80073d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2204      	movs	r2, #4
 80073de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073e6:	f043 0201 	orr.w	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2204      	movs	r2, #4
 80073f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f86f 	bl	80074e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d023      	beq.n	8007458 <HAL_LTDC_IRQHandler+0xbc>
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01e      	beq.n	8007458 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0202 	bic.w	r2, r2, #2
 8007428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2202      	movs	r2, #2
 8007430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007438:	f043 0202 	orr.w	r2, r3, #2
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2204      	movs	r2, #4
 8007446:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f846 	bl	80074e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d01b      	beq.n	800749a <HAL_LTDC_IRQHandler+0xfe>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d016      	beq.n	800749a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0201 	bic.w	r2, r2, #1
 800747a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2201      	movs	r2, #1
 8007482:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f82f 	bl	80074f8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01b      	beq.n	80074dc <HAL_LTDC_IRQHandler+0x140>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d016      	beq.n	80074dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0208 	bic.w	r2, r2, #8
 80074bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2208      	movs	r2, #8
 80074c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f818 	bl	800750c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007520:	b5b0      	push	{r4, r5, r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_LTDC_ConfigLayer+0x1a>
 8007536:	2302      	movs	r3, #2
 8007538:	e02c      	b.n	8007594 <HAL_LTDC_ConfigLayer+0x74>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2134      	movs	r1, #52	; 0x34
 8007550:	fb01 f303 	mul.w	r3, r1, r3
 8007554:	4413      	add	r3, r2
 8007556:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	4614      	mov	r4, r2
 800755e:	461d      	mov	r5, r3
 8007560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800756a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f8b9 	bl	80076ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2201      	movs	r2, #1
 8007580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bdb0      	pop	{r4, r5, r7, pc}

0800759c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_LTDC_ConfigColorKeying+0x1a>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e030      	b.n	8007618 <HAL_LTDC_ConfigColorKeying+0x7c>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	01db      	lsls	r3, r3, #7
 80075d0:	4413      	add	r3, r2
 80075d2:	3384      	adds	r3, #132	; 0x84
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	4611      	mov	r1, r2
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	01d2      	lsls	r2, r2, #7
 80075e0:	440a      	add	r2, r1
 80075e2:	3284      	adds	r2, #132	; 0x84
 80075e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80075e8:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	01db      	lsls	r3, r3, #7
 80075f4:	4413      	add	r3, r2
 80075f6:	3384      	adds	r3, #132	; 0x84
 80075f8:	461a      	mov	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2201      	movs	r2, #1
 8007604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_LTDC_EnableColorKeying+0x18>
 8007638:	2302      	movs	r3, #2
 800763a:	e026      	b.n	800768a <HAL_LTDC_EnableColorKeying+0x66>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	01db      	lsls	r3, r3, #7
 8007656:	4413      	add	r3, r2
 8007658:	3384      	adds	r3, #132	; 0x84
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	4611      	mov	r1, r2
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	01d2      	lsls	r2, r2, #7
 8007666:	440a      	add	r2, r1
 8007668:	3284      	adds	r2, #132	; 0x84
 800766a:	f043 0302 	orr.w	r3, r3, #2
 800766e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2201      	movs	r2, #1
 8007676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <HAL_LTDC_EnableDither+0x16>
 80076aa:	2302      	movs	r3, #2
 80076ac:	e016      	b.n	80076dc <HAL_LTDC_EnableDither+0x44>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2202      	movs	r2, #2
 80076ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80076be:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <HAL_LTDC_EnableDither+0x50>)
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	4a09      	ldr	r2, [pc, #36]	; (80076e8 <HAL_LTDC_EnableDither+0x50>)
 80076c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	40016800 	.word	0x40016800

080076ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b089      	sub	sp, #36	; 0x24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	0c1b      	lsrs	r3, r3, #16
 8007704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007708:	4413      	add	r3, r2
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	01db      	lsls	r3, r3, #7
 8007718:	4413      	add	r3, r2
 800771a:	3384      	adds	r3, #132	; 0x84
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	4611      	mov	r1, r2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	01d2      	lsls	r2, r2, #7
 8007728:	440a      	add	r2, r1
 800772a:	3284      	adds	r2, #132	; 0x84
 800772c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007730:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	0c1b      	lsrs	r3, r3, #16
 800773e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007742:	4413      	add	r3, r2
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4619      	mov	r1, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	01db      	lsls	r3, r3, #7
 8007750:	440b      	add	r3, r1
 8007752:	3384      	adds	r3, #132	; 0x84
 8007754:	4619      	mov	r1, r3
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4313      	orrs	r3, r2
 800775a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800776a:	4413      	add	r3, r2
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	01db      	lsls	r3, r3, #7
 800777a:	4413      	add	r3, r2
 800777c:	3384      	adds	r3, #132	; 0x84
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	4611      	mov	r1, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	01d2      	lsls	r2, r2, #7
 800778a:	440a      	add	r2, r1
 800778c:	3284      	adds	r2, #132	; 0x84
 800778e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007792:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077a2:	4413      	add	r3, r2
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4619      	mov	r1, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	01db      	lsls	r3, r3, #7
 80077b0:	440b      	add	r3, r1
 80077b2:	3384      	adds	r3, #132	; 0x84
 80077b4:	4619      	mov	r1, r3
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	01db      	lsls	r3, r3, #7
 80077c6:	4413      	add	r3, r2
 80077c8:	3384      	adds	r3, #132	; 0x84
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	4611      	mov	r1, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	01d2      	lsls	r2, r2, #7
 80077d6:	440a      	add	r2, r1
 80077d8:	3284      	adds	r2, #132	; 0x84
 80077da:	f023 0307 	bic.w	r3, r3, #7
 80077de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	01db      	lsls	r3, r3, #7
 80077ea:	4413      	add	r3, r2
 80077ec:	3384      	adds	r3, #132	; 0x84
 80077ee:	461a      	mov	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	061b      	lsls	r3, r3, #24
 8007810:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	01db      	lsls	r3, r3, #7
 800781c:	4413      	add	r3, r2
 800781e:	3384      	adds	r3, #132	; 0x84
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	01db      	lsls	r3, r3, #7
 800782c:	4413      	add	r3, r2
 800782e:	3384      	adds	r3, #132	; 0x84
 8007830:	461a      	mov	r2, r3
 8007832:	2300      	movs	r3, #0
 8007834:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800783c:	461a      	mov	r2, r3
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	431a      	orrs	r2, r3
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	431a      	orrs	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4619      	mov	r1, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	01db      	lsls	r3, r3, #7
 8007850:	440b      	add	r3, r1
 8007852:	3384      	adds	r3, #132	; 0x84
 8007854:	4619      	mov	r1, r3
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	01db      	lsls	r3, r3, #7
 8007866:	4413      	add	r3, r2
 8007868:	3384      	adds	r3, #132	; 0x84
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	6812      	ldr	r2, [r2, #0]
 8007870:	4611      	mov	r1, r2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	01d2      	lsls	r2, r2, #7
 8007876:	440a      	add	r2, r1
 8007878:	3284      	adds	r2, #132	; 0x84
 800787a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800787e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	01db      	lsls	r3, r3, #7
 800788a:	4413      	add	r3, r2
 800788c:	3384      	adds	r3, #132	; 0x84
 800788e:	461a      	mov	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	01db      	lsls	r3, r3, #7
 80078a0:	4413      	add	r3, r2
 80078a2:	3384      	adds	r3, #132	; 0x84
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	6812      	ldr	r2, [r2, #0]
 80078aa:	4611      	mov	r1, r2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	01d2      	lsls	r2, r2, #7
 80078b0:	440a      	add	r2, r1
 80078b2:	3284      	adds	r2, #132	; 0x84
 80078b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	69da      	ldr	r2, [r3, #28]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	6809      	ldr	r1, [r1, #0]
 80078ca:	4608      	mov	r0, r1
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	01c9      	lsls	r1, r1, #7
 80078d0:	4401      	add	r1, r0
 80078d2:	3184      	adds	r1, #132	; 0x84
 80078d4:	4313      	orrs	r3, r2
 80078d6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	01db      	lsls	r3, r3, #7
 80078e2:	4413      	add	r3, r2
 80078e4:	3384      	adds	r3, #132	; 0x84
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	01db      	lsls	r3, r3, #7
 80078f2:	4413      	add	r3, r2
 80078f4:	3384      	adds	r3, #132	; 0x84
 80078f6:	461a      	mov	r2, r3
 80078f8:	2300      	movs	r3, #0
 80078fa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	01db      	lsls	r3, r3, #7
 8007906:	4413      	add	r3, r2
 8007908:	3384      	adds	r3, #132	; 0x84
 800790a:	461a      	mov	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d102      	bne.n	8007920 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800791a:	2304      	movs	r3, #4
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	e01b      	b.n	8007958 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d102      	bne.n	800792e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007928:	2303      	movs	r3, #3
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	e014      	b.n	8007958 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b04      	cmp	r3, #4
 8007934:	d00b      	beq.n	800794e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800793a:	2b02      	cmp	r3, #2
 800793c:	d007      	beq.n	800794e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007942:	2b03      	cmp	r3, #3
 8007944:	d003      	beq.n	800794e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800794a:	2b07      	cmp	r3, #7
 800794c:	d102      	bne.n	8007954 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800794e:	2302      	movs	r3, #2
 8007950:	61fb      	str	r3, [r7, #28]
 8007952:	e001      	b.n	8007958 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007954:	2301      	movs	r3, #1
 8007956:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	01db      	lsls	r3, r3, #7
 8007962:	4413      	add	r3, r2
 8007964:	3384      	adds	r3, #132	; 0x84
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	4611      	mov	r1, r2
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	01d2      	lsls	r2, r2, #7
 8007972:	440a      	add	r2, r1
 8007974:	3284      	adds	r2, #132	; 0x84
 8007976:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800797a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	041a      	lsls	r2, r3, #16
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6859      	ldr	r1, [r3, #4]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	1acb      	subs	r3, r1, r3
 8007992:	69f9      	ldr	r1, [r7, #28]
 8007994:	fb01 f303 	mul.w	r3, r1, r3
 8007998:	3303      	adds	r3, #3
 800799a:	68f9      	ldr	r1, [r7, #12]
 800799c:	6809      	ldr	r1, [r1, #0]
 800799e:	4608      	mov	r0, r1
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	01c9      	lsls	r1, r1, #7
 80079a4:	4401      	add	r1, r0
 80079a6:	3184      	adds	r1, #132	; 0x84
 80079a8:	4313      	orrs	r3, r2
 80079aa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	01db      	lsls	r3, r3, #7
 80079b6:	4413      	add	r3, r2
 80079b8:	3384      	adds	r3, #132	; 0x84
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	4611      	mov	r1, r2
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	01d2      	lsls	r2, r2, #7
 80079c6:	440a      	add	r2, r1
 80079c8:	3284      	adds	r2, #132	; 0x84
 80079ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80079ce:	f023 0307 	bic.w	r3, r3, #7
 80079d2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	01db      	lsls	r3, r3, #7
 80079de:	4413      	add	r3, r2
 80079e0:	3384      	adds	r3, #132	; 0x84
 80079e2:	461a      	mov	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	01db      	lsls	r3, r3, #7
 80079f4:	4413      	add	r3, r2
 80079f6:	3384      	adds	r3, #132	; 0x84
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	6812      	ldr	r2, [r2, #0]
 80079fe:	4611      	mov	r1, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	01d2      	lsls	r2, r2, #7
 8007a04:	440a      	add	r2, r1
 8007a06:	3284      	adds	r2, #132	; 0x84
 8007a08:	f043 0301 	orr.w	r3, r3, #1
 8007a0c:	6013      	str	r3, [r2, #0]
}
 8007a0e:	bf00      	nop
 8007a10:	3724      	adds	r7, #36	; 0x24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
	...

08007a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e25b      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d075      	beq.n	8007b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a3a:	4ba3      	ldr	r3, [pc, #652]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 030c 	and.w	r3, r3, #12
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d00c      	beq.n	8007a60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a46:	4ba0      	ldr	r3, [pc, #640]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d112      	bne.n	8007a78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a52:	4b9d      	ldr	r3, [pc, #628]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a5e:	d10b      	bne.n	8007a78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a60:	4b99      	ldr	r3, [pc, #612]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d05b      	beq.n	8007b24 <HAL_RCC_OscConfig+0x108>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d157      	bne.n	8007b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e236      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a80:	d106      	bne.n	8007a90 <HAL_RCC_OscConfig+0x74>
 8007a82:	4b91      	ldr	r3, [pc, #580]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a90      	ldr	r2, [pc, #576]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	e01d      	b.n	8007acc <HAL_RCC_OscConfig+0xb0>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a98:	d10c      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x98>
 8007a9a:	4b8b      	ldr	r3, [pc, #556]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a8a      	ldr	r2, [pc, #552]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	4b88      	ldr	r3, [pc, #544]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a87      	ldr	r2, [pc, #540]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	e00b      	b.n	8007acc <HAL_RCC_OscConfig+0xb0>
 8007ab4:	4b84      	ldr	r3, [pc, #528]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a83      	ldr	r2, [pc, #524]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	4b81      	ldr	r3, [pc, #516]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a80      	ldr	r2, [pc, #512]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d013      	beq.n	8007afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad4:	f7fb ffea 	bl	8003aac <HAL_GetTick>
 8007ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007adc:	f7fb ffe6 	bl	8003aac <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b64      	cmp	r3, #100	; 0x64
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e1fb      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aee:	4b76      	ldr	r3, [pc, #472]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0f0      	beq.n	8007adc <HAL_RCC_OscConfig+0xc0>
 8007afa:	e014      	b.n	8007b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007afc:	f7fb ffd6 	bl	8003aac <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b04:	f7fb ffd2 	bl	8003aac <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b64      	cmp	r3, #100	; 0x64
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e1e7      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b16:	4b6c      	ldr	r3, [pc, #432]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f0      	bne.n	8007b04 <HAL_RCC_OscConfig+0xe8>
 8007b22:	e000      	b.n	8007b26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d063      	beq.n	8007bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b32:	4b65      	ldr	r3, [pc, #404]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 030c 	and.w	r3, r3, #12
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00b      	beq.n	8007b56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b3e:	4b62      	ldr	r3, [pc, #392]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d11c      	bne.n	8007b84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b4a:	4b5f      	ldr	r3, [pc, #380]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d116      	bne.n	8007b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b56:	4b5c      	ldr	r3, [pc, #368]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <HAL_RCC_OscConfig+0x152>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d001      	beq.n	8007b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e1bb      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b6e:	4b56      	ldr	r3, [pc, #344]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	4952      	ldr	r1, [pc, #328]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b82:	e03a      	b.n	8007bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d020      	beq.n	8007bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b8c:	4b4f      	ldr	r3, [pc, #316]	; (8007ccc <HAL_RCC_OscConfig+0x2b0>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b92:	f7fb ff8b 	bl	8003aac <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b98:	e008      	b.n	8007bac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b9a:	f7fb ff87 	bl	8003aac <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e19c      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bac:	4b46      	ldr	r3, [pc, #280]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0f0      	beq.n	8007b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb8:	4b43      	ldr	r3, [pc, #268]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	4940      	ldr	r1, [pc, #256]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	600b      	str	r3, [r1, #0]
 8007bcc:	e015      	b.n	8007bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bce:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <HAL_RCC_OscConfig+0x2b0>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd4:	f7fb ff6a 	bl	8003aac <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bdc:	f7fb ff66 	bl	8003aac <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e17b      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bee:	4b36      	ldr	r3, [pc, #216]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1f0      	bne.n	8007bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0308 	and.w	r3, r3, #8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d030      	beq.n	8007c68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d016      	beq.n	8007c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c0e:	4b30      	ldr	r3, [pc, #192]	; (8007cd0 <HAL_RCC_OscConfig+0x2b4>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c14:	f7fb ff4a 	bl	8003aac <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c1c:	f7fb ff46 	bl	8003aac <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e15b      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c2e:	4b26      	ldr	r3, [pc, #152]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f0      	beq.n	8007c1c <HAL_RCC_OscConfig+0x200>
 8007c3a:	e015      	b.n	8007c68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c3c:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <HAL_RCC_OscConfig+0x2b4>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c42:	f7fb ff33 	bl	8003aac <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c48:	e008      	b.n	8007c5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c4a:	f7fb ff2f 	bl	8003aac <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e144      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c5c:	4b1a      	ldr	r3, [pc, #104]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f0      	bne.n	8007c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80a0 	beq.w	8007db6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10f      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c86:	2300      	movs	r3, #0
 8007c88:	60bb      	str	r3, [r7, #8]
 8007c8a:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	4a0e      	ldr	r2, [pc, #56]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c94:	6413      	str	r3, [r2, #64]	; 0x40
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <HAL_RCC_OscConfig+0x2ac>)
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c9e:	60bb      	str	r3, [r7, #8]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <HAL_RCC_OscConfig+0x2b8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d121      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cb2:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <HAL_RCC_OscConfig+0x2b8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a07      	ldr	r2, [pc, #28]	; (8007cd4 <HAL_RCC_OscConfig+0x2b8>)
 8007cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cbe:	f7fb fef5 	bl	8003aac <HAL_GetTick>
 8007cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cc4:	e011      	b.n	8007cea <HAL_RCC_OscConfig+0x2ce>
 8007cc6:	bf00      	nop
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	42470000 	.word	0x42470000
 8007cd0:	42470e80 	.word	0x42470e80
 8007cd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cd8:	f7fb fee8 	bl	8003aac <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d901      	bls.n	8007cea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e0fd      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cea:	4b81      	ldr	r3, [pc, #516]	; (8007ef0 <HAL_RCC_OscConfig+0x4d4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0f0      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d106      	bne.n	8007d0c <HAL_RCC_OscConfig+0x2f0>
 8007cfe:	4b7d      	ldr	r3, [pc, #500]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d02:	4a7c      	ldr	r2, [pc, #496]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	6713      	str	r3, [r2, #112]	; 0x70
 8007d0a:	e01c      	b.n	8007d46 <HAL_RCC_OscConfig+0x32a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	2b05      	cmp	r3, #5
 8007d12:	d10c      	bne.n	8007d2e <HAL_RCC_OscConfig+0x312>
 8007d14:	4b77      	ldr	r3, [pc, #476]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d18:	4a76      	ldr	r2, [pc, #472]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d1a:	f043 0304 	orr.w	r3, r3, #4
 8007d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d20:	4b74      	ldr	r3, [pc, #464]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d24:	4a73      	ldr	r2, [pc, #460]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d26:	f043 0301 	orr.w	r3, r3, #1
 8007d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d2c:	e00b      	b.n	8007d46 <HAL_RCC_OscConfig+0x32a>
 8007d2e:	4b71      	ldr	r3, [pc, #452]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	4a70      	ldr	r2, [pc, #448]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d34:	f023 0301 	bic.w	r3, r3, #1
 8007d38:	6713      	str	r3, [r2, #112]	; 0x70
 8007d3a:	4b6e      	ldr	r3, [pc, #440]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	4a6d      	ldr	r2, [pc, #436]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d40:	f023 0304 	bic.w	r3, r3, #4
 8007d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d015      	beq.n	8007d7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d4e:	f7fb fead 	bl	8003aac <HAL_GetTick>
 8007d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d54:	e00a      	b.n	8007d6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d56:	f7fb fea9 	bl	8003aac <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d901      	bls.n	8007d6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e0bc      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d6c:	4b61      	ldr	r3, [pc, #388]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0ee      	beq.n	8007d56 <HAL_RCC_OscConfig+0x33a>
 8007d78:	e014      	b.n	8007da4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d7a:	f7fb fe97 	bl	8003aac <HAL_GetTick>
 8007d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d80:	e00a      	b.n	8007d98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d82:	f7fb fe93 	bl	8003aac <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e0a6      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d98:	4b56      	ldr	r3, [pc, #344]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1ee      	bne.n	8007d82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d105      	bne.n	8007db6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007daa:	4b52      	ldr	r3, [pc, #328]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	4a51      	ldr	r2, [pc, #324]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 8092 	beq.w	8007ee4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dc0:	4b4c      	ldr	r3, [pc, #304]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 030c 	and.w	r3, r3, #12
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d05c      	beq.n	8007e86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d141      	bne.n	8007e58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dd4:	4b48      	ldr	r3, [pc, #288]	; (8007ef8 <HAL_RCC_OscConfig+0x4dc>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dda:	f7fb fe67 	bl	8003aac <HAL_GetTick>
 8007dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007de0:	e008      	b.n	8007df4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007de2:	f7fb fe63 	bl	8003aac <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e078      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007df4:	4b3f      	ldr	r3, [pc, #252]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1f0      	bne.n	8007de2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	019b      	lsls	r3, r3, #6
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e16:	085b      	lsrs	r3, r3, #1
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	041b      	lsls	r3, r3, #16
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	061b      	lsls	r3, r3, #24
 8007e24:	4933      	ldr	r1, [pc, #204]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e2a:	4b33      	ldr	r3, [pc, #204]	; (8007ef8 <HAL_RCC_OscConfig+0x4dc>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e30:	f7fb fe3c 	bl	8003aac <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e38:	f7fb fe38 	bl	8003aac <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e04d      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e4a:	4b2a      	ldr	r3, [pc, #168]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0f0      	beq.n	8007e38 <HAL_RCC_OscConfig+0x41c>
 8007e56:	e045      	b.n	8007ee4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e58:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <HAL_RCC_OscConfig+0x4dc>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e5e:	f7fb fe25 	bl	8003aac <HAL_GetTick>
 8007e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e64:	e008      	b.n	8007e78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e66:	f7fb fe21 	bl	8003aac <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d901      	bls.n	8007e78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e036      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e78:	4b1e      	ldr	r3, [pc, #120]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f0      	bne.n	8007e66 <HAL_RCC_OscConfig+0x44a>
 8007e84:	e02e      	b.n	8007ee4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e029      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e92:	4b18      	ldr	r3, [pc, #96]	; (8007ef4 <HAL_RCC_OscConfig+0x4d8>)
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d11c      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d115      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007eba:	4013      	ands	r3, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d10d      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d106      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d001      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	40007000 	.word	0x40007000
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	42470060 	.word	0x42470060

08007efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e0cc      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f10:	4b68      	ldr	r3, [pc, #416]	; (80080b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d90c      	bls.n	8007f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f1e:	4b65      	ldr	r3, [pc, #404]	; (80080b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f26:	4b63      	ldr	r3, [pc, #396]	; (80080b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e0b8      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d020      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f50:	4b59      	ldr	r3, [pc, #356]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	4a58      	ldr	r2, [pc, #352]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0308 	and.w	r3, r3, #8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f68:	4b53      	ldr	r3, [pc, #332]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	4a52      	ldr	r2, [pc, #328]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f74:	4b50      	ldr	r3, [pc, #320]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	494d      	ldr	r1, [pc, #308]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d044      	beq.n	800801c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d107      	bne.n	8007faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f9a:	4b47      	ldr	r3, [pc, #284]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d119      	bne.n	8007fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e07f      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d003      	beq.n	8007fba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d107      	bne.n	8007fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fba:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e06f      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fca:	4b3b      	ldr	r3, [pc, #236]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e067      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fda:	4b37      	ldr	r3, [pc, #220]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f023 0203 	bic.w	r2, r3, #3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4934      	ldr	r1, [pc, #208]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fec:	f7fb fd5e 	bl	8003aac <HAL_GetTick>
 8007ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ff2:	e00a      	b.n	800800a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ff4:	f7fb fd5a 	bl	8003aac <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e04f      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800800a:	4b2b      	ldr	r3, [pc, #172]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f003 020c 	and.w	r2, r3, #12
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	429a      	cmp	r2, r3
 800801a:	d1eb      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800801c:	4b25      	ldr	r3, [pc, #148]	; (80080b4 <HAL_RCC_ClockConfig+0x1b8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 030f 	and.w	r3, r3, #15
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d20c      	bcs.n	8008044 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800802a:	4b22      	ldr	r3, [pc, #136]	; (80080b4 <HAL_RCC_ClockConfig+0x1b8>)
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008032:	4b20      	ldr	r3, [pc, #128]	; (80080b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d001      	beq.n	8008044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e032      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d008      	beq.n	8008062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008050:	4b19      	ldr	r3, [pc, #100]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	4916      	ldr	r1, [pc, #88]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 800805e:	4313      	orrs	r3, r2
 8008060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	490e      	ldr	r1, [pc, #56]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 800807e:	4313      	orrs	r3, r2
 8008080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008082:	f000 f821 	bl	80080c8 <HAL_RCC_GetSysClockFreq>
 8008086:	4601      	mov	r1, r0
 8008088:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <HAL_RCC_ClockConfig+0x1bc>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	091b      	lsrs	r3, r3, #4
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	4a0a      	ldr	r2, [pc, #40]	; (80080bc <HAL_RCC_ClockConfig+0x1c0>)
 8008094:	5cd3      	ldrb	r3, [r2, r3]
 8008096:	fa21 f303 	lsr.w	r3, r1, r3
 800809a:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <HAL_RCC_ClockConfig+0x1c4>)
 800809c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800809e:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <HAL_RCC_ClockConfig+0x1c8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7f9 fc06 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	40023c00 	.word	0x40023c00
 80080b8:	40023800 	.word	0x40023800
 80080bc:	0800bf10 	.word	0x0800bf10
 80080c0:	20000000 	.word	0x20000000
 80080c4:	20000080 	.word	0x20000080

080080c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	607b      	str	r3, [r7, #4]
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	2300      	movs	r3, #0
 80080d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80080da:	2300      	movs	r3, #0
 80080dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080de:	4b63      	ldr	r3, [pc, #396]	; (800826c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 030c 	and.w	r3, r3, #12
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d007      	beq.n	80080fa <HAL_RCC_GetSysClockFreq+0x32>
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d008      	beq.n	8008100 <HAL_RCC_GetSysClockFreq+0x38>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 80b4 	bne.w	800825c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080f4:	4b5e      	ldr	r3, [pc, #376]	; (8008270 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80080f6:	60bb      	str	r3, [r7, #8]
       break;
 80080f8:	e0b3      	b.n	8008262 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080fa:	4b5e      	ldr	r3, [pc, #376]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80080fc:	60bb      	str	r3, [r7, #8]
      break;
 80080fe:	e0b0      	b.n	8008262 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008100:	4b5a      	ldr	r3, [pc, #360]	; (800826c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008108:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800810a:	4b58      	ldr	r3, [pc, #352]	; (800826c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d04a      	beq.n	80081ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008116:	4b55      	ldr	r3, [pc, #340]	; (800826c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	099b      	lsrs	r3, r3, #6
 800811c:	f04f 0400 	mov.w	r4, #0
 8008120:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008124:	f04f 0200 	mov.w	r2, #0
 8008128:	ea03 0501 	and.w	r5, r3, r1
 800812c:	ea04 0602 	and.w	r6, r4, r2
 8008130:	4629      	mov	r1, r5
 8008132:	4632      	mov	r2, r6
 8008134:	f04f 0300 	mov.w	r3, #0
 8008138:	f04f 0400 	mov.w	r4, #0
 800813c:	0154      	lsls	r4, r2, #5
 800813e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008142:	014b      	lsls	r3, r1, #5
 8008144:	4619      	mov	r1, r3
 8008146:	4622      	mov	r2, r4
 8008148:	1b49      	subs	r1, r1, r5
 800814a:	eb62 0206 	sbc.w	r2, r2, r6
 800814e:	f04f 0300 	mov.w	r3, #0
 8008152:	f04f 0400 	mov.w	r4, #0
 8008156:	0194      	lsls	r4, r2, #6
 8008158:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800815c:	018b      	lsls	r3, r1, #6
 800815e:	1a5b      	subs	r3, r3, r1
 8008160:	eb64 0402 	sbc.w	r4, r4, r2
 8008164:	f04f 0100 	mov.w	r1, #0
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	00e2      	lsls	r2, r4, #3
 800816e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008172:	00d9      	lsls	r1, r3, #3
 8008174:	460b      	mov	r3, r1
 8008176:	4614      	mov	r4, r2
 8008178:	195b      	adds	r3, r3, r5
 800817a:	eb44 0406 	adc.w	r4, r4, r6
 800817e:	f04f 0100 	mov.w	r1, #0
 8008182:	f04f 0200 	mov.w	r2, #0
 8008186:	0262      	lsls	r2, r4, #9
 8008188:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800818c:	0259      	lsls	r1, r3, #9
 800818e:	460b      	mov	r3, r1
 8008190:	4614      	mov	r4, r2
 8008192:	4618      	mov	r0, r3
 8008194:	4621      	mov	r1, r4
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f04f 0400 	mov.w	r4, #0
 800819c:	461a      	mov	r2, r3
 800819e:	4623      	mov	r3, r4
 80081a0:	f7f8 f826 	bl	80001f0 <__aeabi_uldivmod>
 80081a4:	4603      	mov	r3, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e049      	b.n	8008240 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081ac:	4b2f      	ldr	r3, [pc, #188]	; (800826c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	099b      	lsrs	r3, r3, #6
 80081b2:	f04f 0400 	mov.w	r4, #0
 80081b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	ea03 0501 	and.w	r5, r3, r1
 80081c2:	ea04 0602 	and.w	r6, r4, r2
 80081c6:	4629      	mov	r1, r5
 80081c8:	4632      	mov	r2, r6
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	f04f 0400 	mov.w	r4, #0
 80081d2:	0154      	lsls	r4, r2, #5
 80081d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80081d8:	014b      	lsls	r3, r1, #5
 80081da:	4619      	mov	r1, r3
 80081dc:	4622      	mov	r2, r4
 80081de:	1b49      	subs	r1, r1, r5
 80081e0:	eb62 0206 	sbc.w	r2, r2, r6
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	f04f 0400 	mov.w	r4, #0
 80081ec:	0194      	lsls	r4, r2, #6
 80081ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80081f2:	018b      	lsls	r3, r1, #6
 80081f4:	1a5b      	subs	r3, r3, r1
 80081f6:	eb64 0402 	sbc.w	r4, r4, r2
 80081fa:	f04f 0100 	mov.w	r1, #0
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	00e2      	lsls	r2, r4, #3
 8008204:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008208:	00d9      	lsls	r1, r3, #3
 800820a:	460b      	mov	r3, r1
 800820c:	4614      	mov	r4, r2
 800820e:	195b      	adds	r3, r3, r5
 8008210:	eb44 0406 	adc.w	r4, r4, r6
 8008214:	f04f 0100 	mov.w	r1, #0
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	02a2      	lsls	r2, r4, #10
 800821e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008222:	0299      	lsls	r1, r3, #10
 8008224:	460b      	mov	r3, r1
 8008226:	4614      	mov	r4, r2
 8008228:	4618      	mov	r0, r3
 800822a:	4621      	mov	r1, r4
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f04f 0400 	mov.w	r4, #0
 8008232:	461a      	mov	r2, r3
 8008234:	4623      	mov	r3, r4
 8008236:	f7f7 ffdb 	bl	80001f0 <__aeabi_uldivmod>
 800823a:	4603      	mov	r3, r0
 800823c:	460c      	mov	r4, r1
 800823e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008240:	4b0a      	ldr	r3, [pc, #40]	; (800826c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	0c1b      	lsrs	r3, r3, #16
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	3301      	adds	r3, #1
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	fbb2 f3f3 	udiv	r3, r2, r3
 8008258:	60bb      	str	r3, [r7, #8]
      break;
 800825a:	e002      	b.n	8008262 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800825c:	4b04      	ldr	r3, [pc, #16]	; (8008270 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800825e:	60bb      	str	r3, [r7, #8]
      break;
 8008260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008262:	68bb      	ldr	r3, [r7, #8]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826c:	40023800 	.word	0x40023800
 8008270:	00f42400 	.word	0x00f42400
 8008274:	007a1200 	.word	0x007a1200

08008278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800827c:	4b03      	ldr	r3, [pc, #12]	; (800828c <HAL_RCC_GetHCLKFreq+0x14>)
 800827e:	681b      	ldr	r3, [r3, #0]
}
 8008280:	4618      	mov	r0, r3
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000000 	.word	0x20000000

08008290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008294:	f7ff fff0 	bl	8008278 <HAL_RCC_GetHCLKFreq>
 8008298:	4601      	mov	r1, r0
 800829a:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	0a9b      	lsrs	r3, r3, #10
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	4a03      	ldr	r2, [pc, #12]	; (80082b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082a6:	5cd3      	ldrb	r3, [r2, r3]
 80082a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	40023800 	.word	0x40023800
 80082b4:	0800bf20 	.word	0x0800bf20

080082b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082bc:	f7ff ffdc 	bl	8008278 <HAL_RCC_GetHCLKFreq>
 80082c0:	4601      	mov	r1, r0
 80082c2:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	0b5b      	lsrs	r3, r3, #13
 80082c8:	f003 0307 	and.w	r3, r3, #7
 80082cc:	4a03      	ldr	r2, [pc, #12]	; (80082dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80082ce:	5cd3      	ldrb	r3, [r2, r3]
 80082d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	40023800 	.word	0x40023800
 80082dc:	0800bf20 	.word	0x0800bf20

080082e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	220f      	movs	r2, #15
 80082ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082f0:	4b12      	ldr	r3, [pc, #72]	; (800833c <HAL_RCC_GetClockConfig+0x5c>)
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f003 0203 	and.w	r2, r3, #3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80082fc:	4b0f      	ldr	r3, [pc, #60]	; (800833c <HAL_RCC_GetClockConfig+0x5c>)
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008308:	4b0c      	ldr	r3, [pc, #48]	; (800833c <HAL_RCC_GetClockConfig+0x5c>)
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <HAL_RCC_GetClockConfig+0x5c>)
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	08db      	lsrs	r3, r3, #3
 800831a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008322:	4b07      	ldr	r3, [pc, #28]	; (8008340 <HAL_RCC_GetClockConfig+0x60>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 020f 	and.w	r2, r3, #15
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	601a      	str	r2, [r3, #0]
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40023800 	.word	0x40023800
 8008340:	40023c00 	.word	0x40023c00

08008344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10b      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008368:	2b00      	cmp	r3, #0
 800836a:	d105      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008374:	2b00      	cmp	r3, #0
 8008376:	d075      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008378:	4bad      	ldr	r3, [pc, #692]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800837e:	f7fb fb95 	bl	8003aac <HAL_GetTick>
 8008382:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008384:	e008      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008386:	f7fb fb91 	bl	8003aac <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e18b      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008398:	4ba6      	ldr	r3, [pc, #664]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1f0      	bne.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d009      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	019a      	lsls	r2, r3, #6
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	071b      	lsls	r3, r3, #28
 80083bc:	499d      	ldr	r1, [pc, #628]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01f      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083d0:	4b98      	ldr	r3, [pc, #608]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d6:	0f1b      	lsrs	r3, r3, #28
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	019a      	lsls	r2, r3, #6
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	061b      	lsls	r3, r3, #24
 80083ea:	431a      	orrs	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	071b      	lsls	r3, r3, #28
 80083f0:	4990      	ldr	r1, [pc, #576]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083f8:	4b8e      	ldr	r3, [pc, #568]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083fe:	f023 021f 	bic.w	r2, r3, #31
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	3b01      	subs	r3, #1
 8008408:	498a      	ldr	r1, [pc, #552]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00d      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	019a      	lsls	r2, r3, #6
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	061b      	lsls	r3, r3, #24
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	071b      	lsls	r3, r3, #28
 8008430:	4980      	ldr	r1, [pc, #512]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008432:	4313      	orrs	r3, r2
 8008434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008438:	4b7d      	ldr	r3, [pc, #500]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800843a:	2201      	movs	r2, #1
 800843c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800843e:	f7fb fb35 	bl	8003aac <HAL_GetTick>
 8008442:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008444:	e008      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008446:	f7fb fb31 	bl	8003aac <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	2b02      	cmp	r3, #2
 8008452:	d901      	bls.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e12b      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008458:	4b76      	ldr	r3, [pc, #472]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0f0      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d105      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008478:	2b00      	cmp	r3, #0
 800847a:	d079      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800847c:	4b6e      	ldr	r3, [pc, #440]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008482:	f7fb fb13 	bl	8003aac <HAL_GetTick>
 8008486:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008488:	e008      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800848a:	f7fb fb0f 	bl	8003aac <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d901      	bls.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e109      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800849c:	4b65      	ldr	r3, [pc, #404]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084a8:	d0ef      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d020      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084b6:	4b5f      	ldr	r3, [pc, #380]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084bc:	0f1b      	lsrs	r3, r3, #28
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	019a      	lsls	r2, r3, #6
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	061b      	lsls	r3, r3, #24
 80084d0:	431a      	orrs	r2, r3
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	071b      	lsls	r3, r3, #28
 80084d6:	4957      	ldr	r1, [pc, #348]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80084de:	4b55      	ldr	r3, [pc, #340]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	021b      	lsls	r3, r3, #8
 80084f0:	4950      	ldr	r1, [pc, #320]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0308 	and.w	r3, r3, #8
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01e      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008504:	4b4b      	ldr	r3, [pc, #300]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800850a:	0e1b      	lsrs	r3, r3, #24
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	019a      	lsls	r2, r3, #6
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	061b      	lsls	r3, r3, #24
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	071b      	lsls	r3, r3, #28
 8008524:	4943      	ldr	r1, [pc, #268]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008526:	4313      	orrs	r3, r2
 8008528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800852c:	4b41      	ldr	r3, [pc, #260]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800852e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	493e      	ldr	r1, [pc, #248]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800853c:	4313      	orrs	r3, r2
 800853e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008542:	4b3d      	ldr	r3, [pc, #244]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008544:	2201      	movs	r2, #1
 8008546:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008548:	f7fb fab0 	bl	8003aac <HAL_GetTick>
 800854c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800854e:	e008      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008550:	f7fb faac 	bl	8003aac <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d901      	bls.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e0a6      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008562:	4b34      	ldr	r3, [pc, #208]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800856a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800856e:	d1ef      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 808d 	beq.w	8008698 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	4b2c      	ldr	r3, [pc, #176]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	4a2b      	ldr	r2, [pc, #172]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800858c:	6413      	str	r3, [r2, #64]	; 0x40
 800858e:	4b29      	ldr	r3, [pc, #164]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800859a:	4b28      	ldr	r3, [pc, #160]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a27      	ldr	r2, [pc, #156]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80085a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80085a6:	f7fb fa81 	bl	8003aac <HAL_GetTick>
 80085aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80085ac:	e008      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80085ae:	f7fb fa7d 	bl	8003aac <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d901      	bls.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e077      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80085c0:	4b1e      	ldr	r3, [pc, #120]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0f0      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085cc:	4b19      	ldr	r3, [pc, #100]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d039      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d032      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085ea:	4b12      	ldr	r3, [pc, #72]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085f4:	4b12      	ldr	r3, [pc, #72]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085fa:	4b11      	ldr	r3, [pc, #68]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008600:	4a0c      	ldr	r2, [pc, #48]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008606:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b01      	cmp	r3, #1
 8008610:	d11e      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008612:	f7fb fa4b 	bl	8003aac <HAL_GetTick>
 8008616:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008618:	e014      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800861a:	f7fb fa47 	bl	8003aac <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	f241 3288 	movw	r2, #5000	; 0x1388
 8008628:	4293      	cmp	r3, r2
 800862a:	d90b      	bls.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e03f      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008630:	42470068 	.word	0x42470068
 8008634:	40023800 	.word	0x40023800
 8008638:	42470070 	.word	0x42470070
 800863c:	40007000 	.word	0x40007000
 8008640:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008644:	4b1c      	ldr	r3, [pc, #112]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0e4      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800865c:	d10d      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800865e:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800866e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008672:	4911      	ldr	r1, [pc, #68]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008674:	4313      	orrs	r3, r2
 8008676:	608b      	str	r3, [r1, #8]
 8008678:	e005      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	4a0e      	ldr	r2, [pc, #56]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008680:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008684:	6093      	str	r3, [r2, #8]
 8008686:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008688:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008692:	4909      	ldr	r1, [pc, #36]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008694:	4313      	orrs	r3, r2
 8008696:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80086aa:	4b04      	ldr	r3, [pc, #16]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80086ac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40023800 	.word	0x40023800
 80086bc:	424711e0 	.word	0x424711e0

080086c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e025      	b.n	8008720 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d106      	bne.n	80086ee <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7f8 f97f 	bl	80009ec <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2202      	movs	r2, #2
 80086f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3304      	adds	r3, #4
 80086fe:	4619      	mov	r1, r3
 8008700:	4610      	mov	r0, r2
 8008702:	f001 fdb1 	bl	800a268 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	461a      	mov	r2, r3
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	f001 fe1c 	bl	800a34e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d101      	bne.n	8008744 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008740:	2302      	movs	r3, #2
 8008742:	e018      	b.n	8008776 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	4618      	mov	r0, r3
 8008756:	f001 fe79 	bl	800a44c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b02      	cmp	r3, #2
 8008760:	d104      	bne.n	800876c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2205      	movs	r2, #5
 8008766:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800876a:	e003      	b.n	8008774 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d101      	bne.n	8008798 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008794:	2302      	movs	r3, #2
 8008796:	e00e      	b.n	80087b6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fe8c 	bl	800a4c4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e056      	b.n	800887e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d106      	bne.n	80087f0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7f8 ffd0 	bl	8001790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008806:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	431a      	orrs	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	431a      	orrs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	ea42 0103 	orr.w	r1, r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	0c1b      	lsrs	r3, r3, #16
 800884e:	f003 0104 	and.w	r1, r3, #4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69da      	ldr	r2, [r3, #28]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800886c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e01a      	b.n	80088ce <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7f8 ffb5 	bl	8001820 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b088      	sub	sp, #32
 80088da:	af00      	add	r7, sp, #0
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	603b      	str	r3, [r7, #0]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_SPI_Transmit+0x22>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e11e      	b.n	8008b36 <HAL_SPI_Transmit+0x260>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008900:	f7fb f8d4 	bl	8003aac <HAL_GetTick>
 8008904:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b01      	cmp	r3, #1
 8008914:	d002      	beq.n	800891c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008916:	2302      	movs	r3, #2
 8008918:	77fb      	strb	r3, [r7, #31]
    goto error;
 800891a:	e103      	b.n	8008b24 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <HAL_SPI_Transmit+0x52>
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d102      	bne.n	800892e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800892c:	e0fa      	b.n	8008b24 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2203      	movs	r2, #3
 8008932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	88fa      	ldrh	r2, [r7, #6]
 8008946:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	88fa      	ldrh	r2, [r7, #6]
 800894c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008974:	d107      	bne.n	8008986 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008984:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008990:	2b40      	cmp	r3, #64	; 0x40
 8008992:	d007      	beq.n	80089a4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ac:	d14b      	bne.n	8008a46 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <HAL_SPI_Transmit+0xe6>
 80089b6:	8afb      	ldrh	r3, [r7, #22]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d13e      	bne.n	8008a3a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c0:	881a      	ldrh	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089cc:	1c9a      	adds	r2, r3, #2
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3b01      	subs	r3, #1
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089e0:	e02b      	b.n	8008a3a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d112      	bne.n	8008a16 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f4:	881a      	ldrh	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a00:	1c9a      	adds	r2, r3, #2
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a14:	e011      	b.n	8008a3a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a16:	f7fb f849 	bl	8003aac <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d803      	bhi.n	8008a2e <HAL_SPI_Transmit+0x158>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d102      	bne.n	8008a34 <HAL_SPI_Transmit+0x15e>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a38:	e074      	b.n	8008b24 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1ce      	bne.n	80089e2 <HAL_SPI_Transmit+0x10c>
 8008a44:	e04c      	b.n	8008ae0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_SPI_Transmit+0x17e>
 8008a4e:	8afb      	ldrh	r3, [r7, #22]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d140      	bne.n	8008ad6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	330c      	adds	r3, #12
 8008a5e:	7812      	ldrb	r2, [r2, #0]
 8008a60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a7a:	e02c      	b.n	8008ad6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d113      	bne.n	8008ab2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ab0:	e011      	b.n	8008ad6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ab2:	f7fa fffb 	bl	8003aac <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d803      	bhi.n	8008aca <HAL_SPI_Transmit+0x1f4>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac8:	d102      	bne.n	8008ad0 <HAL_SPI_Transmit+0x1fa>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ad4:	e026      	b.n	8008b24 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1cd      	bne.n	8008a7c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fbb3 	bl	8009250 <SPI_EndRxTxTransaction>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2220      	movs	r2, #32
 8008af4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	613b      	str	r3, [r7, #16]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	77fb      	strb	r3, [r7, #31]
 8008b20:	e000      	b.n	8008b24 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008b22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3720      	adds	r7, #32
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b088      	sub	sp, #32
 8008b42:	af02      	add	r7, sp, #8
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	603b      	str	r3, [r7, #0]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b5a:	d112      	bne.n	8008b82 <HAL_SPI_Receive+0x44>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10e      	bne.n	8008b82 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2204      	movs	r2, #4
 8008b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b6c:	88fa      	ldrh	r2, [r7, #6]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	4613      	mov	r3, r2
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f8e9 	bl	8008d50 <HAL_SPI_TransmitReceive>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	e0e2      	b.n	8008d48 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_SPI_Receive+0x52>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e0db      	b.n	8008d48 <HAL_SPI_Receive+0x20a>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b98:	f7fa ff88 	bl	8003aac <HAL_GetTick>
 8008b9c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d002      	beq.n	8008bb0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008baa:	2302      	movs	r3, #2
 8008bac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bae:	e0c2      	b.n	8008d36 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_SPI_Receive+0x7e>
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bc0:	e0b9      	b.n	8008d36 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	88fa      	ldrh	r2, [r7, #6]
 8008bda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	88fa      	ldrh	r2, [r7, #6]
 8008be0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c08:	d107      	bne.n	8008c1a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c24:	2b40      	cmp	r3, #64	; 0x40
 8008c26:	d007      	beq.n	8008c38 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d162      	bne.n	8008d06 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c40:	e02e      	b.n	8008ca0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d115      	bne.n	8008c7c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f103 020c 	add.w	r2, r3, #12
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	7812      	ldrb	r2, [r2, #0]
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	3b01      	subs	r3, #1
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c7a:	e011      	b.n	8008ca0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c7c:	f7fa ff16 	bl	8003aac <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d803      	bhi.n	8008c94 <HAL_SPI_Receive+0x156>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	d102      	bne.n	8008c9a <HAL_SPI_Receive+0x15c>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c9e:	e04a      	b.n	8008d36 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1cb      	bne.n	8008c42 <HAL_SPI_Receive+0x104>
 8008caa:	e031      	b.n	8008d10 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d113      	bne.n	8008ce2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	b292      	uxth	r2, r2
 8008cc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	1c9a      	adds	r2, r3, #2
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ce0:	e011      	b.n	8008d06 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ce2:	f7fa fee3 	bl	8003aac <HAL_GetTick>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d803      	bhi.n	8008cfa <HAL_SPI_Receive+0x1bc>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf8:	d102      	bne.n	8008d00 <HAL_SPI_Receive+0x1c2>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d04:	e017      	b.n	8008d36 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1cd      	bne.n	8008cac <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 fa35 	bl	8009184 <SPI_EndRxTransaction>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2220      	movs	r2, #32
 8008d24:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	75fb      	strb	r3, [r7, #23]
 8008d32:	e000      	b.n	8008d36 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008d34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08c      	sub	sp, #48	; 0x30
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d101      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x26>
 8008d72:	2302      	movs	r3, #2
 8008d74:	e18a      	b.n	800908c <HAL_SPI_TransmitReceive+0x33c>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d7e:	f7fa fe95 	bl	8003aac <HAL_GetTick>
 8008d82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d94:	887b      	ldrh	r3, [r7, #2]
 8008d96:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d00f      	beq.n	8008dc0 <HAL_SPI_TransmitReceive+0x70>
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008da6:	d107      	bne.n	8008db8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <HAL_SPI_TransmitReceive+0x68>
 8008db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d003      	beq.n	8008dc0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008db8:	2302      	movs	r3, #2
 8008dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008dbe:	e15b      	b.n	8009078 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x82>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x82>
 8008dcc:	887b      	ldrh	r3, [r7, #2]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d103      	bne.n	8008dda <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008dd8:	e14e      	b.n	8009078 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d003      	beq.n	8008dee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2205      	movs	r2, #5
 8008dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	887a      	ldrh	r2, [r7, #2]
 8008dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	887a      	ldrh	r2, [r7, #2]
 8008e04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	887a      	ldrh	r2, [r7, #2]
 8008e10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	887a      	ldrh	r2, [r7, #2]
 8008e16:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2e:	2b40      	cmp	r3, #64	; 0x40
 8008e30:	d007      	beq.n	8008e42 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e4a:	d178      	bne.n	8008f3e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <HAL_SPI_TransmitReceive+0x10a>
 8008e54:	8b7b      	ldrh	r3, [r7, #26]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d166      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5e:	881a      	ldrh	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6a:	1c9a      	adds	r2, r3, #2
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e7e:	e053      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d11b      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x176>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d016      	beq.n	8008ec6 <HAL_SPI_TransmitReceive+0x176>
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d113      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	881a      	ldrh	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	1c9a      	adds	r2, r3, #2
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d119      	bne.n	8008f08 <HAL_SPI_TransmitReceive+0x1b8>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d014      	beq.n	8008f08 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68da      	ldr	r2, [r3, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	b292      	uxth	r2, r2
 8008eea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef0:	1c9a      	adds	r2, r3, #2
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f04:	2301      	movs	r3, #1
 8008f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f08:	f7fa fdd0 	bl	8003aac <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d807      	bhi.n	8008f28 <HAL_SPI_TransmitReceive+0x1d8>
 8008f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d003      	beq.n	8008f28 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f26:	e0a7      	b.n	8009078 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1a6      	bne.n	8008e80 <HAL_SPI_TransmitReceive+0x130>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1a1      	bne.n	8008e80 <HAL_SPI_TransmitReceive+0x130>
 8008f3c:	e07c      	b.n	8009038 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <HAL_SPI_TransmitReceive+0x1fc>
 8008f46:	8b7b      	ldrh	r3, [r7, #26]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d16b      	bne.n	8009024 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	330c      	adds	r3, #12
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f72:	e057      	b.n	8009024 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f003 0302 	and.w	r3, r3, #2
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d11c      	bne.n	8008fbc <HAL_SPI_TransmitReceive+0x26c>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d017      	beq.n	8008fbc <HAL_SPI_TransmitReceive+0x26c>
 8008f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d114      	bne.n	8008fbc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	7812      	ldrb	r2, [r2, #0]
 8008f9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d119      	bne.n	8008ffe <HAL_SPI_TransmitReceive+0x2ae>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d014      	beq.n	8008ffe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ffe:	f7fa fd55 	bl	8003aac <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800900a:	429a      	cmp	r2, r3
 800900c:	d803      	bhi.n	8009016 <HAL_SPI_TransmitReceive+0x2c6>
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009014:	d102      	bne.n	800901c <HAL_SPI_TransmitReceive+0x2cc>
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009022:	e029      	b.n	8009078 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1a2      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0x224>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009032:	b29b      	uxth	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d19d      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 f907 	bl	8009250 <SPI_EndRxTxTransaction>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d006      	beq.n	8009056 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2220      	movs	r2, #32
 8009052:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009054:	e010      	b.n	8009078 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10b      	bne.n	8009076 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800905e:	2300      	movs	r3, #0
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	617b      	str	r3, [r7, #20]
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	e000      	b.n	8009078 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009076:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009088:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800908c:	4618      	mov	r0, r3
 800908e:	3730      	adds	r7, #48	; 0x30
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090a2:	b2db      	uxtb	r3, r3
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4613      	mov	r3, r2
 80090be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090c0:	e04c      	b.n	800915c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d048      	beq.n	800915c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80090ca:	f7fa fcef 	bl	8003aac <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d902      	bls.n	80090e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d13d      	bne.n	800915c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090f8:	d111      	bne.n	800911e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009102:	d004      	beq.n	800910e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800910c:	d107      	bne.n	800911e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800911c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009126:	d10f      	bne.n	8009148 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009146:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e00f      	b.n	800917c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	4013      	ands	r3, r2
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	429a      	cmp	r2, r3
 800916a:	bf0c      	ite	eq
 800916c:	2301      	moveq	r3, #1
 800916e:	2300      	movne	r3, #0
 8009170:	b2db      	uxtb	r3, r3
 8009172:	461a      	mov	r2, r3
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	429a      	cmp	r2, r3
 8009178:	d1a3      	bne.n	80090c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af02      	add	r7, sp, #8
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009198:	d111      	bne.n	80091be <SPI_EndRxTransaction+0x3a>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091a2:	d004      	beq.n	80091ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ac:	d107      	bne.n	80091be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091c6:	d12a      	bne.n	800921e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091d0:	d012      	beq.n	80091f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	2180      	movs	r1, #128	; 0x80
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff ff67 	bl	80090b0 <SPI_WaitFlagStateUntilTimeout>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d02d      	beq.n	8009244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ec:	f043 0220 	orr.w	r2, r3, #32
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e026      	b.n	8009246 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2200      	movs	r2, #0
 8009200:	2101      	movs	r1, #1
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff ff54 	bl	80090b0 <SPI_WaitFlagStateUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01a      	beq.n	8009244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009212:	f043 0220 	orr.w	r2, r3, #32
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e013      	b.n	8009246 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2200      	movs	r2, #0
 8009226:	2101      	movs	r1, #1
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f7ff ff41 	bl	80090b0 <SPI_WaitFlagStateUntilTimeout>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d007      	beq.n	8009244 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009238:	f043 0220 	orr.w	r2, r3, #32
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e000      	b.n	8009246 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af02      	add	r7, sp, #8
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800925c:	4b1b      	ldr	r3, [pc, #108]	; (80092cc <SPI_EndRxTxTransaction+0x7c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a1b      	ldr	r2, [pc, #108]	; (80092d0 <SPI_EndRxTxTransaction+0x80>)
 8009262:	fba2 2303 	umull	r2, r3, r2, r3
 8009266:	0d5b      	lsrs	r3, r3, #21
 8009268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800926c:	fb02 f303 	mul.w	r3, r2, r3
 8009270:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800927a:	d112      	bne.n	80092a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2200      	movs	r2, #0
 8009284:	2180      	movs	r1, #128	; 0x80
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f7ff ff12 	bl	80090b0 <SPI_WaitFlagStateUntilTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d016      	beq.n	80092c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009296:	f043 0220 	orr.w	r2, r3, #32
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e00f      	b.n	80092c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00a      	beq.n	80092be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	3b01      	subs	r3, #1
 80092ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b8:	2b80      	cmp	r3, #128	; 0x80
 80092ba:	d0f2      	beq.n	80092a2 <SPI_EndRxTxTransaction+0x52>
 80092bc:	e000      	b.n	80092c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80092be:	bf00      	nop
  }

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000000 	.word	0x20000000
 80092d0:	165e9f81 	.word	0x165e9f81

080092d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e01d      	b.n	8009322 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7f8 fc1a 	bl	8001b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3304      	adds	r3, #4
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f000 fa14 	bl	8009740 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800932a:	b480      	push	{r7}
 800932c:	b085      	sub	sp, #20
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68da      	ldr	r2, [r3, #12]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f042 0201 	orr.w	r2, r2, #1
 8009340:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f003 0307 	and.w	r3, r3, #7
 800934c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b06      	cmp	r3, #6
 8009352:	d007      	beq.n	8009364 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f042 0201 	orr.w	r2, r2, #1
 8009362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b082      	sub	sp, #8
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	f003 0302 	and.w	r3, r3, #2
 8009384:	2b02      	cmp	r3, #2
 8009386:	d122      	bne.n	80093ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b02      	cmp	r3, #2
 8009394:	d11b      	bne.n	80093ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f06f 0202 	mvn.w	r2, #2
 800939e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	f003 0303 	and.w	r3, r3, #3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f9a5 	bl	8009704 <HAL_TIM_IC_CaptureCallback>
 80093ba:	e005      	b.n	80093c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f997 	bl	80096f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f9a8 	bl	8009718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d122      	bne.n	8009422 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f003 0304 	and.w	r3, r3, #4
 80093e6:	2b04      	cmp	r3, #4
 80093e8:	d11b      	bne.n	8009422 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f06f 0204 	mvn.w	r2, #4
 80093f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f97b 	bl	8009704 <HAL_TIM_IC_CaptureCallback>
 800940e:	e005      	b.n	800941c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f96d 	bl	80096f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f97e 	bl	8009718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	f003 0308 	and.w	r3, r3, #8
 800942c:	2b08      	cmp	r3, #8
 800942e:	d122      	bne.n	8009476 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f003 0308 	and.w	r3, r3, #8
 800943a:	2b08      	cmp	r3, #8
 800943c:	d11b      	bne.n	8009476 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f06f 0208 	mvn.w	r2, #8
 8009446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2204      	movs	r2, #4
 800944c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f951 	bl	8009704 <HAL_TIM_IC_CaptureCallback>
 8009462:	e005      	b.n	8009470 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f943 	bl	80096f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f954 	bl	8009718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b10      	cmp	r3, #16
 8009482:	d122      	bne.n	80094ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f003 0310 	and.w	r3, r3, #16
 800948e:	2b10      	cmp	r3, #16
 8009490:	d11b      	bne.n	80094ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f06f 0210 	mvn.w	r2, #16
 800949a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2208      	movs	r2, #8
 80094a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f927 	bl	8009704 <HAL_TIM_IC_CaptureCallback>
 80094b6:	e005      	b.n	80094c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f919 	bl	80096f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f92a 	bl	8009718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d10e      	bne.n	80094f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d107      	bne.n	80094f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f06f 0201 	mvn.w	r2, #1
 80094ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7f8 f8c3 	bl	800167c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009500:	2b80      	cmp	r3, #128	; 0x80
 8009502:	d10e      	bne.n	8009522 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800950e:	2b80      	cmp	r3, #128	; 0x80
 8009510:	d107      	bne.n	8009522 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800951a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 facf 	bl	8009ac0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952c:	2b40      	cmp	r3, #64	; 0x40
 800952e:	d10e      	bne.n	800954e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953a:	2b40      	cmp	r3, #64	; 0x40
 800953c:	d107      	bne.n	800954e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f8ef 	bl	800972c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b20      	cmp	r3, #32
 800955a:	d10e      	bne.n	800957a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f003 0320 	and.w	r3, r3, #32
 8009566:	2b20      	cmp	r3, #32
 8009568:	d107      	bne.n	800957a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f06f 0220 	mvn.w	r2, #32
 8009572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fa99 	bl	8009aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <HAL_TIM_ConfigClockSource+0x18>
 8009596:	2302      	movs	r3, #2
 8009598:	e0a6      	b.n	80096e8 <HAL_TIM_ConfigClockSource+0x166>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2202      	movs	r2, #2
 80095a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b40      	cmp	r3, #64	; 0x40
 80095d0:	d067      	beq.n	80096a2 <HAL_TIM_ConfigClockSource+0x120>
 80095d2:	2b40      	cmp	r3, #64	; 0x40
 80095d4:	d80b      	bhi.n	80095ee <HAL_TIM_ConfigClockSource+0x6c>
 80095d6:	2b10      	cmp	r3, #16
 80095d8:	d073      	beq.n	80096c2 <HAL_TIM_ConfigClockSource+0x140>
 80095da:	2b10      	cmp	r3, #16
 80095dc:	d802      	bhi.n	80095e4 <HAL_TIM_ConfigClockSource+0x62>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d06f      	beq.n	80096c2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80095e2:	e078      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d06c      	beq.n	80096c2 <HAL_TIM_ConfigClockSource+0x140>
 80095e8:	2b30      	cmp	r3, #48	; 0x30
 80095ea:	d06a      	beq.n	80096c2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80095ec:	e073      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095ee:	2b70      	cmp	r3, #112	; 0x70
 80095f0:	d00d      	beq.n	800960e <HAL_TIM_ConfigClockSource+0x8c>
 80095f2:	2b70      	cmp	r3, #112	; 0x70
 80095f4:	d804      	bhi.n	8009600 <HAL_TIM_ConfigClockSource+0x7e>
 80095f6:	2b50      	cmp	r3, #80	; 0x50
 80095f8:	d033      	beq.n	8009662 <HAL_TIM_ConfigClockSource+0xe0>
 80095fa:	2b60      	cmp	r3, #96	; 0x60
 80095fc:	d041      	beq.n	8009682 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80095fe:	e06a      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009604:	d066      	beq.n	80096d4 <HAL_TIM_ConfigClockSource+0x152>
 8009606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800960a:	d017      	beq.n	800963c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800960c:	e063      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	6899      	ldr	r1, [r3, #8]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	f000 f9a9 	bl	8009974 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009630:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	609a      	str	r2, [r3, #8]
      break;
 800963a:	e04c      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	6899      	ldr	r1, [r3, #8]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f000 f992 	bl	8009974 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800965e:	609a      	str	r2, [r3, #8]
      break;
 8009660:	e039      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	6859      	ldr	r1, [r3, #4]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	461a      	mov	r2, r3
 8009670:	f000 f906 	bl	8009880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2150      	movs	r1, #80	; 0x50
 800967a:	4618      	mov	r0, r3
 800967c:	f000 f95f 	bl	800993e <TIM_ITRx_SetConfig>
      break;
 8009680:	e029      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	6859      	ldr	r1, [r3, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	461a      	mov	r2, r3
 8009690:	f000 f925 	bl	80098de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2160      	movs	r1, #96	; 0x60
 800969a:	4618      	mov	r0, r3
 800969c:	f000 f94f 	bl	800993e <TIM_ITRx_SetConfig>
      break;
 80096a0:	e019      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6859      	ldr	r1, [r3, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f000 f8e6 	bl	8009880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2140      	movs	r1, #64	; 0x40
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f93f 	bl	800993e <TIM_ITRx_SetConfig>
      break;
 80096c0:	e009      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4619      	mov	r1, r3
 80096cc:	4610      	mov	r0, r2
 80096ce:	f000 f936 	bl	800993e <TIM_ITRx_SetConfig>
      break;
 80096d2:	e000      	b.n	80096d6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80096d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a40      	ldr	r2, [pc, #256]	; (8009854 <TIM_Base_SetConfig+0x114>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d013      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800975e:	d00f      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a3d      	ldr	r2, [pc, #244]	; (8009858 <TIM_Base_SetConfig+0x118>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d00b      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a3c      	ldr	r2, [pc, #240]	; (800985c <TIM_Base_SetConfig+0x11c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d007      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a3b      	ldr	r2, [pc, #236]	; (8009860 <TIM_Base_SetConfig+0x120>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d003      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a3a      	ldr	r2, [pc, #232]	; (8009864 <TIM_Base_SetConfig+0x124>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d108      	bne.n	8009792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4313      	orrs	r3, r2
 8009790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a2f      	ldr	r2, [pc, #188]	; (8009854 <TIM_Base_SetConfig+0x114>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d02b      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a0:	d027      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a2c      	ldr	r2, [pc, #176]	; (8009858 <TIM_Base_SetConfig+0x118>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d023      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a2b      	ldr	r2, [pc, #172]	; (800985c <TIM_Base_SetConfig+0x11c>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d01f      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a2a      	ldr	r2, [pc, #168]	; (8009860 <TIM_Base_SetConfig+0x120>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d01b      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a29      	ldr	r2, [pc, #164]	; (8009864 <TIM_Base_SetConfig+0x124>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d017      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a28      	ldr	r2, [pc, #160]	; (8009868 <TIM_Base_SetConfig+0x128>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d013      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a27      	ldr	r2, [pc, #156]	; (800986c <TIM_Base_SetConfig+0x12c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d00f      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a26      	ldr	r2, [pc, #152]	; (8009870 <TIM_Base_SetConfig+0x130>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00b      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a25      	ldr	r2, [pc, #148]	; (8009874 <TIM_Base_SetConfig+0x134>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d007      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a24      	ldr	r2, [pc, #144]	; (8009878 <TIM_Base_SetConfig+0x138>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d003      	beq.n	80097f2 <TIM_Base_SetConfig+0xb2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a23      	ldr	r2, [pc, #140]	; (800987c <TIM_Base_SetConfig+0x13c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d108      	bne.n	8009804 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	4313      	orrs	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a0a      	ldr	r2, [pc, #40]	; (8009854 <TIM_Base_SetConfig+0x114>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d003      	beq.n	8009838 <TIM_Base_SetConfig+0xf8>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <TIM_Base_SetConfig+0x124>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d103      	bne.n	8009840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	615a      	str	r2, [r3, #20]
}
 8009846:	bf00      	nop
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	40010000 	.word	0x40010000
 8009858:	40000400 	.word	0x40000400
 800985c:	40000800 	.word	0x40000800
 8009860:	40000c00 	.word	0x40000c00
 8009864:	40010400 	.word	0x40010400
 8009868:	40014000 	.word	0x40014000
 800986c:	40014400 	.word	0x40014400
 8009870:	40014800 	.word	0x40014800
 8009874:	40001800 	.word	0x40001800
 8009878:	40001c00 	.word	0x40001c00
 800987c:	40002000 	.word	0x40002000

08009880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	f023 0201 	bic.w	r2, r3, #1
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f023 030a 	bic.w	r3, r3, #10
 80098bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	621a      	str	r2, [r3, #32]
}
 80098d2:	bf00      	nop
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098de:	b480      	push	{r7}
 80098e0:	b087      	sub	sp, #28
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	60b9      	str	r1, [r7, #8]
 80098e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	f023 0210 	bic.w	r2, r3, #16
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	031b      	lsls	r3, r3, #12
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	4313      	orrs	r3, r2
 8009912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800991a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	4313      	orrs	r3, r2
 8009924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	621a      	str	r2, [r3, #32]
}
 8009932:	bf00      	nop
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4313      	orrs	r3, r2
 800995c:	f043 0307 	orr.w	r3, r3, #7
 8009960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	609a      	str	r2, [r3, #8]
}
 8009968:	bf00      	nop
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800998e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	021a      	lsls	r2, r3, #8
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	431a      	orrs	r2, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4313      	orrs	r3, r2
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	609a      	str	r2, [r3, #8]
}
 80099a8:	bf00      	nop
 80099aa:	371c      	adds	r7, #28
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d101      	bne.n	80099cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099c8:	2302      	movs	r3, #2
 80099ca:	e05a      	b.n	8009a82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2202      	movs	r2, #2
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a21      	ldr	r2, [pc, #132]	; (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d022      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a18:	d01d      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a1d      	ldr	r2, [pc, #116]	; (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d018      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d013      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a1a      	ldr	r2, [pc, #104]	; (8009a9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d00e      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a18      	ldr	r2, [pc, #96]	; (8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d009      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a17      	ldr	r2, [pc, #92]	; (8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d004      	beq.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d10c      	bne.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	40010000 	.word	0x40010000
 8009a94:	40000400 	.word	0x40000400
 8009a98:	40000800 	.word	0x40000800
 8009a9c:	40000c00 	.word	0x40000c00
 8009aa0:	40010400 	.word	0x40010400
 8009aa4:	40014000 	.word	0x40014000
 8009aa8:	40001800 	.word	0x40001800

08009aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e03f      	b.n	8009b66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7f8 f866 	bl	8001bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2224      	movs	r2, #36	; 0x24
 8009b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f829 	bl	8009b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	691a      	ldr	r2, [r3, #16]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	695a      	ldr	r2, [r3, #20]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	b085      	sub	sp, #20
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	431a      	orrs	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009bb2:	f023 030c 	bic.w	r3, r3, #12
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6812      	ldr	r2, [r2, #0]
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	430b      	orrs	r3, r1
 8009bbe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bde:	f040 818b 	bne.w	8009ef8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4ac1      	ldr	r2, [pc, #772]	; (8009eec <UART_SetConfig+0x37c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d005      	beq.n	8009bf8 <UART_SetConfig+0x88>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4abf      	ldr	r2, [pc, #764]	; (8009ef0 <UART_SetConfig+0x380>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	f040 80bd 	bne.w	8009d72 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bf8:	f7fe fb5e 	bl	80082b8 <HAL_RCC_GetPCLK2Freq>
 8009bfc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	461d      	mov	r5, r3
 8009c02:	f04f 0600 	mov.w	r6, #0
 8009c06:	46a8      	mov	r8, r5
 8009c08:	46b1      	mov	r9, r6
 8009c0a:	eb18 0308 	adds.w	r3, r8, r8
 8009c0e:	eb49 0409 	adc.w	r4, r9, r9
 8009c12:	4698      	mov	r8, r3
 8009c14:	46a1      	mov	r9, r4
 8009c16:	eb18 0805 	adds.w	r8, r8, r5
 8009c1a:	eb49 0906 	adc.w	r9, r9, r6
 8009c1e:	f04f 0100 	mov.w	r1, #0
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c32:	4688      	mov	r8, r1
 8009c34:	4691      	mov	r9, r2
 8009c36:	eb18 0005 	adds.w	r0, r8, r5
 8009c3a:	eb49 0106 	adc.w	r1, r9, r6
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	461d      	mov	r5, r3
 8009c44:	f04f 0600 	mov.w	r6, #0
 8009c48:	196b      	adds	r3, r5, r5
 8009c4a:	eb46 0406 	adc.w	r4, r6, r6
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4623      	mov	r3, r4
 8009c52:	f7f6 facd 	bl	80001f0 <__aeabi_uldivmod>
 8009c56:	4603      	mov	r3, r0
 8009c58:	460c      	mov	r4, r1
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	4ba5      	ldr	r3, [pc, #660]	; (8009ef4 <UART_SetConfig+0x384>)
 8009c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8009c62:	095b      	lsrs	r3, r3, #5
 8009c64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	461d      	mov	r5, r3
 8009c6c:	f04f 0600 	mov.w	r6, #0
 8009c70:	46a9      	mov	r9, r5
 8009c72:	46b2      	mov	sl, r6
 8009c74:	eb19 0309 	adds.w	r3, r9, r9
 8009c78:	eb4a 040a 	adc.w	r4, sl, sl
 8009c7c:	4699      	mov	r9, r3
 8009c7e:	46a2      	mov	sl, r4
 8009c80:	eb19 0905 	adds.w	r9, r9, r5
 8009c84:	eb4a 0a06 	adc.w	sl, sl, r6
 8009c88:	f04f 0100 	mov.w	r1, #0
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c9c:	4689      	mov	r9, r1
 8009c9e:	4692      	mov	sl, r2
 8009ca0:	eb19 0005 	adds.w	r0, r9, r5
 8009ca4:	eb4a 0106 	adc.w	r1, sl, r6
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	461d      	mov	r5, r3
 8009cae:	f04f 0600 	mov.w	r6, #0
 8009cb2:	196b      	adds	r3, r5, r5
 8009cb4:	eb46 0406 	adc.w	r4, r6, r6
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4623      	mov	r3, r4
 8009cbc:	f7f6 fa98 	bl	80001f0 <__aeabi_uldivmod>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	4b8b      	ldr	r3, [pc, #556]	; (8009ef4 <UART_SetConfig+0x384>)
 8009cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009ccc:	095b      	lsrs	r3, r3, #5
 8009cce:	2164      	movs	r1, #100	; 0x64
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	3332      	adds	r3, #50	; 0x32
 8009cda:	4a86      	ldr	r2, [pc, #536]	; (8009ef4 <UART_SetConfig+0x384>)
 8009cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce0:	095b      	lsrs	r3, r3, #5
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ce8:	4498      	add	r8, r3
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	461d      	mov	r5, r3
 8009cee:	f04f 0600 	mov.w	r6, #0
 8009cf2:	46a9      	mov	r9, r5
 8009cf4:	46b2      	mov	sl, r6
 8009cf6:	eb19 0309 	adds.w	r3, r9, r9
 8009cfa:	eb4a 040a 	adc.w	r4, sl, sl
 8009cfe:	4699      	mov	r9, r3
 8009d00:	46a2      	mov	sl, r4
 8009d02:	eb19 0905 	adds.w	r9, r9, r5
 8009d06:	eb4a 0a06 	adc.w	sl, sl, r6
 8009d0a:	f04f 0100 	mov.w	r1, #0
 8009d0e:	f04f 0200 	mov.w	r2, #0
 8009d12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d1e:	4689      	mov	r9, r1
 8009d20:	4692      	mov	sl, r2
 8009d22:	eb19 0005 	adds.w	r0, r9, r5
 8009d26:	eb4a 0106 	adc.w	r1, sl, r6
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	461d      	mov	r5, r3
 8009d30:	f04f 0600 	mov.w	r6, #0
 8009d34:	196b      	adds	r3, r5, r5
 8009d36:	eb46 0406 	adc.w	r4, r6, r6
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	4623      	mov	r3, r4
 8009d3e:	f7f6 fa57 	bl	80001f0 <__aeabi_uldivmod>
 8009d42:	4603      	mov	r3, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	461a      	mov	r2, r3
 8009d48:	4b6a      	ldr	r3, [pc, #424]	; (8009ef4 <UART_SetConfig+0x384>)
 8009d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8009d4e:	095b      	lsrs	r3, r3, #5
 8009d50:	2164      	movs	r1, #100	; 0x64
 8009d52:	fb01 f303 	mul.w	r3, r1, r3
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	3332      	adds	r3, #50	; 0x32
 8009d5c:	4a65      	ldr	r2, [pc, #404]	; (8009ef4 <UART_SetConfig+0x384>)
 8009d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d62:	095b      	lsrs	r3, r3, #5
 8009d64:	f003 0207 	and.w	r2, r3, #7
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4442      	add	r2, r8
 8009d6e:	609a      	str	r2, [r3, #8]
 8009d70:	e26f      	b.n	800a252 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d72:	f7fe fa8d 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 8009d76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	461d      	mov	r5, r3
 8009d7c:	f04f 0600 	mov.w	r6, #0
 8009d80:	46a8      	mov	r8, r5
 8009d82:	46b1      	mov	r9, r6
 8009d84:	eb18 0308 	adds.w	r3, r8, r8
 8009d88:	eb49 0409 	adc.w	r4, r9, r9
 8009d8c:	4698      	mov	r8, r3
 8009d8e:	46a1      	mov	r9, r4
 8009d90:	eb18 0805 	adds.w	r8, r8, r5
 8009d94:	eb49 0906 	adc.w	r9, r9, r6
 8009d98:	f04f 0100 	mov.w	r1, #0
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009da4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009da8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009dac:	4688      	mov	r8, r1
 8009dae:	4691      	mov	r9, r2
 8009db0:	eb18 0005 	adds.w	r0, r8, r5
 8009db4:	eb49 0106 	adc.w	r1, r9, r6
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	461d      	mov	r5, r3
 8009dbe:	f04f 0600 	mov.w	r6, #0
 8009dc2:	196b      	adds	r3, r5, r5
 8009dc4:	eb46 0406 	adc.w	r4, r6, r6
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4623      	mov	r3, r4
 8009dcc:	f7f6 fa10 	bl	80001f0 <__aeabi_uldivmod>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	4b47      	ldr	r3, [pc, #284]	; (8009ef4 <UART_SetConfig+0x384>)
 8009dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8009ddc:	095b      	lsrs	r3, r3, #5
 8009dde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	461d      	mov	r5, r3
 8009de6:	f04f 0600 	mov.w	r6, #0
 8009dea:	46a9      	mov	r9, r5
 8009dec:	46b2      	mov	sl, r6
 8009dee:	eb19 0309 	adds.w	r3, r9, r9
 8009df2:	eb4a 040a 	adc.w	r4, sl, sl
 8009df6:	4699      	mov	r9, r3
 8009df8:	46a2      	mov	sl, r4
 8009dfa:	eb19 0905 	adds.w	r9, r9, r5
 8009dfe:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e02:	f04f 0100 	mov.w	r1, #0
 8009e06:	f04f 0200 	mov.w	r2, #0
 8009e0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e16:	4689      	mov	r9, r1
 8009e18:	4692      	mov	sl, r2
 8009e1a:	eb19 0005 	adds.w	r0, r9, r5
 8009e1e:	eb4a 0106 	adc.w	r1, sl, r6
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	461d      	mov	r5, r3
 8009e28:	f04f 0600 	mov.w	r6, #0
 8009e2c:	196b      	adds	r3, r5, r5
 8009e2e:	eb46 0406 	adc.w	r4, r6, r6
 8009e32:	461a      	mov	r2, r3
 8009e34:	4623      	mov	r3, r4
 8009e36:	f7f6 f9db 	bl	80001f0 <__aeabi_uldivmod>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	461a      	mov	r2, r3
 8009e40:	4b2c      	ldr	r3, [pc, #176]	; (8009ef4 <UART_SetConfig+0x384>)
 8009e42:	fba3 1302 	umull	r1, r3, r3, r2
 8009e46:	095b      	lsrs	r3, r3, #5
 8009e48:	2164      	movs	r1, #100	; 0x64
 8009e4a:	fb01 f303 	mul.w	r3, r1, r3
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	3332      	adds	r3, #50	; 0x32
 8009e54:	4a27      	ldr	r2, [pc, #156]	; (8009ef4 <UART_SetConfig+0x384>)
 8009e56:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5a:	095b      	lsrs	r3, r3, #5
 8009e5c:	005b      	lsls	r3, r3, #1
 8009e5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e62:	4498      	add	r8, r3
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	461d      	mov	r5, r3
 8009e68:	f04f 0600 	mov.w	r6, #0
 8009e6c:	46a9      	mov	r9, r5
 8009e6e:	46b2      	mov	sl, r6
 8009e70:	eb19 0309 	adds.w	r3, r9, r9
 8009e74:	eb4a 040a 	adc.w	r4, sl, sl
 8009e78:	4699      	mov	r9, r3
 8009e7a:	46a2      	mov	sl, r4
 8009e7c:	eb19 0905 	adds.w	r9, r9, r5
 8009e80:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e84:	f04f 0100 	mov.w	r1, #0
 8009e88:	f04f 0200 	mov.w	r2, #0
 8009e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e98:	4689      	mov	r9, r1
 8009e9a:	4692      	mov	sl, r2
 8009e9c:	eb19 0005 	adds.w	r0, r9, r5
 8009ea0:	eb4a 0106 	adc.w	r1, sl, r6
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	461d      	mov	r5, r3
 8009eaa:	f04f 0600 	mov.w	r6, #0
 8009eae:	196b      	adds	r3, r5, r5
 8009eb0:	eb46 0406 	adc.w	r4, r6, r6
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	4623      	mov	r3, r4
 8009eb8:	f7f6 f99a 	bl	80001f0 <__aeabi_uldivmod>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	; (8009ef4 <UART_SetConfig+0x384>)
 8009ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ec8:	095b      	lsrs	r3, r3, #5
 8009eca:	2164      	movs	r1, #100	; 0x64
 8009ecc:	fb01 f303 	mul.w	r3, r1, r3
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	3332      	adds	r3, #50	; 0x32
 8009ed6:	4a07      	ldr	r2, [pc, #28]	; (8009ef4 <UART_SetConfig+0x384>)
 8009ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8009edc:	095b      	lsrs	r3, r3, #5
 8009ede:	f003 0207 	and.w	r2, r3, #7
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4442      	add	r2, r8
 8009ee8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009eea:	e1b2      	b.n	800a252 <UART_SetConfig+0x6e2>
 8009eec:	40011000 	.word	0x40011000
 8009ef0:	40011400 	.word	0x40011400
 8009ef4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4ad7      	ldr	r2, [pc, #860]	; (800a25c <UART_SetConfig+0x6ec>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d005      	beq.n	8009f0e <UART_SetConfig+0x39e>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4ad6      	ldr	r2, [pc, #856]	; (800a260 <UART_SetConfig+0x6f0>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	f040 80d1 	bne.w	800a0b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f0e:	f7fe f9d3 	bl	80082b8 <HAL_RCC_GetPCLK2Freq>
 8009f12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	469a      	mov	sl, r3
 8009f18:	f04f 0b00 	mov.w	fp, #0
 8009f1c:	46d0      	mov	r8, sl
 8009f1e:	46d9      	mov	r9, fp
 8009f20:	eb18 0308 	adds.w	r3, r8, r8
 8009f24:	eb49 0409 	adc.w	r4, r9, r9
 8009f28:	4698      	mov	r8, r3
 8009f2a:	46a1      	mov	r9, r4
 8009f2c:	eb18 080a 	adds.w	r8, r8, sl
 8009f30:	eb49 090b 	adc.w	r9, r9, fp
 8009f34:	f04f 0100 	mov.w	r1, #0
 8009f38:	f04f 0200 	mov.w	r2, #0
 8009f3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009f40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009f44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009f48:	4688      	mov	r8, r1
 8009f4a:	4691      	mov	r9, r2
 8009f4c:	eb1a 0508 	adds.w	r5, sl, r8
 8009f50:	eb4b 0609 	adc.w	r6, fp, r9
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	f04f 0200 	mov.w	r2, #0
 8009f5e:	f04f 0300 	mov.w	r3, #0
 8009f62:	f04f 0400 	mov.w	r4, #0
 8009f66:	0094      	lsls	r4, r2, #2
 8009f68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f6c:	008b      	lsls	r3, r1, #2
 8009f6e:	461a      	mov	r2, r3
 8009f70:	4623      	mov	r3, r4
 8009f72:	4628      	mov	r0, r5
 8009f74:	4631      	mov	r1, r6
 8009f76:	f7f6 f93b 	bl	80001f0 <__aeabi_uldivmod>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4bb8      	ldr	r3, [pc, #736]	; (800a264 <UART_SetConfig+0x6f4>)
 8009f82:	fba3 2302 	umull	r2, r3, r3, r2
 8009f86:	095b      	lsrs	r3, r3, #5
 8009f88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	469b      	mov	fp, r3
 8009f90:	f04f 0c00 	mov.w	ip, #0
 8009f94:	46d9      	mov	r9, fp
 8009f96:	46e2      	mov	sl, ip
 8009f98:	eb19 0309 	adds.w	r3, r9, r9
 8009f9c:	eb4a 040a 	adc.w	r4, sl, sl
 8009fa0:	4699      	mov	r9, r3
 8009fa2:	46a2      	mov	sl, r4
 8009fa4:	eb19 090b 	adds.w	r9, r9, fp
 8009fa8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009fac:	f04f 0100 	mov.w	r1, #0
 8009fb0:	f04f 0200 	mov.w	r2, #0
 8009fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009fbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009fc0:	4689      	mov	r9, r1
 8009fc2:	4692      	mov	sl, r2
 8009fc4:	eb1b 0509 	adds.w	r5, fp, r9
 8009fc8:	eb4c 060a 	adc.w	r6, ip, sl
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	f04f 0200 	mov.w	r2, #0
 8009fd6:	f04f 0300 	mov.w	r3, #0
 8009fda:	f04f 0400 	mov.w	r4, #0
 8009fde:	0094      	lsls	r4, r2, #2
 8009fe0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009fe4:	008b      	lsls	r3, r1, #2
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	4623      	mov	r3, r4
 8009fea:	4628      	mov	r0, r5
 8009fec:	4631      	mov	r1, r6
 8009fee:	f7f6 f8ff 	bl	80001f0 <__aeabi_uldivmod>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4b9a      	ldr	r3, [pc, #616]	; (800a264 <UART_SetConfig+0x6f4>)
 8009ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8009ffe:	095b      	lsrs	r3, r3, #5
 800a000:	2164      	movs	r1, #100	; 0x64
 800a002:	fb01 f303 	mul.w	r3, r1, r3
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	011b      	lsls	r3, r3, #4
 800a00a:	3332      	adds	r3, #50	; 0x32
 800a00c:	4a95      	ldr	r2, [pc, #596]	; (800a264 <UART_SetConfig+0x6f4>)
 800a00e:	fba2 2303 	umull	r2, r3, r2, r3
 800a012:	095b      	lsrs	r3, r3, #5
 800a014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a018:	4498      	add	r8, r3
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	469b      	mov	fp, r3
 800a01e:	f04f 0c00 	mov.w	ip, #0
 800a022:	46d9      	mov	r9, fp
 800a024:	46e2      	mov	sl, ip
 800a026:	eb19 0309 	adds.w	r3, r9, r9
 800a02a:	eb4a 040a 	adc.w	r4, sl, sl
 800a02e:	4699      	mov	r9, r3
 800a030:	46a2      	mov	sl, r4
 800a032:	eb19 090b 	adds.w	r9, r9, fp
 800a036:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a03a:	f04f 0100 	mov.w	r1, #0
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a046:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a04a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a04e:	4689      	mov	r9, r1
 800a050:	4692      	mov	sl, r2
 800a052:	eb1b 0509 	adds.w	r5, fp, r9
 800a056:	eb4c 060a 	adc.w	r6, ip, sl
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	4619      	mov	r1, r3
 800a060:	f04f 0200 	mov.w	r2, #0
 800a064:	f04f 0300 	mov.w	r3, #0
 800a068:	f04f 0400 	mov.w	r4, #0
 800a06c:	0094      	lsls	r4, r2, #2
 800a06e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a072:	008b      	lsls	r3, r1, #2
 800a074:	461a      	mov	r2, r3
 800a076:	4623      	mov	r3, r4
 800a078:	4628      	mov	r0, r5
 800a07a:	4631      	mov	r1, r6
 800a07c:	f7f6 f8b8 	bl	80001f0 <__aeabi_uldivmod>
 800a080:	4603      	mov	r3, r0
 800a082:	460c      	mov	r4, r1
 800a084:	461a      	mov	r2, r3
 800a086:	4b77      	ldr	r3, [pc, #476]	; (800a264 <UART_SetConfig+0x6f4>)
 800a088:	fba3 1302 	umull	r1, r3, r3, r2
 800a08c:	095b      	lsrs	r3, r3, #5
 800a08e:	2164      	movs	r1, #100	; 0x64
 800a090:	fb01 f303 	mul.w	r3, r1, r3
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	011b      	lsls	r3, r3, #4
 800a098:	3332      	adds	r3, #50	; 0x32
 800a09a:	4a72      	ldr	r2, [pc, #456]	; (800a264 <UART_SetConfig+0x6f4>)
 800a09c:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a0:	095b      	lsrs	r3, r3, #5
 800a0a2:	f003 020f 	and.w	r2, r3, #15
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4442      	add	r2, r8
 800a0ac:	609a      	str	r2, [r3, #8]
 800a0ae:	e0d0      	b.n	800a252 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0b0:	f7fe f8ee 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 800a0b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	469a      	mov	sl, r3
 800a0ba:	f04f 0b00 	mov.w	fp, #0
 800a0be:	46d0      	mov	r8, sl
 800a0c0:	46d9      	mov	r9, fp
 800a0c2:	eb18 0308 	adds.w	r3, r8, r8
 800a0c6:	eb49 0409 	adc.w	r4, r9, r9
 800a0ca:	4698      	mov	r8, r3
 800a0cc:	46a1      	mov	r9, r4
 800a0ce:	eb18 080a 	adds.w	r8, r8, sl
 800a0d2:	eb49 090b 	adc.w	r9, r9, fp
 800a0d6:	f04f 0100 	mov.w	r1, #0
 800a0da:	f04f 0200 	mov.w	r2, #0
 800a0de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a0e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a0e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a0ea:	4688      	mov	r8, r1
 800a0ec:	4691      	mov	r9, r2
 800a0ee:	eb1a 0508 	adds.w	r5, sl, r8
 800a0f2:	eb4b 0609 	adc.w	r6, fp, r9
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	f04f 0200 	mov.w	r2, #0
 800a100:	f04f 0300 	mov.w	r3, #0
 800a104:	f04f 0400 	mov.w	r4, #0
 800a108:	0094      	lsls	r4, r2, #2
 800a10a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a10e:	008b      	lsls	r3, r1, #2
 800a110:	461a      	mov	r2, r3
 800a112:	4623      	mov	r3, r4
 800a114:	4628      	mov	r0, r5
 800a116:	4631      	mov	r1, r6
 800a118:	f7f6 f86a 	bl	80001f0 <__aeabi_uldivmod>
 800a11c:	4603      	mov	r3, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	461a      	mov	r2, r3
 800a122:	4b50      	ldr	r3, [pc, #320]	; (800a264 <UART_SetConfig+0x6f4>)
 800a124:	fba3 2302 	umull	r2, r3, r3, r2
 800a128:	095b      	lsrs	r3, r3, #5
 800a12a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	469b      	mov	fp, r3
 800a132:	f04f 0c00 	mov.w	ip, #0
 800a136:	46d9      	mov	r9, fp
 800a138:	46e2      	mov	sl, ip
 800a13a:	eb19 0309 	adds.w	r3, r9, r9
 800a13e:	eb4a 040a 	adc.w	r4, sl, sl
 800a142:	4699      	mov	r9, r3
 800a144:	46a2      	mov	sl, r4
 800a146:	eb19 090b 	adds.w	r9, r9, fp
 800a14a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a14e:	f04f 0100 	mov.w	r1, #0
 800a152:	f04f 0200 	mov.w	r2, #0
 800a156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a15a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a15e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a162:	4689      	mov	r9, r1
 800a164:	4692      	mov	sl, r2
 800a166:	eb1b 0509 	adds.w	r5, fp, r9
 800a16a:	eb4c 060a 	adc.w	r6, ip, sl
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	4619      	mov	r1, r3
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	f04f 0300 	mov.w	r3, #0
 800a17c:	f04f 0400 	mov.w	r4, #0
 800a180:	0094      	lsls	r4, r2, #2
 800a182:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a186:	008b      	lsls	r3, r1, #2
 800a188:	461a      	mov	r2, r3
 800a18a:	4623      	mov	r3, r4
 800a18c:	4628      	mov	r0, r5
 800a18e:	4631      	mov	r1, r6
 800a190:	f7f6 f82e 	bl	80001f0 <__aeabi_uldivmod>
 800a194:	4603      	mov	r3, r0
 800a196:	460c      	mov	r4, r1
 800a198:	461a      	mov	r2, r3
 800a19a:	4b32      	ldr	r3, [pc, #200]	; (800a264 <UART_SetConfig+0x6f4>)
 800a19c:	fba3 1302 	umull	r1, r3, r3, r2
 800a1a0:	095b      	lsrs	r3, r3, #5
 800a1a2:	2164      	movs	r1, #100	; 0x64
 800a1a4:	fb01 f303 	mul.w	r3, r1, r3
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	3332      	adds	r3, #50	; 0x32
 800a1ae:	4a2d      	ldr	r2, [pc, #180]	; (800a264 <UART_SetConfig+0x6f4>)
 800a1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b4:	095b      	lsrs	r3, r3, #5
 800a1b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1ba:	4498      	add	r8, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	469b      	mov	fp, r3
 800a1c0:	f04f 0c00 	mov.w	ip, #0
 800a1c4:	46d9      	mov	r9, fp
 800a1c6:	46e2      	mov	sl, ip
 800a1c8:	eb19 0309 	adds.w	r3, r9, r9
 800a1cc:	eb4a 040a 	adc.w	r4, sl, sl
 800a1d0:	4699      	mov	r9, r3
 800a1d2:	46a2      	mov	sl, r4
 800a1d4:	eb19 090b 	adds.w	r9, r9, fp
 800a1d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a1dc:	f04f 0100 	mov.w	r1, #0
 800a1e0:	f04f 0200 	mov.w	r2, #0
 800a1e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a1ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a1f0:	4689      	mov	r9, r1
 800a1f2:	4692      	mov	sl, r2
 800a1f4:	eb1b 0509 	adds.w	r5, fp, r9
 800a1f8:	eb4c 060a 	adc.w	r6, ip, sl
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	4619      	mov	r1, r3
 800a202:	f04f 0200 	mov.w	r2, #0
 800a206:	f04f 0300 	mov.w	r3, #0
 800a20a:	f04f 0400 	mov.w	r4, #0
 800a20e:	0094      	lsls	r4, r2, #2
 800a210:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a214:	008b      	lsls	r3, r1, #2
 800a216:	461a      	mov	r2, r3
 800a218:	4623      	mov	r3, r4
 800a21a:	4628      	mov	r0, r5
 800a21c:	4631      	mov	r1, r6
 800a21e:	f7f5 ffe7 	bl	80001f0 <__aeabi_uldivmod>
 800a222:	4603      	mov	r3, r0
 800a224:	460c      	mov	r4, r1
 800a226:	461a      	mov	r2, r3
 800a228:	4b0e      	ldr	r3, [pc, #56]	; (800a264 <UART_SetConfig+0x6f4>)
 800a22a:	fba3 1302 	umull	r1, r3, r3, r2
 800a22e:	095b      	lsrs	r3, r3, #5
 800a230:	2164      	movs	r1, #100	; 0x64
 800a232:	fb01 f303 	mul.w	r3, r1, r3
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	3332      	adds	r3, #50	; 0x32
 800a23c:	4a09      	ldr	r2, [pc, #36]	; (800a264 <UART_SetConfig+0x6f4>)
 800a23e:	fba2 2303 	umull	r2, r3, r2, r3
 800a242:	095b      	lsrs	r3, r3, #5
 800a244:	f003 020f 	and.w	r2, r3, #15
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4442      	add	r2, r8
 800a24e:	609a      	str	r2, [r3, #8]
}
 800a250:	e7ff      	b.n	800a252 <UART_SetConfig+0x6e2>
 800a252:	bf00      	nop
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	40011000 	.word	0x40011000
 800a260:	40011400 	.word	0x40011400
 800a264:	51eb851f 	.word	0x51eb851f

0800a268 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d029      	beq.n	800a2d6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a28e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a292:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a29c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a2a2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a2a8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a2ae:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a2b4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a2ba:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a2c0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a2c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	e034      	b.n	800a340 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2e2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2ec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a2f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a306:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a30a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a314:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a31a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a320:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a326:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a32c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	4313      	orrs	r3, r2
 800a332:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a34e:	b480      	push	{r7}
 800a350:	b087      	sub	sp, #28
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d02e      	beq.n	800a3c6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a374:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	3b01      	subs	r3, #1
 800a382:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a384:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a38e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	3b01      	subs	r3, #1
 800a396:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a398:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a3a2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a3ac:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	609a      	str	r2, [r3, #8]
 800a3c4:	e03b      	b.n	800a43e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3d6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a3fc:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	3b01      	subs	r3, #1
 800a40a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a40c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	3b01      	subs	r3, #1
 800a414:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a416:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a420:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	3b01      	subs	r3, #1
 800a428:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a42a:	4313      	orrs	r3, r2
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a45c:	2300      	movs	r3, #0
 800a45e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a468:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	3b01      	subs	r3, #1
 800a470:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a472:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a47a:	4313      	orrs	r3, r2
 800a47c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a484:	f7f9 fb12 	bl	8003aac <HAL_GetTick>
 800a488:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a48a:	e010      	b.n	800a4ae <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a492:	d00c      	beq.n	800a4ae <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d007      	beq.n	800a4aa <FMC_SDRAM_SendCommand+0x5e>
 800a49a:	f7f9 fb07 	bl	8003aac <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d201      	bcs.n	800a4ae <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e006      	b.n	800a4bc <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	f003 0320 	and.w	r3, r3, #32
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	d0e8      	beq.n	800a48c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	695a      	ldr	r2, [r3, #20]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f043 0201 	orr.w	r2, r3, #1
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f023 0201 	bic.w	r2, r3, #1
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
	...

0800a530 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	019b      	lsls	r3, r3, #6
 800a542:	f043 0220 	orr.w	r2, r3, #32
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	4a09      	ldr	r2, [pc, #36]	; (800a578 <USB_FlushTxFifo+0x48>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d901      	bls.n	800a55c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a558:	2303      	movs	r3, #3
 800a55a:	e006      	b.n	800a56a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	f003 0320 	and.w	r3, r3, #32
 800a564:	2b20      	cmp	r3, #32
 800a566:	d0f0      	beq.n	800a54a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	00030d40 	.word	0x00030d40

0800a57c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2210      	movs	r2, #16
 800a58c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3301      	adds	r3, #1
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4a09      	ldr	r2, [pc, #36]	; (800a5bc <USB_FlushRxFifo+0x40>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d901      	bls.n	800a5a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e006      	b.n	800a5ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	f003 0310 	and.w	r3, r3, #16
 800a5a8:	2b10      	cmp	r3, #16
 800a5aa:	d0f0      	beq.n	800a58e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	00030d40 	.word	0x00030d40

0800a5c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b089      	sub	sp, #36	; 0x24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a5d6:	88fb      	ldrh	r3, [r7, #6]
 800a5d8:	3303      	adds	r3, #3
 800a5da:	089b      	lsrs	r3, r3, #2
 800a5dc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a5de:	2300      	movs	r3, #0
 800a5e0:	61bb      	str	r3, [r7, #24]
 800a5e2:	e00b      	b.n	800a5fc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	61bb      	str	r3, [r7, #24]
 800a5fc:	69ba      	ldr	r2, [r7, #24]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	429a      	cmp	r2, r3
 800a602:	d3ef      	bcc.n	800a5e4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a604:	69fb      	ldr	r3, [r7, #28]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3724      	adds	r7, #36	; 0x24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a612:	b480      	push	{r7}
 800a614:	b085      	sub	sp, #20
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	4013      	ands	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a62a:	68fb      	ldr	r3, [r7, #12]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	f003 0301 	and.w	r3, r3, #1
}
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a672:	f023 0303 	bic.w	r3, r3, #3
 800a676:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	f003 0303 	and.w	r3, r3, #3
 800a686:	68f9      	ldr	r1, [r7, #12]
 800a688:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a68c:	4313      	orrs	r3, r2
 800a68e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d107      	bne.n	800a6a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a69c:	461a      	mov	r2, r3
 800a69e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a6a2:	6053      	str	r3, [r2, #4]
 800a6a4:	e009      	b.n	800a6ba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a6a6:	78fb      	ldrb	r3, [r7, #3]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d106      	bne.n	800a6ba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	f241 7370 	movw	r3, #6000	; 0x1770
 800a6b8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	b29b      	uxth	r3, r3
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b087      	sub	sp, #28
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a6fa:	78fb      	ldrb	r3, [r7, #3]
 800a6fc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	015a      	lsls	r2, r3, #5
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	4413      	add	r3, r2
 800a70a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	0c9b      	lsrs	r3, r3, #18
 800a712:	f003 0303 	and.w	r3, r3, #3
 800a716:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <USB_HC_Halt+0x3a>
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b02      	cmp	r3, #2
 800a722:	d16c      	bne.n	800a7fe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	015a      	lsls	r2, r3, #5
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	0151      	lsls	r1, r2, #5
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	440a      	add	r2, r1
 800a73a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a73e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a742:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d143      	bne.n	800a7d8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	4413      	add	r3, r2
 800a758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	0151      	lsls	r1, r2, #5
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	440a      	add	r2, r1
 800a766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a76a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a76e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	4413      	add	r3, r2
 800a778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	0151      	lsls	r1, r2, #5
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	440a      	add	r2, r1
 800a786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a78a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a78e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	4413      	add	r3, r2
 800a798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	0151      	lsls	r1, r2, #5
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	440a      	add	r2, r1
 800a7a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	617b      	str	r3, [r7, #20]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7bc:	d81d      	bhi.n	800a7fa <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7d4:	d0ec      	beq.n	800a7b0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a7d6:	e080      	b.n	800a8da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	015a      	lsls	r2, r3, #5
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	0151      	lsls	r1, r2, #5
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	440a      	add	r2, r1
 800a7ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7f6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a7f8:	e06f      	b.n	800a8da <USB_HC_Halt+0x1f0>
          break;
 800a7fa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a7fc:	e06d      	b.n	800a8da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	4413      	add	r3, r2
 800a806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	0151      	lsls	r1, r2, #5
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	440a      	add	r2, r1
 800a814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a81c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d143      	bne.n	800a8b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	015a      	lsls	r2, r3, #5
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	4413      	add	r3, r2
 800a836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	0151      	lsls	r1, r2, #5
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	440a      	add	r2, r1
 800a844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a84c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	015a      	lsls	r2, r3, #5
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	4413      	add	r3, r2
 800a856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	0151      	lsls	r1, r2, #5
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	440a      	add	r2, r1
 800a864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a86c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	015a      	lsls	r2, r3, #5
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	4413      	add	r3, r2
 800a876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	0151      	lsls	r1, r2, #5
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	440a      	add	r2, r1
 800a884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a88c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	3301      	adds	r3, #1
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a89a:	d81d      	bhi.n	800a8d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8b2:	d0ec      	beq.n	800a88e <USB_HC_Halt+0x1a4>
 800a8b4:	e011      	b.n	800a8da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	015a      	lsls	r2, r3, #5
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	4413      	add	r3, r2
 800a8be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	0151      	lsls	r1, r2, #5
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	440a      	add	r2, r1
 800a8cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	e000      	b.n	800a8da <USB_HC_Halt+0x1f0>
          break;
 800a8d8:	bf00      	nop
    }
  }

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	371c      	adds	r7, #28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff fe07 	bl	800a50c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a8fe:	2110      	movs	r1, #16
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff fe15 	bl	800a530 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff fe38 	bl	800a57c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a90c:	2300      	movs	r3, #0
 800a90e:	613b      	str	r3, [r7, #16]
 800a910:	e01f      	b.n	800a952 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a928:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a930:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a938:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	015a      	lsls	r2, r3, #5
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a946:	461a      	mov	r2, r3
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	3301      	adds	r3, #1
 800a950:	613b      	str	r3, [r7, #16]
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	2b0f      	cmp	r3, #15
 800a956:	d9dc      	bls.n	800a912 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a958:	2300      	movs	r3, #0
 800a95a:	613b      	str	r3, [r7, #16]
 800a95c:	e034      	b.n	800a9c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	4413      	add	r3, r2
 800a966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a974:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a97c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a984:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a992:	461a      	mov	r2, r3
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	3301      	adds	r3, #1
 800a99c:	617b      	str	r3, [r7, #20]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9a4:	d80c      	bhi.n	800a9c0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9bc:	d0ec      	beq.n	800a998 <USB_StopHost+0xb0>
 800a9be:	e000      	b.n	800a9c2 <USB_StopHost+0xda>
        break;
 800a9c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	613b      	str	r3, [r7, #16]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b0f      	cmp	r3, #15
 800a9cc:	d9c7      	bls.n	800a95e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff fd80 	bl	800a4ea <USB_EnableGlobalInt>

  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f804 	bl	800aa18 <USBH_HandleSof>
}
 800aa10:	bf00      	nop
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b0b      	cmp	r3, #11
 800aa28:	d10a      	bne.n	800aa40 <USBH_HandleSof+0x28>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	4798      	blx	r3
  }
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4619      	mov	r1, r3
 800aa70:	f000 f8ae 	bl	800abd0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800aa74:	bf00      	nop
}
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aa8c:	bf00      	nop
}
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aacc:	2200      	movs	r2, #0
 800aace:	4619      	mov	r1, r3
 800aad0:	f000 f87e 	bl	800abd0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f001 f900 	bl	800bd04 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	791b      	ldrb	r3, [r3, #4]
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f830 	bl	800ab70 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	795b      	ldrb	r3, [r3, #5]
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f82a 	bl	800ab70 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab30:	2200      	movs	r2, #0
 800ab32:	4619      	mov	r1, r3
 800ab34:	f000 f84c 	bl	800abd0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab5e:	2200      	movs	r2, #0
 800ab60:	4619      	mov	r1, r3
 800ab62:	f000 f835 	bl	800abd0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	2b0a      	cmp	r3, #10
 800ab80:	d80d      	bhi.n	800ab9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ab82:	78fb      	ldrb	r3, [r7, #3]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	33e0      	adds	r3, #224	; 0xe0
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	33e0      	adds	r3, #224	; 0xe0
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	440b      	add	r3, r1
 800ab9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abb2:	f3ef 8305 	mrs	r3, IPSR
 800abb6:	607b      	str	r3, [r7, #4]
  return(result);
 800abb8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bf14      	ite	ne
 800abbe:	2301      	movne	r3, #1
 800abc0:	2300      	moveq	r3, #0
 800abc2:	b2db      	uxtb	r3, r3
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800abdc:	2300      	movs	r3, #0
 800abde:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <osMessagePut+0x1e>
    ticks = 1;
 800abea:	2301      	movs	r3, #1
 800abec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800abee:	f7ff ffdd 	bl	800abac <inHandlerMode>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d018      	beq.n	800ac2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800abf8:	f107 0210 	add.w	r2, r7, #16
 800abfc:	f107 0108 	add.w	r1, r7, #8
 800ac00:	2300      	movs	r3, #0
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f9a6 	bl	800af54 <xQueueGenericSendFromISR>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d001      	beq.n	800ac12 <osMessagePut+0x42>
      return osErrorOS;
 800ac0e:	23ff      	movs	r3, #255	; 0xff
 800ac10:	e018      	b.n	800ac44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d014      	beq.n	800ac42 <osMessagePut+0x72>
 800ac18:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <osMessagePut+0x7c>)
 800ac1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	e00b      	b.n	800ac42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ac2a:	f107 0108 	add.w	r1, r7, #8
 800ac2e:	2300      	movs	r3, #0
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f894 	bl	800ad60 <xQueueGenericSend>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d001      	beq.n	800ac42 <osMessagePut+0x72>
      return osErrorOS;
 800ac3e:	23ff      	movs	r3, #255	; 0xff
 800ac40:	e000      	b.n	800ac44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3718      	adds	r7, #24
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	e000ed04 	.word	0xe000ed04

0800ac50 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	689a      	ldr	r2, [r3, #8]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	601a      	str	r2, [r3, #0]
}
 800ac8c:	bf00      	nop
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acae:	d103      	bne.n	800acb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	60fb      	str	r3, [r7, #12]
 800acb6:	e00c      	b.n	800acd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3308      	adds	r3, #8
 800acbc:	60fb      	str	r3, [r7, #12]
 800acbe:	e002      	b.n	800acc6 <vListInsert+0x2e>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d2f6      	bcs.n	800acc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	1c5a      	adds	r2, r3, #1
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	601a      	str	r2, [r3, #0]
}
 800acfe:	bf00      	nop
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b085      	sub	sp, #20
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	6892      	ldr	r2, [r2, #8]
 800ad20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	6852      	ldr	r2, [r2, #4]
 800ad2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d103      	bne.n	800ad3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	689a      	ldr	r2, [r3, #8]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	1e5a      	subs	r2, r3, #1
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
	...

0800ad60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08e      	sub	sp, #56	; 0x38
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d109      	bne.n	800ad90 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad8e:	e7fe      	b.n	800ad8e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <xQueueGenericSend+0x3e>
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <xQueueGenericSend+0x42>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e000      	b.n	800ada4 <xQueueGenericSend+0x44>
 800ada2:	2300      	movs	r3, #0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d109      	bne.n	800adbc <xQueueGenericSend+0x5c>
 800ada8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adac:	f383 8811 	msr	BASEPRI, r3
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	627b      	str	r3, [r7, #36]	; 0x24
 800adba:	e7fe      	b.n	800adba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d103      	bne.n	800adca <xQueueGenericSend+0x6a>
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d101      	bne.n	800adce <xQueueGenericSend+0x6e>
 800adca:	2301      	movs	r3, #1
 800adcc:	e000      	b.n	800add0 <xQueueGenericSend+0x70>
 800adce:	2300      	movs	r3, #0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d109      	bne.n	800ade8 <xQueueGenericSend+0x88>
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	623b      	str	r3, [r7, #32]
 800ade6:	e7fe      	b.n	800ade6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ade8:	f000 fd26 	bl	800b838 <xTaskGetSchedulerState>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <xQueueGenericSend+0x98>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <xQueueGenericSend+0x9c>
 800adf8:	2301      	movs	r3, #1
 800adfa:	e000      	b.n	800adfe <xQueueGenericSend+0x9e>
 800adfc:	2300      	movs	r3, #0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <xQueueGenericSend+0xb6>
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	e7fe      	b.n	800ae14 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae16:	f000 fe2f 	bl	800ba78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d302      	bcc.n	800ae2c <xQueueGenericSend+0xcc>
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d129      	bne.n	800ae80 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	68b9      	ldr	r1, [r7, #8]
 800ae30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae32:	f000 f923 	bl	800b07c <prvCopyDataToQueue>
 800ae36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d010      	beq.n	800ae62 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	3324      	adds	r3, #36	; 0x24
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fbf3 	bl	800b630 <xTaskRemoveFromEventList>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d013      	beq.n	800ae78 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae50:	4b3f      	ldr	r3, [pc, #252]	; (800af50 <xQueueGenericSend+0x1f0>)
 800ae52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	e00a      	b.n	800ae78 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d007      	beq.n	800ae78 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae68:	4b39      	ldr	r3, [pc, #228]	; (800af50 <xQueueGenericSend+0x1f0>)
 800ae6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae78:	f000 fe2c 	bl	800bad4 <vPortExitCritical>
				return pdPASS;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e063      	b.n	800af48 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d103      	bne.n	800ae8e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae86:	f000 fe25 	bl	800bad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e05c      	b.n	800af48 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d106      	bne.n	800aea2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae94:	f107 0314 	add.w	r3, r7, #20
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 fc2b 	bl	800b6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aea2:	f000 fe17 	bl	800bad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aea6:	f000 f9bd 	bl	800b224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeaa:	f000 fde5 	bl	800ba78 <vPortEnterCritical>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb4:	b25b      	sxtb	r3, r3
 800aeb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeba:	d103      	bne.n	800aec4 <xQueueGenericSend+0x164>
 800aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeca:	b25b      	sxtb	r3, r3
 800aecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed0:	d103      	bne.n	800aeda <xQueueGenericSend+0x17a>
 800aed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeda:	f000 fdfb 	bl	800bad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aede:	1d3a      	adds	r2, r7, #4
 800aee0:	f107 0314 	add.w	r3, r7, #20
 800aee4:	4611      	mov	r1, r2
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 fc1a 	bl	800b720 <xTaskCheckForTimeOut>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d124      	bne.n	800af3c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef4:	f000 f97e 	bl	800b1f4 <prvIsQueueFull>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d018      	beq.n	800af30 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	3310      	adds	r3, #16
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	4611      	mov	r1, r2
 800af06:	4618      	mov	r0, r3
 800af08:	f000 fb6e 	bl	800b5e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0e:	f000 f91f 	bl	800b150 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af12:	f000 f995 	bl	800b240 <xTaskResumeAll>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f47f af7c 	bne.w	800ae16 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800af1e:	4b0c      	ldr	r3, [pc, #48]	; (800af50 <xQueueGenericSend+0x1f0>)
 800af20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	e772      	b.n	800ae16 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af32:	f000 f90d 	bl	800b150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af36:	f000 f983 	bl	800b240 <xTaskResumeAll>
 800af3a:	e76c      	b.n	800ae16 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3e:	f000 f907 	bl	800b150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af42:	f000 f97d 	bl	800b240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3738      	adds	r7, #56	; 0x38
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	e000ed04 	.word	0xe000ed04

0800af54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08e      	sub	sp, #56	; 0x38
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d109      	bne.n	800af80 <xQueueGenericSendFromISR+0x2c>
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
 800af7e:	e7fe      	b.n	800af7e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d103      	bne.n	800af8e <xQueueGenericSendFromISR+0x3a>
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <xQueueGenericSendFromISR+0x3e>
 800af8e:	2301      	movs	r3, #1
 800af90:	e000      	b.n	800af94 <xQueueGenericSendFromISR+0x40>
 800af92:	2300      	movs	r3, #0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d109      	bne.n	800afac <xQueueGenericSendFromISR+0x58>
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	623b      	str	r3, [r7, #32]
 800afaa:	e7fe      	b.n	800afaa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d103      	bne.n	800afba <xQueueGenericSendFromISR+0x66>
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d101      	bne.n	800afbe <xQueueGenericSendFromISR+0x6a>
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <xQueueGenericSendFromISR+0x6c>
 800afbe:	2300      	movs	r3, #0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d109      	bne.n	800afd8 <xQueueGenericSendFromISR+0x84>
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	61fb      	str	r3, [r7, #28]
 800afd6:	e7fe      	b.n	800afd6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afd8:	f000 fdfe 	bl	800bbd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afdc:	f3ef 8211 	mrs	r2, BASEPRI
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	61ba      	str	r2, [r7, #24]
 800aff2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aff4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aff6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b000:	429a      	cmp	r2, r3
 800b002:	d302      	bcc.n	800b00a <xQueueGenericSendFromISR+0xb6>
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	2b02      	cmp	r3, #2
 800b008:	d12c      	bne.n	800b064 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b01a:	f000 f82f 	bl	800b07c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b01e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b026:	d112      	bne.n	800b04e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d016      	beq.n	800b05e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	3324      	adds	r3, #36	; 0x24
 800b034:	4618      	mov	r0, r3
 800b036:	f000 fafb 	bl	800b630 <xTaskRemoveFromEventList>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00e      	beq.n	800b05e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00b      	beq.n	800b05e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	e007      	b.n	800b05e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b04e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b052:	3301      	adds	r3, #1
 800b054:	b2db      	uxtb	r3, r3
 800b056:	b25a      	sxtb	r2, r3
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b05e:	2301      	movs	r3, #1
 800b060:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b062:	e001      	b.n	800b068 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b064:	2300      	movs	r3, #0
 800b066:	637b      	str	r3, [r7, #52]	; 0x34
 800b068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b074:	4618      	mov	r0, r3
 800b076:	3738      	adds	r7, #56	; 0x38
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b088:	2300      	movs	r3, #0
 800b08a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b090:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10d      	bne.n	800b0b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d14d      	bne.n	800b13e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fbe4 	bl	800b874 <xTaskPriorityDisinherit>
 800b0ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	609a      	str	r2, [r3, #8]
 800b0b4:	e043      	b.n	800b13e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d119      	bne.n	800b0f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6858      	ldr	r0, [r3, #4]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	68b9      	ldr	r1, [r7, #8]
 800b0c8:	f000 fe96 	bl	800bdf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d4:	441a      	add	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d32b      	bcc.n	800b13e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	605a      	str	r2, [r3, #4]
 800b0ee:	e026      	b.n	800b13e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	68d8      	ldr	r0, [r3, #12]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	f000 fe7c 	bl	800bdf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	68da      	ldr	r2, [r3, #12]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b108:	425b      	negs	r3, r3
 800b10a:	441a      	add	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	68da      	ldr	r2, [r3, #12]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d207      	bcs.n	800b12c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	689a      	ldr	r2, [r3, #8]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b124:	425b      	negs	r3, r3
 800b126:	441a      	add	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d105      	bne.n	800b13e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	1c5a      	adds	r2, r3, #1
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b146:	697b      	ldr	r3, [r7, #20]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b158:	f000 fc8e 	bl	800ba78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b162:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b164:	e011      	b.n	800b18a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d012      	beq.n	800b194 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3324      	adds	r3, #36	; 0x24
 800b172:	4618      	mov	r0, r3
 800b174:	f000 fa5c 	bl	800b630 <xTaskRemoveFromEventList>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b17e:	f000 fb2f 	bl	800b7e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	3b01      	subs	r3, #1
 800b186:	b2db      	uxtb	r3, r3
 800b188:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	dce9      	bgt.n	800b166 <prvUnlockQueue+0x16>
 800b192:	e000      	b.n	800b196 <prvUnlockQueue+0x46>
					break;
 800b194:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	22ff      	movs	r2, #255	; 0xff
 800b19a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b19e:	f000 fc99 	bl	800bad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b1a2:	f000 fc69 	bl	800ba78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1ae:	e011      	b.n	800b1d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d012      	beq.n	800b1de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3310      	adds	r3, #16
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fa37 	bl	800b630 <xTaskRemoveFromEventList>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1c8:	f000 fb0a 	bl	800b7e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dce9      	bgt.n	800b1b0 <prvUnlockQueue+0x60>
 800b1dc:	e000      	b.n	800b1e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	22ff      	movs	r2, #255	; 0xff
 800b1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1e8:	f000 fc74 	bl	800bad4 <vPortExitCritical>
}
 800b1ec:	bf00      	nop
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1fc:	f000 fc3c 	bl	800ba78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b208:	429a      	cmp	r2, r3
 800b20a:	d102      	bne.n	800b212 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b20c:	2301      	movs	r3, #1
 800b20e:	60fb      	str	r3, [r7, #12]
 800b210:	e001      	b.n	800b216 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b212:	2300      	movs	r3, #0
 800b214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b216:	f000 fc5d 	bl	800bad4 <vPortExitCritical>

	return xReturn;
 800b21a:	68fb      	ldr	r3, [r7, #12]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b224:	b480      	push	{r7}
 800b226:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b228:	4b04      	ldr	r3, [pc, #16]	; (800b23c <vTaskSuspendAll+0x18>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3301      	adds	r3, #1
 800b22e:	4a03      	ldr	r2, [pc, #12]	; (800b23c <vTaskSuspendAll+0x18>)
 800b230:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b232:	bf00      	nop
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	200003a8 	.word	0x200003a8

0800b240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b24e:	4b41      	ldr	r3, [pc, #260]	; (800b354 <xTaskResumeAll+0x114>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d109      	bne.n	800b26a <xTaskResumeAll+0x2a>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	e7fe      	b.n	800b268 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b26a:	f000 fc05 	bl	800ba78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b26e:	4b39      	ldr	r3, [pc, #228]	; (800b354 <xTaskResumeAll+0x114>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3b01      	subs	r3, #1
 800b274:	4a37      	ldr	r2, [pc, #220]	; (800b354 <xTaskResumeAll+0x114>)
 800b276:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b278:	4b36      	ldr	r3, [pc, #216]	; (800b354 <xTaskResumeAll+0x114>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d161      	bne.n	800b344 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b280:	4b35      	ldr	r3, [pc, #212]	; (800b358 <xTaskResumeAll+0x118>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d05d      	beq.n	800b344 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b288:	e02e      	b.n	800b2e8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b28a:	4b34      	ldr	r3, [pc, #208]	; (800b35c <xTaskResumeAll+0x11c>)
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3318      	adds	r3, #24
 800b296:	4618      	mov	r0, r3
 800b298:	f7ff fd37 	bl	800ad0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	3304      	adds	r3, #4
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff fd32 	bl	800ad0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	409a      	lsls	r2, r3
 800b2ae:	4b2c      	ldr	r3, [pc, #176]	; (800b360 <xTaskResumeAll+0x120>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	4a2a      	ldr	r2, [pc, #168]	; (800b360 <xTaskResumeAll+0x120>)
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2bc:	4613      	mov	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4a27      	ldr	r2, [pc, #156]	; (800b364 <xTaskResumeAll+0x124>)
 800b2c6:	441a      	add	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	f7ff fcbe 	bl	800ac50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d8:	4b23      	ldr	r3, [pc, #140]	; (800b368 <xTaskResumeAll+0x128>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d302      	bcc.n	800b2e8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b2e2:	4b22      	ldr	r3, [pc, #136]	; (800b36c <xTaskResumeAll+0x12c>)
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2e8:	4b1c      	ldr	r3, [pc, #112]	; (800b35c <xTaskResumeAll+0x11c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1cc      	bne.n	800b28a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2f6:	f000 fa7f 	bl	800b7f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b2fa:	4b1d      	ldr	r3, [pc, #116]	; (800b370 <xTaskResumeAll+0x130>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d010      	beq.n	800b328 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b306:	f000 f837 	bl	800b378 <xTaskIncrementTick>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b310:	4b16      	ldr	r3, [pc, #88]	; (800b36c <xTaskResumeAll+0x12c>)
 800b312:	2201      	movs	r2, #1
 800b314:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	3b01      	subs	r3, #1
 800b31a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1f1      	bne.n	800b306 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b322:	4b13      	ldr	r3, [pc, #76]	; (800b370 <xTaskResumeAll+0x130>)
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b328:	4b10      	ldr	r3, [pc, #64]	; (800b36c <xTaskResumeAll+0x12c>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d009      	beq.n	800b344 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b330:	2301      	movs	r3, #1
 800b332:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b334:	4b0f      	ldr	r3, [pc, #60]	; (800b374 <xTaskResumeAll+0x134>)
 800b336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b344:	f000 fbc6 	bl	800bad4 <vPortExitCritical>

	return xAlreadyYielded;
 800b348:	68bb      	ldr	r3, [r7, #8]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	200003a8 	.word	0x200003a8
 800b358:	20000388 	.word	0x20000388
 800b35c:	20000360 	.word	0x20000360
 800b360:	20000390 	.word	0x20000390
 800b364:	200002cc 	.word	0x200002cc
 800b368:	200002c8 	.word	0x200002c8
 800b36c:	2000039c 	.word	0x2000039c
 800b370:	20000398 	.word	0x20000398
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b37e:	2300      	movs	r3, #0
 800b380:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b382:	4b4e      	ldr	r3, [pc, #312]	; (800b4bc <xTaskIncrementTick+0x144>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	f040 8087 	bne.w	800b49a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b38c:	4b4c      	ldr	r3, [pc, #304]	; (800b4c0 <xTaskIncrementTick+0x148>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3301      	adds	r3, #1
 800b392:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b394:	4a4a      	ldr	r2, [pc, #296]	; (800b4c0 <xTaskIncrementTick+0x148>)
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d11f      	bne.n	800b3e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3a0:	4b48      	ldr	r3, [pc, #288]	; (800b4c4 <xTaskIncrementTick+0x14c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d009      	beq.n	800b3be <xTaskIncrementTick+0x46>
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	f383 8811 	msr	BASEPRI, r3
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	603b      	str	r3, [r7, #0]
 800b3bc:	e7fe      	b.n	800b3bc <xTaskIncrementTick+0x44>
 800b3be:	4b41      	ldr	r3, [pc, #260]	; (800b4c4 <xTaskIncrementTick+0x14c>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	4b40      	ldr	r3, [pc, #256]	; (800b4c8 <xTaskIncrementTick+0x150>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a3e      	ldr	r2, [pc, #248]	; (800b4c4 <xTaskIncrementTick+0x14c>)
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	4a3e      	ldr	r2, [pc, #248]	; (800b4c8 <xTaskIncrementTick+0x150>)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	4b3e      	ldr	r3, [pc, #248]	; (800b4cc <xTaskIncrementTick+0x154>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	4a3c      	ldr	r2, [pc, #240]	; (800b4cc <xTaskIncrementTick+0x154>)
 800b3da:	6013      	str	r3, [r2, #0]
 800b3dc:	f000 fa0c 	bl	800b7f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3e0:	4b3b      	ldr	r3, [pc, #236]	; (800b4d0 <xTaskIncrementTick+0x158>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d348      	bcc.n	800b47c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ea:	4b36      	ldr	r3, [pc, #216]	; (800b4c4 <xTaskIncrementTick+0x14c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d104      	bne.n	800b3fe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3f4:	4b36      	ldr	r3, [pc, #216]	; (800b4d0 <xTaskIncrementTick+0x158>)
 800b3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fa:	601a      	str	r2, [r3, #0]
					break;
 800b3fc:	e03e      	b.n	800b47c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3fe:	4b31      	ldr	r3, [pc, #196]	; (800b4c4 <xTaskIncrementTick+0x14c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	429a      	cmp	r2, r3
 800b414:	d203      	bcs.n	800b41e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b416:	4a2e      	ldr	r2, [pc, #184]	; (800b4d0 <xTaskIncrementTick+0x158>)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b41c:	e02e      	b.n	800b47c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	3304      	adds	r3, #4
 800b422:	4618      	mov	r0, r3
 800b424:	f7ff fc71 	bl	800ad0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d004      	beq.n	800b43a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	3318      	adds	r3, #24
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff fc68 	bl	800ad0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43e:	2201      	movs	r2, #1
 800b440:	409a      	lsls	r2, r3
 800b442:	4b24      	ldr	r3, [pc, #144]	; (800b4d4 <xTaskIncrementTick+0x15c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4313      	orrs	r3, r2
 800b448:	4a22      	ldr	r2, [pc, #136]	; (800b4d4 <xTaskIncrementTick+0x15c>)
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b450:	4613      	mov	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4a1f      	ldr	r2, [pc, #124]	; (800b4d8 <xTaskIncrementTick+0x160>)
 800b45a:	441a      	add	r2, r3
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	3304      	adds	r3, #4
 800b460:	4619      	mov	r1, r3
 800b462:	4610      	mov	r0, r2
 800b464:	f7ff fbf4 	bl	800ac50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46c:	4b1b      	ldr	r3, [pc, #108]	; (800b4dc <xTaskIncrementTick+0x164>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b472:	429a      	cmp	r2, r3
 800b474:	d3b9      	bcc.n	800b3ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b476:	2301      	movs	r3, #1
 800b478:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b47a:	e7b6      	b.n	800b3ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b47c:	4b17      	ldr	r3, [pc, #92]	; (800b4dc <xTaskIncrementTick+0x164>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b482:	4915      	ldr	r1, [pc, #84]	; (800b4d8 <xTaskIncrementTick+0x160>)
 800b484:	4613      	mov	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	440b      	add	r3, r1
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b01      	cmp	r3, #1
 800b492:	d907      	bls.n	800b4a4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b494:	2301      	movs	r3, #1
 800b496:	617b      	str	r3, [r7, #20]
 800b498:	e004      	b.n	800b4a4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b49a:	4b11      	ldr	r3, [pc, #68]	; (800b4e0 <xTaskIncrementTick+0x168>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	4a0f      	ldr	r2, [pc, #60]	; (800b4e0 <xTaskIncrementTick+0x168>)
 800b4a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b4a4:	4b0f      	ldr	r3, [pc, #60]	; (800b4e4 <xTaskIncrementTick+0x16c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b4b0:	697b      	ldr	r3, [r7, #20]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	200003a8 	.word	0x200003a8
 800b4c0:	2000038c 	.word	0x2000038c
 800b4c4:	20000358 	.word	0x20000358
 800b4c8:	2000035c 	.word	0x2000035c
 800b4cc:	200003a0 	.word	0x200003a0
 800b4d0:	200003a4 	.word	0x200003a4
 800b4d4:	20000390 	.word	0x20000390
 800b4d8:	200002cc 	.word	0x200002cc
 800b4dc:	200002c8 	.word	0x200002c8
 800b4e0:	20000398 	.word	0x20000398
 800b4e4:	2000039c 	.word	0x2000039c

0800b4e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4ee:	4b39      	ldr	r3, [pc, #228]	; (800b5d4 <vTaskSwitchContext+0xec>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d003      	beq.n	800b4fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4f6:	4b38      	ldr	r3, [pc, #224]	; (800b5d8 <vTaskSwitchContext+0xf0>)
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4fc:	e065      	b.n	800b5ca <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800b4fe:	4b36      	ldr	r3, [pc, #216]	; (800b5d8 <vTaskSwitchContext+0xf0>)
 800b500:	2200      	movs	r2, #0
 800b502:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b504:	4b35      	ldr	r3, [pc, #212]	; (800b5dc <vTaskSwitchContext+0xf4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50a:	61fb      	str	r3, [r7, #28]
 800b50c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b510:	61bb      	str	r3, [r7, #24]
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	69ba      	ldr	r2, [r7, #24]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d111      	bne.n	800b540 <vTaskSwitchContext+0x58>
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	3304      	adds	r3, #4
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	429a      	cmp	r2, r3
 800b526:	d10b      	bne.n	800b540 <vTaskSwitchContext+0x58>
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	3308      	adds	r3, #8
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	429a      	cmp	r2, r3
 800b532:	d105      	bne.n	800b540 <vTaskSwitchContext+0x58>
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	330c      	adds	r3, #12
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d008      	beq.n	800b552 <vTaskSwitchContext+0x6a>
 800b540:	4b26      	ldr	r3, [pc, #152]	; (800b5dc <vTaskSwitchContext+0xf4>)
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	4b25      	ldr	r3, [pc, #148]	; (800b5dc <vTaskSwitchContext+0xf4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3334      	adds	r3, #52	; 0x34
 800b54a:	4619      	mov	r1, r3
 800b54c:	4610      	mov	r0, r2
 800b54e:	f7f5 fa57 	bl	8000a00 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b552:	4b23      	ldr	r3, [pc, #140]	; (800b5e0 <vTaskSwitchContext+0xf8>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	fab3 f383 	clz	r3, r3
 800b55e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b560:	7afb      	ldrb	r3, [r7, #11]
 800b562:	f1c3 031f 	rsb	r3, r3, #31
 800b566:	617b      	str	r3, [r7, #20]
 800b568:	491e      	ldr	r1, [pc, #120]	; (800b5e4 <vTaskSwitchContext+0xfc>)
 800b56a:	697a      	ldr	r2, [r7, #20]
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	440b      	add	r3, r1
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d109      	bne.n	800b590 <vTaskSwitchContext+0xa8>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	607b      	str	r3, [r7, #4]
 800b58e:	e7fe      	b.n	800b58e <vTaskSwitchContext+0xa6>
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	4613      	mov	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4a12      	ldr	r2, [pc, #72]	; (800b5e4 <vTaskSwitchContext+0xfc>)
 800b59c:	4413      	add	r3, r2
 800b59e:	613b      	str	r3, [r7, #16]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	605a      	str	r2, [r3, #4]
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d104      	bne.n	800b5c0 <vTaskSwitchContext+0xd8>
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	605a      	str	r2, [r3, #4]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	4a05      	ldr	r2, [pc, #20]	; (800b5dc <vTaskSwitchContext+0xf4>)
 800b5c8:	6013      	str	r3, [r2, #0]
}
 800b5ca:	bf00      	nop
 800b5cc:	3720      	adds	r7, #32
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	200003a8 	.word	0x200003a8
 800b5d8:	2000039c 	.word	0x2000039c
 800b5dc:	200002c8 	.word	0x200002c8
 800b5e0:	20000390 	.word	0x20000390
 800b5e4:	200002cc 	.word	0x200002cc

0800b5e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d109      	bne.n	800b60c <vTaskPlaceOnEventList+0x24>
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	60fb      	str	r3, [r7, #12]
 800b60a:	e7fe      	b.n	800b60a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b60c:	4b07      	ldr	r3, [pc, #28]	; (800b62c <vTaskPlaceOnEventList+0x44>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	3318      	adds	r3, #24
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff fb3f 	bl	800ac98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b61a:	2101      	movs	r1, #1
 800b61c:	6838      	ldr	r0, [r7, #0]
 800b61e:	f000 f9ad 	bl	800b97c <prvAddCurrentTaskToDelayedList>
}
 800b622:	bf00      	nop
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	200002c8 	.word	0x200002c8

0800b630 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d109      	bne.n	800b65a <xTaskRemoveFromEventList+0x2a>
 800b646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64a:	f383 8811 	msr	BASEPRI, r3
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	e7fe      	b.n	800b658 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	3318      	adds	r3, #24
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff fb53 	bl	800ad0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b664:	4b1d      	ldr	r3, [pc, #116]	; (800b6dc <xTaskRemoveFromEventList+0xac>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d11c      	bne.n	800b6a6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	3304      	adds	r3, #4
 800b670:	4618      	mov	r0, r3
 800b672:	f7ff fb4a 	bl	800ad0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67a:	2201      	movs	r2, #1
 800b67c:	409a      	lsls	r2, r3
 800b67e:	4b18      	ldr	r3, [pc, #96]	; (800b6e0 <xTaskRemoveFromEventList+0xb0>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4313      	orrs	r3, r2
 800b684:	4a16      	ldr	r2, [pc, #88]	; (800b6e0 <xTaskRemoveFromEventList+0xb0>)
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68c:	4613      	mov	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	4413      	add	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4a13      	ldr	r2, [pc, #76]	; (800b6e4 <xTaskRemoveFromEventList+0xb4>)
 800b696:	441a      	add	r2, r3
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4619      	mov	r1, r3
 800b69e:	4610      	mov	r0, r2
 800b6a0:	f7ff fad6 	bl	800ac50 <vListInsertEnd>
 800b6a4:	e005      	b.n	800b6b2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	3318      	adds	r3, #24
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	480e      	ldr	r0, [pc, #56]	; (800b6e8 <xTaskRemoveFromEventList+0xb8>)
 800b6ae:	f7ff facf 	bl	800ac50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b6:	4b0d      	ldr	r3, [pc, #52]	; (800b6ec <xTaskRemoveFromEventList+0xbc>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d905      	bls.n	800b6cc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6c4:	4b0a      	ldr	r3, [pc, #40]	; (800b6f0 <xTaskRemoveFromEventList+0xc0>)
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	e001      	b.n	800b6d0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6d0:	697b      	ldr	r3, [r7, #20]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	200003a8 	.word	0x200003a8
 800b6e0:	20000390 	.word	0x20000390
 800b6e4:	200002cc 	.word	0x200002cc
 800b6e8:	20000360 	.word	0x20000360
 800b6ec:	200002c8 	.word	0x200002c8
 800b6f0:	2000039c 	.word	0x2000039c

0800b6f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6fc:	4b06      	ldr	r3, [pc, #24]	; (800b718 <vTaskInternalSetTimeOutState+0x24>)
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b704:	4b05      	ldr	r3, [pc, #20]	; (800b71c <vTaskInternalSetTimeOutState+0x28>)
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	605a      	str	r2, [r3, #4]
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	200003a0 	.word	0x200003a0
 800b71c:	2000038c 	.word	0x2000038c

0800b720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d109      	bne.n	800b744 <xTaskCheckForTimeOut+0x24>
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	613b      	str	r3, [r7, #16]
 800b742:	e7fe      	b.n	800b742 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d109      	bne.n	800b75e <xTaskCheckForTimeOut+0x3e>
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	e7fe      	b.n	800b75c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b75e:	f000 f98b 	bl	800ba78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b762:	4b1d      	ldr	r3, [pc, #116]	; (800b7d8 <xTaskCheckForTimeOut+0xb8>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77a:	d102      	bne.n	800b782 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b77c:	2300      	movs	r3, #0
 800b77e:	61fb      	str	r3, [r7, #28]
 800b780:	e023      	b.n	800b7ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	4b15      	ldr	r3, [pc, #84]	; (800b7dc <xTaskCheckForTimeOut+0xbc>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d007      	beq.n	800b79e <xTaskCheckForTimeOut+0x7e>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	429a      	cmp	r2, r3
 800b796:	d302      	bcc.n	800b79e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b798:	2301      	movs	r3, #1
 800b79a:	61fb      	str	r3, [r7, #28]
 800b79c:	e015      	b.n	800b7ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d20b      	bcs.n	800b7c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff ff9d 	bl	800b6f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	61fb      	str	r3, [r7, #28]
 800b7be:	e004      	b.n	800b7ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7ca:	f000 f983 	bl	800bad4 <vPortExitCritical>

	return xReturn;
 800b7ce:	69fb      	ldr	r3, [r7, #28]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3720      	adds	r7, #32
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	2000038c 	.word	0x2000038c
 800b7dc:	200003a0 	.word	0x200003a0

0800b7e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7e4:	4b03      	ldr	r3, [pc, #12]	; (800b7f4 <vTaskMissedYield+0x14>)
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]
}
 800b7ea:	bf00      	nop
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	2000039c 	.word	0x2000039c

0800b7f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7fe:	4b0c      	ldr	r3, [pc, #48]	; (800b830 <prvResetNextTaskUnblockTime+0x38>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d104      	bne.n	800b812 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b808:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <prvResetNextTaskUnblockTime+0x3c>)
 800b80a:	f04f 32ff 	mov.w	r2, #4294967295
 800b80e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b810:	e008      	b.n	800b824 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b812:	4b07      	ldr	r3, [pc, #28]	; (800b830 <prvResetNextTaskUnblockTime+0x38>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	4a04      	ldr	r2, [pc, #16]	; (800b834 <prvResetNextTaskUnblockTime+0x3c>)
 800b822:	6013      	str	r3, [r2, #0]
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	20000358 	.word	0x20000358
 800b834:	200003a4 	.word	0x200003a4

0800b838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b83e:	4b0b      	ldr	r3, [pc, #44]	; (800b86c <xTaskGetSchedulerState+0x34>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d102      	bne.n	800b84c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b846:	2301      	movs	r3, #1
 800b848:	607b      	str	r3, [r7, #4]
 800b84a:	e008      	b.n	800b85e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b84c:	4b08      	ldr	r3, [pc, #32]	; (800b870 <xTaskGetSchedulerState+0x38>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b854:	2302      	movs	r3, #2
 800b856:	607b      	str	r3, [r7, #4]
 800b858:	e001      	b.n	800b85e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b85a:	2300      	movs	r3, #0
 800b85c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b85e:	687b      	ldr	r3, [r7, #4]
	}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	20000394 	.word	0x20000394
 800b870:	200003a8 	.word	0x200003a8

0800b874 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b880:	2300      	movs	r3, #0
 800b882:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d06c      	beq.n	800b964 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b88a:	4b39      	ldr	r3, [pc, #228]	; (800b970 <xTaskPriorityDisinherit+0xfc>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	429a      	cmp	r2, r3
 800b892:	d009      	beq.n	800b8a8 <xTaskPriorityDisinherit+0x34>
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	60fb      	str	r3, [r7, #12]
 800b8a6:	e7fe      	b.n	800b8a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d109      	bne.n	800b8c4 <xTaskPriorityDisinherit+0x50>
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	60bb      	str	r3, [r7, #8]
 800b8c2:	e7fe      	b.n	800b8c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8c8:	1e5a      	subs	r2, r3, #1
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d044      	beq.n	800b964 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d140      	bne.n	800b964 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff fa0f 	bl	800ad0a <uxListRemove>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d115      	bne.n	800b91e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f6:	491f      	ldr	r1, [pc, #124]	; (800b974 <xTaskPriorityDisinherit+0x100>)
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	440b      	add	r3, r1
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10a      	bne.n	800b91e <xTaskPriorityDisinherit+0xaa>
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90c:	2201      	movs	r2, #1
 800b90e:	fa02 f303 	lsl.w	r3, r2, r3
 800b912:	43da      	mvns	r2, r3
 800b914:	4b18      	ldr	r3, [pc, #96]	; (800b978 <xTaskPriorityDisinherit+0x104>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4013      	ands	r3, r2
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <xTaskPriorityDisinherit+0x104>)
 800b91c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92a:	f1c3 0207 	rsb	r2, r3, #7
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b936:	2201      	movs	r2, #1
 800b938:	409a      	lsls	r2, r3
 800b93a:	4b0f      	ldr	r3, [pc, #60]	; (800b978 <xTaskPriorityDisinherit+0x104>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4313      	orrs	r3, r2
 800b940:	4a0d      	ldr	r2, [pc, #52]	; (800b978 <xTaskPriorityDisinherit+0x104>)
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4a08      	ldr	r2, [pc, #32]	; (800b974 <xTaskPriorityDisinherit+0x100>)
 800b952:	441a      	add	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	3304      	adds	r3, #4
 800b958:	4619      	mov	r1, r3
 800b95a:	4610      	mov	r0, r2
 800b95c:	f7ff f978 	bl	800ac50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b960:	2301      	movs	r3, #1
 800b962:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b964:	697b      	ldr	r3, [r7, #20]
	}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	200002c8 	.word	0x200002c8
 800b974:	200002cc 	.word	0x200002cc
 800b978:	20000390 	.word	0x20000390

0800b97c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b986:	4b29      	ldr	r3, [pc, #164]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b98c:	4b28      	ldr	r3, [pc, #160]	; (800ba30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3304      	adds	r3, #4
 800b992:	4618      	mov	r0, r3
 800b994:	f7ff f9b9 	bl	800ad0a <uxListRemove>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10b      	bne.n	800b9b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b99e:	4b24      	ldr	r3, [pc, #144]	; (800ba30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9aa:	43da      	mvns	r2, r3
 800b9ac:	4b21      	ldr	r3, [pc, #132]	; (800ba34 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	4a20      	ldr	r2, [pc, #128]	; (800ba34 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b9b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9bc:	d10a      	bne.n	800b9d4 <prvAddCurrentTaskToDelayedList+0x58>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d007      	beq.n	800b9d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9c4:	4b1a      	ldr	r3, [pc, #104]	; (800ba30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	481a      	ldr	r0, [pc, #104]	; (800ba38 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b9ce:	f7ff f93f 	bl	800ac50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9d2:	e026      	b.n	800ba22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4413      	add	r3, r2
 800b9da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9dc:	4b14      	ldr	r3, [pc, #80]	; (800ba30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d209      	bcs.n	800ba00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9ec:	4b13      	ldr	r3, [pc, #76]	; (800ba3c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	; (800ba30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	f7ff f94d 	bl	800ac98 <vListInsert>
}
 800b9fe:	e010      	b.n	800ba22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba00:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	4b0a      	ldr	r3, [pc, #40]	; (800ba30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	f7ff f943 	bl	800ac98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba12:	4b0c      	ldr	r3, [pc, #48]	; (800ba44 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d202      	bcs.n	800ba22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ba1c:	4a09      	ldr	r2, [pc, #36]	; (800ba44 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6013      	str	r3, [r2, #0]
}
 800ba22:	bf00      	nop
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	2000038c 	.word	0x2000038c
 800ba30:	200002c8 	.word	0x200002c8
 800ba34:	20000390 	.word	0x20000390
 800ba38:	20000374 	.word	0x20000374
 800ba3c:	2000035c 	.word	0x2000035c
 800ba40:	20000358 	.word	0x20000358
 800ba44:	200003a4 	.word	0x200003a4
	...

0800ba50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba50:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <pxCurrentTCBConst2>)
 800ba52:	6819      	ldr	r1, [r3, #0]
 800ba54:	6808      	ldr	r0, [r1, #0]
 800ba56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5a:	f380 8809 	msr	PSP, r0
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f380 8811 	msr	BASEPRI, r0
 800ba6a:	4770      	bx	lr
 800ba6c:	f3af 8000 	nop.w

0800ba70 <pxCurrentTCBConst2>:
 800ba70:	200002c8 	.word	0x200002c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop

0800ba78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba90:	4b0e      	ldr	r3, [pc, #56]	; (800bacc <vPortEnterCritical+0x54>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	4a0d      	ldr	r2, [pc, #52]	; (800bacc <vPortEnterCritical+0x54>)
 800ba98:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba9a:	4b0c      	ldr	r3, [pc, #48]	; (800bacc <vPortEnterCritical+0x54>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d10e      	bne.n	800bac0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800baa2:	4b0b      	ldr	r3, [pc, #44]	; (800bad0 <vPortEnterCritical+0x58>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d009      	beq.n	800bac0 <vPortEnterCritical+0x48>
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	603b      	str	r3, [r7, #0]
 800babe:	e7fe      	b.n	800babe <vPortEnterCritical+0x46>
	}
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	20000088 	.word	0x20000088
 800bad0:	e000ed04 	.word	0xe000ed04

0800bad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bada:	4b11      	ldr	r3, [pc, #68]	; (800bb20 <vPortExitCritical+0x4c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d109      	bne.n	800baf6 <vPortExitCritical+0x22>
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	607b      	str	r3, [r7, #4]
 800baf4:	e7fe      	b.n	800baf4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800baf6:	4b0a      	ldr	r3, [pc, #40]	; (800bb20 <vPortExitCritical+0x4c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	4a08      	ldr	r2, [pc, #32]	; (800bb20 <vPortExitCritical+0x4c>)
 800bafe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb00:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <vPortExitCritical+0x4c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d104      	bne.n	800bb12 <vPortExitCritical+0x3e>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb12:	bf00      	nop
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	20000088 	.word	0x20000088
	...

0800bb30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb30:	f3ef 8009 	mrs	r0, PSP
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	4b15      	ldr	r3, [pc, #84]	; (800bb90 <pxCurrentTCBConst>)
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	f01e 0f10 	tst.w	lr, #16
 800bb40:	bf08      	it	eq
 800bb42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4a:	6010      	str	r0, [r2, #0]
 800bb4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb54:	f380 8811 	msr	BASEPRI, r0
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f7ff fcc2 	bl	800b4e8 <vTaskSwitchContext>
 800bb64:	f04f 0000 	mov.w	r0, #0
 800bb68:	f380 8811 	msr	BASEPRI, r0
 800bb6c:	bc09      	pop	{r0, r3}
 800bb6e:	6819      	ldr	r1, [r3, #0]
 800bb70:	6808      	ldr	r0, [r1, #0]
 800bb72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb76:	f01e 0f10 	tst.w	lr, #16
 800bb7a:	bf08      	it	eq
 800bb7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb80:	f380 8809 	msr	PSP, r0
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	f3af 8000 	nop.w

0800bb90 <pxCurrentTCBConst>:
 800bb90:	200002c8 	.word	0x200002c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop

0800bb98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bbb0:	f7ff fbe2 	bl	800b378 <xTaskIncrementTick>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbba:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <SysTick_Handler+0x3c>)
 800bbbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	e000ed04 	.word	0xe000ed04

0800bbd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbde:	f3ef 8305 	mrs	r3, IPSR
 800bbe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b0f      	cmp	r3, #15
 800bbe8:	d913      	bls.n	800bc12 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbea:	4a16      	ldr	r2, [pc, #88]	; (800bc44 <vPortValidateInterruptPriority+0x6c>)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbf4:	4b14      	ldr	r3, [pc, #80]	; (800bc48 <vPortValidateInterruptPriority+0x70>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	7afa      	ldrb	r2, [r7, #11]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d209      	bcs.n	800bc12 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	607b      	str	r3, [r7, #4]
 800bc10:	e7fe      	b.n	800bc10 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc12:	4b0e      	ldr	r3, [pc, #56]	; (800bc4c <vPortValidateInterruptPriority+0x74>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc1a:	4b0d      	ldr	r3, [pc, #52]	; (800bc50 <vPortValidateInterruptPriority+0x78>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d909      	bls.n	800bc36 <vPortValidateInterruptPriority+0x5e>
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	603b      	str	r3, [r7, #0]
 800bc34:	e7fe      	b.n	800bc34 <vPortValidateInterruptPriority+0x5c>
	}
 800bc36:	bf00      	nop
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	e000e3f0 	.word	0xe000e3f0
 800bc48:	200003ac 	.word	0x200003ac
 800bc4c:	e000ed0c 	.word	0xe000ed0c
 800bc50:	200003b0 	.word	0x200003b0

0800bc54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fec6 	bl	800a9f4 <USBH_LL_IncTimer>
}
 800bc68:	bf00      	nop
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe ff0a 	bl	800aa98 <USBH_LL_Connect>
}
 800bc84:	bf00      	nop
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe ff1f 	bl	800aade <USBH_LL_Disconnect>
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	70fb      	strb	r3, [r7, #3]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fe ff3f 	bl	800ab42 <USBH_LL_NotifyURBChange>
#endif
}
 800bcc4:	bf00      	nop
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fe feb4 	bl	800aa48 <USBH_LL_PortEnabled>
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fec0 	bl	800aa7c <USBH_LL_PortDisabled>
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7f9 f91b 	bl	8004f56 <HAL_HCD_Stop>
 800bd20:	4603      	mov	r3, r0
 800bd22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 f808 	bl	800bd3c <USBH_Get_USB_Status>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd4a:	79fb      	ldrb	r3, [r7, #7]
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d817      	bhi.n	800bd80 <USBH_Get_USB_Status+0x44>
 800bd50:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <USBH_Get_USB_Status+0x1c>)
 800bd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd56:	bf00      	nop
 800bd58:	0800bd69 	.word	0x0800bd69
 800bd5c:	0800bd6f 	.word	0x0800bd6f
 800bd60:	0800bd75 	.word	0x0800bd75
 800bd64:	0800bd7b 	.word	0x0800bd7b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6c:	e00b      	b.n	800bd86 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bd6e:	2302      	movs	r3, #2
 800bd70:	73fb      	strb	r3, [r7, #15]
    break;
 800bd72:	e008      	b.n	800bd86 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bd74:	2301      	movs	r3, #1
 800bd76:	73fb      	strb	r3, [r7, #15]
    break;
 800bd78:	e005      	b.n	800bd86 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd7e:	e002      	b.n	800bd86 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bd80:	2302      	movs	r3, #2
 800bd82:	73fb      	strb	r3, [r7, #15]
    break;
 800bd84:	bf00      	nop
  }
  return usb_status;
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <__errno>:
 800bd94:	4b01      	ldr	r3, [pc, #4]	; (800bd9c <__errno+0x8>)
 800bd96:	6818      	ldr	r0, [r3, #0]
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	2000008c 	.word	0x2000008c

0800bda0 <__libc_init_array>:
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	4e0d      	ldr	r6, [pc, #52]	; (800bdd8 <__libc_init_array+0x38>)
 800bda4:	4c0d      	ldr	r4, [pc, #52]	; (800bddc <__libc_init_array+0x3c>)
 800bda6:	1ba4      	subs	r4, r4, r6
 800bda8:	10a4      	asrs	r4, r4, #2
 800bdaa:	2500      	movs	r5, #0
 800bdac:	42a5      	cmp	r5, r4
 800bdae:	d109      	bne.n	800bdc4 <__libc_init_array+0x24>
 800bdb0:	4e0b      	ldr	r6, [pc, #44]	; (800bde0 <__libc_init_array+0x40>)
 800bdb2:	4c0c      	ldr	r4, [pc, #48]	; (800bde4 <__libc_init_array+0x44>)
 800bdb4:	f000 f8a0 	bl	800bef8 <_init>
 800bdb8:	1ba4      	subs	r4, r4, r6
 800bdba:	10a4      	asrs	r4, r4, #2
 800bdbc:	2500      	movs	r5, #0
 800bdbe:	42a5      	cmp	r5, r4
 800bdc0:	d105      	bne.n	800bdce <__libc_init_array+0x2e>
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdc8:	4798      	blx	r3
 800bdca:	3501      	adds	r5, #1
 800bdcc:	e7ee      	b.n	800bdac <__libc_init_array+0xc>
 800bdce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdd2:	4798      	blx	r3
 800bdd4:	3501      	adds	r5, #1
 800bdd6:	e7f2      	b.n	800bdbe <__libc_init_array+0x1e>
 800bdd8:	0800dec4 	.word	0x0800dec4
 800bddc:	0800dec4 	.word	0x0800dec4
 800bde0:	0800dec4 	.word	0x0800dec4
 800bde4:	0800dec8 	.word	0x0800dec8

0800bde8 <malloc>:
 800bde8:	4b02      	ldr	r3, [pc, #8]	; (800bdf4 <malloc+0xc>)
 800bdea:	4601      	mov	r1, r0
 800bdec:	6818      	ldr	r0, [r3, #0]
 800bdee:	f000 b817 	b.w	800be20 <_malloc_r>
 800bdf2:	bf00      	nop
 800bdf4:	2000008c 	.word	0x2000008c

0800bdf8 <memcpy>:
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	1e43      	subs	r3, r0, #1
 800bdfc:	440a      	add	r2, r1
 800bdfe:	4291      	cmp	r1, r2
 800be00:	d100      	bne.n	800be04 <memcpy+0xc>
 800be02:	bd10      	pop	{r4, pc}
 800be04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be0c:	e7f7      	b.n	800bdfe <memcpy+0x6>

0800be0e <memset>:
 800be0e:	4402      	add	r2, r0
 800be10:	4603      	mov	r3, r0
 800be12:	4293      	cmp	r3, r2
 800be14:	d100      	bne.n	800be18 <memset+0xa>
 800be16:	4770      	bx	lr
 800be18:	f803 1b01 	strb.w	r1, [r3], #1
 800be1c:	e7f9      	b.n	800be12 <memset+0x4>
	...

0800be20 <_malloc_r>:
 800be20:	b570      	push	{r4, r5, r6, lr}
 800be22:	1ccd      	adds	r5, r1, #3
 800be24:	f025 0503 	bic.w	r5, r5, #3
 800be28:	3508      	adds	r5, #8
 800be2a:	2d0c      	cmp	r5, #12
 800be2c:	bf38      	it	cc
 800be2e:	250c      	movcc	r5, #12
 800be30:	2d00      	cmp	r5, #0
 800be32:	4606      	mov	r6, r0
 800be34:	db01      	blt.n	800be3a <_malloc_r+0x1a>
 800be36:	42a9      	cmp	r1, r5
 800be38:	d903      	bls.n	800be42 <_malloc_r+0x22>
 800be3a:	230c      	movs	r3, #12
 800be3c:	6033      	str	r3, [r6, #0]
 800be3e:	2000      	movs	r0, #0
 800be40:	bd70      	pop	{r4, r5, r6, pc}
 800be42:	f000 f857 	bl	800bef4 <__malloc_lock>
 800be46:	4a21      	ldr	r2, [pc, #132]	; (800becc <_malloc_r+0xac>)
 800be48:	6814      	ldr	r4, [r2, #0]
 800be4a:	4621      	mov	r1, r4
 800be4c:	b991      	cbnz	r1, 800be74 <_malloc_r+0x54>
 800be4e:	4c20      	ldr	r4, [pc, #128]	; (800bed0 <_malloc_r+0xb0>)
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	b91b      	cbnz	r3, 800be5c <_malloc_r+0x3c>
 800be54:	4630      	mov	r0, r6
 800be56:	f000 f83d 	bl	800bed4 <_sbrk_r>
 800be5a:	6020      	str	r0, [r4, #0]
 800be5c:	4629      	mov	r1, r5
 800be5e:	4630      	mov	r0, r6
 800be60:	f000 f838 	bl	800bed4 <_sbrk_r>
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	d124      	bne.n	800beb2 <_malloc_r+0x92>
 800be68:	230c      	movs	r3, #12
 800be6a:	6033      	str	r3, [r6, #0]
 800be6c:	4630      	mov	r0, r6
 800be6e:	f000 f842 	bl	800bef6 <__malloc_unlock>
 800be72:	e7e4      	b.n	800be3e <_malloc_r+0x1e>
 800be74:	680b      	ldr	r3, [r1, #0]
 800be76:	1b5b      	subs	r3, r3, r5
 800be78:	d418      	bmi.n	800beac <_malloc_r+0x8c>
 800be7a:	2b0b      	cmp	r3, #11
 800be7c:	d90f      	bls.n	800be9e <_malloc_r+0x7e>
 800be7e:	600b      	str	r3, [r1, #0]
 800be80:	50cd      	str	r5, [r1, r3]
 800be82:	18cc      	adds	r4, r1, r3
 800be84:	4630      	mov	r0, r6
 800be86:	f000 f836 	bl	800bef6 <__malloc_unlock>
 800be8a:	f104 000b 	add.w	r0, r4, #11
 800be8e:	1d23      	adds	r3, r4, #4
 800be90:	f020 0007 	bic.w	r0, r0, #7
 800be94:	1ac3      	subs	r3, r0, r3
 800be96:	d0d3      	beq.n	800be40 <_malloc_r+0x20>
 800be98:	425a      	negs	r2, r3
 800be9a:	50e2      	str	r2, [r4, r3]
 800be9c:	e7d0      	b.n	800be40 <_malloc_r+0x20>
 800be9e:	428c      	cmp	r4, r1
 800bea0:	684b      	ldr	r3, [r1, #4]
 800bea2:	bf16      	itet	ne
 800bea4:	6063      	strne	r3, [r4, #4]
 800bea6:	6013      	streq	r3, [r2, #0]
 800bea8:	460c      	movne	r4, r1
 800beaa:	e7eb      	b.n	800be84 <_malloc_r+0x64>
 800beac:	460c      	mov	r4, r1
 800beae:	6849      	ldr	r1, [r1, #4]
 800beb0:	e7cc      	b.n	800be4c <_malloc_r+0x2c>
 800beb2:	1cc4      	adds	r4, r0, #3
 800beb4:	f024 0403 	bic.w	r4, r4, #3
 800beb8:	42a0      	cmp	r0, r4
 800beba:	d005      	beq.n	800bec8 <_malloc_r+0xa8>
 800bebc:	1a21      	subs	r1, r4, r0
 800bebe:	4630      	mov	r0, r6
 800bec0:	f000 f808 	bl	800bed4 <_sbrk_r>
 800bec4:	3001      	adds	r0, #1
 800bec6:	d0cf      	beq.n	800be68 <_malloc_r+0x48>
 800bec8:	6025      	str	r5, [r4, #0]
 800beca:	e7db      	b.n	800be84 <_malloc_r+0x64>
 800becc:	200003b4 	.word	0x200003b4
 800bed0:	200003b8 	.word	0x200003b8

0800bed4 <_sbrk_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4c06      	ldr	r4, [pc, #24]	; (800bef0 <_sbrk_r+0x1c>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4605      	mov	r5, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	6023      	str	r3, [r4, #0]
 800bee0:	f7f5 fd8c 	bl	80019fc <_sbrk>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_sbrk_r+0x1a>
 800bee8:	6823      	ldr	r3, [r4, #0]
 800beea:	b103      	cbz	r3, 800beee <_sbrk_r+0x1a>
 800beec:	602b      	str	r3, [r5, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	20000a14 	.word	0x20000a14

0800bef4 <__malloc_lock>:
 800bef4:	4770      	bx	lr

0800bef6 <__malloc_unlock>:
 800bef6:	4770      	bx	lr

0800bef8 <_init>:
 800bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befa:	bf00      	nop
 800befc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befe:	bc08      	pop	{r3}
 800bf00:	469e      	mov	lr, r3
 800bf02:	4770      	bx	lr

0800bf04 <_fini>:
 800bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf06:	bf00      	nop
 800bf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0a:	bc08      	pop	{r3}
 800bf0c:	469e      	mov	lr, r3
 800bf0e:	4770      	bx	lr
