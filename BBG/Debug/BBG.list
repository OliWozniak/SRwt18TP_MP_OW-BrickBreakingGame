
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fac  0800a0cc  0800a0cc  0001a0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c078  0800c078  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800c078  0800c078  0001c078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c080  0800c080  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c080  0800c080  0001c080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800c088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000060  0800c0e8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  0800c0e8  00020918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003238b  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000601d  00000000  00000000  0005241b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024a0  00000000  00000000  00058438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021e0  00000000  00000000  0005a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bdd6  00000000  00000000  0005cab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000237a1  00000000  00000000  0008888e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5b04  00000000  00000000  000ac02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a1b33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009944  00000000  00000000  001a1bb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a0b4 	.word	0x0800a0b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800a0b4 	.word	0x0800a0b4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_CRC_Init+0x20>)
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <MX_CRC_Init+0x24>)
 80004f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_CRC_Init+0x20>)
 80004fc:	f002 fbf4 	bl	8002ce8 <HAL_CRC_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000506:	f000 fe3d 	bl	8001184 <Error_Handler>
  }

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000314 	.word	0x20000314
 8000514:	40023000 	.word	0x40023000

08000518 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_CRC_MspInit+0x3c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d10d      	bne.n	8000546 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_CRC_MspInit+0x40>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023000 	.word	0x40023000
 8000558:	40023800 	.word	0x40023800

0800055c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <MX_DMA2D_Init+0x60>)
 8000564:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000586:	2200      	movs	r2, #0
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000592:	f002 fd81 	bl	8003098 <HAL_DMA2D_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800059c:	f000 fdf2 	bl	8001184 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005a0:	2101      	movs	r1, #1
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 80005a4:	f002 ffe6 	bl	8003574 <HAL_DMA2D_ConfigLayer>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005ae:	f000 fde9 	bl	8001184 <Error_Handler>
  }

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000031c 	.word	0x2000031c
 80005bc:	4002b000 	.word	0x4002b000

080005c0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_DMA2D_MspInit+0x48>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d115      	bne.n	80005fe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2105      	movs	r1, #5
 80005f2:	205a      	movs	r0, #90	; 0x5a
 80005f4:	f002 fb4e 	bl	8002c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005f8:	205a      	movs	r0, #90	; 0x5a
 80005fa:	f002 fb67 	bl	8002ccc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	4002b000 	.word	0x4002b000
 800060c:	40023800 	.word	0x40023800

08000610 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_FMC_Init+0x98>)
 800062a:	4a20      	ldr	r2, [pc, #128]	; (80006ac <MX_FMC_Init+0x9c>)
 800062c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_FMC_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_FMC_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_FMC_Init+0x98>)
 800063c:	2204      	movs	r2, #4
 800063e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_FMC_Init+0x98>)
 8000642:	2210      	movs	r2, #16
 8000644:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_FMC_Init+0x98>)
 8000648:	2240      	movs	r2, #64	; 0x40
 800064a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_FMC_Init+0x98>)
 800064e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000652:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_FMC_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_FMC_Init+0x98>)
 800065c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000660:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_FMC_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_FMC_Init+0x98>)
 800066a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_FMC_Init+0x98>)
 8000692:	f006 f96b 	bl	800696c <HAL_SDRAM_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800069c:	f000 fd72 	bl	8001184 <Error_Handler>
  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000035c 	.word	0x2000035c
 80006ac:	a0000140 	.word	0xa0000140

080006b0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d16f      	bne.n	80007ac <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006cc:	4b39      	ldr	r3, [pc, #228]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	4a37      	ldr	r2, [pc, #220]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006f2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000700:	230c      	movs	r3, #12
 8000702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	482c      	ldr	r0, [pc, #176]	; (80007bc <HAL_FMC_MspInit+0x10c>)
 800070a:	f003 f861 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800071e:	230c      	movs	r3, #12
 8000720:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <HAL_FMC_MspInit+0x110>)
 8000728:	f003 f852 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800072c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000730:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800073e:	230c      	movs	r3, #12
 8000740:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <HAL_FMC_MspInit+0x114>)
 8000748:	f003 f842 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800074c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000750:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800075e:	230c      	movs	r3, #12
 8000760:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <HAL_FMC_MspInit+0x118>)
 8000768:	f003 f832 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800076c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000770:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077e:	230c      	movs	r3, #12
 8000780:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <HAL_FMC_MspInit+0x11c>)
 8000788:	f003 f822 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800078c:	2360      	movs	r3, #96	; 0x60
 800078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <HAL_FMC_MspInit+0x120>)
 80007a6:	f003 f813 	bl	80037d0 <HAL_GPIO_Init>
 80007aa:	e000      	b.n	80007ae <HAL_FMC_MspInit+0xfe>
    return;
 80007ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000007c 	.word	0x2000007c
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40021400 	.word	0x40021400
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40021800 	.word	0x40021800
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	40020400 	.word	0x40020400

080007d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007dc:	f7ff ff68 	bl	80006b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	; 0x38
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
 800081a:	4b7a      	ldr	r3, [pc, #488]	; (8000a04 <MX_GPIO_Init+0x204>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a79      	ldr	r2, [pc, #484]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b77      	ldr	r3, [pc, #476]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	623b      	str	r3, [r7, #32]
 8000830:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	4b73      	ldr	r3, [pc, #460]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a72      	ldr	r2, [pc, #456]	; (8000a04 <MX_GPIO_Init+0x204>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b70      	ldr	r3, [pc, #448]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
 8000852:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a6b      	ldr	r2, [pc, #428]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	4b65      	ldr	r3, [pc, #404]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a64      	ldr	r2, [pc, #400]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b62      	ldr	r3, [pc, #392]	; (8000a04 <MX_GPIO_Init+0x204>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b5e      	ldr	r3, [pc, #376]	; (8000a04 <MX_GPIO_Init+0x204>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a5d      	ldr	r2, [pc, #372]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b57      	ldr	r3, [pc, #348]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a56      	ldr	r2, [pc, #344]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b54      	ldr	r3, [pc, #336]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b50      	ldr	r3, [pc, #320]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a4f      	ldr	r2, [pc, #316]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b49      	ldr	r3, [pc, #292]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a48      	ldr	r2, [pc, #288]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2116      	movs	r1, #22
 80008fa:	4843      	ldr	r0, [pc, #268]	; (8000a08 <MX_GPIO_Init+0x208>)
 80008fc:	f003 fa1c 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	4841      	ldr	r0, [pc, #260]	; (8000a0c <MX_GPIO_Init+0x20c>)
 8000906:	f003 fa17 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000910:	483f      	ldr	r0, [pc, #252]	; (8000a10 <MX_GPIO_Init+0x210>)
 8000912:	f003 fa11 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800091c:	483d      	ldr	r0, [pc, #244]	; (8000a14 <MX_GPIO_Init+0x214>)
 800091e:	f003 fa0b 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000922:	2316      	movs	r3, #22
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4833      	ldr	r0, [pc, #204]	; (8000a08 <MX_GPIO_Init+0x208>)
 800093a:	f002 ff49 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800093e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <MX_GPIO_Init+0x218>)
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	482e      	ldr	r0, [pc, #184]	; (8000a0c <MX_GPIO_Init+0x20c>)
 8000954:	f002 ff3c 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4827      	ldr	r0, [pc, #156]	; (8000a0c <MX_GPIO_Init+0x20c>)
 8000970:	f002 ff2e 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000974:	2320      	movs	r3, #32
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <MX_GPIO_Init+0x218>)
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4820      	ldr	r0, [pc, #128]	; (8000a08 <MX_GPIO_Init+0x208>)
 8000988:	f002 ff22 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800098c:	2304      	movs	r3, #4
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	481f      	ldr	r0, [pc, #124]	; (8000a1c <MX_GPIO_Init+0x21c>)
 80009a0:	f002 ff16 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4815      	ldr	r0, [pc, #84]	; (8000a10 <MX_GPIO_Init+0x210>)
 80009ba:	f002 ff09 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <MX_GPIO_Init+0x210>)
 80009d8:	f002 fefa 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80009dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <MX_GPIO_Init+0x214>)
 80009f6:	f002 feeb 	bl	80037d0 <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3738      	adds	r7, #56	; 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	40021800 	.word	0x40021800
 8000a18:	10120000 	.word	0x10120000
 8000a1c:	40020400 	.word	0x40020400

08000a20 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_I2C3_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_I2C3_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a5e:	f004 fb6f 	bl	8005140 <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fb8c 	bl	8001184 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a70:	f004 fc9e 	bl	80053b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a7a:	f000 fb83 	bl	8001184 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a82:	f004 fcd1 	bl	8005428 <HAL_I2CEx_ConfigDigitalFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000a8c:	f000 fb7a 	bl	8001184 <Error_Handler>
  }

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000390 	.word	0x20000390
 8000a98:	40005c00 	.word	0x40005c00
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a29      	ldr	r2, [pc, #164]	; (8000b64 <HAL_I2C_MspInit+0xc4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d14b      	bne.n	8000b5a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a27      	ldr	r2, [pc, #156]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4815      	ldr	r0, [pc, #84]	; (8000b6c <HAL_I2C_MspInit+0xcc>)
 8000b18:	f002 fe5a 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <HAL_I2C_MspInit+0xd0>)
 8000b3a:	f002 fe49 	bl	80037d0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40005c00 	.word	0x40005c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020000 	.word	0x40020000

08000b74 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b09a      	sub	sp, #104	; 0x68
 8000b78:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b7e:	2234      	movs	r2, #52	; 0x34
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f009 fa8d 	bl	800a0a2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2234      	movs	r2, #52	; 0x34
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f009 fa87 	bl	800a0a2 <memset>

  hltdc.Instance = LTDC;
 8000b94:	4b4f      	ldr	r3, [pc, #316]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000b96:	4a50      	ldr	r2, [pc, #320]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000b98:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b9a:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ba0:	4b4c      	ldr	r3, [pc, #304]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ba6:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bac:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bb4:	2209      	movs	r2, #9
 8000bb6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000bb8:	4b46      	ldr	r3, [pc, #280]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000bbe:	4b45      	ldr	r3, [pc, #276]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bc0:	221d      	movs	r2, #29
 8000bc2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000bc4:	4b43      	ldr	r3, [pc, #268]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000bca:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bcc:	f240 120d 	movw	r2, #269	; 0x10d
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000bd2:	4b40      	ldr	r3, [pc, #256]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bd4:	f240 1243 	movw	r2, #323	; 0x143
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bdc:	f240 1217 	movw	r2, #279	; 0x117
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000be2:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000be4:	f240 1247 	movw	r2, #327	; 0x147
 8000be8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bea:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bf2:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bfa:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c02:	4834      	ldr	r0, [pc, #208]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000c04:	f004 fc50 	bl	80054a8 <HAL_LTDC_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000c0e:	f000 fab9 	bl	8001184 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000c16:	23f0      	movs	r3, #240	; 0xf0
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000c1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c24:	2302      	movs	r3, #2
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000c28:	23ff      	movs	r3, #255	; 0xff
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c34:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c36:	2307      	movs	r3, #7
 8000c38:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c3a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c3e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8000c40:	23f0      	movs	r3, #240	; 0xf0
 8000c42:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8000c44:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c48:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000c66:	f004 fdb1 	bl	80057cc <HAL_LTDC_ConfigLayer>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8000c70:	f000 fa88 	bl	8001184 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c90:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c92:	2305      	movs	r3, #5
 8000c94:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_LTDC_Init+0x160>)
 8000cbc:	f004 fd86 	bl	80057cc <HAL_LTDC_ConfigLayer>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000cc6:	f000 fa5d 	bl	8001184 <Error_Handler>
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3768      	adds	r7, #104	; 0x68
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200003e4 	.word	0x200003e4
 8000cd8:	40016800 	.word	0x40016800

08000cdc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a7b      	ldr	r2, [pc, #492]	; (8000ee8 <HAL_LTDC_MspInit+0x20c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	f040 80f0 	bne.w	8000ee0 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
 8000d04:	4b79      	ldr	r3, [pc, #484]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	4a78      	ldr	r2, [pc, #480]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d10:	4b76      	ldr	r3, [pc, #472]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d18:	623b      	str	r3, [r7, #32]
 8000d1a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
 8000d20:	4b72      	ldr	r3, [pc, #456]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a71      	ldr	r2, [pc, #452]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d26:	f043 0320 	orr.w	r3, r3, #32
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b6f      	ldr	r3, [pc, #444]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 0320 	and.w	r3, r3, #32
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	4b6b      	ldr	r3, [pc, #428]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a6a      	ldr	r2, [pc, #424]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b68      	ldr	r3, [pc, #416]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	61bb      	str	r3, [r7, #24]
 8000d52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	4b64      	ldr	r3, [pc, #400]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a63      	ldr	r2, [pc, #396]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b61      	ldr	r3, [pc, #388]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a5c      	ldr	r2, [pc, #368]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b5a      	ldr	r3, [pc, #360]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b56      	ldr	r3, [pc, #344]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a55      	ldr	r2, [pc, #340]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b53      	ldr	r3, [pc, #332]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a4e      	ldr	r2, [pc, #312]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <HAL_LTDC_MspInit+0x210>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dd6:	230e      	movs	r3, #14
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	4843      	ldr	r0, [pc, #268]	; (8000ef0 <HAL_LTDC_MspInit+0x214>)
 8000de2:	f002 fcf5 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000de6:	f641 0358 	movw	r3, #6232	; 0x1858
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000df8:	230e      	movs	r3, #14
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	483c      	ldr	r0, [pc, #240]	; (8000ef4 <HAL_LTDC_MspInit+0x218>)
 8000e04:	f002 fce4 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e18:	2309      	movs	r3, #9
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4835      	ldr	r0, [pc, #212]	; (8000ef8 <HAL_LTDC_MspInit+0x21c>)
 8000e24:	f002 fcd4 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e28:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e3a:	230e      	movs	r3, #14
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	482c      	ldr	r0, [pc, #176]	; (8000ef8 <HAL_LTDC_MspInit+0x21c>)
 8000e46:	f002 fcc3 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e4a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e5c:	230e      	movs	r3, #14
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4825      	ldr	r0, [pc, #148]	; (8000efc <HAL_LTDC_MspInit+0x220>)
 8000e68:	f002 fcb2 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000e6c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e7e:	230e      	movs	r3, #14
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	481d      	ldr	r0, [pc, #116]	; (8000f00 <HAL_LTDC_MspInit+0x224>)
 8000e8a:	f002 fca1 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e8e:	2348      	movs	r3, #72	; 0x48
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e9e:	230e      	movs	r3, #14
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4816      	ldr	r0, [pc, #88]	; (8000f04 <HAL_LTDC_MspInit+0x228>)
 8000eaa:	f002 fc91 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000eae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ec0:	2309      	movs	r3, #9
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <HAL_LTDC_MspInit+0x220>)
 8000ecc:	f002 fc80 	bl	80037d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2105      	movs	r1, #5
 8000ed4:	2058      	movs	r0, #88	; 0x58
 8000ed6:	f001 fedd 	bl	8002c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000eda:	2058      	movs	r0, #88	; 0x58
 8000edc:	f001 fef6 	bl	8002ccc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3738      	adds	r7, #56	; 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40016800 	.word	0x40016800
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40021400 	.word	0x40021400
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40021800 	.word	0x40021800
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020c00 	.word	0x40020c00

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f001 fda6 	bl	8002a5c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f8a2 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f7ff fc74 	bl	8000800 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f18:	f7ff faea 	bl	80004f0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000f1c:	f7ff fb1e 	bl	800055c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f20:	f7ff fb76 	bl	8000610 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f24:	f7ff fd7c 	bl	8000a20 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f28:	f7ff fe24 	bl	8000b74 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f2c:	f000 f932 	bl	8001194 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f30:	f000 faaa 	bl	8001488 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f34:	f000 fb1a 	bl	800156c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();
 8000f38:	f000 ff0e 	bl	8001d58 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8000f3c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f40:	2001      	movs	r0, #1
 8000f42:	f000 ff8b 	bl	8001e5c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 ffec 	bl	8001f24 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f001 f896 	bl	8002080 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f001 f831 	bl	8001fc0 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 ffef 	bl	8001f44 <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8000f66:	4936      	ldr	r1, [pc, #216]	; (8001040 <main+0x138>)
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f000 ff77 	bl	8001e5c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 ffd8 	bl	8001f24 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000f74:	f001 f9aa 	bl	80022cc <BSP_LCD_DisplayOn>

  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f001 f880 	bl	8002080 <BSP_LCD_Clear>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f80:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f84:	f001 f830 	bl	8001fe8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f001 f844 	bl	8002018 <BSP_LCD_SetBackColor>

    BSP_LCD_SetFont(&Font12);
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <main+0x13c>)
 8000f92:	f001 f85b 	bl	800204c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 8000f96:	f000 ff55 	bl	8001e44 <BSP_LCD_GetYSize>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	085b      	lsrs	r3, r3, #1
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	3b1b      	subs	r3, #27
 8000fa2:	b299      	uxth	r1, r3
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4a28      	ldr	r2, [pc, #160]	; (8001048 <main+0x140>)
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f001 f8d5 	bl	8002158 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 8000fae:	f000 ff49 	bl	8001e44 <BSP_LCD_GetYSize>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3b0c      	subs	r3, #12
 8000fba:	b299      	uxth	r1, r3
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <main+0x144>)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f001 f8c9 	bl	8002158 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 8000fc6:	f000 ff3d 	bl	8001e44 <BSP_LCD_GetYSize>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	085b      	lsrs	r3, r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	3303      	adds	r3, #3
 8000fd2:	b299      	uxth	r1, r3
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <main+0x148>)
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f001 f8bd 	bl	8002158 <BSP_LCD_DisplayStringAt>
    HAL_Delay(1000);
 8000fde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe2:	f001 fd7d 	bl	8002ae0 <HAL_Delay>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fe6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fea:	f000 fffd 	bl	8001fe8 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000fee:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff2:	f001 f811 	bl	8002018 <BSP_LCD_SetBackColor>
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffa:	f001 f841 	bl	8002080 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, (uint8_t*)"PIWO", CENTER_MODE);
 8000ffe:	f000 ff21 	bl	8001e44 <BSP_LCD_GetYSize>
 8001002:	4603      	mov	r3, r0
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	b299      	uxth	r1, r3
 8001008:	2301      	movs	r3, #1
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <main+0x14c>)
 800100c:	2000      	movs	r0, #0
 800100e:	f001 f8a3 	bl	8002158 <BSP_LCD_DisplayStringAt>
	  HAL_Delay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001016:	f001 fd63 	bl	8002ae0 <HAL_Delay>
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800101a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800101e:	f001 f82f 	bl	8002080 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, (uint8_t*)"PIWO", CENTER_MODE);
 8001022:	f000 ff0f 	bl	8001e44 <BSP_LCD_GetYSize>
 8001026:	4603      	mov	r3, r0
 8001028:	085b      	lsrs	r3, r3, #1
 800102a:	b299      	uxth	r1, r3
 800102c:	2301      	movs	r3, #1
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <main+0x14c>)
 8001030:	2000      	movs	r0, #0
 8001032:	f001 f891 	bl	8002158 <BSP_LCD_DisplayStringAt>
	  HAL_Delay(1000);
 8001036:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800103a:	f001 fd51 	bl	8002ae0 <HAL_Delay>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800103e:	e7d2      	b.n	8000fe6 <main+0xde>
 8001040:	d0130000 	.word	0xd0130000
 8001044:	20000048 	.word	0x20000048
 8001048:	0800a0cc 	.word	0x0800a0cc
 800104c:	0800a0ec 	.word	0x0800a0ec
 8001050:	0800a108 	.word	0x0800a108
 8001054:	0800a124 	.word	0x0800a124

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0a0      	sub	sp, #128	; 0x80
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f009 f81b 	bl	800a0a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2230      	movs	r2, #48	; 0x30
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f009 f80c 	bl	800a0a2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <SystemClock_Config+0x100>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <SystemClock_Config+0x100>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <SystemClock_Config+0x100>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <SystemClock_Config+0x104>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010b2:	4a2a      	ldr	r2, [pc, #168]	; (800115c <SystemClock_Config+0x104>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <SystemClock_Config+0x104>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010da:	2304      	movs	r3, #4
 80010dc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010de:	2348      	movs	r3, #72	; 0x48
 80010e0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010e6:	2303      	movs	r3, #3
 80010e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fdea 	bl	8005cc8 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010fa:	f000 f843 	bl	8001184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2302      	movs	r3, #2
 8001104:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001114:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001118:	2102      	movs	r1, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f005 f844 	bl	80061a8 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001126:	f000 f82d 	bl	8001184 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800112a:	2308      	movs	r3, #8
 800112c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800112e:	2332      	movs	r3, #50	; 0x32
 8001130:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001132:	2302      	movs	r3, #2
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4618      	mov	r0, r3
 8001140:	f005 fa56 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800114a:	f000 f81b 	bl	8001184 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3780      	adds	r7, #128	; 0x80
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001172:	f001 fc95 	bl	8002aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40001000 	.word	0x40001000

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_SPI5_Init+0x64>)
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <MX_SPI5_Init+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011c8:	2218      	movs	r2, #24
 80011ca:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011e0:	220a      	movs	r2, #10
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_SPI5_Init+0x64>)
 80011e6:	f005 fc40 	bl	8006a6a <HAL_SPI_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80011f0:	f7ff ffc8 	bl	8001184 <Error_Handler>
  }

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000048c 	.word	0x2000048c
 80011fc:	40015000 	.word	0x40015000

08001200 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_SPI_MspInit+0x84>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12c      	bne.n	800127c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <HAL_SPI_MspInit+0x88>)
 800122c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800125a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800126c:	2305      	movs	r3, #5
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_SPI_MspInit+0x8c>)
 8001278:	f002 faaa 	bl	80037d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40015000 	.word	0x40015000
 8001288:	40023800 	.word	0x40023800
 800128c:	40021400 	.word	0x40021400

08001290 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_SPI_MspDeInit+0x30>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10a      	bne.n	80012b8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_SPI_MspDeInit+0x34>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_SPI_MspDeInit+0x34>)
 80012a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80012ae:	f44f 7160 	mov.w	r1, #896	; 0x380
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_SPI_MspDeInit+0x38>)
 80012b4:	f002 fc36 	bl	8003b24 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40015000 	.word	0x40015000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40021400 	.word	0x40021400

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_MspInit+0x54>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <HAL_MspInit+0x54>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_MspInit+0x54>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_MspInit+0x54>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_MspInit+0x54>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_MspInit+0x54>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	210f      	movs	r1, #15
 800130e:	f06f 0001 	mvn.w	r0, #1
 8001312:	f001 fcbf 	bl	8002c94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800

08001324 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	; 0x30
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	2036      	movs	r0, #54	; 0x36
 800133a:	f001 fcab 	bl	8002c94 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800133e:	2036      	movs	r0, #54	; 0x36
 8001340:	f001 fcc4 	bl	8002ccc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_InitTick+0xa4>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <HAL_InitTick+0xa4>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <HAL_InitTick+0xa4>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001360:	f107 0210 	add.w	r2, r7, #16
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f005 f90e 	bl	800658c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001370:	f005 f8e4 	bl	800653c <HAL_RCC_GetPCLK1Freq>
 8001374:	4603      	mov	r3, r0
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_InitTick+0xa8>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0c9b      	lsrs	r3, r3, #18
 8001384:	3b01      	subs	r3, #1
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_InitTick+0xac>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <HAL_InitTick+0xb0>)
 800138c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_InitTick+0xac>)
 8001390:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001394:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <HAL_InitTick+0xac>)
 8001398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_InitTick+0xac>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_InitTick+0xac>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <HAL_InitTick+0xac>)
 80013aa:	f006 f8e9 	bl	8007580 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013b4:	4806      	ldr	r0, [pc, #24]	; (80013d0 <HAL_InitTick+0xac>)
 80013b6:	f006 f90e 	bl	80075d6 <HAL_TIM_Base_Start_IT>
 80013ba:	4603      	mov	r3, r0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3730      	adds	r7, #48	; 0x30
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	200004e4 	.word	0x200004e4
 80013d4:	40001000 	.word	0x40001000

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <TIM6_DAC_IRQHandler+0x10>)
 8001412:	f006 f904 	bl	800761e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200004e4 	.word	0x200004e4

08001420 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <OTG_HS_IRQHandler+0x10>)
 8001426:	f002 fca0 	bl	8003d6a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000654 	.word	0x20000654

08001434 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <LTDC_IRQHandler+0x10>)
 800143a:	f004 f905 	bl	8005648 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200003e4 	.word	0x200003e4

08001448 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA2D_IRQHandler+0x10>)
 800144e:	f001 ff80 	bl	8003352 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000031c 	.word	0x2000031c

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <SystemInit+0x28>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <SystemInit+0x28>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SystemInit+0x28>)
 8001472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001476:	609a      	str	r2, [r3, #8]
#endif
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_TIM1_Init+0x98>)
 80014a6:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <MX_TIM1_Init+0x9c>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_TIM1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_TIM1_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_TIM1_Init+0x98>)
 80014b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_TIM1_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_TIM1_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_TIM1_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <MX_TIM1_Init+0x98>)
 80014d2:	f006 f855 	bl	8007580 <HAL_TIM_Base_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014dc:	f7ff fe52 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4619      	mov	r1, r3
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <MX_TIM1_Init+0x98>)
 80014ee:	f006 f99e 	bl	800782e <HAL_TIM_ConfigClockSource>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014f8:	f7ff fe44 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_TIM1_Init+0x98>)
 800150a:	f006 fba9 	bl	8007c60 <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001514:	f7ff fe36 	bl	8001184 <Error_Handler>
  }

}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000524 	.word	0x20000524
 8001524:	40010000 	.word	0x40010000

08001528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <HAL_TIM_Base_MspInit+0x3c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10d      	bne.n	8001556 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_TIM_Base_MspInit+0x40>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_TIM_Base_MspInit+0x40>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40010000 	.word	0x40010000
 8001568:	40023800 	.word	0x40023800

0800156c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_USART1_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 80015a4:	f006 fbec 	bl	8007d80 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ae:	f7ff fde9 	bl	8001184 <Error_Handler>
  }

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000564 	.word	0x20000564
 80015bc:	40011000 	.word	0x40011000

080015c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_UART_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_UART_MspInit+0x88>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_UART_MspInit+0x88>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_UART_MspInit+0x88>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_UART_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_UART_MspInit+0x88>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_UART_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800161a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800162c:	2307      	movs	r3, #7
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_UART_MspInit+0x8c>)
 8001638:	f002 f8ca 	bl	80037d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40011000 	.word	0x40011000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001654:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001656:	e003      	b.n	8001660 <LoopCopyDataInit>

08001658 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800165a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800165c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800165e:	3104      	adds	r1, #4

08001660 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001660:	480b      	ldr	r0, [pc, #44]	; (8001690 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001664:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001666:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001668:	d3f6      	bcc.n	8001658 <CopyDataInit>
  ldr  r2, =_sbss
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800166c:	e002      	b.n	8001674 <LoopFillZerobss>

0800166e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800166e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001670:	f842 3b04 	str.w	r3, [r2], #4

08001674 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001676:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001678:	d3f9      	bcc.n	800166e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800167a:	f7ff feef 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167e:	f008 fce1 	bl	800a044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff fc41 	bl	8000f08 <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001688:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800168c:	0800c088 	.word	0x0800c088
  ldr  r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001694:	20000060 	.word	0x20000060
  ldr  r2, =_sbss
 8001698:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
 800169c:	20000918 	.word	0x20000918

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>

080016a2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016a6:	f000 fa5d 	bl	8001b64 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80016aa:	20ca      	movs	r0, #202	; 0xca
 80016ac:	f000 f95d 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80016b0:	20c3      	movs	r0, #195	; 0xc3
 80016b2:	f000 f967 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80016b6:	2008      	movs	r0, #8
 80016b8:	f000 f964 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80016bc:	2050      	movs	r0, #80	; 0x50
 80016be:	f000 f961 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80016c2:	20cf      	movs	r0, #207	; 0xcf
 80016c4:	f000 f951 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 f95b 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80016ce:	20c1      	movs	r0, #193	; 0xc1
 80016d0:	f000 f958 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80016d4:	2030      	movs	r0, #48	; 0x30
 80016d6:	f000 f955 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80016da:	20ed      	movs	r0, #237	; 0xed
 80016dc:	f000 f945 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80016e0:	2064      	movs	r0, #100	; 0x64
 80016e2:	f000 f94f 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80016e6:	2003      	movs	r0, #3
 80016e8:	f000 f94c 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80016ec:	2012      	movs	r0, #18
 80016ee:	f000 f949 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80016f2:	2081      	movs	r0, #129	; 0x81
 80016f4:	f000 f946 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80016f8:	20e8      	movs	r0, #232	; 0xe8
 80016fa:	f000 f936 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80016fe:	2085      	movs	r0, #133	; 0x85
 8001700:	f000 f940 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001704:	2000      	movs	r0, #0
 8001706:	f000 f93d 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800170a:	2078      	movs	r0, #120	; 0x78
 800170c:	f000 f93a 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001710:	20cb      	movs	r0, #203	; 0xcb
 8001712:	f000 f92a 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001716:	2039      	movs	r0, #57	; 0x39
 8001718:	f000 f934 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800171c:	202c      	movs	r0, #44	; 0x2c
 800171e:	f000 f931 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f92e 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001728:	2034      	movs	r0, #52	; 0x34
 800172a:	f000 f92b 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800172e:	2002      	movs	r0, #2
 8001730:	f000 f928 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001734:	20f7      	movs	r0, #247	; 0xf7
 8001736:	f000 f918 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800173a:	2020      	movs	r0, #32
 800173c:	f000 f922 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001740:	20ea      	movs	r0, #234	; 0xea
 8001742:	f000 f912 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f91c 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800174c:	2000      	movs	r0, #0
 800174e:	f000 f919 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001752:	20b1      	movs	r0, #177	; 0xb1
 8001754:	f000 f909 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001758:	2000      	movs	r0, #0
 800175a:	f000 f913 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800175e:	201b      	movs	r0, #27
 8001760:	f000 f910 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001764:	20b6      	movs	r0, #182	; 0xb6
 8001766:	f000 f900 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800176a:	200a      	movs	r0, #10
 800176c:	f000 f90a 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001770:	20a2      	movs	r0, #162	; 0xa2
 8001772:	f000 f907 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001776:	20c0      	movs	r0, #192	; 0xc0
 8001778:	f000 f8f7 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800177c:	2010      	movs	r0, #16
 800177e:	f000 f901 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001782:	20c1      	movs	r0, #193	; 0xc1
 8001784:	f000 f8f1 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001788:	2010      	movs	r0, #16
 800178a:	f000 f8fb 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800178e:	20c5      	movs	r0, #197	; 0xc5
 8001790:	f000 f8eb 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001794:	2045      	movs	r0, #69	; 0x45
 8001796:	f000 f8f5 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800179a:	2015      	movs	r0, #21
 800179c:	f000 f8f2 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80017a0:	20c7      	movs	r0, #199	; 0xc7
 80017a2:	f000 f8e2 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80017a6:	2090      	movs	r0, #144	; 0x90
 80017a8:	f000 f8ec 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80017ac:	2036      	movs	r0, #54	; 0x36
 80017ae:	f000 f8dc 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80017b2:	20c8      	movs	r0, #200	; 0xc8
 80017b4:	f000 f8e6 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80017b8:	20f2      	movs	r0, #242	; 0xf2
 80017ba:	f000 f8d6 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f8e0 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80017c4:	20b0      	movs	r0, #176	; 0xb0
 80017c6:	f000 f8d0 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80017ca:	20c2      	movs	r0, #194	; 0xc2
 80017cc:	f000 f8da 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80017d0:	20b6      	movs	r0, #182	; 0xb6
 80017d2:	f000 f8ca 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80017d6:	200a      	movs	r0, #10
 80017d8:	f000 f8d4 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80017dc:	20a7      	movs	r0, #167	; 0xa7
 80017de:	f000 f8d1 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80017e2:	2027      	movs	r0, #39	; 0x27
 80017e4:	f000 f8ce 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80017e8:	2004      	movs	r0, #4
 80017ea:	f000 f8cb 	bl	8001984 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80017ee:	202a      	movs	r0, #42	; 0x2a
 80017f0:	f000 f8bb 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 f8c5 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f8c2 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001800:	2000      	movs	r0, #0
 8001802:	f000 f8bf 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001806:	20ef      	movs	r0, #239	; 0xef
 8001808:	f000 f8bc 	bl	8001984 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800180c:	202b      	movs	r0, #43	; 0x2b
 800180e:	f000 f8ac 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f8b6 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001818:	2000      	movs	r0, #0
 800181a:	f000 f8b3 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800181e:	2001      	movs	r0, #1
 8001820:	f000 f8b0 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001824:	203f      	movs	r0, #63	; 0x3f
 8001826:	f000 f8ad 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800182a:	20f6      	movs	r0, #246	; 0xf6
 800182c:	f000 f89d 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001830:	2001      	movs	r0, #1
 8001832:	f000 f8a7 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001836:	2000      	movs	r0, #0
 8001838:	f000 f8a4 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800183c:	2006      	movs	r0, #6
 800183e:	f000 f8a1 	bl	8001984 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001842:	202c      	movs	r0, #44	; 0x2c
 8001844:	f000 f891 	bl	800196a <ili9341_WriteReg>
  LCD_Delay(200);
 8001848:	20c8      	movs	r0, #200	; 0xc8
 800184a:	f000 fa79 	bl	8001d40 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800184e:	2026      	movs	r0, #38	; 0x26
 8001850:	f000 f88b 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001854:	2001      	movs	r0, #1
 8001856:	f000 f895 	bl	8001984 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800185a:	20e0      	movs	r0, #224	; 0xe0
 800185c:	f000 f885 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001860:	200f      	movs	r0, #15
 8001862:	f000 f88f 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001866:	2029      	movs	r0, #41	; 0x29
 8001868:	f000 f88c 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800186c:	2024      	movs	r0, #36	; 0x24
 800186e:	f000 f889 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001872:	200c      	movs	r0, #12
 8001874:	f000 f886 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001878:	200e      	movs	r0, #14
 800187a:	f000 f883 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800187e:	2009      	movs	r0, #9
 8001880:	f000 f880 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001884:	204e      	movs	r0, #78	; 0x4e
 8001886:	f000 f87d 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800188a:	2078      	movs	r0, #120	; 0x78
 800188c:	f000 f87a 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001890:	203c      	movs	r0, #60	; 0x3c
 8001892:	f000 f877 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001896:	2009      	movs	r0, #9
 8001898:	f000 f874 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800189c:	2013      	movs	r0, #19
 800189e:	f000 f871 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018a2:	2005      	movs	r0, #5
 80018a4:	f000 f86e 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80018a8:	2017      	movs	r0, #23
 80018aa:	f000 f86b 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018ae:	2011      	movs	r0, #17
 80018b0:	f000 f868 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f000 f865 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80018ba:	20e1      	movs	r0, #225	; 0xe1
 80018bc:	f000 f855 	bl	800196a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 f85f 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80018c6:	2016      	movs	r0, #22
 80018c8:	f000 f85c 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80018cc:	201b      	movs	r0, #27
 80018ce:	f000 f859 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018d2:	2004      	movs	r0, #4
 80018d4:	f000 f856 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018d8:	2011      	movs	r0, #17
 80018da:	f000 f853 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80018de:	2007      	movs	r0, #7
 80018e0:	f000 f850 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80018e4:	2031      	movs	r0, #49	; 0x31
 80018e6:	f000 f84d 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80018ea:	2033      	movs	r0, #51	; 0x33
 80018ec:	f000 f84a 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80018f0:	2042      	movs	r0, #66	; 0x42
 80018f2:	f000 f847 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018f6:	2005      	movs	r0, #5
 80018f8:	f000 f844 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80018fc:	200c      	movs	r0, #12
 80018fe:	f000 f841 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001902:	200a      	movs	r0, #10
 8001904:	f000 f83e 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001908:	2028      	movs	r0, #40	; 0x28
 800190a:	f000 f83b 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800190e:	202f      	movs	r0, #47	; 0x2f
 8001910:	f000 f838 	bl	8001984 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001914:	200f      	movs	r0, #15
 8001916:	f000 f835 	bl	8001984 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800191a:	2011      	movs	r0, #17
 800191c:	f000 f825 	bl	800196a <ili9341_WriteReg>
  LCD_Delay(200);
 8001920:	20c8      	movs	r0, #200	; 0xc8
 8001922:	f000 fa0d 	bl	8001d40 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001926:	2029      	movs	r0, #41	; 0x29
 8001928:	f000 f81f 	bl	800196a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800192c:	202c      	movs	r0, #44	; 0x2c
 800192e:	f000 f81c 	bl	800196a <ili9341_WriteReg>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}

08001936 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800193a:	f000 f913 	bl	8001b64 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800193e:	2103      	movs	r1, #3
 8001940:	20d3      	movs	r0, #211	; 0xd3
 8001942:	f000 f82c 	bl	800199e <ili9341_ReadData>
 8001946:	4603      	mov	r3, r0
 8001948:	b29b      	uxth	r3, r3
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}

0800194e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001952:	2029      	movs	r0, #41	; 0x29
 8001954:	f000 f809 	bl	800196a <ili9341_WriteReg>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001960:	2028      	movs	r0, #40	; 0x28
 8001962:	f000 f802 	bl	800196a <ili9341_WriteReg>
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}

0800196a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f98e 	bl	8001c98 <LCD_IO_WriteReg>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f95f 	bl	8001c54 <LCD_IO_WriteData>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	460a      	mov	r2, r1
 80019a8:	80fb      	strh	r3, [r7, #6]
 80019aa:	4613      	mov	r3, r2
 80019ac:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80019ae:	797a      	ldrb	r2, [r7, #5]
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f991 	bl	8001cdc <LCD_IO_ReadData>
 80019ba:	4603      	mov	r3, r0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80019c8:	23f0      	movs	r3, #240	; 0xf0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80019d8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80019ec:	4819      	ldr	r0, [pc, #100]	; (8001a54 <SPIx_Init+0x6c>)
 80019ee:	f005 fca7 	bl	8007340 <HAL_SPI_GetState>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d12b      	bne.n	8001a50 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <SPIx_Init+0x6c>)
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <SPIx_Init+0x70>)
 80019fc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <SPIx_Init+0x6c>)
 8001a00:	2218      	movs	r2, #24
 8001a02:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <SPIx_Init+0x6c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <SPIx_Init+0x6c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <SPIx_Init+0x6c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <SPIx_Init+0x6c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <SPIx_Init+0x6c>)
 8001a1e:	2207      	movs	r2, #7
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <SPIx_Init+0x6c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <SPIx_Init+0x6c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <SPIx_Init+0x6c>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <SPIx_Init+0x6c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SPIx_Init+0x6c>)
 8001a3e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a42:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <SPIx_Init+0x6c>)
 8001a46:	f000 f853 	bl	8001af0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a4a:	4802      	ldr	r0, [pc, #8]	; (8001a54 <SPIx_Init+0x6c>)
 8001a4c:	f005 f80d 	bl	8006a6a <HAL_SPI_Init>
  } 
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000080 	.word	0x20000080
 8001a58:	40015000 	.word	0x40015000

08001a5c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <SPIx_Read+0x38>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f107 0108 	add.w	r1, r7, #8
 8001a76:	4808      	ldr	r0, [pc, #32]	; (8001a98 <SPIx_Read+0x3c>)
 8001a78:	f005 f9b7 	bl	8006dea <HAL_SPI_Receive>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001a86:	f000 f827 	bl	8001ad8 <SPIx_Error>
  }
  
  return readvalue;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000003c 	.word	0x2000003c
 8001a98:	20000080 	.word	0x20000080

08001a9c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <SPIx_Write+0x34>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1db9      	adds	r1, r7, #6
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4808      	ldr	r0, [pc, #32]	; (8001ad4 <SPIx_Write+0x38>)
 8001ab4:	f005 f865 	bl	8006b82 <HAL_SPI_Transmit>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001ac2:	f000 f809 	bl	8001ad8 <SPIx_Error>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000003c 	.word	0x2000003c
 8001ad4:	20000080 	.word	0x20000080

08001ad8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <SPIx_Error+0x14>)
 8001ade:	f005 f828 	bl	8006b32 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001ae2:	f7ff ff81 	bl	80019e8 <SPIx_Init>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000080 	.word	0x20000080

08001af0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <SPIx_MspInit+0x6c>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <SPIx_MspInit+0x6c>)
 8001b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b06:	6453      	str	r3, [r2, #68]	; 0x44
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <SPIx_MspInit+0x6c>)
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <SPIx_MspInit+0x6c>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <SPIx_MspInit+0x6c>)
 8001b1e:	f043 0320 	orr.w	r3, r3, #32
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <SPIx_MspInit+0x6c>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001b30:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001b42:	2305      	movs	r3, #5
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <SPIx_MspInit+0x70>)
 8001b4e:	f001 fe3f 	bl	80037d0 <HAL_GPIO_Init>
}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40021400 	.word	0x40021400

08001b64 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <LCD_IO_Init+0xe0>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d164      	bne.n	8001c3c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <LCD_IO_Init+0xe0>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <LCD_IO_Init+0xe4>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a31      	ldr	r2, [pc, #196]	; (8001c48 <LCD_IO_Init+0xe4>)
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <LCD_IO_Init+0xe4>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	4827      	ldr	r0, [pc, #156]	; (8001c4c <LCD_IO_Init+0xe8>)
 8001bae:	f001 fe0f 	bl	80037d0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <LCD_IO_Init+0xe4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <LCD_IO_Init+0xe4>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <LCD_IO_Init+0xe4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	4819      	ldr	r0, [pc, #100]	; (8001c4c <LCD_IO_Init+0xe8>)
 8001be8:	f001 fdf2 	bl	80037d0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <LCD_IO_Init+0xe4>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <LCD_IO_Init+0xe4>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <LCD_IO_Init+0xe4>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480c      	ldr	r0, [pc, #48]	; (8001c50 <LCD_IO_Init+0xec>)
 8001c20:	f001 fdd6 	bl	80037d0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001c24:	2200      	movs	r2, #0
 8001c26:	2104      	movs	r1, #4
 8001c28:	4809      	ldr	r0, [pc, #36]	; (8001c50 <LCD_IO_Init+0xec>)
 8001c2a:	f002 f885 	bl	8003d38 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2104      	movs	r1, #4
 8001c32:	4807      	ldr	r0, [pc, #28]	; (8001c50 <LCD_IO_Init+0xec>)
 8001c34:	f002 f880 	bl	8003d38 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001c38:	f7ff fed6 	bl	80019e8 <SPIx_Init>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200000d8 	.word	0x200000d8
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40020800 	.word	0x40020800

08001c54 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c64:	480a      	ldr	r0, [pc, #40]	; (8001c90 <LCD_IO_WriteData+0x3c>)
 8001c66:	f002 f867 	bl	8003d38 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <LCD_IO_WriteData+0x40>)
 8001c70:	f002 f862 	bl	8003d38 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff10 	bl	8001a9c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2104      	movs	r1, #4
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <LCD_IO_WriteData+0x40>)
 8001c82:	f002 f859 	bl	8003d38 <HAL_GPIO_WritePin>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	40020800 	.word	0x40020800

08001c98 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca8:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <LCD_IO_WriteReg+0x3c>)
 8001caa:	f002 f845 	bl	8003d38 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <LCD_IO_WriteReg+0x40>)
 8001cb4:	f002 f840 	bl	8003d38 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff feed 	bl	8001a9c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <LCD_IO_WriteReg+0x40>)
 8001cc8:	f002 f836 	bl	8003d38 <HAL_GPIO_WritePin>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40020800 	.word	0x40020800

08001cdc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	80fb      	strh	r3, [r7, #6]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	4810      	ldr	r0, [pc, #64]	; (8001d38 <LCD_IO_ReadData+0x5c>)
 8001cf6:	f002 f81f 	bl	8003d38 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <LCD_IO_ReadData+0x60>)
 8001d02:	f002 f819 	bl	8003d38 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fec7 	bl	8001a9c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001d0e:	797b      	ldrb	r3, [r7, #5]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fea3 	bl	8001a5c <SPIx_Read>
 8001d16:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d1e:	4807      	ldr	r0, [pc, #28]	; (8001d3c <LCD_IO_ReadData+0x60>)
 8001d20:	f002 f80a 	bl	8003d38 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d24:	2201      	movs	r2, #1
 8001d26:	2104      	movs	r1, #4
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <LCD_IO_ReadData+0x5c>)
 8001d2a:	f002 f805 	bl	8003d38 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020c00 	.word	0x40020c00

08001d40 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fec9 	bl	8002ae0 <HAL_Delay>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <BSP_LCD_Init+0xc0>)
 8001d60:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d64:	2209      	movs	r2, #9
 8001d66:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d70:	221d      	movs	r2, #29
 8001d72:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d76:	2203      	movs	r2, #3
 8001d78:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d7c:	f240 120d 	movw	r2, #269	; 0x10d
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d84:	f240 1243 	movw	r2, #323	; 0x143
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d8c:	f240 1217 	movw	r2, #279	; 0x117
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d94:	f240 1247 	movw	r2, #327	; 0x147
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <BSP_LCD_Init+0xc4>)
 8001db4:	2208      	movs	r2, #8
 8001db6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <BSP_LCD_Init+0xc4>)
 8001dba:	22c0      	movs	r2, #192	; 0xc0
 8001dbc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <BSP_LCD_Init+0xc4>)
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <BSP_LCD_Init+0xc4>)
 8001dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001dcc:	4813      	ldr	r0, [pc, #76]	; (8001e1c <BSP_LCD_Init+0xc4>)
 8001dce:	f004 fc0f 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001dea:	f000 fa7f 	bl	80022ec <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001dee:	4809      	ldr	r0, [pc, #36]	; (8001e14 <BSP_LCD_Init+0xbc>)
 8001df0:	f003 fb5a 	bl	80054a8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <BSP_LCD_Init+0xc8>)
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <BSP_LCD_Init+0xcc>)
 8001df8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <BSP_LCD_Init+0xc8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001e02:	f000 fc61 	bl	80026c8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001e06:	4808      	ldr	r0, [pc, #32]	; (8001e28 <BSP_LCD_Init+0xd0>)
 8001e08:	f000 f920 	bl	800204c <BSP_LCD_SetFont>

  return LCD_OK;
 8001e0c:	2300      	movs	r3, #0
}  
 8001e0e:	4618      	mov	r0, r3
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200005a4 	.word	0x200005a4
 8001e18:	40016800 	.word	0x40016800
 8001e1c:	2000011c 	.word	0x2000011c
 8001e20:	2000064c 	.word	0x2000064c
 8001e24:	20000004 	.word	0x20000004
 8001e28:	20000040 	.word	0x20000040

08001e2c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <BSP_LCD_GetXSize+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	4798      	blx	r3
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000064c 	.word	0x2000064c

08001e44 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <BSP_LCD_GetYSize+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	4798      	blx	r3
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000064c 	.word	0x2000064c

08001e5c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b090      	sub	sp, #64	; 0x40
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001e6c:	f7ff ffde 	bl	8001e2c <BSP_LCD_GetXSize>
 8001e70:	4603      	mov	r3, r0
 8001e72:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001e78:	f7ff ffe4 	bl	8001e44 <BSP_LCD_GetYSize>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001e88:	23ff      	movs	r3, #255	; 0xff
 8001e8a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001ea2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001eac:	f7ff ffbe 	bl	8001e2c <BSP_LCD_GetXSize>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001eb4:	f7ff ffc6 	bl	8001e44 <BSP_LCD_GetYSize>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001ebc:	88fa      	ldrh	r2, [r7, #6]
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4814      	ldr	r0, [pc, #80]	; (8001f18 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001ec6:	f003 fc81 	bl	80057cc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001eca:	88fa      	ldrh	r2, [r7, #6]
 8001ecc:	4913      	ldr	r1, [pc, #76]	; (8001f1c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3304      	adds	r3, #4
 8001eda:	f04f 32ff 	mov.w	r2, #4294967295
 8001ede:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001ee0:	88fa      	ldrh	r2, [r7, #6]
 8001ee2:	490e      	ldr	r1, [pc, #56]	; (8001f1c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	3308      	adds	r3, #8
 8001ef0:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001ef2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	4909      	ldr	r1, [pc, #36]	; (8001f1c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001f06:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001f08:	4803      	ldr	r0, [pc, #12]	; (8001f18 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001f0a:	f003 fd1b 	bl	8005944 <HAL_LTDC_EnableDither>
}
 8001f0e:	bf00      	nop
 8001f10:	3740      	adds	r7, #64	; 0x40
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200005a4 	.word	0x200005a4
 8001f1c:	20000150 	.word	0x20000150
 8001f20:	20000040 	.word	0x20000040

08001f24 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <BSP_LCD_SelectLayer+0x1c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	2000014c 	.word	0x2000014c

08001f44 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d112      	bne.n	8001f7c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <BSP_LCD_SetLayerVisible+0x78>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	01db      	lsls	r3, r3, #7
 8001f60:	4413      	add	r3, r2
 8001f62:	3384      	adds	r3, #132	; 0x84
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <BSP_LCD_SetLayerVisible+0x78>)
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	01d2      	lsls	r2, r2, #7
 8001f70:	440a      	add	r2, r1
 8001f72:	3284      	adds	r2, #132	; 0x84
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e011      	b.n	8001fa0 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <BSP_LCD_SetLayerVisible+0x78>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	4413      	add	r3, r2
 8001f88:	3384      	adds	r3, #132	; 0x84
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <BSP_LCD_SetLayerVisible+0x78>)
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	4611      	mov	r1, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	01d2      	lsls	r2, r2, #7
 8001f96:	440a      	add	r2, r1
 8001f98:	3284      	adds	r2, #132	; 0x84
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <BSP_LCD_SetLayerVisible+0x78>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <BSP_LCD_SetLayerVisible+0x78>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	200005a4 	.word	0x200005a4

08001fc0 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <BSP_LCD_SetColorKeying+0x24>)
 8001fd0:	f003 fc3a 	bl	8005848 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <BSP_LCD_SetColorKeying+0x24>)
 8001fd8:	f003 fc7a 	bl	80058d0 <HAL_LTDC_EnableColorKeying>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200005a4 	.word	0x200005a4

08001fe8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <BSP_LCD_SetTextColor+0x28>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <BSP_LCD_SetTextColor+0x2c>)
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	2000014c 	.word	0x2000014c
 8002014:	20000150 	.word	0x20000150

08002018 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <BSP_LCD_SetBackColor+0x2c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4908      	ldr	r1, [pc, #32]	; (8002048 <BSP_LCD_SetBackColor+0x30>)
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3304      	adds	r3, #4
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	2000014c 	.word	0x2000014c
 8002048:	20000150 	.word	0x20000150

0800204c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <BSP_LCD_SetFont+0x2c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4908      	ldr	r1, [pc, #32]	; (800207c <BSP_LCD_SetFont+0x30>)
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	3308      	adds	r3, #8
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	2000014c 	.word	0x2000014c
 800207c:	20000150 	.word	0x20000150

08002080 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	b085      	sub	sp, #20
 8002084:	af02      	add	r7, sp, #8
 8002086:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <BSP_LCD_Clear+0x48>)
 800208a:	681c      	ldr	r4, [r3, #0]
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <BSP_LCD_Clear+0x48>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <BSP_LCD_Clear+0x4c>)
 8002092:	2134      	movs	r1, #52	; 0x34
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	335c      	adds	r3, #92	; 0x5c
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461d      	mov	r5, r3
 80020a0:	f7ff fec4 	bl	8001e2c <BSP_LCD_GetXSize>
 80020a4:	4606      	mov	r6, r0
 80020a6:	f7ff fecd 	bl	8001e44 <BSP_LCD_GetYSize>
 80020aa:	4602      	mov	r2, r0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2300      	movs	r3, #0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	4632      	mov	r2, r6
 80020b8:	4629      	mov	r1, r5
 80020ba:	4620      	mov	r0, r4
 80020bc:	f000 facc 	bl	8002658 <FillBuffer>
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c8:	2000014c 	.word	0x2000014c
 80020cc:	200005a4 	.word	0x200005a4

080020d0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
 80020da:	460b      	mov	r3, r1
 80020dc:	80bb      	strh	r3, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <BSP_LCD_DisplayChar+0x80>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	491b      	ldr	r1, [pc, #108]	; (8002154 <BSP_LCD_DisplayChar+0x84>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3308      	adds	r3, #8
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <BSP_LCD_DisplayChar+0x80>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4c14      	ldr	r4, [pc, #80]	; (8002154 <BSP_LCD_DisplayChar+0x84>)
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4423      	add	r3, r4
 800210e:	3308      	adds	r3, #8
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002114:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <BSP_LCD_DisplayChar+0x80>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4c0d      	ldr	r4, [pc, #52]	; (8002154 <BSP_LCD_DisplayChar+0x84>)
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4423      	add	r3, r4
 8002128:	3308      	adds	r3, #8
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	3307      	adds	r3, #7
 8002130:	2b00      	cmp	r3, #0
 8002132:	da00      	bge.n	8002136 <BSP_LCD_DisplayChar+0x66>
 8002134:	3307      	adds	r3, #7
 8002136:	10db      	asrs	r3, r3, #3
 8002138:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800213c:	18ca      	adds	r2, r1, r3
 800213e:	88b9      	ldrh	r1, [r7, #4]
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f9ce 	bl	80024e4 <DrawChar>
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bd90      	pop	{r4, r7, pc}
 8002150:	2000014c 	.word	0x2000014c
 8002154:	20000150 	.word	0x20000150

08002158 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	60ba      	str	r2, [r7, #8]
 8002160:	461a      	mov	r2, r3
 8002162:	4603      	mov	r3, r0
 8002164:	81fb      	strh	r3, [r7, #14]
 8002166:	460b      	mov	r3, r1
 8002168:	81bb      	strh	r3, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800216e:	2301      	movs	r3, #1
 8002170:	83fb      	strh	r3, [r7, #30]
 8002172:	2300      	movs	r3, #0
 8002174:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002182:	e002      	b.n	800218a <BSP_LCD_DisplayStringAt+0x32>
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	3301      	adds	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	617a      	str	r2, [r7, #20]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f6      	bne.n	8002184 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002196:	f7ff fe49 	bl	8001e2c <BSP_LCD_GetXSize>
 800219a:	4b4a      	ldr	r3, [pc, #296]	; (80022c4 <BSP_LCD_DisplayStringAt+0x16c>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	494a      	ldr	r1, [pc, #296]	; (80022c8 <BSP_LCD_DisplayStringAt+0x170>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	3308      	adds	r3, #8
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	889b      	ldrh	r3, [r3, #4]
 80021b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b4:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d01c      	beq.n	80021f6 <BSP_LCD_DisplayStringAt+0x9e>
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d017      	beq.n	80021f0 <BSP_LCD_DisplayStringAt+0x98>
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d12e      	bne.n	8002222 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad1      	subs	r1, r2, r3
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <BSP_LCD_DisplayStringAt+0x16c>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	483e      	ldr	r0, [pc, #248]	; (80022c8 <BSP_LCD_DisplayStringAt+0x170>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4403      	add	r3, r0
 80021da:	3308      	adds	r3, #8
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	889b      	ldrh	r3, [r3, #4]
 80021e0:	fb03 f301 	mul.w	r3, r3, r1
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	4413      	add	r3, r2
 80021ec:	83fb      	strh	r3, [r7, #30]
      break;
 80021ee:	e01b      	b.n	8002228 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	83fb      	strh	r3, [r7, #30]
      break;
 80021f4:	e018      	b.n	8002228 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	b299      	uxth	r1, r3
 80021fe:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <BSP_LCD_DisplayStringAt+0x16c>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4831      	ldr	r0, [pc, #196]	; (80022c8 <BSP_LCD_DisplayStringAt+0x170>)
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4403      	add	r3, r0
 800220e:	3308      	adds	r3, #8
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	889b      	ldrh	r3, [r3, #4]
 8002214:	fb11 f303 	smulbb	r3, r1, r3
 8002218:	b29a      	uxth	r2, r3
 800221a:	89fb      	ldrh	r3, [r7, #14]
 800221c:	4413      	add	r3, r2
 800221e:	83fb      	strh	r3, [r7, #30]
      break;
 8002220:	e002      	b.n	8002228 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	83fb      	strh	r3, [r7, #30]
      break;
 8002226:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002228:	e01a      	b.n	8002260 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	89b9      	ldrh	r1, [r7, #12]
 8002230:	8bfb      	ldrh	r3, [r7, #30]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff4c 	bl	80020d0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002238:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <BSP_LCD_DisplayStringAt+0x16c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4922      	ldr	r1, [pc, #136]	; (80022c8 <BSP_LCD_DisplayStringAt+0x170>)
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3308      	adds	r3, #8
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	889a      	ldrh	r2, [r3, #4]
 800224e:	8bfb      	ldrh	r3, [r7, #30]
 8002250:	4413      	add	r3, r2
 8002252:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	3301      	adds	r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
    i++;
 800225a:	8bbb      	ldrh	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2dc      	uxtb	r4, r3
 800226e:	f7ff fddd 	bl	8001e2c <BSP_LCD_GetXSize>
 8002272:	4605      	mov	r5, r0
 8002274:	8bb9      	ldrh	r1, [r7, #28]
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <BSP_LCD_DisplayStringAt+0x16c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4813      	ldr	r0, [pc, #76]	; (80022c8 <BSP_LCD_DisplayStringAt+0x170>)
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4403      	add	r3, r0
 8002286:	3308      	adds	r3, #8
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	889b      	ldrh	r3, [r3, #4]
 800228c:	fb03 f301 	mul.w	r3, r3, r1
 8002290:	1aeb      	subs	r3, r5, r3
 8002292:	b299      	uxth	r1, r3
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <BSP_LCD_DisplayStringAt+0x16c>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	480b      	ldr	r0, [pc, #44]	; (80022c8 <BSP_LCD_DisplayStringAt+0x170>)
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	3308      	adds	r3, #8
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	889b      	ldrh	r3, [r3, #4]
 80022aa:	4299      	cmp	r1, r3
 80022ac:	bf2c      	ite	cs
 80022ae:	2301      	movcs	r3, #1
 80022b0:	2300      	movcc	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4023      	ands	r3, r4
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1b6      	bne.n	800222a <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80022bc:	bf00      	nop
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bdb0      	pop	{r4, r5, r7, pc}
 80022c4:	2000014c 	.word	0x2000014c
 80022c8:	20000150 	.word	0x20000150

080022cc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <BSP_LCD_DisplayOn+0x1c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <BSP_LCD_DisplayOn+0x1c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4798      	blx	r3
  }
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000064c 	.word	0x2000064c

080022ec <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	; 0x38
 80022f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <BSP_LCD_MspInit+0x190>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a60      	ldr	r2, [pc, #384]	; (800247c <BSP_LCD_MspInit+0x190>)
 80022fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b5e      	ldr	r3, [pc, #376]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	4b5a      	ldr	r3, [pc, #360]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a59      	ldr	r2, [pc, #356]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002318:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b57      	ldr	r3, [pc, #348]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	4b53      	ldr	r3, [pc, #332]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a52      	ldr	r2, [pc, #328]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b50      	ldr	r3, [pc, #320]	; (800247c <BSP_LCD_MspInit+0x190>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	4b4c      	ldr	r3, [pc, #304]	; (800247c <BSP_LCD_MspInit+0x190>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a4b      	ldr	r2, [pc, #300]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	4b45      	ldr	r3, [pc, #276]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a44      	ldr	r2, [pc, #272]	; (800247c <BSP_LCD_MspInit+0x190>)
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b42      	ldr	r3, [pc, #264]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b3e      	ldr	r3, [pc, #248]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a3d      	ldr	r2, [pc, #244]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <BSP_LCD_MspInit+0x190>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <BSP_LCD_MspInit+0x190>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a36      	ldr	r2, [pc, #216]	; (800247c <BSP_LCD_MspInit+0x190>)
 80023a4:	f043 0320 	orr.w	r3, r3, #32
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <BSP_LCD_MspInit+0x190>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	4b30      	ldr	r3, [pc, #192]	; (800247c <BSP_LCD_MspInit+0x190>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a2f      	ldr	r2, [pc, #188]	; (800247c <BSP_LCD_MspInit+0x190>)
 80023c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <BSP_LCD_MspInit+0x190>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80023d2:	f641 0358 	movw	r3, #6232	; 0x1858
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80023e0:	2302      	movs	r3, #2
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80023e4:	230e      	movs	r3, #14
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80023e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ec:	4619      	mov	r1, r3
 80023ee:	4824      	ldr	r0, [pc, #144]	; (8002480 <BSP_LCD_MspInit+0x194>)
 80023f0:	f001 f9ee 	bl	80037d0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80023f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80023fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fe:	4619      	mov	r1, r3
 8002400:	4820      	ldr	r0, [pc, #128]	; (8002484 <BSP_LCD_MspInit+0x198>)
 8002402:	f001 f9e5 	bl	80037d0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002406:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800240c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002410:	4619      	mov	r1, r3
 8002412:	481d      	ldr	r0, [pc, #116]	; (8002488 <BSP_LCD_MspInit+0x19c>)
 8002414:	f001 f9dc 	bl	80037d0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002418:	2348      	movs	r3, #72	; 0x48
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800241c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002420:	4619      	mov	r1, r3
 8002422:	481a      	ldr	r0, [pc, #104]	; (800248c <BSP_LCD_MspInit+0x1a0>)
 8002424:	f001 f9d4 	bl	80037d0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	4619      	mov	r1, r3
 8002434:	4816      	ldr	r0, [pc, #88]	; (8002490 <BSP_LCD_MspInit+0x1a4>)
 8002436:	f001 f9cb 	bl	80037d0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800243a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002444:	4619      	mov	r1, r3
 8002446:	4813      	ldr	r0, [pc, #76]	; (8002494 <BSP_LCD_MspInit+0x1a8>)
 8002448:	f001 f9c2 	bl	80037d0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800244c:	2303      	movs	r3, #3
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002450:	2309      	movs	r3, #9
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	480a      	ldr	r0, [pc, #40]	; (8002484 <BSP_LCD_MspInit+0x198>)
 800245c:	f001 f9b8 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002460:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246a:	4619      	mov	r1, r3
 800246c:	4809      	ldr	r0, [pc, #36]	; (8002494 <BSP_LCD_MspInit+0x1a8>)
 800246e:	f001 f9af 	bl	80037d0 <HAL_GPIO_Init>
}
 8002472:	bf00      	nop
 8002474:	3738      	adds	r7, #56	; 0x38
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000
 8002484:	40020400 	.word	0x40020400
 8002488:	40020800 	.word	0x40020800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40021400 	.word	0x40021400
 8002494:	40021800 	.word	0x40021800

08002498 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	603a      	str	r2, [r7, #0]
 80024a2:	80fb      	strh	r3, [r7, #6]
 80024a4:	460b      	mov	r3, r1
 80024a6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <BSP_LCD_DrawPixel+0x44>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <BSP_LCD_DrawPixel+0x48>)
 80024ae:	2134      	movs	r1, #52	; 0x34
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	335c      	adds	r3, #92	; 0x5c
 80024b8:	681c      	ldr	r4, [r3, #0]
 80024ba:	88bd      	ldrh	r5, [r7, #4]
 80024bc:	f7ff fcb6 	bl	8001e2c <BSP_LCD_GetXSize>
 80024c0:	4603      	mov	r3, r0
 80024c2:	fb03 f205 	mul.w	r2, r3, r5
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4423      	add	r3, r4
 80024ce:	461a      	mov	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bdb0      	pop	{r4, r5, r7, pc}
 80024dc:	2000014c 	.word	0x2000014c
 80024e0:	200005a4 	.word	0x200005a4

080024e4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	603a      	str	r2, [r7, #0]
 80024ee:	80fb      	strh	r3, [r7, #6]
 80024f0:	460b      	mov	r3, r1
 80024f2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002500:	4b53      	ldr	r3, [pc, #332]	; (8002650 <DrawChar+0x16c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4953      	ldr	r1, [pc, #332]	; (8002654 <DrawChar+0x170>)
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3308      	adds	r3, #8
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	88db      	ldrh	r3, [r3, #6]
 8002516:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002518:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <DrawChar+0x16c>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	494d      	ldr	r1, [pc, #308]	; (8002654 <DrawChar+0x170>)
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	3308      	adds	r3, #8
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	889b      	ldrh	r3, [r3, #4]
 800252e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002530:	8a3b      	ldrh	r3, [r7, #16]
 8002532:	3307      	adds	r3, #7
 8002534:	2b00      	cmp	r3, #0
 8002536:	da00      	bge.n	800253a <DrawChar+0x56>
 8002538:	3307      	adds	r3, #7
 800253a:	10db      	asrs	r3, r3, #3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	b2da      	uxtb	r2, r3
 8002542:	8a3b      	ldrh	r3, [r7, #16]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	e076      	b.n	800263e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002550:	8a3b      	ldrh	r3, [r7, #16]
 8002552:	3307      	adds	r3, #7
 8002554:	2b00      	cmp	r3, #0
 8002556:	da00      	bge.n	800255a <DrawChar+0x76>
 8002558:	3307      	adds	r3, #7
 800255a:	10db      	asrs	r3, r3, #3
 800255c:	461a      	mov	r2, r3
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fb03 f302 	mul.w	r3, r3, r2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800256a:	8a3b      	ldrh	r3, [r7, #16]
 800256c:	3307      	adds	r3, #7
 800256e:	2b00      	cmp	r3, #0
 8002570:	da00      	bge.n	8002574 <DrawChar+0x90>
 8002572:	3307      	adds	r3, #7
 8002574:	10db      	asrs	r3, r3, #3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d002      	beq.n	8002580 <DrawChar+0x9c>
 800257a:	2b02      	cmp	r3, #2
 800257c:	d004      	beq.n	8002588 <DrawChar+0xa4>
 800257e:	e00c      	b.n	800259a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	617b      	str	r3, [r7, #20]
      break;
 8002586:	e016      	b.n	80025b6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	3201      	adds	r2, #1
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
      break;
 8002598:	e00d      	b.n	80025b6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	041a      	lsls	r2, r3, #16
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	3301      	adds	r3, #1
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	4313      	orrs	r3, r2
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	3202      	adds	r2, #2
 80025ae:	7812      	ldrb	r2, [r2, #0]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
      break;
 80025b4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e036      	b.n	800262a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80025bc:	8a3a      	ldrh	r2, [r7, #16]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	1ad2      	subs	r2, r2, r3
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	4413      	add	r3, r2
 80025c6:	3b01      	subs	r3, #1
 80025c8:	2201      	movs	r2, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d012      	beq.n	80025fe <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	4413      	add	r3, r2
 80025e0:	b298      	uxth	r0, r3
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <DrawChar+0x16c>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	491b      	ldr	r1, [pc, #108]	; (8002654 <DrawChar+0x170>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	88bb      	ldrh	r3, [r7, #4]
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7ff ff4e 	bl	8002498 <BSP_LCD_DrawPixel>
 80025fc:	e012      	b.n	8002624 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	b29a      	uxth	r2, r3
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	4413      	add	r3, r2
 8002606:	b298      	uxth	r0, r3
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <DrawChar+0x16c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4911      	ldr	r1, [pc, #68]	; (8002654 <DrawChar+0x170>)
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	3304      	adds	r3, #4
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	88bb      	ldrh	r3, [r7, #4]
 800261e:	4619      	mov	r1, r3
 8002620:	f7ff ff3a 	bl	8002498 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	3301      	adds	r3, #1
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	8a3b      	ldrh	r3, [r7, #16]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	429a      	cmp	r2, r3
 8002630:	d3c4      	bcc.n	80025bc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002632:	88bb      	ldrh	r3, [r7, #4]
 8002634:	3301      	adds	r3, #1
 8002636:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	3301      	adds	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	8a7b      	ldrh	r3, [r7, #18]
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	429a      	cmp	r2, r3
 8002644:	d384      	bcc.n	8002550 <DrawChar+0x6c>
  }
}
 8002646:	bf00      	nop
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000014c 	.word	0x2000014c
 8002654:	20000150 	.word	0x20000150

08002658 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <FillBuffer+0x68>)
 8002668:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800266c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <FillBuffer+0x68>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002674:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <FillBuffer+0x68>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <FillBuffer+0x68>)
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <FillBuffer+0x6c>)
 800267e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002680:	480f      	ldr	r0, [pc, #60]	; (80026c0 <FillBuffer+0x68>)
 8002682:	f000 fd09 	bl	8003098 <HAL_DMA2D_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d115      	bne.n	80026b8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800268c:	68f9      	ldr	r1, [r7, #12]
 800268e:	480c      	ldr	r0, [pc, #48]	; (80026c0 <FillBuffer+0x68>)
 8002690:	f000 ff70 	bl	8003574 <HAL_DMA2D_ConfigLayer>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10e      	bne.n	80026b8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69f9      	ldr	r1, [r7, #28]
 80026a4:	4806      	ldr	r0, [pc, #24]	; (80026c0 <FillBuffer+0x68>)
 80026a6:	f000 fd40 	bl	800312a <HAL_DMA2D_Start>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80026b0:	210a      	movs	r1, #10
 80026b2:	4803      	ldr	r0, [pc, #12]	; (80026c0 <FillBuffer+0x68>)
 80026b4:	f000 fd64 	bl	8003180 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200000dc 	.word	0x200000dc
 80026c4:	4002b000 	.word	0x4002b000

080026c8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <BSP_SDRAM_Init+0xac>)
 80026ce:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <BSP_SDRAM_Init+0xb0>)
 80026d0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <BSP_SDRAM_Init+0xb4>)
 80026d4:	2202      	movs	r2, #2
 80026d6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <BSP_SDRAM_Init+0xb4>)
 80026da:	2207      	movs	r2, #7
 80026dc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <BSP_SDRAM_Init+0xb4>)
 80026e0:	2204      	movs	r2, #4
 80026e2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <BSP_SDRAM_Init+0xb4>)
 80026e6:	2207      	movs	r2, #7
 80026e8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <BSP_SDRAM_Init+0xb4>)
 80026ec:	2202      	movs	r2, #2
 80026ee:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <BSP_SDRAM_Init+0xb4>)
 80026f2:	2202      	movs	r2, #2
 80026f4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80026f6:	4b21      	ldr	r3, [pc, #132]	; (800277c <BSP_SDRAM_Init+0xb4>)
 80026f8:	2202      	movs	r2, #2
 80026fa:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <BSP_SDRAM_Init+0xac>)
 80026fe:	2201      	movs	r2, #1
 8002700:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <BSP_SDRAM_Init+0xac>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <BSP_SDRAM_Init+0xac>)
 800270a:	2204      	movs	r2, #4
 800270c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <BSP_SDRAM_Init+0xac>)
 8002710:	2210      	movs	r2, #16
 8002712:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <BSP_SDRAM_Init+0xac>)
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <BSP_SDRAM_Init+0xac>)
 800271c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002720:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <BSP_SDRAM_Init+0xac>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <BSP_SDRAM_Init+0xac>)
 800272a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800272e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <BSP_SDRAM_Init+0xac>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <BSP_SDRAM_Init+0xac>)
 8002738:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800273e:	2100      	movs	r1, #0
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <BSP_SDRAM_Init+0xac>)
 8002742:	f000 f87f 	bl	8002844 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002746:	490d      	ldr	r1, [pc, #52]	; (800277c <BSP_SDRAM_Init+0xb4>)
 8002748:	480a      	ldr	r0, [pc, #40]	; (8002774 <BSP_SDRAM_Init+0xac>)
 800274a:	f004 f90f 	bl	800696c <HAL_SDRAM_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <BSP_SDRAM_Init+0xb8>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e002      	b.n	8002762 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <BSP_SDRAM_Init+0xb8>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002762:	f240 506a 	movw	r0, #1386	; 0x56a
 8002766:	f000 f80d 	bl	8002784 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <BSP_SDRAM_Init+0xb8>)
 800276c:	781b      	ldrb	r3, [r3, #0]
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000168 	.word	0x20000168
 8002778:	a0000140 	.word	0xa0000140
 800277c:	2000019c 	.word	0x2000019c
 8002780:	20000050 	.word	0x20000050

08002784 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002798:	2208      	movs	r2, #8
 800279a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800279e:	2201      	movs	r2, #1
 80027a0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80027a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ac:	4923      	ldr	r1, [pc, #140]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027ae:	4824      	ldr	r0, [pc, #144]	; (8002840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80027b0:	f004 f910 	bl	80069d4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80027b4:	2001      	movs	r0, #1
 80027b6:	f000 f993 	bl	8002ae0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027bc:	2202      	movs	r2, #2
 80027be:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80027c0:	4b1e      	ldr	r3, [pc, #120]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027c2:	2208      	movs	r2, #8
 80027c4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80027d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d6:	4919      	ldr	r1, [pc, #100]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027d8:	4819      	ldr	r0, [pc, #100]	; (8002840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80027da:	f004 f8fb 	bl	80069d4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027e0:	2203      	movs	r2, #3
 80027e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027e6:	2208      	movs	r2, #8
 80027e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027ec:	2204      	movs	r2, #4
 80027ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80027f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027fa:	4910      	ldr	r1, [pc, #64]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027fc:	4810      	ldr	r0, [pc, #64]	; (8002840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80027fe:	f004 f8e9 	bl	80069d4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002802:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002806:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800280a:	2204      	movs	r2, #4
 800280c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002810:	2208      	movs	r2, #8
 8002812:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002816:	2201      	movs	r2, #1
 8002818:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800281e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002824:	4905      	ldr	r1, [pc, #20]	; (800283c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002826:	4806      	ldr	r0, [pc, #24]	; (8002840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002828:	f004 f8d4 	bl	80069d4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4804      	ldr	r0, [pc, #16]	; (8002840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002830:	f004 f8fb 	bl	8006a2a <HAL_SDRAM_ProgramRefreshRate>
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200001b8 	.word	0x200001b8
 8002840:	20000168 	.word	0x20000168

08002844 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b090      	sub	sp, #64	; 0x40
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80ec 	beq.w	8002a2e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
 800285a:	4b77      	ldr	r3, [pc, #476]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	4a76      	ldr	r2, [pc, #472]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6393      	str	r3, [r2, #56]	; 0x38
 8002866:	4b74      	ldr	r3, [pc, #464]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
 8002876:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a6f      	ldr	r2, [pc, #444]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 800287c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	4b69      	ldr	r3, [pc, #420]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a68      	ldr	r2, [pc, #416]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a61      	ldr	r2, [pc, #388]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	4b5b      	ldr	r3, [pc, #364]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a5a      	ldr	r2, [pc, #360]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028d0:	f043 0308 	orr.w	r3, r3, #8
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	4b54      	ldr	r3, [pc, #336]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a53      	ldr	r2, [pc, #332]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028ec:	f043 0310 	orr.w	r3, r3, #16
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b51      	ldr	r3, [pc, #324]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b4d      	ldr	r3, [pc, #308]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a4c      	ldr	r2, [pc, #304]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002908:	f043 0320 	orr.w	r3, r3, #32
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a45      	ldr	r2, [pc, #276]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 8002924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <BSP_SDRAM_MspInit+0x1f4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800293a:	2302      	movs	r3, #2
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002942:	230c      	movs	r3, #12
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002946:	2360      	movs	r3, #96	; 0x60
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800294a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294e:	4619      	mov	r1, r3
 8002950:	483a      	ldr	r0, [pc, #232]	; (8002a3c <BSP_SDRAM_MspInit+0x1f8>)
 8002952:	f000 ff3d 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002956:	2301      	movs	r3, #1
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800295a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800295e:	4619      	mov	r1, r3
 8002960:	4837      	ldr	r0, [pc, #220]	; (8002a40 <BSP_SDRAM_MspInit+0x1fc>)
 8002962:	f000 ff35 	bl	80037d0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002966:	f24c 7303 	movw	r3, #50947	; 0xc703
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800296c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002970:	4619      	mov	r1, r3
 8002972:	4834      	ldr	r0, [pc, #208]	; (8002a44 <BSP_SDRAM_MspInit+0x200>)
 8002974:	f000 ff2c 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002978:	f64f 7383 	movw	r3, #65411	; 0xff83
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800297e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002982:	4619      	mov	r1, r3
 8002984:	4830      	ldr	r0, [pc, #192]	; (8002a48 <BSP_SDRAM_MspInit+0x204>)
 8002986:	f000 ff23 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800298a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002994:	4619      	mov	r1, r3
 8002996:	482d      	ldr	r0, [pc, #180]	; (8002a4c <BSP_SDRAM_MspInit+0x208>)
 8002998:	f000 ff1a 	bl	80037d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800299c:	f248 1333 	movw	r3, #33075	; 0x8133
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80029a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a6:	4619      	mov	r1, r3
 80029a8:	4829      	ldr	r0, [pc, #164]	; (8002a50 <BSP_SDRAM_MspInit+0x20c>)
 80029aa:	f000 ff11 	bl	80037d0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80029ae:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80029b4:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029d0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029dc:	2200      	movs	r2, #0
 80029de:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029e6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029f0:	2203      	movs	r2, #3
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <BSP_SDRAM_MspInit+0x214>)
 8002a04:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0c:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002a12:	4810      	ldr	r0, [pc, #64]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 8002a14:	f000 fa32 	bl	8002e7c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002a18:	480e      	ldr	r0, [pc, #56]	; (8002a54 <BSP_SDRAM_MspInit+0x210>)
 8002a1a:	f000 f981 	bl	8002d20 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	210f      	movs	r1, #15
 8002a22:	2038      	movs	r0, #56	; 0x38
 8002a24:	f000 f936 	bl	8002c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002a28:	2038      	movs	r0, #56	; 0x38
 8002a2a:	f000 f94f 	bl	8002ccc <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002a2e:	bf00      	nop
 8002a30:	3740      	adds	r7, #64	; 0x40
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020400 	.word	0x40020400
 8002a40:	40020800 	.word	0x40020800
 8002a44:	40020c00 	.word	0x40020c00
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40021400 	.word	0x40021400
 8002a50:	40021800 	.word	0x40021800
 8002a54:	200001c8 	.word	0x200001c8
 8002a58:	40026410 	.word	0x40026410

08002a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <HAL_Init+0x40>)
 8002a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_Init+0x40>)
 8002a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_Init+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <HAL_Init+0x40>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f000 f8fa 	bl	8002c7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fe fc4a 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a90:	f7fe fc1c 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00

08002aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_IncTick+0x20>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_IncTick+0x24>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_IncTick+0x24>)
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000058 	.word	0x20000058
 8002ac4:	20000650 	.word	0x20000650

08002ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return uwTick;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_GetTick+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000650 	.word	0x20000650

08002ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff ffee 	bl	8002ac8 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d005      	beq.n	8002b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_Delay+0x40>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b06:	bf00      	nop
 8002b08:	f7ff ffde 	bl	8002ac8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d8f7      	bhi.n	8002b08 <HAL_Delay+0x28>
  {
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000058 	.word	0x20000058

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	; (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	4313      	orrs	r3, r2
         );
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff4c 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca6:	f7ff ff61 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002caa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	6978      	ldr	r0, [r7, #20]
 8002cb2:	f7ff ffb1 	bl	8002c18 <NVIC_EncodePriority>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ff80 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff54 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00e      	b.n	8002d18 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	795b      	ldrb	r3, [r3, #5]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fc04 	bl	8000518 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff fecc 	bl	8002ac8 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e099      	b.n	8002e70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5c:	e00f      	b.n	8002d7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d5e:	f7ff feb3 	bl	8002ac8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d908      	bls.n	8002d7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2203      	movs	r2, #3
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e078      	b.n	8002e70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e8      	bne.n	8002d5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <HAL_DMA_Init+0x158>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	4313      	orrs	r3, r2
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0307 	bic.w	r3, r3, #7
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d117      	bne.n	8002e42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f8bd 	bl	8002fa4 <DMA_CheckFifoParam>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e016      	b.n	8002e70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f874 	bl	8002f38 <DMA_CalcBaseAndBitshift>
 8002e50:	4603      	mov	r3, r0
 8002e52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	223f      	movs	r2, #63	; 0x3f
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	f010803f 	.word	0xf010803f

08002e7c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e050      	b.n	8002f30 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d101      	bne.n	8002e9e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e048      	b.n	8002f30 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2221      	movs	r2, #33	; 0x21
 8002edc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f82a 	bl	8002f38 <DMA_CalcBaseAndBitshift>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	223f      	movs	r2, #63	; 0x3f
 8002f12:	409a      	lsls	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	3b10      	subs	r3, #16
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <DMA_CalcBaseAndBitshift+0x64>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <DMA_CalcBaseAndBitshift+0x68>)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d909      	bls.n	8002f7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f6e:	f023 0303 	bic.w	r3, r3, #3
 8002f72:	1d1a      	adds	r2, r3, #4
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	659a      	str	r2, [r3, #88]	; 0x58
 8002f78:	e007      	b.n	8002f8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f82:	f023 0303 	bic.w	r3, r3, #3
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	aaaaaaab 	.word	0xaaaaaaab
 8002fa0:	0800c070 	.word	0x0800c070

08002fa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11f      	bne.n	8002ffe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d855      	bhi.n	8003070 <DMA_CheckFifoParam+0xcc>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <DMA_CheckFifoParam+0x28>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08002fdd 	.word	0x08002fdd
 8002fd0:	08002fef 	.word	0x08002fef
 8002fd4:	08002fdd 	.word	0x08002fdd
 8002fd8:	08003071 	.word	0x08003071
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d045      	beq.n	8003074 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fec:	e042      	b.n	8003074 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ff6:	d13f      	bne.n	8003078 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffc:	e03c      	b.n	8003078 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003006:	d121      	bne.n	800304c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d836      	bhi.n	800307c <DMA_CheckFifoParam+0xd8>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <DMA_CheckFifoParam+0x70>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003025 	.word	0x08003025
 8003018:	0800302b 	.word	0x0800302b
 800301c:	08003025 	.word	0x08003025
 8003020:	0800303d 	.word	0x0800303d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      break;
 8003028:	e02f      	b.n	800308a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d024      	beq.n	8003080 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800303a:	e021      	b.n	8003080 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003044:	d11e      	bne.n	8003084 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800304a:	e01b      	b.n	8003084 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d902      	bls.n	8003058 <DMA_CheckFifoParam+0xb4>
 8003052:	2b03      	cmp	r3, #3
 8003054:	d003      	beq.n	800305e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003056:	e018      	b.n	800308a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      break;
 800305c:	e015      	b.n	800308a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00e      	beq.n	8003088 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
      break;
 800306e:	e00b      	b.n	8003088 <DMA_CheckFifoParam+0xe4>
      break;
 8003070:	bf00      	nop
 8003072:	e00a      	b.n	800308a <DMA_CheckFifoParam+0xe6>
      break;
 8003074:	bf00      	nop
 8003076:	e008      	b.n	800308a <DMA_CheckFifoParam+0xe6>
      break;
 8003078:	bf00      	nop
 800307a:	e006      	b.n	800308a <DMA_CheckFifoParam+0xe6>
      break;
 800307c:	bf00      	nop
 800307e:	e004      	b.n	800308a <DMA_CheckFifoParam+0xe6>
      break;
 8003080:	bf00      	nop
 8003082:	e002      	b.n	800308a <DMA_CheckFifoParam+0xe6>
      break;   
 8003084:	bf00      	nop
 8003086:	e000      	b.n	800308a <DMA_CheckFifoParam+0xe6>
      break;
 8003088:	bf00      	nop
    }
  } 
  
  return status; 
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e03b      	b.n	8003122 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd fa7e 	bl	80005c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	f023 0107 	bic.w	r1, r3, #7
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003102:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68d1      	ldr	r1, [r2, #12]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	430b      	orrs	r3, r1
 8003110:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af02      	add	r7, sp, #8
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_DMA2D_Start+0x1c>
 8003142:	2302      	movs	r3, #2
 8003144:	e018      	b.n	8003178 <HAL_DMA2D_Start+0x4e>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fa99 	bl	8003698 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d056      	beq.n	800324a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800319c:	f7ff fc94 	bl	8002ac8 <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80031a2:	e04b      	b.n	800323c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d023      	beq.n	80031fe <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	f043 0202 	orr.w	r2, r3, #2
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2221      	movs	r2, #33	; 0x21
 80031e8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2204      	movs	r2, #4
 80031ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0a5      	b.n	800334a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d01a      	beq.n	800323c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003206:	f7ff fc5f 	bl	8002ac8 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <HAL_DMA2D_PollForTransfer+0x9c>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10f      	bne.n	800323c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e086      	b.n	800334a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0ac      	beq.n	80031a4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d061      	beq.n	8003330 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800326c:	f7ff fc2c 	bl	8002ac8 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003272:	e056      	b.n	8003322 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02e      	beq.n	80032e4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	f043 0204 	orr.w	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	f043 0202 	orr.w	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2229      	movs	r2, #41	; 0x29
 80032ce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2204      	movs	r2, #4
 80032d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e032      	b.n	800334a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d01a      	beq.n	8003322 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80032ec:	f7ff fbec 	bl	8002ac8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d302      	bcc.n	8003302 <HAL_DMA2D_PollForTransfer+0x182>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10f      	bne.n	8003322 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2203      	movs	r2, #3
 8003312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e013      	b.n	800334a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0a1      	beq.n	8003274 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2212      	movs	r2, #18
 8003336:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d026      	beq.n	80033c2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d021      	beq.n	80033c2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800338c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2204      	movs	r2, #4
 80033a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d026      	beq.n	800341a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d021      	beq.n	800341a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033e4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2220      	movs	r2, #32
 80033ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2204      	movs	r2, #4
 80033fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d026      	beq.n	8003472 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342a:	2b00      	cmp	r3, #0
 800342c:	d021      	beq.n	8003472 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2208      	movs	r2, #8
 8003444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	f043 0204 	orr.w	r2, r3, #4
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2204      	movs	r2, #4
 8003456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00e      	beq.n	80034a4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003494:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2204      	movs	r2, #4
 800349c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f853 	bl	800354a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d024      	beq.n	80034f8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01f      	beq.n	80034f8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2202      	movs	r2, #2
 80034ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01f      	beq.n	8003542 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01a      	beq.n	8003542 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800351a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2210      	movs	r2, #16
 8003522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f80e 	bl	800355e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_DMA2D_ConfigLayer+0x20>
 8003590:	2302      	movs	r3, #2
 8003592:	e079      	b.n	8003688 <HAL_DMA2D_ConfigLayer+0x114>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	3318      	adds	r3, #24
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80035be:	4b35      	ldr	r3, [pc, #212]	; (8003694 <HAL_DMA2D_ConfigLayer+0x120>)
 80035c0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b0a      	cmp	r3, #10
 80035c8:	d003      	beq.n	80035d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b09      	cmp	r3, #9
 80035d0:	d107      	bne.n	80035e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e005      	b.n	80035ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d120      	bne.n	8003636 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	ea02 0103 	and.w	r1, r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	430a      	orrs	r2, r1
 800360a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b0a      	cmp	r3, #10
 800361c:	d003      	beq.n	8003626 <HAL_DMA2D_ConfigLayer+0xb2>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b09      	cmp	r3, #9
 8003624:	d127      	bne.n	8003676 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
 8003634:	e01f      	b.n	8003676 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	ea02 0103 	and.w	r1, r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	430a      	orrs	r2, r1
 800364c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b0a      	cmp	r3, #10
 800365e:	d003      	beq.n	8003668 <HAL_DMA2D_ConfigLayer+0xf4>
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b09      	cmp	r3, #9
 8003666:	d106      	bne.n	8003676 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003674:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	ff03000f 	.word	0xff03000f

08003698 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003698:	b480      	push	{r7}
 800369a:	b08b      	sub	sp, #44	; 0x2c
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	041a      	lsls	r2, r3, #16
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	431a      	orrs	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036d0:	d174      	bne.n	80037bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80036d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80036e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d108      	bne.n	800370a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	4313      	orrs	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	e053      	b.n	80037b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d106      	bne.n	8003720 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4313      	orrs	r3, r2
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
 800371e:	e048      	b.n	80037b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d111      	bne.n	800374c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	0cdb      	lsrs	r3, r3, #19
 800372c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	0a9b      	lsrs	r3, r3, #10
 8003732:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	08db      	lsrs	r3, r3, #3
 8003738:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	02db      	lsls	r3, r3, #11
 8003742:	4313      	orrs	r3, r2
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	e032      	b.n	80037b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d117      	bne.n	8003784 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	0fdb      	lsrs	r3, r3, #31
 8003758:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	0cdb      	lsrs	r3, r3, #19
 800375e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	0adb      	lsrs	r3, r3, #11
 8003764:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	08db      	lsrs	r3, r3, #3
 800376a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	431a      	orrs	r2, r3
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	03db      	lsls	r3, r3, #15
 800377a:	4313      	orrs	r3, r2
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	e016      	b.n	80037b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	0f1b      	lsrs	r3, r3, #28
 8003788:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	0d1b      	lsrs	r3, r3, #20
 800378e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	0b1b      	lsrs	r3, r3, #12
 8003794:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	011a      	lsls	r2, r3, #4
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	431a      	orrs	r2, r3
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	031b      	lsls	r3, r3, #12
 80037aa:	4313      	orrs	r3, r2
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80037ba:	e003      	b.n	80037c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	60da      	str	r2, [r3, #12]
}
 80037c4:	bf00      	nop
 80037c6:	372c      	adds	r7, #44	; 0x2c
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	e177      	b.n	8003adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037ec:	2201      	movs	r2, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	429a      	cmp	r2, r3
 8003806:	f040 8166 	bne.w	8003ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d00b      	beq.n	800382a <HAL_GPIO_Init+0x5a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d007      	beq.n	800382a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800381e:	2b11      	cmp	r3, #17
 8003820:	d003      	beq.n	800382a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b12      	cmp	r3, #18
 8003828:	d130      	bne.n	800388c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	2203      	movs	r2, #3
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003860:	2201      	movs	r2, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 0201 	and.w	r2, r3, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0xfc>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b12      	cmp	r3, #18
 80038ca:	d123      	bne.n	8003914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	08da      	lsrs	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3208      	adds	r2, #8
 80038d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	220f      	movs	r2, #15
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	08da      	lsrs	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3208      	adds	r2, #8
 800390e:	69b9      	ldr	r1, [r7, #24]
 8003910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0203 	and.w	r2, r3, #3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80c0 	beq.w	8003ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	4b65      	ldr	r3, [pc, #404]	; (8003af0 <HAL_GPIO_Init+0x320>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	4a64      	ldr	r2, [pc, #400]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003964:	6453      	str	r3, [r2, #68]	; 0x44
 8003966:	4b62      	ldr	r3, [pc, #392]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003972:	4a60      	ldr	r2, [pc, #384]	; (8003af4 <HAL_GPIO_Init+0x324>)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	3302      	adds	r3, #2
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	220f      	movs	r2, #15
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a57      	ldr	r2, [pc, #348]	; (8003af8 <HAL_GPIO_Init+0x328>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d037      	beq.n	8003a0e <HAL_GPIO_Init+0x23e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a56      	ldr	r2, [pc, #344]	; (8003afc <HAL_GPIO_Init+0x32c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d031      	beq.n	8003a0a <HAL_GPIO_Init+0x23a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a55      	ldr	r2, [pc, #340]	; (8003b00 <HAL_GPIO_Init+0x330>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02b      	beq.n	8003a06 <HAL_GPIO_Init+0x236>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a54      	ldr	r2, [pc, #336]	; (8003b04 <HAL_GPIO_Init+0x334>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d025      	beq.n	8003a02 <HAL_GPIO_Init+0x232>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a53      	ldr	r2, [pc, #332]	; (8003b08 <HAL_GPIO_Init+0x338>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01f      	beq.n	80039fe <HAL_GPIO_Init+0x22e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a52      	ldr	r2, [pc, #328]	; (8003b0c <HAL_GPIO_Init+0x33c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d019      	beq.n	80039fa <HAL_GPIO_Init+0x22a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a51      	ldr	r2, [pc, #324]	; (8003b10 <HAL_GPIO_Init+0x340>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_GPIO_Init+0x226>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a50      	ldr	r2, [pc, #320]	; (8003b14 <HAL_GPIO_Init+0x344>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00d      	beq.n	80039f2 <HAL_GPIO_Init+0x222>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4f      	ldr	r2, [pc, #316]	; (8003b18 <HAL_GPIO_Init+0x348>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <HAL_GPIO_Init+0x21e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4e      	ldr	r2, [pc, #312]	; (8003b1c <HAL_GPIO_Init+0x34c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_GPIO_Init+0x21a>
 80039e6:	2309      	movs	r3, #9
 80039e8:	e012      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039ea:	230a      	movs	r3, #10
 80039ec:	e010      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039ee:	2308      	movs	r3, #8
 80039f0:	e00e      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039f2:	2307      	movs	r3, #7
 80039f4:	e00c      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039f6:	2306      	movs	r3, #6
 80039f8:	e00a      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039fa:	2305      	movs	r3, #5
 80039fc:	e008      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039fe:	2304      	movs	r3, #4
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a02:	2303      	movs	r3, #3
 8003a04:	e004      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	f002 0203 	and.w	r2, r2, #3
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	4093      	lsls	r3, r2
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a20:	4934      	ldr	r1, [pc, #208]	; (8003af4 <HAL_GPIO_Init+0x324>)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a2e:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <HAL_GPIO_Init+0x350>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a52:	4a33      	ldr	r2, [pc, #204]	; (8003b20 <HAL_GPIO_Init+0x350>)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a58:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <HAL_GPIO_Init+0x350>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <HAL_GPIO_Init+0x350>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a82:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <HAL_GPIO_Init+0x350>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa6:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <HAL_GPIO_Init+0x350>)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aac:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <HAL_GPIO_Init+0x350>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <HAL_GPIO_Init+0x350>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	f67f ae84 	bls.w	80037ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3724      	adds	r7, #36	; 0x24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40013800 	.word	0x40013800
 8003af8:	40020000 	.word	0x40020000
 8003afc:	40020400 	.word	0x40020400
 8003b00:	40020800 	.word	0x40020800
 8003b04:	40020c00 	.word	0x40020c00
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40021400 	.word	0x40021400
 8003b10:	40021800 	.word	0x40021800
 8003b14:	40021c00 	.word	0x40021c00
 8003b18:	40022000 	.word	0x40022000
 8003b1c:	40022400 	.word	0x40022400
 8003b20:	40013c00 	.word	0x40013c00

08003b24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e0d9      	b.n	8003cf4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b40:	2201      	movs	r2, #1
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	f040 80c9 	bne.w	8003cee <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003b5c:	4a6a      	ldr	r2, [pc, #424]	; (8003d08 <HAL_GPIO_DeInit+0x1e4>)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	089b      	lsrs	r3, r3, #2
 8003b62:	3302      	adds	r3, #2
 8003b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b68:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	220f      	movs	r2, #15
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a62      	ldr	r2, [pc, #392]	; (8003d0c <HAL_GPIO_DeInit+0x1e8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d037      	beq.n	8003bf6 <HAL_GPIO_DeInit+0xd2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a61      	ldr	r2, [pc, #388]	; (8003d10 <HAL_GPIO_DeInit+0x1ec>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_GPIO_DeInit+0xce>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a60      	ldr	r2, [pc, #384]	; (8003d14 <HAL_GPIO_DeInit+0x1f0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02b      	beq.n	8003bee <HAL_GPIO_DeInit+0xca>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a5f      	ldr	r2, [pc, #380]	; (8003d18 <HAL_GPIO_DeInit+0x1f4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d025      	beq.n	8003bea <HAL_GPIO_DeInit+0xc6>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a5e      	ldr	r2, [pc, #376]	; (8003d1c <HAL_GPIO_DeInit+0x1f8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01f      	beq.n	8003be6 <HAL_GPIO_DeInit+0xc2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a5d      	ldr	r2, [pc, #372]	; (8003d20 <HAL_GPIO_DeInit+0x1fc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d019      	beq.n	8003be2 <HAL_GPIO_DeInit+0xbe>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a5c      	ldr	r2, [pc, #368]	; (8003d24 <HAL_GPIO_DeInit+0x200>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_GPIO_DeInit+0xba>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a5b      	ldr	r2, [pc, #364]	; (8003d28 <HAL_GPIO_DeInit+0x204>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00d      	beq.n	8003bda <HAL_GPIO_DeInit+0xb6>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a5a      	ldr	r2, [pc, #360]	; (8003d2c <HAL_GPIO_DeInit+0x208>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d007      	beq.n	8003bd6 <HAL_GPIO_DeInit+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a59      	ldr	r2, [pc, #356]	; (8003d30 <HAL_GPIO_DeInit+0x20c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_GPIO_DeInit+0xae>
 8003bce:	2309      	movs	r3, #9
 8003bd0:	e012      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003bd2:	230a      	movs	r3, #10
 8003bd4:	e010      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	e00e      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003bda:	2307      	movs	r3, #7
 8003bdc:	e00c      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003bde:	2306      	movs	r3, #6
 8003be0:	e00a      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003be2:	2305      	movs	r3, #5
 8003be4:	e008      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003be6:	2304      	movs	r3, #4
 8003be8:	e006      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003bea:	2303      	movs	r3, #3
 8003bec:	e004      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e002      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_GPIO_DeInit+0xd4>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	f002 0203 	and.w	r2, r2, #3
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	4093      	lsls	r3, r2
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d132      	bne.n	8003c6e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c08:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <HAL_GPIO_DeInit+0x210>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	4948      	ldr	r1, [pc, #288]	; (8003d34 <HAL_GPIO_DeInit+0x210>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_GPIO_DeInit+0x210>)
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	4945      	ldr	r1, [pc, #276]	; (8003d34 <HAL_GPIO_DeInit+0x210>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003c24:	4b43      	ldr	r3, [pc, #268]	; (8003d34 <HAL_GPIO_DeInit+0x210>)
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	4941      	ldr	r1, [pc, #260]	; (8003d34 <HAL_GPIO_DeInit+0x210>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003c32:	4b40      	ldr	r3, [pc, #256]	; (8003d34 <HAL_GPIO_DeInit+0x210>)
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	493e      	ldr	r1, [pc, #248]	; (8003d34 <HAL_GPIO_DeInit+0x210>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	220f      	movs	r2, #15
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003c50:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <HAL_GPIO_DeInit+0x1e4>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	3302      	adds	r3, #2
 8003c58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	4829      	ldr	r0, [pc, #164]	; (8003d08 <HAL_GPIO_DeInit+0x1e4>)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	400a      	ands	r2, r1
 8003c68:	3302      	adds	r3, #2
 8003c6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2103      	movs	r1, #3
 8003c78:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	401a      	ands	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	08da      	lsrs	r2, r3, #3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3208      	adds	r2, #8
 8003c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	220f      	movs	r2, #15
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	08d2      	lsrs	r2, r2, #3
 8003ca4:	4019      	ands	r1, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3208      	adds	r2, #8
 8003caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	2103      	movs	r1, #3
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	401a      	ands	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	f67f af22 	bls.w	8003b40 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	40020000 	.word	0x40020000
 8003d10:	40020400 	.word	0x40020400
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020c00 	.word	0x40020c00
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40021400 	.word	0x40021400
 8003d24:	40021800 	.word	0x40021800
 8003d28:	40021c00 	.word	0x40021c00
 8003d2c:	40022000 	.word	0x40022000
 8003d30:	40022400 	.word	0x40022400
 8003d34:	40013c00 	.word	0x40013c00

08003d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
 8003d44:	4613      	mov	r3, r2
 8003d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d48:	787b      	ldrb	r3, [r7, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d54:	e003      	b.n	8003d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	619a      	str	r2, [r3, #24]
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b086      	sub	sp, #24
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f004 fdaf 	bl	80088e4 <USB_GetMode>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 80ef 	bne.w	8003f6c <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f004 fd93 	bl	80088be <USB_ReadInterrupts>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80e5 	beq.w	8003f6a <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f004 fd8a 	bl	80088be <USB_ReadInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003db4:	d104      	bne.n	8003dc0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003dbe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f004 fd7a 	bl	80088be <USB_ReadInterrupts>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd4:	d104      	bne.n	8003de0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dde:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f004 fd6a 	bl	80088be <USB_ReadInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d104      	bne.n	8003e00 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003dfe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f004 fd5a 	bl	80088be <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d103      	bne.n	8003e1c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f004 fd4c 	bl	80088be <USB_ReadInterrupts>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e30:	d115      	bne.n	8003e5e <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e3a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d108      	bne.n	8003e5e <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f006 f875 	bl	8009f3c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 fd51 	bl	8008900 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f004 fd2b 	bl	80088be <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e72:	d102      	bne.n	8003e7a <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f001 f8ef 	bl	8005058 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f004 fd1d 	bl	80088be <USB_ReadInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d106      	bne.n	8003e9c <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f006 f838 	bl	8009f04 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f004 fd0c 	bl	80088be <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb0:	d138      	bne.n	8003f24 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f004 fd5c 	bl	8008974 <USB_HC_ReadInterrupt>
 8003ebc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e025      	b.n	8003f10 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d018      	beq.n	8003f0a <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eee:	d106      	bne.n	8003efe <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f858 	bl	8003fac <HCD_HC_IN_IRQHandler>
 8003efc:	e005      	b.n	8003f0a <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fc86 	bl	8004816 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d3d4      	bcc.n	8003ec4 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f004 fcc8 	bl	80088be <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d101      	bne.n	8003f3c <HAL_HCD_IRQHandler+0x1d2>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <HAL_HCD_IRQHandler+0x1d4>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d014      	beq.n	8003f6c <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0210 	bic.w	r2, r2, #16
 8003f50:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 ffd4 	bl	8004f00 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0210 	orr.w	r2, r2, #16
 8003f66:	619a      	str	r2, [r3, #24]
 8003f68:	e000      	b.n	8003f6c <HAL_HCD_IRQHandler+0x202>
      return;
 8003f6a:	bf00      	nop
    }
  }
}
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_HCD_Stop+0x16>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e00d      	b.n	8003fa4 <HAL_HCD_Stop+0x32>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f004 fdfd 	bl	8008b94 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d119      	bne.n	8004010 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2304      	movs	r3, #4
 8003fec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	440a      	add	r2, r1
 8004004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004008:	f043 0302 	orr.w	r3, r3, #2
 800400c:	60d3      	str	r3, [r2, #12]
 800400e:	e0ce      	b.n	80041ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004026:	d12c      	bne.n	8004082 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	461a      	mov	r2, r3
 8004036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800403a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	440b      	add	r3, r1
 800404a:	335d      	adds	r3, #93	; 0x5d
 800404c:	2207      	movs	r2, #7
 800404e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	440a      	add	r2, r1
 8004066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800406a:	f043 0302 	orr.w	r3, r3, #2
 800406e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f004 fc8b 	bl	8008996 <USB_HC_Halt>
 8004080:	e095      	b.n	80041ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b20      	cmp	r3, #32
 8004096:	d109      	bne.n	80040ac <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	461a      	mov	r2, r3
 80040a6:	2320      	movs	r3, #32
 80040a8:	6093      	str	r3, [r2, #8]
 80040aa:	e080      	b.n	80041ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d134      	bne.n	800412c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040dc:	f043 0302 	orr.w	r3, r3, #2
 80040e0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	440b      	add	r3, r1
 80040f0:	335d      	adds	r3, #93	; 0x5d
 80040f2:	2205      	movs	r2, #5
 80040f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	461a      	mov	r2, r3
 8004104:	2310      	movs	r3, #16
 8004106:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	461a      	mov	r2, r3
 8004116:	2308      	movs	r3, #8
 8004118:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	4611      	mov	r1, r2
 8004124:	4618      	mov	r0, r3
 8004126:	f004 fc36 	bl	8008996 <USB_HC_Halt>
 800412a:	e040      	b.n	80041ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004142:	d134      	bne.n	80041ae <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	440a      	add	r2, r1
 800415a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f004 fc11 	bl	8008996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004180:	461a      	mov	r2, r3
 8004182:	2310      	movs	r3, #16
 8004184:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	440b      	add	r3, r1
 8004194:	335d      	adds	r3, #93	; 0x5d
 8004196:	2208      	movs	r2, #8
 8004198:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	461a      	mov	r2, r3
 80041a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ac:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d122      	bne.n	800420c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041e0:	f043 0302 	orr.w	r3, r3, #2
 80041e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f004 fbd0 	bl	8008996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	461a      	mov	r2, r3
 8004204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004208:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800420a:	e300      	b.n	800480e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	f040 80fd 	bne.w	800441e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01b      	beq.n	8004264 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	440b      	add	r3, r1
 800423a:	3348      	adds	r3, #72	; 0x48
 800423c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	0159      	lsls	r1, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	440b      	add	r3, r1
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004250:	1ad1      	subs	r1, r2, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4403      	add	r3, r0
 8004260:	334c      	adds	r3, #76	; 0x4c
 8004262:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	440b      	add	r3, r1
 8004272:	335d      	adds	r3, #93	; 0x5d
 8004274:	2201      	movs	r2, #1
 8004276:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	440b      	add	r3, r1
 8004286:	3358      	adds	r3, #88	; 0x58
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004298:	461a      	mov	r2, r3
 800429a:	2301      	movs	r3, #1
 800429c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	440b      	add	r3, r1
 80042ac:	333f      	adds	r3, #63	; 0x3f
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	440b      	add	r3, r1
 80042c2:	333f      	adds	r3, #63	; 0x3f
 80042c4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d121      	bne.n	800430e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	0151      	lsls	r1, r2, #5
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	440a      	add	r2, r1
 80042e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f004 fb4e 	bl	8008996 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004306:	461a      	mov	r2, r3
 8004308:	2310      	movs	r3, #16
 800430a:	6093      	str	r3, [r2, #8]
 800430c:	e070      	b.n	80043f0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	440b      	add	r3, r1
 800431c:	333f      	adds	r3, #63	; 0x3f
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d12a      	bne.n	800437a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	440a      	add	r2, r1
 800433a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800433e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004342:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	440b      	add	r3, r1
 8004352:	335c      	adds	r3, #92	; 0x5c
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	b2d8      	uxtb	r0, r3
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	440b      	add	r3, r1
 800436a:	335c      	adds	r3, #92	; 0x5c
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	4601      	mov	r1, r0
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f005 fdf0 	bl	8009f58 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004378:	e03a      	b.n	80043f0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	440b      	add	r3, r1
 8004388:	333f      	adds	r3, #63	; 0x3f
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d12f      	bne.n	80043f0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	440b      	add	r3, r1
 800439e:	335c      	adds	r3, #92	; 0x5c
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	440b      	add	r3, r1
 80043b2:	3350      	adds	r3, #80	; 0x50
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	f083 0301 	eor.w	r3, r3, #1
 80043ba:	b2d8      	uxtb	r0, r3
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3350      	adds	r3, #80	; 0x50
 80043cc:	4602      	mov	r2, r0
 80043ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	b2d8      	uxtb	r0, r3
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	440b      	add	r3, r1
 80043e2:	335c      	adds	r3, #92	; 0x5c
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	4601      	mov	r1, r0
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f005 fdb4 	bl	8009f58 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	440b      	add	r3, r1
 80043fe:	3350      	adds	r3, #80	; 0x50
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	f083 0301 	eor.w	r3, r3, #1
 8004406:	b2d8      	uxtb	r0, r3
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	440b      	add	r3, r1
 8004416:	3350      	adds	r3, #80	; 0x50
 8004418:	4602      	mov	r2, r0
 800441a:	701a      	strb	r2, [r3, #0]
}
 800441c:	e1f7      	b.n	800480e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b02      	cmp	r3, #2
 8004432:	f040 811a 	bne.w	800466a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	440a      	add	r2, r1
 800444c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004450:	f023 0302 	bic.w	r3, r3, #2
 8004454:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	335d      	adds	r3, #93	; 0x5d
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10a      	bne.n	8004482 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	335c      	adds	r3, #92	; 0x5c
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e0d9      	b.n	8004636 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	335d      	adds	r3, #93	; 0x5d
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b05      	cmp	r3, #5
 8004496:	d10a      	bne.n	80044ae <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	335c      	adds	r3, #92	; 0x5c
 80044a8:	2205      	movs	r2, #5
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	e0c3      	b.n	8004636 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	440b      	add	r3, r1
 80044bc:	335d      	adds	r3, #93	; 0x5d
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b06      	cmp	r3, #6
 80044c2:	d00a      	beq.n	80044da <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	440b      	add	r3, r1
 80044d2:	335d      	adds	r3, #93	; 0x5d
 80044d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d156      	bne.n	8004588 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	440b      	add	r3, r1
 80044e8:	3358      	adds	r3, #88	; 0x58
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	1c59      	adds	r1, r3, #1
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4403      	add	r3, r0
 80044fc:	3358      	adds	r3, #88	; 0x58
 80044fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	440b      	add	r3, r1
 800450e:	3358      	adds	r3, #88	; 0x58
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b03      	cmp	r3, #3
 8004514:	d914      	bls.n	8004540 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	440b      	add	r3, r1
 8004524:	3358      	adds	r3, #88	; 0x58
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	440b      	add	r3, r1
 8004538:	335c      	adds	r3, #92	; 0x5c
 800453a:	2204      	movs	r2, #4
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e009      	b.n	8004554 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	440b      	add	r3, r1
 800454e:	335c      	adds	r3, #92	; 0x5c
 8004550:	2202      	movs	r2, #2
 8004552:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4413      	add	r3, r2
 800455c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800456a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004572:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4413      	add	r3, r2
 800457c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004580:	461a      	mov	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e056      	b.n	8004636 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	440b      	add	r3, r1
 8004596:	335d      	adds	r3, #93	; 0x5d
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d123      	bne.n	80045e6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	440b      	add	r3, r1
 80045ac:	335c      	adds	r3, #92	; 0x5c
 80045ae:	2202      	movs	r2, #2
 80045b0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045c8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045d0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	e027      	b.n	8004636 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	440b      	add	r3, r1
 80045f4:	335d      	adds	r3, #93	; 0x5d
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b07      	cmp	r3, #7
 80045fa:	d11c      	bne.n	8004636 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	440b      	add	r3, r1
 800460a:	3358      	adds	r3, #88	; 0x58
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4403      	add	r3, r0
 800461e:	3358      	adds	r3, #88	; 0x58
 8004620:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	440b      	add	r3, r1
 8004630:	335c      	adds	r3, #92	; 0x5c
 8004632:	2204      	movs	r2, #4
 8004634:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4413      	add	r3, r2
 800463e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004642:	461a      	mov	r2, r3
 8004644:	2302      	movs	r3, #2
 8004646:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	b2d8      	uxtb	r0, r3
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	440b      	add	r3, r1
 800465a:	335c      	adds	r3, #92	; 0x5c
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	4601      	mov	r1, r0
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f005 fc78 	bl	8009f58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004668:	e0d1      	b.n	800480e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4413      	add	r3, r2
 8004672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d13e      	bne.n	80046fe <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	440a      	add	r2, r1
 8004696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800469a:	f043 0302 	orr.w	r3, r3, #2
 800469e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	440b      	add	r3, r1
 80046ae:	3358      	adds	r3, #88	; 0x58
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	1c59      	adds	r1, r3, #1
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4403      	add	r3, r0
 80046c2:	3358      	adds	r3, #88	; 0x58
 80046c4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	335d      	adds	r3, #93	; 0x5d
 80046d6:	2206      	movs	r2, #6
 80046d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f004 f956 	bl	8008996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	461a      	mov	r2, r3
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	6093      	str	r3, [r2, #8]
}
 80046fc:	e087      	b.n	800480e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b10      	cmp	r3, #16
 8004712:	d17c      	bne.n	800480e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	440b      	add	r3, r1
 8004722:	333f      	adds	r3, #63	; 0x3f
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d122      	bne.n	8004770 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	440b      	add	r3, r1
 8004738:	3358      	adds	r3, #88	; 0x58
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	440a      	add	r2, r1
 8004754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f004 f914 	bl	8008996 <USB_HC_Halt>
 800476e:	e045      	b.n	80047fc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	440b      	add	r3, r1
 800477e:	333f      	adds	r3, #63	; 0x3f
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	440b      	add	r3, r1
 8004794:	333f      	adds	r3, #63	; 0x3f
 8004796:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004798:	2b02      	cmp	r3, #2
 800479a:	d12f      	bne.n	80047fc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	440b      	add	r3, r1
 80047aa:	3358      	adds	r3, #88	; 0x58
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d121      	bne.n	80047fc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	335d      	adds	r3, #93	; 0x5d
 80047c8:	2203      	movs	r2, #3
 80047ca:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047e6:	f043 0302 	orr.w	r3, r3, #2
 80047ea:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f004 f8cd 	bl	8008996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4413      	add	r3, r2
 8004804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004808:	461a      	mov	r2, r3
 800480a:	2310      	movs	r3, #16
 800480c:	6093      	str	r3, [r2, #8]
}
 800480e:	bf00      	nop
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d119      	bne.n	800487a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004852:	461a      	mov	r2, r3
 8004854:	2304      	movs	r3, #4
 8004856:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	440a      	add	r2, r1
 800486e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004872:	f043 0302 	orr.w	r3, r3, #2
 8004876:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004878:	e33e      	b.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4413      	add	r3, r2
 8004882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d141      	bne.n	8004914 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	461a      	mov	r2, r3
 800489e:	2320      	movs	r3, #32
 80048a0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	440b      	add	r3, r1
 80048b0:	333d      	adds	r3, #61	; 0x3d
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	f040 831f 	bne.w	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	333d      	adds	r3, #61	; 0x3d
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	440b      	add	r3, r1
 80048dc:	335c      	adds	r3, #92	; 0x5c
 80048de:	2202      	movs	r2, #2
 80048e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f004 f842 	bl	8008996 <USB_HC_Halt>
}
 8004912:	e2f1      	b.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d13f      	bne.n	80049aa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	440b      	add	r3, r1
 8004938:	335d      	adds	r3, #93	; 0x5d
 800493a:	2204      	movs	r2, #4
 800493c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	440b      	add	r3, r1
 800494c:	333d      	adds	r3, #61	; 0x3d
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	440b      	add	r3, r1
 8004960:	3358      	adds	r3, #88	; 0x58
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	440a      	add	r2, r1
 800497c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004980:	f043 0302 	orr.w	r3, r3, #2
 8004984:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f004 f800 	bl	8008996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a2:	461a      	mov	r2, r3
 80049a4:	2340      	movs	r3, #64	; 0x40
 80049a6:	6093      	str	r3, [r2, #8]
}
 80049a8:	e2a6      	b.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c0:	d122      	bne.n	8004a08 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f003 ffd2 	bl	8008996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fe:	461a      	mov	r2, r3
 8004a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a04:	6093      	str	r3, [r2, #8]
}
 8004a06:	e277      	b.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d135      	bne.n	8004a8a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3358      	adds	r3, #88	; 0x58
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	0151      	lsls	r1, r2, #5
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	440a      	add	r2, r1
 8004a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f003 ff9a 	bl	8008996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2301      	movs	r3, #1
 8004a72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	440b      	add	r3, r1
 8004a82:	335d      	adds	r3, #93	; 0x5d
 8004a84:	2201      	movs	r2, #1
 8004a86:	701a      	strb	r2, [r3, #0]
}
 8004a88:	e236      	b.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d12b      	bne.n	8004af8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	461a      	mov	r2, r3
 8004aae:	2308      	movs	r3, #8
 8004ab0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004acc:	f043 0302 	orr.w	r3, r3, #2
 8004ad0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	4611      	mov	r1, r2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f003 ff5a 	bl	8008996 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	440b      	add	r3, r1
 8004af0:	335d      	adds	r3, #93	; 0x5d
 8004af2:	2205      	movs	r2, #5
 8004af4:	701a      	strb	r2, [r3, #0]
}
 8004af6:	e1ff      	b.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d155      	bne.n	8004bba <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	440b      	add	r3, r1
 8004b1c:	3358      	adds	r3, #88	; 0x58
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	440b      	add	r3, r1
 8004b30:	335d      	adds	r3, #93	; 0x5d
 8004b32:	2203      	movs	r2, #3
 8004b34:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	333d      	adds	r3, #61	; 0x3d
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d114      	bne.n	8004b76 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	333c      	adds	r3, #60	; 0x3c
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	440b      	add	r3, r1
 8004b70:	333d      	adds	r3, #61	; 0x3d
 8004b72:	2201      	movs	r2, #1
 8004b74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b90:	f043 0302 	orr.w	r3, r3, #2
 8004b94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f003 fef8 	bl	8008996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	6093      	str	r3, [r2, #8]
}
 8004bb8:	e19e      	b.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b80      	cmp	r3, #128	; 0x80
 8004bce:	d12b      	bne.n	8004c28 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bea:	f043 0302 	orr.w	r3, r3, #2
 8004bee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f003 fecb 	bl	8008996 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	440b      	add	r3, r1
 8004c0e:	335d      	adds	r3, #93	; 0x5d
 8004c10:	2206      	movs	r2, #6
 8004c12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	461a      	mov	r2, r3
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	6093      	str	r3, [r2, #8]
}
 8004c26:	e167      	b.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3e:	d135      	bne.n	8004cac <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f003 fe93 	bl	8008996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2310      	movs	r3, #16
 8004c80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	335d      	adds	r3, #93	; 0x5d
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	701a      	strb	r2, [r3, #0]
}
 8004caa:	e125      	b.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	f040 811a 	bne.w	8004ef8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cde:	f023 0302 	bic.w	r3, r3, #2
 8004ce2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	440b      	add	r3, r1
 8004cf2:	335d      	adds	r3, #93	; 0x5d
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d137      	bne.n	8004d6a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	440b      	add	r3, r1
 8004d08:	335c      	adds	r3, #92	; 0x5c
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	440b      	add	r3, r1
 8004d1c:	333f      	adds	r3, #63	; 0x3f
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d00b      	beq.n	8004d3c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	440b      	add	r3, r1
 8004d32:	333f      	adds	r3, #63	; 0x3f
 8004d34:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	f040 80c5 	bne.w	8004ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	440b      	add	r3, r1
 8004d4a:	3351      	adds	r3, #81	; 0x51
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f083 0301 	eor.w	r3, r3, #1
 8004d52:	b2d8      	uxtb	r0, r3
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	440b      	add	r3, r1
 8004d62:	3351      	adds	r3, #81	; 0x51
 8004d64:	4602      	mov	r2, r0
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e0ad      	b.n	8004ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	440b      	add	r3, r1
 8004d78:	335d      	adds	r3, #93	; 0x5d
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d10a      	bne.n	8004d96 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	440b      	add	r3, r1
 8004d8e:	335c      	adds	r3, #92	; 0x5c
 8004d90:	2202      	movs	r2, #2
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	e097      	b.n	8004ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	440b      	add	r3, r1
 8004da4:	335d      	adds	r3, #93	; 0x5d
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d10a      	bne.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	440b      	add	r3, r1
 8004dba:	335c      	adds	r3, #92	; 0x5c
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e081      	b.n	8004ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	440b      	add	r3, r1
 8004dd0:	335d      	adds	r3, #93	; 0x5d
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	d10a      	bne.n	8004dee <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	440b      	add	r3, r1
 8004de6:	335c      	adds	r3, #92	; 0x5c
 8004de8:	2205      	movs	r2, #5
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e06b      	b.n	8004ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	440b      	add	r3, r1
 8004dfc:	335d      	adds	r3, #93	; 0x5d
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b06      	cmp	r3, #6
 8004e02:	d00a      	beq.n	8004e1a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	440b      	add	r3, r1
 8004e12:	335d      	adds	r3, #93	; 0x5d
 8004e14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d155      	bne.n	8004ec6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	440b      	add	r3, r1
 8004e28:	3358      	adds	r3, #88	; 0x58
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	1c59      	adds	r1, r3, #1
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4403      	add	r3, r0
 8004e3c:	3358      	adds	r3, #88	; 0x58
 8004e3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3358      	adds	r3, #88	; 0x58
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d914      	bls.n	8004e80 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	440b      	add	r3, r1
 8004e64:	3358      	adds	r3, #88	; 0x58
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	440b      	add	r3, r1
 8004e78:	335c      	adds	r3, #92	; 0x5c
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e009      	b.n	8004e94 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	440b      	add	r3, r1
 8004e8e:	335c      	adds	r3, #92	; 0x5c
 8004e90:	2202      	movs	r2, #2
 8004e92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eaa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004eb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	b2d8      	uxtb	r0, r3
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	440b      	add	r3, r1
 8004eea:	335c      	adds	r3, #92	; 0x5c
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4601      	mov	r1, r0
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f005 f830 	bl	8009f58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	; 0x28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	0c5b      	lsrs	r3, r3, #17
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	091b      	lsrs	r3, r3, #4
 8004f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f34:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d003      	beq.n	8004f44 <HCD_RXQLVL_IRQHandler+0x44>
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	f000 8082 	beq.w	8005046 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f42:	e083      	b.n	800504c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d07f      	beq.n	800504a <HCD_RXQLVL_IRQHandler+0x14a>
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	440b      	add	r3, r1
 8004f58:	3344      	adds	r3, #68	; 0x44
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d074      	beq.n	800504a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	440b      	add	r3, r1
 8004f72:	3344      	adds	r3, #68	; 0x44
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	f003 fc76 	bl	800886c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3344      	adds	r3, #68	; 0x44
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	18d1      	adds	r1, r2, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4403      	add	r3, r0
 8004fa4:	3344      	adds	r3, #68	; 0x44
 8004fa6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	440b      	add	r3, r1
 8004fb6:	334c      	adds	r3, #76	; 0x4c
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	18d1      	adds	r1, r2, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4403      	add	r3, r0
 8004fcc:	334c      	adds	r3, #76	; 0x4c
 8004fce:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HCD_RXQLVL_IRQHandler+0x154>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d031      	beq.n	800504a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ffc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005004:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	4413      	add	r3, r2
 800500e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005012:	461a      	mov	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	440b      	add	r3, r1
 8005026:	3350      	adds	r3, #80	; 0x50
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	f083 0301 	eor.w	r3, r3, #1
 800502e:	b2d8      	uxtb	r0, r3
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	440b      	add	r3, r1
 800503e:	3350      	adds	r3, #80	; 0x50
 8005040:	4602      	mov	r2, r0
 8005042:	701a      	strb	r2, [r3, #0]
      break;
 8005044:	e001      	b.n	800504a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800504a:	bf00      	nop
  }
}
 800504c:	bf00      	nop
 800504e:	3728      	adds	r7, #40	; 0x28
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	1ff80000 	.word	0x1ff80000

08005058 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005084:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b02      	cmp	r3, #2
 800508e:	d10b      	bne.n	80050a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b01      	cmp	r3, #1
 8005098:	d102      	bne.n	80050a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f004 ff40 	bl	8009f20 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f043 0302 	orr.w	r3, r3, #2
 80050a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d132      	bne.n	8005118 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f043 0308 	orr.w	r3, r3, #8
 80050b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d126      	bne.n	8005112 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d113      	bne.n	80050f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80050d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050d6:	d106      	bne.n	80050e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2102      	movs	r1, #2
 80050de:	4618      	mov	r0, r3
 80050e0:	f003 fc0e 	bl	8008900 <USB_InitFSLSPClkSel>
 80050e4:	e011      	b.n	800510a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2101      	movs	r1, #1
 80050ec:	4618      	mov	r0, r3
 80050ee:	f003 fc07 	bl	8008900 <USB_InitFSLSPClkSel>
 80050f2:	e00a      	b.n	800510a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005102:	461a      	mov	r2, r3
 8005104:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005108:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f004 ff36 	bl	8009f7c <HAL_HCD_PortEnabled_Callback>
 8005110:	e002      	b.n	8005118 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f004 ff40 	bl	8009f98 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b20      	cmp	r3, #32
 8005120:	d103      	bne.n	800512a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f043 0320 	orr.w	r3, r3, #32
 8005128:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005130:	461a      	mov	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6013      	str	r3, [r2, #0]
}
 8005136:	bf00      	nop
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e11f      	b.n	8005392 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fb fc9a 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2224      	movs	r2, #36	; 0x24
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051a4:	f001 f9ca 	bl	800653c <HAL_RCC_GetPCLK1Freq>
 80051a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4a7b      	ldr	r2, [pc, #492]	; (800539c <HAL_I2C_Init+0x25c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d807      	bhi.n	80051c4 <HAL_I2C_Init+0x84>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a7a      	ldr	r2, [pc, #488]	; (80053a0 <HAL_I2C_Init+0x260>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	bf94      	ite	ls
 80051bc:	2301      	movls	r3, #1
 80051be:	2300      	movhi	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e006      	b.n	80051d2 <HAL_I2C_Init+0x92>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a77      	ldr	r2, [pc, #476]	; (80053a4 <HAL_I2C_Init+0x264>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	bf94      	ite	ls
 80051cc:	2301      	movls	r3, #1
 80051ce:	2300      	movhi	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e0db      	b.n	8005392 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a72      	ldr	r2, [pc, #456]	; (80053a8 <HAL_I2C_Init+0x268>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0c9b      	lsrs	r3, r3, #18
 80051e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4a64      	ldr	r2, [pc, #400]	; (800539c <HAL_I2C_Init+0x25c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d802      	bhi.n	8005214 <HAL_I2C_Init+0xd4>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	3301      	adds	r3, #1
 8005212:	e009      	b.n	8005228 <HAL_I2C_Init+0xe8>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	4a63      	ldr	r2, [pc, #396]	; (80053ac <HAL_I2C_Init+0x26c>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	099b      	lsrs	r3, r3, #6
 8005226:	3301      	adds	r3, #1
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	430b      	orrs	r3, r1
 800522e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800523a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	4956      	ldr	r1, [pc, #344]	; (800539c <HAL_I2C_Init+0x25c>)
 8005244:	428b      	cmp	r3, r1
 8005246:	d80d      	bhi.n	8005264 <HAL_I2C_Init+0x124>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1e59      	subs	r1, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	fbb1 f3f3 	udiv	r3, r1, r3
 8005256:	3301      	adds	r3, #1
 8005258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800525c:	2b04      	cmp	r3, #4
 800525e:	bf38      	it	cc
 8005260:	2304      	movcc	r3, #4
 8005262:	e04f      	b.n	8005304 <HAL_I2C_Init+0x1c4>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d111      	bne.n	8005290 <HAL_I2C_Init+0x150>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e58      	subs	r0, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	440b      	add	r3, r1
 800527a:	fbb0 f3f3 	udiv	r3, r0, r3
 800527e:	3301      	adds	r3, #1
 8005280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005284:	2b00      	cmp	r3, #0
 8005286:	bf0c      	ite	eq
 8005288:	2301      	moveq	r3, #1
 800528a:	2300      	movne	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e012      	b.n	80052b6 <HAL_I2C_Init+0x176>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1e58      	subs	r0, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6859      	ldr	r1, [r3, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	0099      	lsls	r1, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a6:	3301      	adds	r3, #1
 80052a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_I2C_Init+0x17e>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e022      	b.n	8005304 <HAL_I2C_Init+0x1c4>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10e      	bne.n	80052e4 <HAL_I2C_Init+0x1a4>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1e58      	subs	r0, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6859      	ldr	r1, [r3, #4]
 80052ce:	460b      	mov	r3, r1
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	440b      	add	r3, r1
 80052d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d8:	3301      	adds	r3, #1
 80052da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e2:	e00f      	b.n	8005304 <HAL_I2C_Init+0x1c4>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	1e58      	subs	r0, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6859      	ldr	r1, [r3, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	0099      	lsls	r1, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052fa:	3301      	adds	r3, #1
 80052fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	6809      	ldr	r1, [r1, #0]
 8005308:	4313      	orrs	r3, r2
 800530a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6911      	ldr	r1, [r2, #16]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68d2      	ldr	r2, [r2, #12]
 800533e:	4311      	orrs	r1, r2
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	430b      	orrs	r3, r1
 8005346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	000186a0 	.word	0x000186a0
 80053a0:	001e847f 	.word	0x001e847f
 80053a4:	003d08ff 	.word	0x003d08ff
 80053a8:	431bde83 	.word	0x431bde83
 80053ac:	10624dd3 	.word	0x10624dd3

080053b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d129      	bne.n	800541a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2224      	movs	r2, #36	; 0x24
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0210 	bic.w	r2, r2, #16
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e000      	b.n	800541c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800541a:	2302      	movs	r3, #2
  }
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b20      	cmp	r3, #32
 8005440:	d12a      	bne.n	8005498 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2224      	movs	r2, #36	; 0x24
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005462:	89fb      	ldrh	r3, [r7, #14]
 8005464:	f023 030f 	bic.w	r3, r3, #15
 8005468:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	b29a      	uxth	r2, r3
 800546e:	89fb      	ldrh	r3, [r7, #14]
 8005470:	4313      	orrs	r3, r2
 8005472:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	89fa      	ldrh	r2, [r7, #14]
 800547a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	e000      	b.n	800549a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0bf      	b.n	800563a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fb fc04 	bl	8000cdc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80054ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005500:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6899      	ldr	r1, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b4a      	ldr	r3, [pc, #296]	; (8005644 <HAL_LTDC_Init+0x19c>)
 800551c:	400b      	ands	r3, r1
 800551e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6899      	ldr	r1, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68d9      	ldr	r1, [r3, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4b3e      	ldr	r3, [pc, #248]	; (8005644 <HAL_LTDC_Init+0x19c>)
 800554a:	400b      	ands	r3, r1
 800554c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68d9      	ldr	r1, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1a      	ldr	r2, [r3, #32]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6919      	ldr	r1, [r3, #16]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b33      	ldr	r3, [pc, #204]	; (8005644 <HAL_LTDC_Init+0x19c>)
 8005578:	400b      	ands	r3, r1
 800557a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6919      	ldr	r1, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6959      	ldr	r1, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4b27      	ldr	r3, [pc, #156]	; (8005644 <HAL_LTDC_Init+0x19c>)
 80055a6:	400b      	ands	r3, r1
 80055a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6959      	ldr	r1, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0206 	orr.w	r2, r2, #6
 8005616:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	f000f800 	.word	0xf000f800

08005648 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d023      	beq.n	80056b2 <HAL_LTDC_IRQHandler+0x6a>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01e      	beq.n	80056b2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0204 	bic.w	r2, r2, #4
 8005682:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2204      	movs	r2, #4
 800568a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005692:	f043 0201 	orr.w	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2204      	movs	r2, #4
 80056a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f86f 	bl	8005790 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d023      	beq.n	8005704 <HAL_LTDC_IRQHandler+0xbc>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01e      	beq.n	8005704 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0202 	bic.w	r2, r2, #2
 80056d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2202      	movs	r2, #2
 80056dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056e4:	f043 0202 	orr.w	r2, r3, #2
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2204      	movs	r2, #4
 80056f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f846 	bl	8005790 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01b      	beq.n	8005746 <HAL_LTDC_IRQHandler+0xfe>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d016      	beq.n	8005746 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2201      	movs	r2, #1
 800572e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f82f 	bl	80057a4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01b      	beq.n	8005788 <HAL_LTDC_IRQHandler+0x140>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d016      	beq.n	8005788 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0208 	bic.w	r2, r2, #8
 8005768:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2208      	movs	r2, #8
 8005770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f818 	bl	80057b8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80057cc:	b5b0      	push	{r4, r5, r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_LTDC_ConfigLayer+0x1a>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e02c      	b.n	8005840 <HAL_LTDC_ConfigLayer+0x74>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2134      	movs	r1, #52	; 0x34
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	4413      	add	r3, r2
 8005802:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4614      	mov	r4, r2
 800580a:	461d      	mov	r5, r3
 800580c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800580e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f8b9 	bl	8005998 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2201      	movs	r2, #1
 800582c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bdb0      	pop	{r4, r5, r7, pc}

08005848 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_LTDC_ConfigColorKeying+0x1a>
 800585e:	2302      	movs	r3, #2
 8005860:	e030      	b.n	80058c4 <HAL_LTDC_ConfigColorKeying+0x7c>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	01db      	lsls	r3, r3, #7
 800587c:	4413      	add	r3, r2
 800587e:	3384      	adds	r3, #132	; 0x84
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	4611      	mov	r1, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	01d2      	lsls	r2, r2, #7
 800588c:	440a      	add	r2, r1
 800588e:	3284      	adds	r2, #132	; 0x84
 8005890:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005894:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	01db      	lsls	r3, r3, #7
 80058a0:	4413      	add	r3, r2
 80058a2:	3384      	adds	r3, #132	; 0x84
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2201      	movs	r2, #1
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_LTDC_EnableColorKeying+0x18>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e026      	b.n	8005936 <HAL_LTDC_EnableColorKeying+0x66>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	01db      	lsls	r3, r3, #7
 8005902:	4413      	add	r3, r2
 8005904:	3384      	adds	r3, #132	; 0x84
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	4611      	mov	r1, r2
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	01d2      	lsls	r2, r2, #7
 8005912:	440a      	add	r2, r1
 8005914:	3284      	adds	r2, #132	; 0x84
 8005916:	f043 0302 	orr.w	r3, r3, #2
 800591a:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_LTDC_EnableDither+0x16>
 8005956:	2302      	movs	r3, #2
 8005958:	e016      	b.n	8005988 <HAL_LTDC_EnableDither+0x44>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <HAL_LTDC_EnableDither+0x50>)
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	4a09      	ldr	r2, [pc, #36]	; (8005994 <HAL_LTDC_EnableDither+0x50>)
 8005970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005974:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40016800 	.word	0x40016800

08005998 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005998:	b480      	push	{r7}
 800599a:	b089      	sub	sp, #36	; 0x24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	0c1b      	lsrs	r3, r3, #16
 80059b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b4:	4413      	add	r3, r2
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	01db      	lsls	r3, r3, #7
 80059c4:	4413      	add	r3, r2
 80059c6:	3384      	adds	r3, #132	; 0x84
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	4611      	mov	r1, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	01d2      	lsls	r2, r2, #7
 80059d4:	440a      	add	r2, r1
 80059d6:	3284      	adds	r2, #132	; 0x84
 80059d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80059dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ee:	4413      	add	r3, r2
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4619      	mov	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	01db      	lsls	r3, r3, #7
 80059fc:	440b      	add	r3, r1
 80059fe:	3384      	adds	r3, #132	; 0x84
 8005a00:	4619      	mov	r1, r3
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a16:	4413      	add	r3, r2
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	01db      	lsls	r3, r3, #7
 8005a26:	4413      	add	r3, r2
 8005a28:	3384      	adds	r3, #132	; 0x84
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	4611      	mov	r1, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	01d2      	lsls	r2, r2, #7
 8005a36:	440a      	add	r2, r1
 8005a38:	3284      	adds	r2, #132	; 0x84
 8005a3a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a3e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a4e:	4413      	add	r3, r2
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4619      	mov	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	01db      	lsls	r3, r3, #7
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3384      	adds	r3, #132	; 0x84
 8005a60:	4619      	mov	r1, r3
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	01db      	lsls	r3, r3, #7
 8005a72:	4413      	add	r3, r2
 8005a74:	3384      	adds	r3, #132	; 0x84
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	6812      	ldr	r2, [r2, #0]
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	01d2      	lsls	r2, r2, #7
 8005a82:	440a      	add	r2, r1
 8005a84:	3284      	adds	r2, #132	; 0x84
 8005a86:	f023 0307 	bic.w	r3, r3, #7
 8005a8a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	01db      	lsls	r3, r3, #7
 8005a96:	4413      	add	r3, r2
 8005a98:	3384      	adds	r3, #132	; 0x84
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ab2:	041b      	lsls	r3, r3, #16
 8005ab4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	061b      	lsls	r3, r3, #24
 8005abc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	01db      	lsls	r3, r3, #7
 8005ac8:	4413      	add	r3, r2
 8005aca:	3384      	adds	r3, #132	; 0x84
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	01db      	lsls	r3, r3, #7
 8005ad8:	4413      	add	r3, r2
 8005ada:	3384      	adds	r3, #132	; 0x84
 8005adc:	461a      	mov	r2, r3
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ae8:	461a      	mov	r2, r3
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4619      	mov	r1, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	01db      	lsls	r3, r3, #7
 8005afc:	440b      	add	r3, r1
 8005afe:	3384      	adds	r3, #132	; 0x84
 8005b00:	4619      	mov	r1, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	01db      	lsls	r3, r3, #7
 8005b12:	4413      	add	r3, r2
 8005b14:	3384      	adds	r3, #132	; 0x84
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	01d2      	lsls	r2, r2, #7
 8005b22:	440a      	add	r2, r1
 8005b24:	3284      	adds	r2, #132	; 0x84
 8005b26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b2a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	01db      	lsls	r3, r3, #7
 8005b36:	4413      	add	r3, r2
 8005b38:	3384      	adds	r3, #132	; 0x84
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	01db      	lsls	r3, r3, #7
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3384      	adds	r3, #132	; 0x84
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	4611      	mov	r1, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	01d2      	lsls	r2, r2, #7
 8005b5c:	440a      	add	r2, r1
 8005b5e:	3284      	adds	r2, #132	; 0x84
 8005b60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b64:	f023 0307 	bic.w	r3, r3, #7
 8005b68:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	6809      	ldr	r1, [r1, #0]
 8005b76:	4608      	mov	r0, r1
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	01c9      	lsls	r1, r1, #7
 8005b7c:	4401      	add	r1, r0
 8005b7e:	3184      	adds	r1, #132	; 0x84
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	01db      	lsls	r3, r3, #7
 8005b8e:	4413      	add	r3, r2
 8005b90:	3384      	adds	r3, #132	; 0x84
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	01db      	lsls	r3, r3, #7
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3384      	adds	r3, #132	; 0x84
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	01db      	lsls	r3, r3, #7
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3384      	adds	r3, #132	; 0x84
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d102      	bne.n	8005bcc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005bc6:	2304      	movs	r3, #4
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	e01b      	b.n	8005c04 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d102      	bne.n	8005bda <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e014      	b.n	8005c04 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d00b      	beq.n	8005bfa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d007      	beq.n	8005bfa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d003      	beq.n	8005bfa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005bf6:	2b07      	cmp	r3, #7
 8005bf8:	d102      	bne.n	8005c00 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	e001      	b.n	8005c04 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005c00:	2301      	movs	r3, #1
 8005c02:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	01db      	lsls	r3, r3, #7
 8005c0e:	4413      	add	r3, r2
 8005c10:	3384      	adds	r3, #132	; 0x84
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	01d2      	lsls	r2, r2, #7
 8005c1e:	440a      	add	r2, r1
 8005c20:	3284      	adds	r2, #132	; 0x84
 8005c22:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	041a      	lsls	r2, r3, #16
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	1acb      	subs	r3, r1, r3
 8005c3e:	69f9      	ldr	r1, [r7, #28]
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	3303      	adds	r3, #3
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	6809      	ldr	r1, [r1, #0]
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	01c9      	lsls	r1, r1, #7
 8005c50:	4401      	add	r1, r0
 8005c52:	3184      	adds	r1, #132	; 0x84
 8005c54:	4313      	orrs	r3, r2
 8005c56:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	01db      	lsls	r3, r3, #7
 8005c62:	4413      	add	r3, r2
 8005c64:	3384      	adds	r3, #132	; 0x84
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	01d2      	lsls	r2, r2, #7
 8005c72:	440a      	add	r2, r1
 8005c74:	3284      	adds	r2, #132	; 0x84
 8005c76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	01db      	lsls	r3, r3, #7
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3384      	adds	r3, #132	; 0x84
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	01db      	lsls	r3, r3, #7
 8005ca0:	4413      	add	r3, r2
 8005ca2:	3384      	adds	r3, #132	; 0x84
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	4611      	mov	r1, r2
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	01d2      	lsls	r2, r2, #7
 8005cb0:	440a      	add	r2, r1
 8005cb2:	3284      	adds	r2, #132	; 0x84
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	6013      	str	r3, [r2, #0]
}
 8005cba:	bf00      	nop
 8005cbc:	3724      	adds	r7, #36	; 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e25b      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d075      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ce6:	4ba3      	ldr	r3, [pc, #652]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d00c      	beq.n	8005d0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cf2:	4ba0      	ldr	r3, [pc, #640]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d112      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cfe:	4b9d      	ldr	r3, [pc, #628]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d0a:	d10b      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0c:	4b99      	ldr	r3, [pc, #612]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05b      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x108>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d157      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e236      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d106      	bne.n	8005d3c <HAL_RCC_OscConfig+0x74>
 8005d2e:	4b91      	ldr	r3, [pc, #580]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a90      	ldr	r2, [pc, #576]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e01d      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x98>
 8005d46:	4b8b      	ldr	r3, [pc, #556]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a8a      	ldr	r2, [pc, #552]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	4b88      	ldr	r3, [pc, #544]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a87      	ldr	r2, [pc, #540]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e00b      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d60:	4b84      	ldr	r3, [pc, #528]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a83      	ldr	r2, [pc, #524]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	4b81      	ldr	r3, [pc, #516]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a80      	ldr	r2, [pc, #512]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d013      	beq.n	8005da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fc fea2 	bl	8002ac8 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d88:	f7fc fe9e 	bl	8002ac8 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	; 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e1fb      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9a:	4b76      	ldr	r3, [pc, #472]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0xc0>
 8005da6:	e014      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fc fe8e 	bl	8002ac8 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db0:	f7fc fe8a 	bl	8002ac8 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e1e7      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc2:	4b6c      	ldr	r3, [pc, #432]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f0      	bne.n	8005db0 <HAL_RCC_OscConfig+0xe8>
 8005dce:	e000      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d063      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dde:	4b65      	ldr	r3, [pc, #404]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dea:	4b62      	ldr	r3, [pc, #392]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d11c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005df6:	4b5f      	ldr	r3, [pc, #380]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d116      	bne.n	8005e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e02:	4b5c      	ldr	r3, [pc, #368]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_RCC_OscConfig+0x152>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d001      	beq.n	8005e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e1bb      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1a:	4b56      	ldr	r3, [pc, #344]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4952      	ldr	r1, [pc, #328]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2e:	e03a      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d020      	beq.n	8005e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e38:	4b4f      	ldr	r3, [pc, #316]	; (8005f78 <HAL_RCC_OscConfig+0x2b0>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3e:	f7fc fe43 	bl	8002ac8 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e46:	f7fc fe3f 	bl	8002ac8 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e19c      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e58:	4b46      	ldr	r3, [pc, #280]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0f0      	beq.n	8005e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e64:	4b43      	ldr	r3, [pc, #268]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4940      	ldr	r1, [pc, #256]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	600b      	str	r3, [r1, #0]
 8005e78:	e015      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e7a:	4b3f      	ldr	r3, [pc, #252]	; (8005f78 <HAL_RCC_OscConfig+0x2b0>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fc fe22 	bl	8002ac8 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e88:	f7fc fe1e 	bl	8002ac8 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e17b      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9a:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d030      	beq.n	8005f14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eba:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <HAL_RCC_OscConfig+0x2b4>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec0:	f7fc fe02 	bl	8002ac8 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec8:	f7fc fdfe 	bl	8002ac8 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e15b      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eda:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x200>
 8005ee6:	e015      	b.n	8005f14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee8:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <HAL_RCC_OscConfig+0x2b4>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eee:	f7fc fdeb 	bl	8002ac8 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef6:	f7fc fde7 	bl	8002ac8 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e144      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80a0 	beq.w	8006062 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f26:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6413      	str	r3, [r2, #64]	; 0x40
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_OscConfig+0x2b8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d121      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <HAL_RCC_OscConfig+0x2b8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a07      	ldr	r2, [pc, #28]	; (8005f80 <HAL_RCC_OscConfig+0x2b8>)
 8005f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6a:	f7fc fdad 	bl	8002ac8 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	e011      	b.n	8005f96 <HAL_RCC_OscConfig+0x2ce>
 8005f72:	bf00      	nop
 8005f74:	40023800 	.word	0x40023800
 8005f78:	42470000 	.word	0x42470000
 8005f7c:	42470e80 	.word	0x42470e80
 8005f80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f84:	f7fc fda0 	bl	8002ac8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e0fd      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f96:	4b81      	ldr	r3, [pc, #516]	; (800619c <HAL_RCC_OscConfig+0x4d4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x2f0>
 8005faa:	4b7d      	ldr	r3, [pc, #500]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	4a7c      	ldr	r2, [pc, #496]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb6:	e01c      	b.n	8005ff2 <HAL_RCC_OscConfig+0x32a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b05      	cmp	r3, #5
 8005fbe:	d10c      	bne.n	8005fda <HAL_RCC_OscConfig+0x312>
 8005fc0:	4b77      	ldr	r3, [pc, #476]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	4a76      	ldr	r2, [pc, #472]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fc6:	f043 0304 	orr.w	r3, r3, #4
 8005fca:	6713      	str	r3, [r2, #112]	; 0x70
 8005fcc:	4b74      	ldr	r3, [pc, #464]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	4a73      	ldr	r2, [pc, #460]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd8:	e00b      	b.n	8005ff2 <HAL_RCC_OscConfig+0x32a>
 8005fda:	4b71      	ldr	r3, [pc, #452]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	4a70      	ldr	r2, [pc, #448]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe6:	4b6e      	ldr	r3, [pc, #440]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	4a6d      	ldr	r2, [pc, #436]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fec:	f023 0304 	bic.w	r3, r3, #4
 8005ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d015      	beq.n	8006026 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffa:	f7fc fd65 	bl	8002ac8 <HAL_GetTick>
 8005ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006000:	e00a      	b.n	8006018 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006002:	f7fc fd61 	bl	8002ac8 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006010:	4293      	cmp	r3, r2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e0bc      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006018:	4b61      	ldr	r3, [pc, #388]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0ee      	beq.n	8006002 <HAL_RCC_OscConfig+0x33a>
 8006024:	e014      	b.n	8006050 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006026:	f7fc fd4f 	bl	8002ac8 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602c:	e00a      	b.n	8006044 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602e:	f7fc fd4b 	bl	8002ac8 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	4293      	cmp	r3, r2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0a6      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006044:	4b56      	ldr	r3, [pc, #344]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ee      	bne.n	800602e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d105      	bne.n	8006062 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006056:	4b52      	ldr	r3, [pc, #328]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	4a51      	ldr	r2, [pc, #324]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 800605c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006060:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 8092 	beq.w	8006190 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800606c:	4b4c      	ldr	r3, [pc, #304]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	2b08      	cmp	r3, #8
 8006076:	d05c      	beq.n	8006132 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d141      	bne.n	8006104 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006080:	4b48      	ldr	r3, [pc, #288]	; (80061a4 <HAL_RCC_OscConfig+0x4dc>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fc fd1f 	bl	8002ac8 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800608e:	f7fc fd1b 	bl	8002ac8 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e078      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a0:	4b3f      	ldr	r3, [pc, #252]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f0      	bne.n	800608e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	019b      	lsls	r3, r3, #6
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	3b01      	subs	r3, #1
 80060c6:	041b      	lsls	r3, r3, #16
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	061b      	lsls	r3, r3, #24
 80060d0:	4933      	ldr	r1, [pc, #204]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060d6:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <HAL_RCC_OscConfig+0x4dc>)
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060dc:	f7fc fcf4 	bl	8002ac8 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e4:	f7fc fcf0 	bl	8002ac8 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e04d      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f6:	4b2a      	ldr	r3, [pc, #168]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x41c>
 8006102:	e045      	b.n	8006190 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006104:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <HAL_RCC_OscConfig+0x4dc>)
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610a:	f7fc fcdd 	bl	8002ac8 <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006110:	e008      	b.n	8006124 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006112:	f7fc fcd9 	bl	8002ac8 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e036      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006124:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1f0      	bne.n	8006112 <HAL_RCC_OscConfig+0x44a>
 8006130:	e02e      	b.n	8006190 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e029      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800613e:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	429a      	cmp	r2, r3
 8006150:	d11c      	bne.n	800618c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d115      	bne.n	800618c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006166:	4013      	ands	r3, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800616c:	4293      	cmp	r3, r2
 800616e:	d10d      	bne.n	800618c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800617a:	429a      	cmp	r2, r3
 800617c:	d106      	bne.n	800618c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40007000 	.word	0x40007000
 80061a0:	40023800 	.word	0x40023800
 80061a4:	42470060 	.word	0x42470060

080061a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0cc      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061bc:	4b68      	ldr	r3, [pc, #416]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d90c      	bls.n	80061e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4b65      	ldr	r3, [pc, #404]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d2:	4b63      	ldr	r3, [pc, #396]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d001      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0b8      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d020      	beq.n	8006232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061fc:	4b59      	ldr	r3, [pc, #356]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	4a58      	ldr	r2, [pc, #352]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006214:	4b53      	ldr	r3, [pc, #332]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4a52      	ldr	r2, [pc, #328]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800621e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006220:	4b50      	ldr	r3, [pc, #320]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	494d      	ldr	r1, [pc, #308]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d044      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d107      	bne.n	8006256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006246:	4b47      	ldr	r3, [pc, #284]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d119      	bne.n	8006286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e07f      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d003      	beq.n	8006266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006262:	2b03      	cmp	r3, #3
 8006264:	d107      	bne.n	8006276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006266:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e06f      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006276:	4b3b      	ldr	r3, [pc, #236]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e067      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006286:	4b37      	ldr	r3, [pc, #220]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f023 0203 	bic.w	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4934      	ldr	r1, [pc, #208]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	4313      	orrs	r3, r2
 8006296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006298:	f7fc fc16 	bl	8002ac8 <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629e:	e00a      	b.n	80062b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a0:	f7fc fc12 	bl	8002ac8 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e04f      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062b6:	4b2b      	ldr	r3, [pc, #172]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 020c 	and.w	r2, r3, #12
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d1eb      	bne.n	80062a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062c8:	4b25      	ldr	r3, [pc, #148]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d20c      	bcs.n	80062f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4b22      	ldr	r3, [pc, #136]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062de:	4b20      	ldr	r3, [pc, #128]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d001      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e032      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d008      	beq.n	800630e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	4916      	ldr	r1, [pc, #88]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	490e      	ldr	r1, [pc, #56]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	4313      	orrs	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800632e:	f000 f821 	bl	8006374 <HAL_RCC_GetSysClockFreq>
 8006332:	4601      	mov	r1, r0
 8006334:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	091b      	lsrs	r3, r3, #4
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	4a0a      	ldr	r2, [pc, #40]	; (8006368 <HAL_RCC_ClockConfig+0x1c0>)
 8006340:	5cd3      	ldrb	r3, [r2, r3]
 8006342:	fa21 f303 	lsr.w	r3, r1, r3
 8006346:	4a09      	ldr	r2, [pc, #36]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 8006348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	f7fa ffe8 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40023c00 	.word	0x40023c00
 8006364:	40023800 	.word	0x40023800
 8006368:	0800a12c 	.word	0x0800a12c
 800636c:	20000000 	.word	0x20000000
 8006370:	20000054 	.word	0x20000054

08006374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	2300      	movs	r3, #0
 8006384:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800638a:	4b63      	ldr	r3, [pc, #396]	; (8006518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 030c 	and.w	r3, r3, #12
 8006392:	2b04      	cmp	r3, #4
 8006394:	d007      	beq.n	80063a6 <HAL_RCC_GetSysClockFreq+0x32>
 8006396:	2b08      	cmp	r3, #8
 8006398:	d008      	beq.n	80063ac <HAL_RCC_GetSysClockFreq+0x38>
 800639a:	2b00      	cmp	r3, #0
 800639c:	f040 80b4 	bne.w	8006508 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063a0:	4b5e      	ldr	r3, [pc, #376]	; (800651c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80063a2:	60bb      	str	r3, [r7, #8]
       break;
 80063a4:	e0b3      	b.n	800650e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063a6:	4b5e      	ldr	r3, [pc, #376]	; (8006520 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80063a8:	60bb      	str	r3, [r7, #8]
      break;
 80063aa:	e0b0      	b.n	800650e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063ac:	4b5a      	ldr	r3, [pc, #360]	; (8006518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063b6:	4b58      	ldr	r3, [pc, #352]	; (8006518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d04a      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c2:	4b55      	ldr	r3, [pc, #340]	; (8006518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	f04f 0400 	mov.w	r4, #0
 80063cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	ea03 0501 	and.w	r5, r3, r1
 80063d8:	ea04 0602 	and.w	r6, r4, r2
 80063dc:	4629      	mov	r1, r5
 80063de:	4632      	mov	r2, r6
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	f04f 0400 	mov.w	r4, #0
 80063e8:	0154      	lsls	r4, r2, #5
 80063ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063ee:	014b      	lsls	r3, r1, #5
 80063f0:	4619      	mov	r1, r3
 80063f2:	4622      	mov	r2, r4
 80063f4:	1b49      	subs	r1, r1, r5
 80063f6:	eb62 0206 	sbc.w	r2, r2, r6
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	f04f 0400 	mov.w	r4, #0
 8006402:	0194      	lsls	r4, r2, #6
 8006404:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006408:	018b      	lsls	r3, r1, #6
 800640a:	1a5b      	subs	r3, r3, r1
 800640c:	eb64 0402 	sbc.w	r4, r4, r2
 8006410:	f04f 0100 	mov.w	r1, #0
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	00e2      	lsls	r2, r4, #3
 800641a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800641e:	00d9      	lsls	r1, r3, #3
 8006420:	460b      	mov	r3, r1
 8006422:	4614      	mov	r4, r2
 8006424:	195b      	adds	r3, r3, r5
 8006426:	eb44 0406 	adc.w	r4, r4, r6
 800642a:	f04f 0100 	mov.w	r1, #0
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	0262      	lsls	r2, r4, #9
 8006434:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006438:	0259      	lsls	r1, r3, #9
 800643a:	460b      	mov	r3, r1
 800643c:	4614      	mov	r4, r2
 800643e:	4618      	mov	r0, r3
 8006440:	4621      	mov	r1, r4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f04f 0400 	mov.w	r4, #0
 8006448:	461a      	mov	r2, r3
 800644a:	4623      	mov	r3, r4
 800644c:	f7f9 fed0 	bl	80001f0 <__aeabi_uldivmod>
 8006450:	4603      	mov	r3, r0
 8006452:	460c      	mov	r4, r1
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	e049      	b.n	80064ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006458:	4b2f      	ldr	r3, [pc, #188]	; (8006518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	099b      	lsrs	r3, r3, #6
 800645e:	f04f 0400 	mov.w	r4, #0
 8006462:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	ea03 0501 	and.w	r5, r3, r1
 800646e:	ea04 0602 	and.w	r6, r4, r2
 8006472:	4629      	mov	r1, r5
 8006474:	4632      	mov	r2, r6
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	f04f 0400 	mov.w	r4, #0
 800647e:	0154      	lsls	r4, r2, #5
 8006480:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006484:	014b      	lsls	r3, r1, #5
 8006486:	4619      	mov	r1, r3
 8006488:	4622      	mov	r2, r4
 800648a:	1b49      	subs	r1, r1, r5
 800648c:	eb62 0206 	sbc.w	r2, r2, r6
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	f04f 0400 	mov.w	r4, #0
 8006498:	0194      	lsls	r4, r2, #6
 800649a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800649e:	018b      	lsls	r3, r1, #6
 80064a0:	1a5b      	subs	r3, r3, r1
 80064a2:	eb64 0402 	sbc.w	r4, r4, r2
 80064a6:	f04f 0100 	mov.w	r1, #0
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	00e2      	lsls	r2, r4, #3
 80064b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80064b4:	00d9      	lsls	r1, r3, #3
 80064b6:	460b      	mov	r3, r1
 80064b8:	4614      	mov	r4, r2
 80064ba:	195b      	adds	r3, r3, r5
 80064bc:	eb44 0406 	adc.w	r4, r4, r6
 80064c0:	f04f 0100 	mov.w	r1, #0
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	02a2      	lsls	r2, r4, #10
 80064ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80064ce:	0299      	lsls	r1, r3, #10
 80064d0:	460b      	mov	r3, r1
 80064d2:	4614      	mov	r4, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	4621      	mov	r1, r4
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f04f 0400 	mov.w	r4, #0
 80064de:	461a      	mov	r2, r3
 80064e0:	4623      	mov	r3, r4
 80064e2:	f7f9 fe85 	bl	80001f0 <__aeabi_uldivmod>
 80064e6:	4603      	mov	r3, r0
 80064e8:	460c      	mov	r4, r1
 80064ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	0c1b      	lsrs	r3, r3, #16
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	3301      	adds	r3, #1
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	fbb2 f3f3 	udiv	r3, r2, r3
 8006504:	60bb      	str	r3, [r7, #8]
      break;
 8006506:	e002      	b.n	800650e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800650a:	60bb      	str	r3, [r7, #8]
      break;
 800650c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800650e:	68bb      	ldr	r3, [r7, #8]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006518:	40023800 	.word	0x40023800
 800651c:	00f42400 	.word	0x00f42400
 8006520:	007a1200 	.word	0x007a1200

08006524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <HAL_RCC_GetHCLKFreq+0x14>)
 800652a:	681b      	ldr	r3, [r3, #0]
}
 800652c:	4618      	mov	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	20000000 	.word	0x20000000

0800653c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006540:	f7ff fff0 	bl	8006524 <HAL_RCC_GetHCLKFreq>
 8006544:	4601      	mov	r1, r0
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	0a9b      	lsrs	r3, r3, #10
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	4a03      	ldr	r2, [pc, #12]	; (8006560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006552:	5cd3      	ldrb	r3, [r2, r3]
 8006554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006558:	4618      	mov	r0, r3
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40023800 	.word	0x40023800
 8006560:	0800a13c 	.word	0x0800a13c

08006564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006568:	f7ff ffdc 	bl	8006524 <HAL_RCC_GetHCLKFreq>
 800656c:	4601      	mov	r1, r0
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	0b5b      	lsrs	r3, r3, #13
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	4a03      	ldr	r2, [pc, #12]	; (8006588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800657a:	5cd3      	ldrb	r3, [r2, r3]
 800657c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40023800 	.word	0x40023800
 8006588:	0800a13c 	.word	0x0800a13c

0800658c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	220f      	movs	r2, #15
 800659a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800659c:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <HAL_RCC_GetClockConfig+0x5c>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 0203 	and.w	r2, r3, #3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065a8:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <HAL_RCC_GetClockConfig+0x5c>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065b4:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <HAL_RCC_GetClockConfig+0x5c>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <HAL_RCC_GetClockConfig+0x5c>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	08db      	lsrs	r3, r3, #3
 80065c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065ce:	4b07      	ldr	r3, [pc, #28]	; (80065ec <HAL_RCC_GetClockConfig+0x60>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 020f 	and.w	r2, r3, #15
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40023c00 	.word	0x40023c00

080065f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10b      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006620:	2b00      	cmp	r3, #0
 8006622:	d075      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006624:	4bad      	ldr	r3, [pc, #692]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800662a:	f7fc fa4d 	bl	8002ac8 <HAL_GetTick>
 800662e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006630:	e008      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006632:	f7fc fa49 	bl	8002ac8 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e18b      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006644:	4ba6      	ldr	r3, [pc, #664]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f0      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d009      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	019a      	lsls	r2, r3, #6
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	071b      	lsls	r3, r3, #28
 8006668:	499d      	ldr	r1, [pc, #628]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01f      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800667c:	4b98      	ldr	r3, [pc, #608]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800667e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006682:	0f1b      	lsrs	r3, r3, #28
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	019a      	lsls	r2, r3, #6
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	061b      	lsls	r3, r3, #24
 8006696:	431a      	orrs	r2, r3
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	071b      	lsls	r3, r3, #28
 800669c:	4990      	ldr	r1, [pc, #576]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066a4:	4b8e      	ldr	r3, [pc, #568]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066aa:	f023 021f 	bic.w	r2, r3, #31
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	498a      	ldr	r1, [pc, #552]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00d      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	019a      	lsls	r2, r3, #6
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	061b      	lsls	r3, r3, #24
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	071b      	lsls	r3, r3, #28
 80066dc:	4980      	ldr	r1, [pc, #512]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066e4:	4b7d      	ldr	r3, [pc, #500]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ea:	f7fc f9ed 	bl	8002ac8 <HAL_GetTick>
 80066ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066f0:	e008      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066f2:	f7fc f9e9 	bl	8002ac8 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e12b      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006704:	4b76      	ldr	r3, [pc, #472]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f0      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d105      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006724:	2b00      	cmp	r3, #0
 8006726:	d079      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006728:	4b6e      	ldr	r3, [pc, #440]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800672e:	f7fc f9cb 	bl	8002ac8 <HAL_GetTick>
 8006732:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006734:	e008      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006736:	f7fc f9c7 	bl	8002ac8 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e109      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006748:	4b65      	ldr	r3, [pc, #404]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006754:	d0ef      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	d020      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006762:	4b5f      	ldr	r3, [pc, #380]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006768:	0f1b      	lsrs	r3, r3, #28
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	019a      	lsls	r2, r3, #6
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	061b      	lsls	r3, r3, #24
 800677c:	431a      	orrs	r2, r3
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	071b      	lsls	r3, r3, #28
 8006782:	4957      	ldr	r1, [pc, #348]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800678a:	4b55      	ldr	r3, [pc, #340]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800678c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	3b01      	subs	r3, #1
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	4950      	ldr	r1, [pc, #320]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01e      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067b0:	4b4b      	ldr	r3, [pc, #300]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	0e1b      	lsrs	r3, r3, #24
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	019a      	lsls	r2, r3, #6
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	061b      	lsls	r3, r3, #24
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	071b      	lsls	r3, r3, #28
 80067d0:	4943      	ldr	r1, [pc, #268]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067d8:	4b41      	ldr	r3, [pc, #260]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	493e      	ldr	r1, [pc, #248]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067ee:	4b3d      	ldr	r3, [pc, #244]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067f4:	f7fc f968 	bl	8002ac8 <HAL_GetTick>
 80067f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067fa:	e008      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067fc:	f7fc f964 	bl	8002ac8 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e0a6      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800680e:	4b34      	ldr	r3, [pc, #208]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800681a:	d1ef      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 808d 	beq.w	8006944 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	4b2c      	ldr	r3, [pc, #176]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	4a2b      	ldr	r2, [pc, #172]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006838:	6413      	str	r3, [r2, #64]	; 0x40
 800683a:	4b29      	ldr	r3, [pc, #164]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006846:	4b28      	ldr	r3, [pc, #160]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a27      	ldr	r2, [pc, #156]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800684c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006850:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006852:	f7fc f939 	bl	8002ac8 <HAL_GetTick>
 8006856:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006858:	e008      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800685a:	f7fc f935 	bl	8002ac8 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e077      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800686c:	4b1e      	ldr	r3, [pc, #120]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0f0      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006878:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006880:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d039      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	429a      	cmp	r2, r3
 8006894:	d032      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006896:	4b12      	ldr	r3, [pc, #72]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068a0:	4b12      	ldr	r3, [pc, #72]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068a6:	4b11      	ldr	r3, [pc, #68]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068ac:	4a0c      	ldr	r2, [pc, #48]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068b2:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d11e      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068be:	f7fc f903 	bl	8002ac8 <HAL_GetTick>
 80068c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c4:	e014      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068c6:	f7fc f8ff 	bl	8002ac8 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d90b      	bls.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e03f      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80068dc:	42470068 	.word	0x42470068
 80068e0:	40023800 	.word	0x40023800
 80068e4:	42470070 	.word	0x42470070
 80068e8:	40007000 	.word	0x40007000
 80068ec:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f0:	4b1c      	ldr	r3, [pc, #112]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0e4      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006908:	d10d      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800690a:	4b16      	ldr	r3, [pc, #88]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800691a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691e:	4911      	ldr	r1, [pc, #68]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006920:	4313      	orrs	r3, r2
 8006922:	608b      	str	r3, [r1, #8]
 8006924:	e005      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	4a0e      	ldr	r2, [pc, #56]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800692c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006930:	6093      	str	r3, [r2, #8]
 8006932:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693e:	4909      	ldr	r1, [pc, #36]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006940:	4313      	orrs	r3, r2
 8006942:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006956:	4b04      	ldr	r3, [pc, #16]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006958:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40023800 	.word	0x40023800
 8006968:	424711e0 	.word	0x424711e0

0800696c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e025      	b.n	80069cc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d106      	bne.n	800699a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7f9 ff1d 	bl	80007d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3304      	adds	r3, #4
 80069aa:	4619      	mov	r1, r3
 80069ac:	4610      	mov	r0, r2
 80069ae:	f001 fdb1 	bl	8008514 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	461a      	mov	r2, r3
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	f001 fe1c 	bl	80085fa <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d101      	bne.n	80069f0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80069ec:	2302      	movs	r3, #2
 80069ee:	e018      	b.n	8006a22 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f001 fe79 	bl	80086f8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d104      	bne.n	8006a18 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2205      	movs	r2, #5
 8006a12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006a16:	e003      	b.n	8006a20 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d101      	bne.n	8006a44 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006a40:	2302      	movs	r3, #2
 8006a42:	e00e      	b.n	8006a62 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 fe8c 	bl	8008770 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e056      	b.n	8006b2a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fa fbb2 	bl	8001200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	ea42 0103 	orr.w	r1, r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	f003 0104 	and.w	r1, r3, #4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e01a      	b.n	8006b7a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b5a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7fa fb97 	bl	8001290 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b088      	sub	sp, #32
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	603b      	str	r3, [r7, #0]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_SPI_Transmit+0x22>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e11e      	b.n	8006de2 <HAL_SPI_Transmit+0x260>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bac:	f7fb ff8c 	bl	8002ac8 <HAL_GetTick>
 8006bb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d002      	beq.n	8006bc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bc6:	e103      	b.n	8006dd0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <HAL_SPI_Transmit+0x52>
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bd8:	e0fa      	b.n	8006dd0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2203      	movs	r2, #3
 8006bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	88fa      	ldrh	r2, [r7, #6]
 8006bf2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c20:	d107      	bne.n	8006c32 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d007      	beq.n	8006c50 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c58:	d14b      	bne.n	8006cf2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_SPI_Transmit+0xe6>
 8006c62:	8afb      	ldrh	r3, [r7, #22]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d13e      	bne.n	8006ce6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	881a      	ldrh	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	1c9a      	adds	r2, r3, #2
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c8c:	e02b      	b.n	8006ce6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d112      	bne.n	8006cc2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	881a      	ldrh	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cc0:	e011      	b.n	8006ce6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc2:	f7fb ff01 	bl	8002ac8 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d803      	bhi.n	8006cda <HAL_SPI_Transmit+0x158>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d102      	bne.n	8006ce0 <HAL_SPI_Transmit+0x15e>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d102      	bne.n	8006ce6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ce4:	e074      	b.n	8006dd0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ce      	bne.n	8006c8e <HAL_SPI_Transmit+0x10c>
 8006cf0:	e04c      	b.n	8006d8c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_SPI_Transmit+0x17e>
 8006cfa:	8afb      	ldrh	r3, [r7, #22]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d140      	bne.n	8006d82 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	7812      	ldrb	r2, [r2, #0]
 8006d0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d26:	e02c      	b.n	8006d82 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d113      	bne.n	8006d5e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	7812      	ldrb	r2, [r2, #0]
 8006d42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d5c:	e011      	b.n	8006d82 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d5e:	f7fb feb3 	bl	8002ac8 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d803      	bhi.n	8006d76 <HAL_SPI_Transmit+0x1f4>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d102      	bne.n	8006d7c <HAL_SPI_Transmit+0x1fa>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d80:	e026      	b.n	8006dd0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1cd      	bne.n	8006d28 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fbb3 	bl	80074fc <SPI_EndRxTxTransaction>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	613b      	str	r3, [r7, #16]
 8006dbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e000      	b.n	8006dd0 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b088      	sub	sp, #32
 8006dee:	af02      	add	r7, sp, #8
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e06:	d112      	bne.n	8006e2e <HAL_SPI_Receive+0x44>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10e      	bne.n	8006e2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2204      	movs	r2, #4
 8006e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f8e9 	bl	8006ffc <HAL_SPI_TransmitReceive>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	e0e2      	b.n	8006ff4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d101      	bne.n	8006e3c <HAL_SPI_Receive+0x52>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	e0db      	b.n	8006ff4 <HAL_SPI_Receive+0x20a>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e44:	f7fb fe40 	bl	8002ac8 <HAL_GetTick>
 8006e48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d002      	beq.n	8006e5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e56:	2302      	movs	r3, #2
 8006e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e5a:	e0c2      	b.n	8006fe2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_SPI_Receive+0x7e>
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d102      	bne.n	8006e6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e6c:	e0b9      	b.n	8006fe2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2204      	movs	r2, #4
 8006e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	88fa      	ldrh	r2, [r7, #6]
 8006e86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb4:	d107      	bne.n	8006ec6 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ec4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	2b40      	cmp	r3, #64	; 0x40
 8006ed2:	d007      	beq.n	8006ee4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ee2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d162      	bne.n	8006fb2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006eec:	e02e      	b.n	8006f4c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d115      	bne.n	8006f28 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f103 020c 	add.w	r2, r3, #12
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	7812      	ldrb	r2, [r2, #0]
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f26:	e011      	b.n	8006f4c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f28:	f7fb fdce 	bl	8002ac8 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d803      	bhi.n	8006f40 <HAL_SPI_Receive+0x156>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d102      	bne.n	8006f46 <HAL_SPI_Receive+0x15c>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d102      	bne.n	8006f4c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f4a:	e04a      	b.n	8006fe2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1cb      	bne.n	8006eee <HAL_SPI_Receive+0x104>
 8006f56:	e031      	b.n	8006fbc <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d113      	bne.n	8006f8e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	b292      	uxth	r2, r2
 8006f72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	1c9a      	adds	r2, r3, #2
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f8c:	e011      	b.n	8006fb2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f8e:	f7fb fd9b 	bl	8002ac8 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d803      	bhi.n	8006fa6 <HAL_SPI_Receive+0x1bc>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d102      	bne.n	8006fac <HAL_SPI_Receive+0x1c2>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d102      	bne.n	8006fb2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fb0:	e017      	b.n	8006fe2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1cd      	bne.n	8006f58 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 fa35 	bl	8007430 <SPI_EndRxTransaction>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
 8006fde:	e000      	b.n	8006fe2 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006fe0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08c      	sub	sp, #48	; 0x30
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800700a:	2301      	movs	r3, #1
 800700c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_SPI_TransmitReceive+0x26>
 800701e:	2302      	movs	r3, #2
 8007020:	e18a      	b.n	8007338 <HAL_SPI_TransmitReceive+0x33c>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800702a:	f7fb fd4d 	bl	8002ac8 <HAL_GetTick>
 800702e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007040:	887b      	ldrh	r3, [r7, #2]
 8007042:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007048:	2b01      	cmp	r3, #1
 800704a:	d00f      	beq.n	800706c <HAL_SPI_TransmitReceive+0x70>
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007052:	d107      	bne.n	8007064 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d103      	bne.n	8007064 <HAL_SPI_TransmitReceive+0x68>
 800705c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007060:	2b04      	cmp	r3, #4
 8007062:	d003      	beq.n	800706c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007064:	2302      	movs	r3, #2
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800706a:	e15b      	b.n	8007324 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_SPI_TransmitReceive+0x82>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SPI_TransmitReceive+0x82>
 8007078:	887b      	ldrh	r3, [r7, #2]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d103      	bne.n	8007086 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007084:	e14e      	b.n	8007324 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b04      	cmp	r3, #4
 8007090:	d003      	beq.n	800709a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2205      	movs	r2, #5
 8007096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	887a      	ldrh	r2, [r7, #2]
 80070aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	887a      	ldrh	r2, [r7, #2]
 80070b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	887a      	ldrh	r2, [r7, #2]
 80070bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	887a      	ldrh	r2, [r7, #2]
 80070c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	d007      	beq.n	80070ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f6:	d178      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_SPI_TransmitReceive+0x10a>
 8007100:	8b7b      	ldrh	r3, [r7, #26]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d166      	bne.n	80071d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710a:	881a      	ldrh	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	1c9a      	adds	r2, r3, #2
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800712a:	e053      	b.n	80071d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b02      	cmp	r3, #2
 8007138:	d11b      	bne.n	8007172 <HAL_SPI_TransmitReceive+0x176>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d016      	beq.n	8007172 <HAL_SPI_TransmitReceive+0x176>
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	2b01      	cmp	r3, #1
 8007148:	d113      	bne.n	8007172 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	881a      	ldrh	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	1c9a      	adds	r2, r3, #2
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b01      	cmp	r3, #1
 800717e:	d119      	bne.n	80071b4 <HAL_SPI_TransmitReceive+0x1b8>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d014      	beq.n	80071b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	b292      	uxth	r2, r2
 8007196:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	1c9a      	adds	r2, r3, #2
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071b0:	2301      	movs	r3, #1
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071b4:	f7fb fc88 	bl	8002ac8 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d807      	bhi.n	80071d4 <HAL_SPI_TransmitReceive+0x1d8>
 80071c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ca:	d003      	beq.n	80071d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071d2:	e0a7      	b.n	8007324 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1a6      	bne.n	800712c <HAL_SPI_TransmitReceive+0x130>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1a1      	bne.n	800712c <HAL_SPI_TransmitReceive+0x130>
 80071e8:	e07c      	b.n	80072e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <HAL_SPI_TransmitReceive+0x1fc>
 80071f2:	8b7b      	ldrh	r3, [r7, #26]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d16b      	bne.n	80072d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	330c      	adds	r3, #12
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007214:	b29b      	uxth	r3, r3
 8007216:	3b01      	subs	r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800721e:	e057      	b.n	80072d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b02      	cmp	r3, #2
 800722c:	d11c      	bne.n	8007268 <HAL_SPI_TransmitReceive+0x26c>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007232:	b29b      	uxth	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d017      	beq.n	8007268 <HAL_SPI_TransmitReceive+0x26c>
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	2b01      	cmp	r3, #1
 800723c:	d114      	bne.n	8007268 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	330c      	adds	r3, #12
 8007248:	7812      	ldrb	r2, [r2, #0]
 800724a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800725a:	b29b      	uxth	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b29a      	uxth	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b01      	cmp	r3, #1
 8007274:	d119      	bne.n	80072aa <HAL_SPI_TransmitReceive+0x2ae>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800727a:	b29b      	uxth	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d014      	beq.n	80072aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728a:	b2d2      	uxtb	r2, r2
 800728c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072a6:	2301      	movs	r3, #1
 80072a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072aa:	f7fb fc0d 	bl	8002ac8 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d803      	bhi.n	80072c2 <HAL_SPI_TransmitReceive+0x2c6>
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	d102      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x2cc>
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d103      	bne.n	80072d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072ce:	e029      	b.n	8007324 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1a2      	bne.n	8007220 <HAL_SPI_TransmitReceive+0x224>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d19d      	bne.n	8007220 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f907 	bl	80074fc <SPI_EndRxTxTransaction>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d006      	beq.n	8007302 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007300:	e010      	b.n	8007324 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10b      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	e000      	b.n	8007324 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007322:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007334:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007338:	4618      	mov	r0, r3
 800733a:	3730      	adds	r7, #48	; 0x30
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800734e:	b2db      	uxtb	r3, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	603b      	str	r3, [r7, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800736c:	e04c      	b.n	8007408 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d048      	beq.n	8007408 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007376:	f7fb fba7 	bl	8002ac8 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d902      	bls.n	800738c <SPI_WaitFlagStateUntilTimeout+0x30>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d13d      	bne.n	8007408 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800739a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073a4:	d111      	bne.n	80073ca <SPI_WaitFlagStateUntilTimeout+0x6e>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ae:	d004      	beq.n	80073ba <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b8:	d107      	bne.n	80073ca <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d2:	d10f      	bne.n	80073f4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e00f      	b.n	8007428 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4013      	ands	r3, r2
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	429a      	cmp	r2, r3
 8007416:	bf0c      	ite	eq
 8007418:	2301      	moveq	r3, #1
 800741a:	2300      	movne	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	461a      	mov	r2, r3
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	429a      	cmp	r2, r3
 8007424:	d1a3      	bne.n	800736e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af02      	add	r7, sp, #8
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007444:	d111      	bne.n	800746a <SPI_EndRxTransaction+0x3a>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800744e:	d004      	beq.n	800745a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007458:	d107      	bne.n	800746a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007468:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007472:	d12a      	bne.n	80074ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800747c:	d012      	beq.n	80074a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2200      	movs	r2, #0
 8007486:	2180      	movs	r1, #128	; 0x80
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff ff67 	bl	800735c <SPI_WaitFlagStateUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d02d      	beq.n	80074f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007498:	f043 0220 	orr.w	r2, r3, #32
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e026      	b.n	80074f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	2101      	movs	r1, #1
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff ff54 	bl	800735c <SPI_WaitFlagStateUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01a      	beq.n	80074f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e013      	b.n	80074f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	2101      	movs	r1, #1
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff ff41 	bl	800735c <SPI_WaitFlagStateUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e4:	f043 0220 	orr.w	r2, r3, #32
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e000      	b.n	80074f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af02      	add	r7, sp, #8
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <SPI_EndRxTxTransaction+0x7c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1b      	ldr	r2, [pc, #108]	; (800757c <SPI_EndRxTxTransaction+0x80>)
 800750e:	fba2 2303 	umull	r2, r3, r2, r3
 8007512:	0d5b      	lsrs	r3, r3, #21
 8007514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007518:	fb02 f303 	mul.w	r3, r2, r3
 800751c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007526:	d112      	bne.n	800754e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2200      	movs	r2, #0
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff ff12 	bl	800735c <SPI_WaitFlagStateUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d016      	beq.n	800756c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	f043 0220 	orr.w	r2, r3, #32
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e00f      	b.n	800756e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	3b01      	subs	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007564:	2b80      	cmp	r3, #128	; 0x80
 8007566:	d0f2      	beq.n	800754e <SPI_EndRxTxTransaction+0x52>
 8007568:	e000      	b.n	800756c <SPI_EndRxTxTransaction+0x70>
        break;
 800756a:	bf00      	nop
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000000 	.word	0x20000000
 800757c:	165e9f81 	.word	0x165e9f81

08007580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e01d      	b.n	80075ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7f9 ffbe 	bl	8001528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f000 fa14 	bl	80079ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b085      	sub	sp, #20
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0201 	orr.w	r2, r2, #1
 80075ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b06      	cmp	r3, #6
 80075fe:	d007      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b02      	cmp	r3, #2
 8007632:	d122      	bne.n	800767a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b02      	cmp	r3, #2
 8007640:	d11b      	bne.n	800767a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f06f 0202 	mvn.w	r2, #2
 800764a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f003 0303 	and.w	r3, r3, #3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f9a5 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 8007666:	e005      	b.n	8007674 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f997 	bl	800799c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f9a8 	bl	80079c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b04      	cmp	r3, #4
 8007686:	d122      	bne.n	80076ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b04      	cmp	r3, #4
 8007694:	d11b      	bne.n	80076ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f06f 0204 	mvn.w	r2, #4
 800769e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f97b 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 80076ba:	e005      	b.n	80076c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f96d 	bl	800799c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f97e 	bl	80079c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d122      	bne.n	8007722 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d11b      	bne.n	8007722 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f06f 0208 	mvn.w	r2, #8
 80076f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2204      	movs	r2, #4
 80076f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f003 0303 	and.w	r3, r3, #3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f951 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 800770e:	e005      	b.n	800771c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f943 	bl	800799c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f954 	bl	80079c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b10      	cmp	r3, #16
 800772e:	d122      	bne.n	8007776 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f003 0310 	and.w	r3, r3, #16
 800773a:	2b10      	cmp	r3, #16
 800773c:	d11b      	bne.n	8007776 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f06f 0210 	mvn.w	r2, #16
 8007746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2208      	movs	r2, #8
 800774c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f927 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 8007762:	e005      	b.n	8007770 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f919 	bl	800799c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f92a 	bl	80079c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b01      	cmp	r3, #1
 8007782:	d10e      	bne.n	80077a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b01      	cmp	r3, #1
 8007790:	d107      	bne.n	80077a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f06f 0201 	mvn.w	r2, #1
 800779a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7f9 fcdf 	bl	8001160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ac:	2b80      	cmp	r3, #128	; 0x80
 80077ae:	d10e      	bne.n	80077ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ba:	2b80      	cmp	r3, #128	; 0x80
 80077bc:	d107      	bne.n	80077ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 facf 	bl	8007d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d8:	2b40      	cmp	r3, #64	; 0x40
 80077da:	d10e      	bne.n	80077fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d107      	bne.n	80077fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f8ef 	bl	80079d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b20      	cmp	r3, #32
 8007806:	d10e      	bne.n	8007826 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b20      	cmp	r3, #32
 8007814:	d107      	bne.n	8007826 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f06f 0220 	mvn.w	r2, #32
 800781e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fa99 	bl	8007d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <HAL_TIM_ConfigClockSource+0x18>
 8007842:	2302      	movs	r3, #2
 8007844:	e0a6      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x166>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007864:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800786c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d067      	beq.n	800794e <HAL_TIM_ConfigClockSource+0x120>
 800787e:	2b40      	cmp	r3, #64	; 0x40
 8007880:	d80b      	bhi.n	800789a <HAL_TIM_ConfigClockSource+0x6c>
 8007882:	2b10      	cmp	r3, #16
 8007884:	d073      	beq.n	800796e <HAL_TIM_ConfigClockSource+0x140>
 8007886:	2b10      	cmp	r3, #16
 8007888:	d802      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x62>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d06f      	beq.n	800796e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800788e:	e078      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007890:	2b20      	cmp	r3, #32
 8007892:	d06c      	beq.n	800796e <HAL_TIM_ConfigClockSource+0x140>
 8007894:	2b30      	cmp	r3, #48	; 0x30
 8007896:	d06a      	beq.n	800796e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007898:	e073      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800789a:	2b70      	cmp	r3, #112	; 0x70
 800789c:	d00d      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x8c>
 800789e:	2b70      	cmp	r3, #112	; 0x70
 80078a0:	d804      	bhi.n	80078ac <HAL_TIM_ConfigClockSource+0x7e>
 80078a2:	2b50      	cmp	r3, #80	; 0x50
 80078a4:	d033      	beq.n	800790e <HAL_TIM_ConfigClockSource+0xe0>
 80078a6:	2b60      	cmp	r3, #96	; 0x60
 80078a8:	d041      	beq.n	800792e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80078aa:	e06a      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80078ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b0:	d066      	beq.n	8007980 <HAL_TIM_ConfigClockSource+0x152>
 80078b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b6:	d017      	beq.n	80078e8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80078b8:	e063      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	6899      	ldr	r1, [r3, #8]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f000 f9a9 	bl	8007c20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	609a      	str	r2, [r3, #8]
      break;
 80078e6:	e04c      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	6899      	ldr	r1, [r3, #8]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f000 f992 	bl	8007c20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800790a:	609a      	str	r2, [r3, #8]
      break;
 800790c:	e039      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	6859      	ldr	r1, [r3, #4]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	461a      	mov	r2, r3
 800791c:	f000 f906 	bl	8007b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2150      	movs	r1, #80	; 0x50
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f95f 	bl	8007bea <TIM_ITRx_SetConfig>
      break;
 800792c:	e029      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6859      	ldr	r1, [r3, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	461a      	mov	r2, r3
 800793c:	f000 f925 	bl	8007b8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2160      	movs	r1, #96	; 0x60
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f94f 	bl	8007bea <TIM_ITRx_SetConfig>
      break;
 800794c:	e019      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6859      	ldr	r1, [r3, #4]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	461a      	mov	r2, r3
 800795c:	f000 f8e6 	bl	8007b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2140      	movs	r1, #64	; 0x40
 8007966:	4618      	mov	r0, r3
 8007968:	f000 f93f 	bl	8007bea <TIM_ITRx_SetConfig>
      break;
 800796c:	e009      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f000 f936 	bl	8007bea <TIM_ITRx_SetConfig>
      break;
 800797e:	e000      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007980:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a40      	ldr	r2, [pc, #256]	; (8007b00 <TIM_Base_SetConfig+0x114>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0a:	d00f      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a3d      	ldr	r2, [pc, #244]	; (8007b04 <TIM_Base_SetConfig+0x118>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00b      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a3c      	ldr	r2, [pc, #240]	; (8007b08 <TIM_Base_SetConfig+0x11c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d007      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a3b      	ldr	r2, [pc, #236]	; (8007b0c <TIM_Base_SetConfig+0x120>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a3a      	ldr	r2, [pc, #232]	; (8007b10 <TIM_Base_SetConfig+0x124>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d108      	bne.n	8007a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a2f      	ldr	r2, [pc, #188]	; (8007b00 <TIM_Base_SetConfig+0x114>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d02b      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4c:	d027      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a2c      	ldr	r2, [pc, #176]	; (8007b04 <TIM_Base_SetConfig+0x118>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d023      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2b      	ldr	r2, [pc, #172]	; (8007b08 <TIM_Base_SetConfig+0x11c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d01f      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a2a      	ldr	r2, [pc, #168]	; (8007b0c <TIM_Base_SetConfig+0x120>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d01b      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a29      	ldr	r2, [pc, #164]	; (8007b10 <TIM_Base_SetConfig+0x124>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d017      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a28      	ldr	r2, [pc, #160]	; (8007b14 <TIM_Base_SetConfig+0x128>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d013      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a27      	ldr	r2, [pc, #156]	; (8007b18 <TIM_Base_SetConfig+0x12c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00f      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a26      	ldr	r2, [pc, #152]	; (8007b1c <TIM_Base_SetConfig+0x130>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00b      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a25      	ldr	r2, [pc, #148]	; (8007b20 <TIM_Base_SetConfig+0x134>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d007      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a24      	ldr	r2, [pc, #144]	; (8007b24 <TIM_Base_SetConfig+0x138>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d003      	beq.n	8007a9e <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a23      	ldr	r2, [pc, #140]	; (8007b28 <TIM_Base_SetConfig+0x13c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d108      	bne.n	8007ab0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a0a      	ldr	r2, [pc, #40]	; (8007b00 <TIM_Base_SetConfig+0x114>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_Base_SetConfig+0xf8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a0c      	ldr	r2, [pc, #48]	; (8007b10 <TIM_Base_SetConfig+0x124>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d103      	bne.n	8007aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	615a      	str	r2, [r3, #20]
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40010000 	.word	0x40010000
 8007b04:	40000400 	.word	0x40000400
 8007b08:	40000800 	.word	0x40000800
 8007b0c:	40000c00 	.word	0x40000c00
 8007b10:	40010400 	.word	0x40010400
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40014400 	.word	0x40014400
 8007b1c:	40014800 	.word	0x40014800
 8007b20:	40001800 	.word	0x40001800
 8007b24:	40001c00 	.word	0x40001c00
 8007b28:	40002000 	.word	0x40002000

08007b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f023 0201 	bic.w	r2, r3, #1
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f023 030a 	bic.w	r3, r3, #10
 8007b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b087      	sub	sp, #28
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f023 0210 	bic.w	r2, r3, #16
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	031b      	lsls	r3, r3, #12
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b085      	sub	sp, #20
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f043 0307 	orr.w	r3, r3, #7
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	609a      	str	r2, [r3, #8]
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	021a      	lsls	r2, r3, #8
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	609a      	str	r2, [r3, #8]
}
 8007c54:	bf00      	nop
 8007c56:	371c      	adds	r7, #28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e05a      	b.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a21      	ldr	r2, [pc, #132]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d022      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc4:	d01d      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1d      	ldr	r2, [pc, #116]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d018      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a1b      	ldr	r2, [pc, #108]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a1a      	ldr	r2, [pc, #104]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00e      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a18      	ldr	r2, [pc, #96]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d009      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a17      	ldr	r2, [pc, #92]	; (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d10c      	bne.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40010400 	.word	0x40010400
 8007d50:	40014000 	.word	0x40014000
 8007d54:	40001800 	.word	0x40001800

08007d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e03f      	b.n	8007e12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d106      	bne.n	8007dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7f9 fc0a 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2224      	movs	r2, #36	; 0x24
 8007db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f829 	bl	8007e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	695a      	ldr	r2, [r3, #20]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	b085      	sub	sp, #20
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	431a      	orrs	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007e5e:	f023 030c 	bic.w	r3, r3, #12
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e8a:	f040 818b 	bne.w	80081a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4ac1      	ldr	r2, [pc, #772]	; (8008198 <UART_SetConfig+0x37c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d005      	beq.n	8007ea4 <UART_SetConfig+0x88>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4abf      	ldr	r2, [pc, #764]	; (800819c <UART_SetConfig+0x380>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	f040 80bd 	bne.w	800801e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ea4:	f7fe fb5e 	bl	8006564 <HAL_RCC_GetPCLK2Freq>
 8007ea8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	461d      	mov	r5, r3
 8007eae:	f04f 0600 	mov.w	r6, #0
 8007eb2:	46a8      	mov	r8, r5
 8007eb4:	46b1      	mov	r9, r6
 8007eb6:	eb18 0308 	adds.w	r3, r8, r8
 8007eba:	eb49 0409 	adc.w	r4, r9, r9
 8007ebe:	4698      	mov	r8, r3
 8007ec0:	46a1      	mov	r9, r4
 8007ec2:	eb18 0805 	adds.w	r8, r8, r5
 8007ec6:	eb49 0906 	adc.w	r9, r9, r6
 8007eca:	f04f 0100 	mov.w	r1, #0
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ed6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007eda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ede:	4688      	mov	r8, r1
 8007ee0:	4691      	mov	r9, r2
 8007ee2:	eb18 0005 	adds.w	r0, r8, r5
 8007ee6:	eb49 0106 	adc.w	r1, r9, r6
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	461d      	mov	r5, r3
 8007ef0:	f04f 0600 	mov.w	r6, #0
 8007ef4:	196b      	adds	r3, r5, r5
 8007ef6:	eb46 0406 	adc.w	r4, r6, r6
 8007efa:	461a      	mov	r2, r3
 8007efc:	4623      	mov	r3, r4
 8007efe:	f7f8 f977 	bl	80001f0 <__aeabi_uldivmod>
 8007f02:	4603      	mov	r3, r0
 8007f04:	460c      	mov	r4, r1
 8007f06:	461a      	mov	r2, r3
 8007f08:	4ba5      	ldr	r3, [pc, #660]	; (80081a0 <UART_SetConfig+0x384>)
 8007f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	461d      	mov	r5, r3
 8007f18:	f04f 0600 	mov.w	r6, #0
 8007f1c:	46a9      	mov	r9, r5
 8007f1e:	46b2      	mov	sl, r6
 8007f20:	eb19 0309 	adds.w	r3, r9, r9
 8007f24:	eb4a 040a 	adc.w	r4, sl, sl
 8007f28:	4699      	mov	r9, r3
 8007f2a:	46a2      	mov	sl, r4
 8007f2c:	eb19 0905 	adds.w	r9, r9, r5
 8007f30:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f34:	f04f 0100 	mov.w	r1, #0
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f48:	4689      	mov	r9, r1
 8007f4a:	4692      	mov	sl, r2
 8007f4c:	eb19 0005 	adds.w	r0, r9, r5
 8007f50:	eb4a 0106 	adc.w	r1, sl, r6
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	461d      	mov	r5, r3
 8007f5a:	f04f 0600 	mov.w	r6, #0
 8007f5e:	196b      	adds	r3, r5, r5
 8007f60:	eb46 0406 	adc.w	r4, r6, r6
 8007f64:	461a      	mov	r2, r3
 8007f66:	4623      	mov	r3, r4
 8007f68:	f7f8 f942 	bl	80001f0 <__aeabi_uldivmod>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	461a      	mov	r2, r3
 8007f72:	4b8b      	ldr	r3, [pc, #556]	; (80081a0 <UART_SetConfig+0x384>)
 8007f74:	fba3 1302 	umull	r1, r3, r3, r2
 8007f78:	095b      	lsrs	r3, r3, #5
 8007f7a:	2164      	movs	r1, #100	; 0x64
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	3332      	adds	r3, #50	; 0x32
 8007f86:	4a86      	ldr	r2, [pc, #536]	; (80081a0 <UART_SetConfig+0x384>)
 8007f88:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f94:	4498      	add	r8, r3
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	461d      	mov	r5, r3
 8007f9a:	f04f 0600 	mov.w	r6, #0
 8007f9e:	46a9      	mov	r9, r5
 8007fa0:	46b2      	mov	sl, r6
 8007fa2:	eb19 0309 	adds.w	r3, r9, r9
 8007fa6:	eb4a 040a 	adc.w	r4, sl, sl
 8007faa:	4699      	mov	r9, r3
 8007fac:	46a2      	mov	sl, r4
 8007fae:	eb19 0905 	adds.w	r9, r9, r5
 8007fb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8007fb6:	f04f 0100 	mov.w	r1, #0
 8007fba:	f04f 0200 	mov.w	r2, #0
 8007fbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fca:	4689      	mov	r9, r1
 8007fcc:	4692      	mov	sl, r2
 8007fce:	eb19 0005 	adds.w	r0, r9, r5
 8007fd2:	eb4a 0106 	adc.w	r1, sl, r6
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	461d      	mov	r5, r3
 8007fdc:	f04f 0600 	mov.w	r6, #0
 8007fe0:	196b      	adds	r3, r5, r5
 8007fe2:	eb46 0406 	adc.w	r4, r6, r6
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	4623      	mov	r3, r4
 8007fea:	f7f8 f901 	bl	80001f0 <__aeabi_uldivmod>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4b6a      	ldr	r3, [pc, #424]	; (80081a0 <UART_SetConfig+0x384>)
 8007ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8007ffa:	095b      	lsrs	r3, r3, #5
 8007ffc:	2164      	movs	r1, #100	; 0x64
 8007ffe:	fb01 f303 	mul.w	r3, r1, r3
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	3332      	adds	r3, #50	; 0x32
 8008008:	4a65      	ldr	r2, [pc, #404]	; (80081a0 <UART_SetConfig+0x384>)
 800800a:	fba2 2303 	umull	r2, r3, r2, r3
 800800e:	095b      	lsrs	r3, r3, #5
 8008010:	f003 0207 	and.w	r2, r3, #7
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4442      	add	r2, r8
 800801a:	609a      	str	r2, [r3, #8]
 800801c:	e26f      	b.n	80084fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800801e:	f7fe fa8d 	bl	800653c <HAL_RCC_GetPCLK1Freq>
 8008022:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	461d      	mov	r5, r3
 8008028:	f04f 0600 	mov.w	r6, #0
 800802c:	46a8      	mov	r8, r5
 800802e:	46b1      	mov	r9, r6
 8008030:	eb18 0308 	adds.w	r3, r8, r8
 8008034:	eb49 0409 	adc.w	r4, r9, r9
 8008038:	4698      	mov	r8, r3
 800803a:	46a1      	mov	r9, r4
 800803c:	eb18 0805 	adds.w	r8, r8, r5
 8008040:	eb49 0906 	adc.w	r9, r9, r6
 8008044:	f04f 0100 	mov.w	r1, #0
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008050:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008054:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008058:	4688      	mov	r8, r1
 800805a:	4691      	mov	r9, r2
 800805c:	eb18 0005 	adds.w	r0, r8, r5
 8008060:	eb49 0106 	adc.w	r1, r9, r6
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	461d      	mov	r5, r3
 800806a:	f04f 0600 	mov.w	r6, #0
 800806e:	196b      	adds	r3, r5, r5
 8008070:	eb46 0406 	adc.w	r4, r6, r6
 8008074:	461a      	mov	r2, r3
 8008076:	4623      	mov	r3, r4
 8008078:	f7f8 f8ba 	bl	80001f0 <__aeabi_uldivmod>
 800807c:	4603      	mov	r3, r0
 800807e:	460c      	mov	r4, r1
 8008080:	461a      	mov	r2, r3
 8008082:	4b47      	ldr	r3, [pc, #284]	; (80081a0 <UART_SetConfig+0x384>)
 8008084:	fba3 2302 	umull	r2, r3, r3, r2
 8008088:	095b      	lsrs	r3, r3, #5
 800808a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	461d      	mov	r5, r3
 8008092:	f04f 0600 	mov.w	r6, #0
 8008096:	46a9      	mov	r9, r5
 8008098:	46b2      	mov	sl, r6
 800809a:	eb19 0309 	adds.w	r3, r9, r9
 800809e:	eb4a 040a 	adc.w	r4, sl, sl
 80080a2:	4699      	mov	r9, r3
 80080a4:	46a2      	mov	sl, r4
 80080a6:	eb19 0905 	adds.w	r9, r9, r5
 80080aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80080ae:	f04f 0100 	mov.w	r1, #0
 80080b2:	f04f 0200 	mov.w	r2, #0
 80080b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080c2:	4689      	mov	r9, r1
 80080c4:	4692      	mov	sl, r2
 80080c6:	eb19 0005 	adds.w	r0, r9, r5
 80080ca:	eb4a 0106 	adc.w	r1, sl, r6
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	461d      	mov	r5, r3
 80080d4:	f04f 0600 	mov.w	r6, #0
 80080d8:	196b      	adds	r3, r5, r5
 80080da:	eb46 0406 	adc.w	r4, r6, r6
 80080de:	461a      	mov	r2, r3
 80080e0:	4623      	mov	r3, r4
 80080e2:	f7f8 f885 	bl	80001f0 <__aeabi_uldivmod>
 80080e6:	4603      	mov	r3, r0
 80080e8:	460c      	mov	r4, r1
 80080ea:	461a      	mov	r2, r3
 80080ec:	4b2c      	ldr	r3, [pc, #176]	; (80081a0 <UART_SetConfig+0x384>)
 80080ee:	fba3 1302 	umull	r1, r3, r3, r2
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	2164      	movs	r1, #100	; 0x64
 80080f6:	fb01 f303 	mul.w	r3, r1, r3
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	3332      	adds	r3, #50	; 0x32
 8008100:	4a27      	ldr	r2, [pc, #156]	; (80081a0 <UART_SetConfig+0x384>)
 8008102:	fba2 2303 	umull	r2, r3, r2, r3
 8008106:	095b      	lsrs	r3, r3, #5
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800810e:	4498      	add	r8, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	461d      	mov	r5, r3
 8008114:	f04f 0600 	mov.w	r6, #0
 8008118:	46a9      	mov	r9, r5
 800811a:	46b2      	mov	sl, r6
 800811c:	eb19 0309 	adds.w	r3, r9, r9
 8008120:	eb4a 040a 	adc.w	r4, sl, sl
 8008124:	4699      	mov	r9, r3
 8008126:	46a2      	mov	sl, r4
 8008128:	eb19 0905 	adds.w	r9, r9, r5
 800812c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008130:	f04f 0100 	mov.w	r1, #0
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800813c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008144:	4689      	mov	r9, r1
 8008146:	4692      	mov	sl, r2
 8008148:	eb19 0005 	adds.w	r0, r9, r5
 800814c:	eb4a 0106 	adc.w	r1, sl, r6
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	461d      	mov	r5, r3
 8008156:	f04f 0600 	mov.w	r6, #0
 800815a:	196b      	adds	r3, r5, r5
 800815c:	eb46 0406 	adc.w	r4, r6, r6
 8008160:	461a      	mov	r2, r3
 8008162:	4623      	mov	r3, r4
 8008164:	f7f8 f844 	bl	80001f0 <__aeabi_uldivmod>
 8008168:	4603      	mov	r3, r0
 800816a:	460c      	mov	r4, r1
 800816c:	461a      	mov	r2, r3
 800816e:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <UART_SetConfig+0x384>)
 8008170:	fba3 1302 	umull	r1, r3, r3, r2
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	2164      	movs	r1, #100	; 0x64
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	3332      	adds	r3, #50	; 0x32
 8008182:	4a07      	ldr	r2, [pc, #28]	; (80081a0 <UART_SetConfig+0x384>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	f003 0207 	and.w	r2, r3, #7
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4442      	add	r2, r8
 8008194:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008196:	e1b2      	b.n	80084fe <UART_SetConfig+0x6e2>
 8008198:	40011000 	.word	0x40011000
 800819c:	40011400 	.word	0x40011400
 80081a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4ad7      	ldr	r2, [pc, #860]	; (8008508 <UART_SetConfig+0x6ec>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d005      	beq.n	80081ba <UART_SetConfig+0x39e>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4ad6      	ldr	r2, [pc, #856]	; (800850c <UART_SetConfig+0x6f0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	f040 80d1 	bne.w	800835c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80081ba:	f7fe f9d3 	bl	8006564 <HAL_RCC_GetPCLK2Freq>
 80081be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	469a      	mov	sl, r3
 80081c4:	f04f 0b00 	mov.w	fp, #0
 80081c8:	46d0      	mov	r8, sl
 80081ca:	46d9      	mov	r9, fp
 80081cc:	eb18 0308 	adds.w	r3, r8, r8
 80081d0:	eb49 0409 	adc.w	r4, r9, r9
 80081d4:	4698      	mov	r8, r3
 80081d6:	46a1      	mov	r9, r4
 80081d8:	eb18 080a 	adds.w	r8, r8, sl
 80081dc:	eb49 090b 	adc.w	r9, r9, fp
 80081e0:	f04f 0100 	mov.w	r1, #0
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80081ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80081f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80081f4:	4688      	mov	r8, r1
 80081f6:	4691      	mov	r9, r2
 80081f8:	eb1a 0508 	adds.w	r5, sl, r8
 80081fc:	eb4b 0609 	adc.w	r6, fp, r9
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	4619      	mov	r1, r3
 8008206:	f04f 0200 	mov.w	r2, #0
 800820a:	f04f 0300 	mov.w	r3, #0
 800820e:	f04f 0400 	mov.w	r4, #0
 8008212:	0094      	lsls	r4, r2, #2
 8008214:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008218:	008b      	lsls	r3, r1, #2
 800821a:	461a      	mov	r2, r3
 800821c:	4623      	mov	r3, r4
 800821e:	4628      	mov	r0, r5
 8008220:	4631      	mov	r1, r6
 8008222:	f7f7 ffe5 	bl	80001f0 <__aeabi_uldivmod>
 8008226:	4603      	mov	r3, r0
 8008228:	460c      	mov	r4, r1
 800822a:	461a      	mov	r2, r3
 800822c:	4bb8      	ldr	r3, [pc, #736]	; (8008510 <UART_SetConfig+0x6f4>)
 800822e:	fba3 2302 	umull	r2, r3, r3, r2
 8008232:	095b      	lsrs	r3, r3, #5
 8008234:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	469b      	mov	fp, r3
 800823c:	f04f 0c00 	mov.w	ip, #0
 8008240:	46d9      	mov	r9, fp
 8008242:	46e2      	mov	sl, ip
 8008244:	eb19 0309 	adds.w	r3, r9, r9
 8008248:	eb4a 040a 	adc.w	r4, sl, sl
 800824c:	4699      	mov	r9, r3
 800824e:	46a2      	mov	sl, r4
 8008250:	eb19 090b 	adds.w	r9, r9, fp
 8008254:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008258:	f04f 0100 	mov.w	r1, #0
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008264:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008268:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800826c:	4689      	mov	r9, r1
 800826e:	4692      	mov	sl, r2
 8008270:	eb1b 0509 	adds.w	r5, fp, r9
 8008274:	eb4c 060a 	adc.w	r6, ip, sl
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	4619      	mov	r1, r3
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	f04f 0300 	mov.w	r3, #0
 8008286:	f04f 0400 	mov.w	r4, #0
 800828a:	0094      	lsls	r4, r2, #2
 800828c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008290:	008b      	lsls	r3, r1, #2
 8008292:	461a      	mov	r2, r3
 8008294:	4623      	mov	r3, r4
 8008296:	4628      	mov	r0, r5
 8008298:	4631      	mov	r1, r6
 800829a:	f7f7 ffa9 	bl	80001f0 <__aeabi_uldivmod>
 800829e:	4603      	mov	r3, r0
 80082a0:	460c      	mov	r4, r1
 80082a2:	461a      	mov	r2, r3
 80082a4:	4b9a      	ldr	r3, [pc, #616]	; (8008510 <UART_SetConfig+0x6f4>)
 80082a6:	fba3 1302 	umull	r1, r3, r3, r2
 80082aa:	095b      	lsrs	r3, r3, #5
 80082ac:	2164      	movs	r1, #100	; 0x64
 80082ae:	fb01 f303 	mul.w	r3, r1, r3
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	011b      	lsls	r3, r3, #4
 80082b6:	3332      	adds	r3, #50	; 0x32
 80082b8:	4a95      	ldr	r2, [pc, #596]	; (8008510 <UART_SetConfig+0x6f4>)
 80082ba:	fba2 2303 	umull	r2, r3, r2, r3
 80082be:	095b      	lsrs	r3, r3, #5
 80082c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082c4:	4498      	add	r8, r3
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	469b      	mov	fp, r3
 80082ca:	f04f 0c00 	mov.w	ip, #0
 80082ce:	46d9      	mov	r9, fp
 80082d0:	46e2      	mov	sl, ip
 80082d2:	eb19 0309 	adds.w	r3, r9, r9
 80082d6:	eb4a 040a 	adc.w	r4, sl, sl
 80082da:	4699      	mov	r9, r3
 80082dc:	46a2      	mov	sl, r4
 80082de:	eb19 090b 	adds.w	r9, r9, fp
 80082e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80082e6:	f04f 0100 	mov.w	r1, #0
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082fa:	4689      	mov	r9, r1
 80082fc:	4692      	mov	sl, r2
 80082fe:	eb1b 0509 	adds.w	r5, fp, r9
 8008302:	eb4c 060a 	adc.w	r6, ip, sl
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	4619      	mov	r1, r3
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	f04f 0400 	mov.w	r4, #0
 8008318:	0094      	lsls	r4, r2, #2
 800831a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800831e:	008b      	lsls	r3, r1, #2
 8008320:	461a      	mov	r2, r3
 8008322:	4623      	mov	r3, r4
 8008324:	4628      	mov	r0, r5
 8008326:	4631      	mov	r1, r6
 8008328:	f7f7 ff62 	bl	80001f0 <__aeabi_uldivmod>
 800832c:	4603      	mov	r3, r0
 800832e:	460c      	mov	r4, r1
 8008330:	461a      	mov	r2, r3
 8008332:	4b77      	ldr	r3, [pc, #476]	; (8008510 <UART_SetConfig+0x6f4>)
 8008334:	fba3 1302 	umull	r1, r3, r3, r2
 8008338:	095b      	lsrs	r3, r3, #5
 800833a:	2164      	movs	r1, #100	; 0x64
 800833c:	fb01 f303 	mul.w	r3, r1, r3
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	011b      	lsls	r3, r3, #4
 8008344:	3332      	adds	r3, #50	; 0x32
 8008346:	4a72      	ldr	r2, [pc, #456]	; (8008510 <UART_SetConfig+0x6f4>)
 8008348:	fba2 2303 	umull	r2, r3, r2, r3
 800834c:	095b      	lsrs	r3, r3, #5
 800834e:	f003 020f 	and.w	r2, r3, #15
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4442      	add	r2, r8
 8008358:	609a      	str	r2, [r3, #8]
 800835a:	e0d0      	b.n	80084fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800835c:	f7fe f8ee 	bl	800653c <HAL_RCC_GetPCLK1Freq>
 8008360:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	469a      	mov	sl, r3
 8008366:	f04f 0b00 	mov.w	fp, #0
 800836a:	46d0      	mov	r8, sl
 800836c:	46d9      	mov	r9, fp
 800836e:	eb18 0308 	adds.w	r3, r8, r8
 8008372:	eb49 0409 	adc.w	r4, r9, r9
 8008376:	4698      	mov	r8, r3
 8008378:	46a1      	mov	r9, r4
 800837a:	eb18 080a 	adds.w	r8, r8, sl
 800837e:	eb49 090b 	adc.w	r9, r9, fp
 8008382:	f04f 0100 	mov.w	r1, #0
 8008386:	f04f 0200 	mov.w	r2, #0
 800838a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800838e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008392:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008396:	4688      	mov	r8, r1
 8008398:	4691      	mov	r9, r2
 800839a:	eb1a 0508 	adds.w	r5, sl, r8
 800839e:	eb4b 0609 	adc.w	r6, fp, r9
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	4619      	mov	r1, r3
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	f04f 0400 	mov.w	r4, #0
 80083b4:	0094      	lsls	r4, r2, #2
 80083b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80083ba:	008b      	lsls	r3, r1, #2
 80083bc:	461a      	mov	r2, r3
 80083be:	4623      	mov	r3, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	4631      	mov	r1, r6
 80083c4:	f7f7 ff14 	bl	80001f0 <__aeabi_uldivmod>
 80083c8:	4603      	mov	r3, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	461a      	mov	r2, r3
 80083ce:	4b50      	ldr	r3, [pc, #320]	; (8008510 <UART_SetConfig+0x6f4>)
 80083d0:	fba3 2302 	umull	r2, r3, r3, r2
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	469b      	mov	fp, r3
 80083de:	f04f 0c00 	mov.w	ip, #0
 80083e2:	46d9      	mov	r9, fp
 80083e4:	46e2      	mov	sl, ip
 80083e6:	eb19 0309 	adds.w	r3, r9, r9
 80083ea:	eb4a 040a 	adc.w	r4, sl, sl
 80083ee:	4699      	mov	r9, r3
 80083f0:	46a2      	mov	sl, r4
 80083f2:	eb19 090b 	adds.w	r9, r9, fp
 80083f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083fa:	f04f 0100 	mov.w	r1, #0
 80083fe:	f04f 0200 	mov.w	r2, #0
 8008402:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008406:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800840a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800840e:	4689      	mov	r9, r1
 8008410:	4692      	mov	sl, r2
 8008412:	eb1b 0509 	adds.w	r5, fp, r9
 8008416:	eb4c 060a 	adc.w	r6, ip, sl
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	4619      	mov	r1, r3
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	f04f 0300 	mov.w	r3, #0
 8008428:	f04f 0400 	mov.w	r4, #0
 800842c:	0094      	lsls	r4, r2, #2
 800842e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008432:	008b      	lsls	r3, r1, #2
 8008434:	461a      	mov	r2, r3
 8008436:	4623      	mov	r3, r4
 8008438:	4628      	mov	r0, r5
 800843a:	4631      	mov	r1, r6
 800843c:	f7f7 fed8 	bl	80001f0 <__aeabi_uldivmod>
 8008440:	4603      	mov	r3, r0
 8008442:	460c      	mov	r4, r1
 8008444:	461a      	mov	r2, r3
 8008446:	4b32      	ldr	r3, [pc, #200]	; (8008510 <UART_SetConfig+0x6f4>)
 8008448:	fba3 1302 	umull	r1, r3, r3, r2
 800844c:	095b      	lsrs	r3, r3, #5
 800844e:	2164      	movs	r1, #100	; 0x64
 8008450:	fb01 f303 	mul.w	r3, r1, r3
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	011b      	lsls	r3, r3, #4
 8008458:	3332      	adds	r3, #50	; 0x32
 800845a:	4a2d      	ldr	r2, [pc, #180]	; (8008510 <UART_SetConfig+0x6f4>)
 800845c:	fba2 2303 	umull	r2, r3, r2, r3
 8008460:	095b      	lsrs	r3, r3, #5
 8008462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008466:	4498      	add	r8, r3
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	469b      	mov	fp, r3
 800846c:	f04f 0c00 	mov.w	ip, #0
 8008470:	46d9      	mov	r9, fp
 8008472:	46e2      	mov	sl, ip
 8008474:	eb19 0309 	adds.w	r3, r9, r9
 8008478:	eb4a 040a 	adc.w	r4, sl, sl
 800847c:	4699      	mov	r9, r3
 800847e:	46a2      	mov	sl, r4
 8008480:	eb19 090b 	adds.w	r9, r9, fp
 8008484:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008488:	f04f 0100 	mov.w	r1, #0
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008494:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008498:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800849c:	4689      	mov	r9, r1
 800849e:	4692      	mov	sl, r2
 80084a0:	eb1b 0509 	adds.w	r5, fp, r9
 80084a4:	eb4c 060a 	adc.w	r6, ip, sl
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	4619      	mov	r1, r3
 80084ae:	f04f 0200 	mov.w	r2, #0
 80084b2:	f04f 0300 	mov.w	r3, #0
 80084b6:	f04f 0400 	mov.w	r4, #0
 80084ba:	0094      	lsls	r4, r2, #2
 80084bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084c0:	008b      	lsls	r3, r1, #2
 80084c2:	461a      	mov	r2, r3
 80084c4:	4623      	mov	r3, r4
 80084c6:	4628      	mov	r0, r5
 80084c8:	4631      	mov	r1, r6
 80084ca:	f7f7 fe91 	bl	80001f0 <__aeabi_uldivmod>
 80084ce:	4603      	mov	r3, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	461a      	mov	r2, r3
 80084d4:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <UART_SetConfig+0x6f4>)
 80084d6:	fba3 1302 	umull	r1, r3, r3, r2
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	2164      	movs	r1, #100	; 0x64
 80084de:	fb01 f303 	mul.w	r3, r1, r3
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	3332      	adds	r3, #50	; 0x32
 80084e8:	4a09      	ldr	r2, [pc, #36]	; (8008510 <UART_SetConfig+0x6f4>)
 80084ea:	fba2 2303 	umull	r2, r3, r2, r3
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	f003 020f 	and.w	r2, r3, #15
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4442      	add	r2, r8
 80084fa:	609a      	str	r2, [r3, #8]
}
 80084fc:	e7ff      	b.n	80084fe <UART_SetConfig+0x6e2>
 80084fe:	bf00      	nop
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008508:	40011000 	.word	0x40011000
 800850c:	40011400 	.word	0x40011400
 8008510:	51eb851f 	.word	0x51eb851f

08008514 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d029      	beq.n	8008582 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800853a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800853e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008548:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800854e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008554:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800855a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008560:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008566:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800856c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008572:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	e034      	b.n	80085ec <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800858e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008598:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800859e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80085b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085b6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085c0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80085c6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80085cc:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80085d2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80085d8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b087      	sub	sp, #28
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d02e      	beq.n	8008672 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008620:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	3b01      	subs	r3, #1
 800862e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008630:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	3b01      	subs	r3, #1
 8008638:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800863a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	3b01      	subs	r3, #1
 8008642:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008644:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	3b01      	subs	r3, #1
 800864c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800864e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	3b01      	subs	r3, #1
 8008656:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008658:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	3b01      	subs	r3, #1
 8008660:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008662:	4313      	orrs	r3, r2
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	609a      	str	r2, [r3, #8]
 8008670:	e03b      	b.n	80086ea <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800867e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008682:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	3b01      	subs	r3, #1
 800868a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	3b01      	subs	r3, #1
 8008692:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008694:	4313      	orrs	r3, r2
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	4313      	orrs	r3, r2
 800869a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80086a8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80086b8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	3b01      	subs	r3, #1
 80086c0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80086c2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80086cc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80086d6:	4313      	orrs	r3, r2
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008714:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	3b01      	subs	r3, #1
 800871c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800871e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008726:	4313      	orrs	r3, r2
 8008728:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008730:	f7fa f9ca 	bl	8002ac8 <HAL_GetTick>
 8008734:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008736:	e010      	b.n	800875a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873e:	d00c      	beq.n	800875a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d007      	beq.n	8008756 <FMC_SDRAM_SendCommand+0x5e>
 8008746:	f7fa f9bf 	bl	8002ac8 <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	429a      	cmp	r2, r3
 8008754:	d201      	bcs.n	800875a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e006      	b.n	8008768 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b20      	cmp	r3, #32
 8008764:	d0e8      	beq.n	8008738 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	695a      	ldr	r2, [r3, #20]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	431a      	orrs	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f043 0201 	orr.w	r2, r3, #1
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f023 0201 	bic.w	r2, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	019b      	lsls	r3, r3, #6
 80087ee:	f043 0220 	orr.w	r2, r3, #32
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3301      	adds	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4a09      	ldr	r2, [pc, #36]	; (8008824 <USB_FlushTxFifo+0x48>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d901      	bls.n	8008808 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e006      	b.n	8008816 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b20      	cmp	r3, #32
 8008812:	d0f0      	beq.n	80087f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	00030d40 	.word	0x00030d40

08008828 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2210      	movs	r2, #16
 8008838:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a09      	ldr	r2, [pc, #36]	; (8008868 <USB_FlushRxFifo+0x40>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d901      	bls.n	800884c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e006      	b.n	800885a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f003 0310 	and.w	r3, r3, #16
 8008854:	2b10      	cmp	r3, #16
 8008856:	d0f0      	beq.n	800883a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	00030d40 	.word	0x00030d40

0800886c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800886c:	b480      	push	{r7}
 800886e:	b089      	sub	sp, #36	; 0x24
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008882:	88fb      	ldrh	r3, [r7, #6]
 8008884:	3303      	adds	r3, #3
 8008886:	089b      	lsrs	r3, r3, #2
 8008888:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800888a:	2300      	movs	r3, #0
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	e00b      	b.n	80088a8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	601a      	str	r2, [r3, #0]
    pDest++;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	3304      	adds	r3, #4
 80088a0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	3301      	adds	r3, #1
 80088a6:	61bb      	str	r3, [r7, #24]
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d3ef      	bcc.n	8008890 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80088b0:	69fb      	ldr	r3, [r7, #28]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3724      	adds	r7, #36	; 0x24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80088be:	b480      	push	{r7}
 80088c0:	b085      	sub	sp, #20
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4013      	ands	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088d6:	68fb      	ldr	r3, [r7, #12]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	f003 0301 	and.w	r3, r3, #1
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800891e:	f023 0303 	bic.w	r3, r3, #3
 8008922:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008938:	4313      	orrs	r3, r2
 800893a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d107      	bne.n	8008952 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008948:	461a      	mov	r2, r3
 800894a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800894e:	6053      	str	r3, [r2, #4]
 8008950:	e009      	b.n	8008966 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d106      	bne.n	8008966 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800895e:	461a      	mov	r2, r3
 8008960:	f241 7370 	movw	r3, #6000	; 0x1770
 8008964:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	b29b      	uxth	r3, r3
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008996:	b480      	push	{r7}
 8008998:	b087      	sub	sp, #28
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80089a6:	78fb      	ldrb	r3, [r7, #3]
 80089a8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	0c9b      	lsrs	r3, r3, #18
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <USB_HC_Halt+0x3a>
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d16c      	bne.n	8008aaa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ee:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d143      	bne.n	8008a84 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	0151      	lsls	r1, r2, #5
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	440a      	add	r2, r1
 8008a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a3a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	0151      	lsls	r1, r2, #5
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	440a      	add	r2, r1
 8008a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a5a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	617b      	str	r3, [r7, #20]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a68:	d81d      	bhi.n	8008aa6 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a80:	d0ec      	beq.n	8008a5c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a82:	e080      	b.n	8008b86 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008aa4:	e06f      	b.n	8008b86 <USB_HC_Halt+0x1f0>
          break;
 8008aa6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008aa8:	e06d      	b.n	8008b86 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	0151      	lsls	r1, r2, #5
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	440a      	add	r2, r1
 8008ac0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ac8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d143      	bne.n	8008b62 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008af8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	015a      	lsls	r2, r3, #5
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	0151      	lsls	r1, r2, #5
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	440a      	add	r2, r1
 8008b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b18:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b38:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b46:	d81d      	bhi.n	8008b84 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b5e:	d0ec      	beq.n	8008b3a <USB_HC_Halt+0x1a4>
 8008b60:	e011      	b.n	8008b86 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	0151      	lsls	r1, r2, #5
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	440a      	add	r2, r1
 8008b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	e000      	b.n	8008b86 <USB_HC_Halt+0x1f0>
          break;
 8008b84:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	371c      	adds	r7, #28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff fe07 	bl	80087b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008baa:	2110      	movs	r1, #16
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff fe15 	bl	80087dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fe38 	bl	8008828 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	613b      	str	r3, [r7, #16]
 8008bbc:	e01f      	b.n	8008bfe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bd4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bdc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008be4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	2b0f      	cmp	r3, #15
 8008c02:	d9dc      	bls.n	8008bbe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c04:	2300      	movs	r3, #0
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	e034      	b.n	8008c74 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c20:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c28:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c30:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3e:	461a      	mov	r2, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	3301      	adds	r3, #1
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c50:	d80c      	bhi.n	8008c6c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c68:	d0ec      	beq.n	8008c44 <USB_StopHost+0xb0>
 8008c6a:	e000      	b.n	8008c6e <USB_StopHost+0xda>
        break;
 8008c6c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	3301      	adds	r3, #1
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2b0f      	cmp	r3, #15
 8008c78:	d9c7      	bls.n	8008c0a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c80:	461a      	mov	r2, r3
 8008c82:	f04f 33ff 	mov.w	r3, #4294967295
 8008c86:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fd80 	bl	8008796 <USB_EnableGlobalInt>

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f804 	bl	8008cc4 <USBH_HandleSof>
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b0b      	cmp	r3, #11
 8008cd4:	d10a      	bne.n	8008cec <USBH_HandleSof+0x28>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	4798      	blx	r3
  }
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	f000 f8ae 	bl	8008e7c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008d20:	bf00      	nop
}
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008d38:	bf00      	nop
}
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	f000 f87e 	bl	8008e7c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 f902 	bl	8009fb4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	791b      	ldrb	r3, [r3, #4]
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f830 	bl	8008e1c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	795b      	ldrb	r3, [r3, #5]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f82a 	bl	8008e1c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4619      	mov	r1, r3
 8008de0:	f000 f84c 	bl	8008e7c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f000 f835 	bl	8008e7c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	2b0a      	cmp	r3, #10
 8008e2c:	d80d      	bhi.n	8008e4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	33e0      	adds	r3, #224	; 0xe0
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	33e0      	adds	r3, #224	; 0xe0
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	440b      	add	r3, r1
 8008e48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e5e:	f3ef 8305 	mrs	r3, IPSR
 8008e62:	607b      	str	r3, [r7, #4]
  return(result);
 8008e64:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bf14      	ite	ne
 8008e6a:	2301      	movne	r3, #1
 8008e6c:	2300      	moveq	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <osMessagePut+0x1e>
    ticks = 1;
 8008e96:	2301      	movs	r3, #1
 8008e98:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008e9a:	f7ff ffdd 	bl	8008e58 <inHandlerMode>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d018      	beq.n	8008ed6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008ea4:	f107 0210 	add.w	r2, r7, #16
 8008ea8:	f107 0108 	add.w	r1, r7, #8
 8008eac:	2300      	movs	r3, #0
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 f9a6 	bl	8009200 <xQueueGenericSendFromISR>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d001      	beq.n	8008ebe <osMessagePut+0x42>
      return osErrorOS;
 8008eba:	23ff      	movs	r3, #255	; 0xff
 8008ebc:	e018      	b.n	8008ef0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d014      	beq.n	8008eee <osMessagePut+0x72>
 8008ec4:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <osMessagePut+0x7c>)
 8008ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	e00b      	b.n	8008eee <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008ed6:	f107 0108 	add.w	r1, r7, #8
 8008eda:	2300      	movs	r3, #0
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 f894 	bl	800900c <xQueueGenericSend>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d001      	beq.n	8008eee <osMessagePut+0x72>
      return osErrorOS;
 8008eea:	23ff      	movs	r3, #255	; 0xff
 8008eec:	e000      	b.n	8008ef0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3718      	adds	r7, #24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	e000ed04 	.word	0xe000ed04

08008efc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	601a      	str	r2, [r3, #0]
}
 8008f38:	bf00      	nop
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5a:	d103      	bne.n	8008f64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	e00c      	b.n	8008f7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3308      	adds	r3, #8
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e002      	b.n	8008f72 <vListInsert+0x2e>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d2f6      	bcs.n	8008f6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	601a      	str	r2, [r3, #0]
}
 8008faa:	bf00      	nop
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b085      	sub	sp, #20
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	6892      	ldr	r2, [r2, #8]
 8008fcc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	6852      	ldr	r2, [r2, #4]
 8008fd6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d103      	bne.n	8008fea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689a      	ldr	r2, [r3, #8]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	1e5a      	subs	r2, r3, #1
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
	...

0800900c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08e      	sub	sp, #56	; 0x38
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800901a:	2300      	movs	r3, #0
 800901c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	2b00      	cmp	r3, #0
 8009026:	d109      	bne.n	800903c <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
 800903a:	e7fe      	b.n	800903a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d103      	bne.n	800904a <xQueueGenericSend+0x3e>
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <xQueueGenericSend+0x42>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <xQueueGenericSend+0x44>
 800904e:	2300      	movs	r3, #0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d109      	bne.n	8009068 <xQueueGenericSend+0x5c>
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	627b      	str	r3, [r7, #36]	; 0x24
 8009066:	e7fe      	b.n	8009066 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2b02      	cmp	r3, #2
 800906c:	d103      	bne.n	8009076 <xQueueGenericSend+0x6a>
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009072:	2b01      	cmp	r3, #1
 8009074:	d101      	bne.n	800907a <xQueueGenericSend+0x6e>
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <xQueueGenericSend+0x70>
 800907a:	2300      	movs	r3, #0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d109      	bne.n	8009094 <xQueueGenericSend+0x88>
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	623b      	str	r3, [r7, #32]
 8009092:	e7fe      	b.n	8009092 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009094:	f000 fd26 	bl	8009ae4 <xTaskGetSchedulerState>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <xQueueGenericSend+0x98>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <xQueueGenericSend+0x9c>
 80090a4:	2301      	movs	r3, #1
 80090a6:	e000      	b.n	80090aa <xQueueGenericSend+0x9e>
 80090a8:	2300      	movs	r3, #0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d109      	bne.n	80090c2 <xQueueGenericSend+0xb6>
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	61fb      	str	r3, [r7, #28]
 80090c0:	e7fe      	b.n	80090c0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090c2:	f000 fe31 	bl	8009d28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d302      	bcc.n	80090d8 <xQueueGenericSend+0xcc>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d129      	bne.n	800912c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090de:	f000 f923 	bl	8009328 <prvCopyDataToQueue>
 80090e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d010      	beq.n	800910e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	3324      	adds	r3, #36	; 0x24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fbf3 	bl	80098dc <xTaskRemoveFromEventList>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d013      	beq.n	8009124 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090fc:	4b3f      	ldr	r3, [pc, #252]	; (80091fc <xQueueGenericSend+0x1f0>)
 80090fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	e00a      	b.n	8009124 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d007      	beq.n	8009124 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009114:	4b39      	ldr	r3, [pc, #228]	; (80091fc <xQueueGenericSend+0x1f0>)
 8009116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009124:	f000 fe2e 	bl	8009d84 <vPortExitCritical>
				return pdPASS;
 8009128:	2301      	movs	r3, #1
 800912a:	e063      	b.n	80091f4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d103      	bne.n	800913a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009132:	f000 fe27 	bl	8009d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009136:	2300      	movs	r3, #0
 8009138:	e05c      	b.n	80091f4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800913a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009140:	f107 0314 	add.w	r3, r7, #20
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fc2b 	bl	80099a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800914a:	2301      	movs	r3, #1
 800914c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800914e:	f000 fe19 	bl	8009d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009152:	f000 f9bd 	bl	80094d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009156:	f000 fde7 	bl	8009d28 <vPortEnterCritical>
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009160:	b25b      	sxtb	r3, r3
 8009162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009166:	d103      	bne.n	8009170 <xQueueGenericSend+0x164>
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009176:	b25b      	sxtb	r3, r3
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d103      	bne.n	8009186 <xQueueGenericSend+0x17a>
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009186:	f000 fdfd 	bl	8009d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800918a:	1d3a      	adds	r2, r7, #4
 800918c:	f107 0314 	add.w	r3, r7, #20
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fc1a 	bl	80099cc <xTaskCheckForTimeOut>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d124      	bne.n	80091e8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800919e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a0:	f000 f97e 	bl	80094a0 <prvIsQueueFull>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d018      	beq.n	80091dc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	3310      	adds	r3, #16
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fb6e 	bl	8009894 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ba:	f000 f91f 	bl	80093fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091be:	f000 f995 	bl	80094ec <xTaskResumeAll>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f47f af7c 	bne.w	80090c2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80091ca:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <xQueueGenericSend+0x1f0>)
 80091cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	e772      	b.n	80090c2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091de:	f000 f90d 	bl	80093fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091e2:	f000 f983 	bl	80094ec <xTaskResumeAll>
 80091e6:	e76c      	b.n	80090c2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ea:	f000 f907 	bl	80093fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091ee:	f000 f97d 	bl	80094ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3738      	adds	r7, #56	; 0x38
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	e000ed04 	.word	0xe000ed04

08009200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08e      	sub	sp, #56	; 0x38
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	2b00      	cmp	r3, #0
 8009216:	d109      	bne.n	800922c <xQueueGenericSendFromISR+0x2c>
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
 800922a:	e7fe      	b.n	800922a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d103      	bne.n	800923a <xQueueGenericSendFromISR+0x3a>
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <xQueueGenericSendFromISR+0x3e>
 800923a:	2301      	movs	r3, #1
 800923c:	e000      	b.n	8009240 <xQueueGenericSendFromISR+0x40>
 800923e:	2300      	movs	r3, #0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <xQueueGenericSendFromISR+0x58>
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	623b      	str	r3, [r7, #32]
 8009256:	e7fe      	b.n	8009256 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d103      	bne.n	8009266 <xQueueGenericSendFromISR+0x66>
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <xQueueGenericSendFromISR+0x6a>
 8009266:	2301      	movs	r3, #1
 8009268:	e000      	b.n	800926c <xQueueGenericSendFromISR+0x6c>
 800926a:	2300      	movs	r3, #0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d109      	bne.n	8009284 <xQueueGenericSendFromISR+0x84>
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	61fb      	str	r3, [r7, #28]
 8009282:	e7fe      	b.n	8009282 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009284:	f000 fe00 	bl	8009e88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009288:	f3ef 8211 	mrs	r2, BASEPRI
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	61ba      	str	r2, [r7, #24]
 800929e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d302      	bcc.n	80092b6 <xQueueGenericSendFromISR+0xb6>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d12c      	bne.n	8009310 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092c6:	f000 f82f 	bl	8009328 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d112      	bne.n	80092fa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d016      	beq.n	800930a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	3324      	adds	r3, #36	; 0x24
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fafb 	bl	80098dc <xTaskRemoveFromEventList>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00e      	beq.n	800930a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00b      	beq.n	800930a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	e007      	b.n	800930a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092fe:	3301      	adds	r3, #1
 8009300:	b2db      	uxtb	r3, r3
 8009302:	b25a      	sxtb	r2, r3
 8009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800930a:	2301      	movs	r3, #1
 800930c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800930e:	e001      	b.n	8009314 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009310:	2300      	movs	r3, #0
 8009312:	637b      	str	r3, [r7, #52]	; 0x34
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009320:	4618      	mov	r0, r3
 8009322:	3738      	adds	r7, #56	; 0x38
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009334:	2300      	movs	r3, #0
 8009336:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10d      	bne.n	8009362 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d14d      	bne.n	80093ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fbe4 	bl	8009b20 <xTaskPriorityDisinherit>
 8009358:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	609a      	str	r2, [r3, #8]
 8009360:	e043      	b.n	80093ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d119      	bne.n	800939c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6858      	ldr	r0, [r3, #4]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009370:	461a      	mov	r2, r3
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	f000 fe8a 	bl	800a08c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009380:	441a      	add	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	429a      	cmp	r2, r3
 8009390:	d32b      	bcc.n	80093ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	e026      	b.n	80093ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68d8      	ldr	r0, [r3, #12]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	461a      	mov	r2, r3
 80093a6:	68b9      	ldr	r1, [r7, #8]
 80093a8:	f000 fe70 	bl	800a08c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	68da      	ldr	r2, [r3, #12]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b4:	425b      	negs	r3, r3
 80093b6:	441a      	add	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d207      	bcs.n	80093d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d0:	425b      	negs	r3, r3
 80093d2:	441a      	add	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d105      	bne.n	80093ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80093f2:	697b      	ldr	r3, [r7, #20]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009404:	f000 fc90 	bl	8009d28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800940e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009410:	e011      	b.n	8009436 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	2b00      	cmp	r3, #0
 8009418:	d012      	beq.n	8009440 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3324      	adds	r3, #36	; 0x24
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fa5c 	bl	80098dc <xTaskRemoveFromEventList>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800942a:	f000 fb2f 	bl	8009a8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	3b01      	subs	r3, #1
 8009432:	b2db      	uxtb	r3, r3
 8009434:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800943a:	2b00      	cmp	r3, #0
 800943c:	dce9      	bgt.n	8009412 <prvUnlockQueue+0x16>
 800943e:	e000      	b.n	8009442 <prvUnlockQueue+0x46>
					break;
 8009440:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	22ff      	movs	r2, #255	; 0xff
 8009446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800944a:	f000 fc9b 	bl	8009d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800944e:	f000 fc6b 	bl	8009d28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009458:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800945a:	e011      	b.n	8009480 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d012      	beq.n	800948a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3310      	adds	r3, #16
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fa37 	bl	80098dc <xTaskRemoveFromEventList>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009474:	f000 fb0a 	bl	8009a8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	3b01      	subs	r3, #1
 800947c:	b2db      	uxtb	r3, r3
 800947e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009484:	2b00      	cmp	r3, #0
 8009486:	dce9      	bgt.n	800945c <prvUnlockQueue+0x60>
 8009488:	e000      	b.n	800948c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800948a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	22ff      	movs	r2, #255	; 0xff
 8009490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009494:	f000 fc76 	bl	8009d84 <vPortExitCritical>
}
 8009498:	bf00      	nop
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094a8:	f000 fc3e 	bl	8009d28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d102      	bne.n	80094be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094b8:	2301      	movs	r3, #1
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	e001      	b.n	80094c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094be:	2300      	movs	r3, #0
 80094c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094c2:	f000 fc5f 	bl	8009d84 <vPortExitCritical>

	return xReturn;
 80094c6:	68fb      	ldr	r3, [r7, #12]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094d0:	b480      	push	{r7}
 80094d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80094d4:	4b04      	ldr	r3, [pc, #16]	; (80094e8 <vTaskSuspendAll+0x18>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3301      	adds	r3, #1
 80094da:	4a03      	ldr	r2, [pc, #12]	; (80094e8 <vTaskSuspendAll+0x18>)
 80094dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80094de:	bf00      	nop
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	20000308 	.word	0x20000308

080094ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094fa:	4b41      	ldr	r3, [pc, #260]	; (8009600 <xTaskResumeAll+0x114>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <xTaskResumeAll+0x2a>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	603b      	str	r3, [r7, #0]
 8009514:	e7fe      	b.n	8009514 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009516:	f000 fc07 	bl	8009d28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800951a:	4b39      	ldr	r3, [pc, #228]	; (8009600 <xTaskResumeAll+0x114>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3b01      	subs	r3, #1
 8009520:	4a37      	ldr	r2, [pc, #220]	; (8009600 <xTaskResumeAll+0x114>)
 8009522:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009524:	4b36      	ldr	r3, [pc, #216]	; (8009600 <xTaskResumeAll+0x114>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d161      	bne.n	80095f0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800952c:	4b35      	ldr	r3, [pc, #212]	; (8009604 <xTaskResumeAll+0x118>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d05d      	beq.n	80095f0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009534:	e02e      	b.n	8009594 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009536:	4b34      	ldr	r3, [pc, #208]	; (8009608 <xTaskResumeAll+0x11c>)
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3318      	adds	r3, #24
 8009542:	4618      	mov	r0, r3
 8009544:	f7ff fd37 	bl	8008fb6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	3304      	adds	r3, #4
 800954c:	4618      	mov	r0, r3
 800954e:	f7ff fd32 	bl	8008fb6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009556:	2201      	movs	r2, #1
 8009558:	409a      	lsls	r2, r3
 800955a:	4b2c      	ldr	r3, [pc, #176]	; (800960c <xTaskResumeAll+0x120>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4313      	orrs	r3, r2
 8009560:	4a2a      	ldr	r2, [pc, #168]	; (800960c <xTaskResumeAll+0x120>)
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4a27      	ldr	r2, [pc, #156]	; (8009610 <xTaskResumeAll+0x124>)
 8009572:	441a      	add	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7ff fcbe 	bl	8008efc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009584:	4b23      	ldr	r3, [pc, #140]	; (8009614 <xTaskResumeAll+0x128>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	429a      	cmp	r2, r3
 800958c:	d302      	bcc.n	8009594 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800958e:	4b22      	ldr	r3, [pc, #136]	; (8009618 <xTaskResumeAll+0x12c>)
 8009590:	2201      	movs	r2, #1
 8009592:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009594:	4b1c      	ldr	r3, [pc, #112]	; (8009608 <xTaskResumeAll+0x11c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1cc      	bne.n	8009536 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095a2:	f000 fa7f 	bl	8009aa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80095a6:	4b1d      	ldr	r3, [pc, #116]	; (800961c <xTaskResumeAll+0x130>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d010      	beq.n	80095d4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095b2:	f000 f837 	bl	8009624 <xTaskIncrementTick>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80095bc:	4b16      	ldr	r3, [pc, #88]	; (8009618 <xTaskResumeAll+0x12c>)
 80095be:	2201      	movs	r2, #1
 80095c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f1      	bne.n	80095b2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80095ce:	4b13      	ldr	r3, [pc, #76]	; (800961c <xTaskResumeAll+0x130>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095d4:	4b10      	ldr	r3, [pc, #64]	; (8009618 <xTaskResumeAll+0x12c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d009      	beq.n	80095f0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095dc:	2301      	movs	r3, #1
 80095de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095e0:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <xTaskResumeAll+0x134>)
 80095e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095f0:	f000 fbc8 	bl	8009d84 <vPortExitCritical>

	return xAlreadyYielded;
 80095f4:	68bb      	ldr	r3, [r7, #8]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000308 	.word	0x20000308
 8009604:	200002e8 	.word	0x200002e8
 8009608:	200002c0 	.word	0x200002c0
 800960c:	200002f0 	.word	0x200002f0
 8009610:	2000022c 	.word	0x2000022c
 8009614:	20000228 	.word	0x20000228
 8009618:	200002fc 	.word	0x200002fc
 800961c:	200002f8 	.word	0x200002f8
 8009620:	e000ed04 	.word	0xe000ed04

08009624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800962a:	2300      	movs	r3, #0
 800962c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800962e:	4b4e      	ldr	r3, [pc, #312]	; (8009768 <xTaskIncrementTick+0x144>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	f040 8087 	bne.w	8009746 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009638:	4b4c      	ldr	r3, [pc, #304]	; (800976c <xTaskIncrementTick+0x148>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3301      	adds	r3, #1
 800963e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009640:	4a4a      	ldr	r2, [pc, #296]	; (800976c <xTaskIncrementTick+0x148>)
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d11f      	bne.n	800968c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800964c:	4b48      	ldr	r3, [pc, #288]	; (8009770 <xTaskIncrementTick+0x14c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <xTaskIncrementTick+0x46>
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	e7fe      	b.n	8009668 <xTaskIncrementTick+0x44>
 800966a:	4b41      	ldr	r3, [pc, #260]	; (8009770 <xTaskIncrementTick+0x14c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	4b40      	ldr	r3, [pc, #256]	; (8009774 <xTaskIncrementTick+0x150>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a3e      	ldr	r2, [pc, #248]	; (8009770 <xTaskIncrementTick+0x14c>)
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	4a3e      	ldr	r2, [pc, #248]	; (8009774 <xTaskIncrementTick+0x150>)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	4b3e      	ldr	r3, [pc, #248]	; (8009778 <xTaskIncrementTick+0x154>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	4a3c      	ldr	r2, [pc, #240]	; (8009778 <xTaskIncrementTick+0x154>)
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	f000 fa0c 	bl	8009aa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800968c:	4b3b      	ldr	r3, [pc, #236]	; (800977c <xTaskIncrementTick+0x158>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	429a      	cmp	r2, r3
 8009694:	d348      	bcc.n	8009728 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009696:	4b36      	ldr	r3, [pc, #216]	; (8009770 <xTaskIncrementTick+0x14c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d104      	bne.n	80096aa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096a0:	4b36      	ldr	r3, [pc, #216]	; (800977c <xTaskIncrementTick+0x158>)
 80096a2:	f04f 32ff 	mov.w	r2, #4294967295
 80096a6:	601a      	str	r2, [r3, #0]
					break;
 80096a8:	e03e      	b.n	8009728 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096aa:	4b31      	ldr	r3, [pc, #196]	; (8009770 <xTaskIncrementTick+0x14c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d203      	bcs.n	80096ca <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096c2:	4a2e      	ldr	r2, [pc, #184]	; (800977c <xTaskIncrementTick+0x158>)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096c8:	e02e      	b.n	8009728 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	3304      	adds	r3, #4
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fc71 	bl	8008fb6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	3318      	adds	r3, #24
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff fc68 	bl	8008fb6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	2201      	movs	r2, #1
 80096ec:	409a      	lsls	r2, r3
 80096ee:	4b24      	ldr	r3, [pc, #144]	; (8009780 <xTaskIncrementTick+0x15c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	4a22      	ldr	r2, [pc, #136]	; (8009780 <xTaskIncrementTick+0x15c>)
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4a1f      	ldr	r2, [pc, #124]	; (8009784 <xTaskIncrementTick+0x160>)
 8009706:	441a      	add	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3304      	adds	r3, #4
 800970c:	4619      	mov	r1, r3
 800970e:	4610      	mov	r0, r2
 8009710:	f7ff fbf4 	bl	8008efc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009718:	4b1b      	ldr	r3, [pc, #108]	; (8009788 <xTaskIncrementTick+0x164>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971e:	429a      	cmp	r2, r3
 8009720:	d3b9      	bcc.n	8009696 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009722:	2301      	movs	r3, #1
 8009724:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009726:	e7b6      	b.n	8009696 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009728:	4b17      	ldr	r3, [pc, #92]	; (8009788 <xTaskIncrementTick+0x164>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972e:	4915      	ldr	r1, [pc, #84]	; (8009784 <xTaskIncrementTick+0x160>)
 8009730:	4613      	mov	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	440b      	add	r3, r1
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d907      	bls.n	8009750 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009740:	2301      	movs	r3, #1
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	e004      	b.n	8009750 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009746:	4b11      	ldr	r3, [pc, #68]	; (800978c <xTaskIncrementTick+0x168>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3301      	adds	r3, #1
 800974c:	4a0f      	ldr	r2, [pc, #60]	; (800978c <xTaskIncrementTick+0x168>)
 800974e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009750:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <xTaskIncrementTick+0x16c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009758:	2301      	movs	r3, #1
 800975a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800975c:	697b      	ldr	r3, [r7, #20]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000308 	.word	0x20000308
 800976c:	200002ec 	.word	0x200002ec
 8009770:	200002b8 	.word	0x200002b8
 8009774:	200002bc 	.word	0x200002bc
 8009778:	20000300 	.word	0x20000300
 800977c:	20000304 	.word	0x20000304
 8009780:	200002f0 	.word	0x200002f0
 8009784:	2000022c 	.word	0x2000022c
 8009788:	20000228 	.word	0x20000228
 800978c:	200002f8 	.word	0x200002f8
 8009790:	200002fc 	.word	0x200002fc

08009794 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800979a:	4b39      	ldr	r3, [pc, #228]	; (8009880 <vTaskSwitchContext+0xec>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097a2:	4b38      	ldr	r3, [pc, #224]	; (8009884 <vTaskSwitchContext+0xf0>)
 80097a4:	2201      	movs	r2, #1
 80097a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097a8:	e065      	b.n	8009876 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80097aa:	4b36      	ldr	r3, [pc, #216]	; (8009884 <vTaskSwitchContext+0xf0>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80097b0:	4b35      	ldr	r3, [pc, #212]	; (8009888 <vTaskSwitchContext+0xf4>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b6:	61fb      	str	r3, [r7, #28]
 80097b8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d111      	bne.n	80097ec <vTaskSwitchContext+0x58>
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	3304      	adds	r3, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d10b      	bne.n	80097ec <vTaskSwitchContext+0x58>
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	3308      	adds	r3, #8
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d105      	bne.n	80097ec <vTaskSwitchContext+0x58>
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	330c      	adds	r3, #12
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d008      	beq.n	80097fe <vTaskSwitchContext+0x6a>
 80097ec:	4b26      	ldr	r3, [pc, #152]	; (8009888 <vTaskSwitchContext+0xf4>)
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	4b25      	ldr	r3, [pc, #148]	; (8009888 <vTaskSwitchContext+0xf4>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3334      	adds	r3, #52	; 0x34
 80097f6:	4619      	mov	r1, r3
 80097f8:	4610      	mov	r0, r2
 80097fa:	f7f6 fff5 	bl	80007e8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097fe:	4b23      	ldr	r3, [pc, #140]	; (800988c <vTaskSwitchContext+0xf8>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	fab3 f383 	clz	r3, r3
 800980a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	f1c3 031f 	rsb	r3, r3, #31
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	491e      	ldr	r1, [pc, #120]	; (8009890 <vTaskSwitchContext+0xfc>)
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d109      	bne.n	800983c <vTaskSwitchContext+0xa8>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	607b      	str	r3, [r7, #4]
 800983a:	e7fe      	b.n	800983a <vTaskSwitchContext+0xa6>
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4a12      	ldr	r2, [pc, #72]	; (8009890 <vTaskSwitchContext+0xfc>)
 8009848:	4413      	add	r3, r2
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	605a      	str	r2, [r3, #4]
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3308      	adds	r3, #8
 800985e:	429a      	cmp	r2, r3
 8009860:	d104      	bne.n	800986c <vTaskSwitchContext+0xd8>
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	605a      	str	r2, [r3, #4]
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	4a05      	ldr	r2, [pc, #20]	; (8009888 <vTaskSwitchContext+0xf4>)
 8009874:	6013      	str	r3, [r2, #0]
}
 8009876:	bf00      	nop
 8009878:	3720      	adds	r7, #32
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000308 	.word	0x20000308
 8009884:	200002fc 	.word	0x200002fc
 8009888:	20000228 	.word	0x20000228
 800988c:	200002f0 	.word	0x200002f0
 8009890:	2000022c 	.word	0x2000022c

08009894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d109      	bne.n	80098b8 <vTaskPlaceOnEventList+0x24>
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	e7fe      	b.n	80098b6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098b8:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <vTaskPlaceOnEventList+0x44>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3318      	adds	r3, #24
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff fb3f 	bl	8008f44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098c6:	2101      	movs	r1, #1
 80098c8:	6838      	ldr	r0, [r7, #0]
 80098ca:	f000 f9ad 	bl	8009c28 <prvAddCurrentTaskToDelayedList>
}
 80098ce:	bf00      	nop
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000228 	.word	0x20000228

080098dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d109      	bne.n	8009906 <xTaskRemoveFromEventList+0x2a>
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	e7fe      	b.n	8009904 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	3318      	adds	r3, #24
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff fb53 	bl	8008fb6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009910:	4b1d      	ldr	r3, [pc, #116]	; (8009988 <xTaskRemoveFromEventList+0xac>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d11c      	bne.n	8009952 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	3304      	adds	r3, #4
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff fb4a 	bl	8008fb6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009926:	2201      	movs	r2, #1
 8009928:	409a      	lsls	r2, r3
 800992a:	4b18      	ldr	r3, [pc, #96]	; (800998c <xTaskRemoveFromEventList+0xb0>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4313      	orrs	r3, r2
 8009930:	4a16      	ldr	r2, [pc, #88]	; (800998c <xTaskRemoveFromEventList+0xb0>)
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4a13      	ldr	r2, [pc, #76]	; (8009990 <xTaskRemoveFromEventList+0xb4>)
 8009942:	441a      	add	r2, r3
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3304      	adds	r3, #4
 8009948:	4619      	mov	r1, r3
 800994a:	4610      	mov	r0, r2
 800994c:	f7ff fad6 	bl	8008efc <vListInsertEnd>
 8009950:	e005      	b.n	800995e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	3318      	adds	r3, #24
 8009956:	4619      	mov	r1, r3
 8009958:	480e      	ldr	r0, [pc, #56]	; (8009994 <xTaskRemoveFromEventList+0xb8>)
 800995a:	f7ff facf 	bl	8008efc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009962:	4b0d      	ldr	r3, [pc, #52]	; (8009998 <xTaskRemoveFromEventList+0xbc>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	429a      	cmp	r2, r3
 800996a:	d905      	bls.n	8009978 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800996c:	2301      	movs	r3, #1
 800996e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009970:	4b0a      	ldr	r3, [pc, #40]	; (800999c <xTaskRemoveFromEventList+0xc0>)
 8009972:	2201      	movs	r2, #1
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	e001      	b.n	800997c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800997c:	697b      	ldr	r3, [r7, #20]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20000308 	.word	0x20000308
 800998c:	200002f0 	.word	0x200002f0
 8009990:	2000022c 	.word	0x2000022c
 8009994:	200002c0 	.word	0x200002c0
 8009998:	20000228 	.word	0x20000228
 800999c:	200002fc 	.word	0x200002fc

080099a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099a8:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <vTaskInternalSetTimeOutState+0x24>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099b0:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <vTaskInternalSetTimeOutState+0x28>)
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	605a      	str	r2, [r3, #4]
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	20000300 	.word	0x20000300
 80099c8:	200002ec 	.word	0x200002ec

080099cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d109      	bne.n	80099f0 <xTaskCheckForTimeOut+0x24>
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	e7fe      	b.n	80099ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d109      	bne.n	8009a0a <xTaskCheckForTimeOut+0x3e>
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	60fb      	str	r3, [r7, #12]
 8009a08:	e7fe      	b.n	8009a08 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009a0a:	f000 f98d 	bl	8009d28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a0e:	4b1d      	ldr	r3, [pc, #116]	; (8009a84 <xTaskCheckForTimeOut+0xb8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	69ba      	ldr	r2, [r7, #24]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a26:	d102      	bne.n	8009a2e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61fb      	str	r3, [r7, #28]
 8009a2c:	e023      	b.n	8009a76 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <xTaskCheckForTimeOut+0xbc>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d007      	beq.n	8009a4a <xTaskCheckForTimeOut+0x7e>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d302      	bcc.n	8009a4a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	61fb      	str	r3, [r7, #28]
 8009a48:	e015      	b.n	8009a76 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d20b      	bcs.n	8009a6c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7ff ff9d 	bl	80099a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	61fb      	str	r3, [r7, #28]
 8009a6a:	e004      	b.n	8009a76 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a72:	2301      	movs	r3, #1
 8009a74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a76:	f000 f985 	bl	8009d84 <vPortExitCritical>

	return xReturn;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3720      	adds	r7, #32
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	200002ec 	.word	0x200002ec
 8009a88:	20000300 	.word	0x20000300

08009a8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a90:	4b03      	ldr	r3, [pc, #12]	; (8009aa0 <vTaskMissedYield+0x14>)
 8009a92:	2201      	movs	r2, #1
 8009a94:	601a      	str	r2, [r3, #0]
}
 8009a96:	bf00      	nop
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	200002fc 	.word	0x200002fc

08009aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <prvResetNextTaskUnblockTime+0x38>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d104      	bne.n	8009abe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ab4:	4b0a      	ldr	r3, [pc, #40]	; (8009ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8009ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009abc:	e008      	b.n	8009ad0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009abe:	4b07      	ldr	r3, [pc, #28]	; (8009adc <prvResetNextTaskUnblockTime+0x38>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	4a04      	ldr	r2, [pc, #16]	; (8009ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8009ace:	6013      	str	r3, [r2, #0]
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	200002b8 	.word	0x200002b8
 8009ae0:	20000304 	.word	0x20000304

08009ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009aea:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <xTaskGetSchedulerState+0x34>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d102      	bne.n	8009af8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009af2:	2301      	movs	r3, #1
 8009af4:	607b      	str	r3, [r7, #4]
 8009af6:	e008      	b.n	8009b0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009af8:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <xTaskGetSchedulerState+0x38>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d102      	bne.n	8009b06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b00:	2302      	movs	r3, #2
 8009b02:	607b      	str	r3, [r7, #4]
 8009b04:	e001      	b.n	8009b0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b06:	2300      	movs	r3, #0
 8009b08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b0a:	687b      	ldr	r3, [r7, #4]
	}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	200002f4 	.word	0x200002f4
 8009b1c:	20000308 	.word	0x20000308

08009b20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d06c      	beq.n	8009c10 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b36:	4b39      	ldr	r3, [pc, #228]	; (8009c1c <xTaskPriorityDisinherit+0xfc>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d009      	beq.n	8009b54 <xTaskPriorityDisinherit+0x34>
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e7fe      	b.n	8009b52 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d109      	bne.n	8009b70 <xTaskPriorityDisinherit+0x50>
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	60bb      	str	r3, [r7, #8]
 8009b6e:	e7fe      	b.n	8009b6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b74:	1e5a      	subs	r2, r3, #1
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d044      	beq.n	8009c10 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d140      	bne.n	8009c10 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	3304      	adds	r3, #4
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7ff fa0f 	bl	8008fb6 <uxListRemove>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d115      	bne.n	8009bca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba2:	491f      	ldr	r1, [pc, #124]	; (8009c20 <xTaskPriorityDisinherit+0x100>)
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <xTaskPriorityDisinherit+0xaa>
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb8:	2201      	movs	r2, #1
 8009bba:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbe:	43da      	mvns	r2, r3
 8009bc0:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	4a17      	ldr	r2, [pc, #92]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009bc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	f1c3 0207 	rsb	r2, r3, #7
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	2201      	movs	r2, #1
 8009be4:	409a      	lsls	r2, r3
 8009be6:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	4a0d      	ldr	r2, [pc, #52]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4a08      	ldr	r2, [pc, #32]	; (8009c20 <xTaskPriorityDisinherit+0x100>)
 8009bfe:	441a      	add	r2, r3
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	3304      	adds	r3, #4
 8009c04:	4619      	mov	r1, r3
 8009c06:	4610      	mov	r0, r2
 8009c08:	f7ff f978 	bl	8008efc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c10:	697b      	ldr	r3, [r7, #20]
	}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000228 	.word	0x20000228
 8009c20:	2000022c 	.word	0x2000022c
 8009c24:	200002f0 	.word	0x200002f0

08009c28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c32:	4b29      	ldr	r3, [pc, #164]	; (8009cd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c38:	4b28      	ldr	r3, [pc, #160]	; (8009cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7ff f9b9 	bl	8008fb6 <uxListRemove>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10b      	bne.n	8009c62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009c4a:	4b24      	ldr	r3, [pc, #144]	; (8009cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	2201      	movs	r2, #1
 8009c52:	fa02 f303 	lsl.w	r3, r2, r3
 8009c56:	43da      	mvns	r2, r3
 8009c58:	4b21      	ldr	r3, [pc, #132]	; (8009ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	4a20      	ldr	r2, [pc, #128]	; (8009ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c68:	d10a      	bne.n	8009c80 <prvAddCurrentTaskToDelayedList+0x58>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d007      	beq.n	8009c80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c70:	4b1a      	ldr	r3, [pc, #104]	; (8009cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3304      	adds	r3, #4
 8009c76:	4619      	mov	r1, r3
 8009c78:	481a      	ldr	r0, [pc, #104]	; (8009ce4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c7a:	f7ff f93f 	bl	8008efc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c7e:	e026      	b.n	8009cce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4413      	add	r3, r2
 8009c86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c88:	4b14      	ldr	r3, [pc, #80]	; (8009cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d209      	bcs.n	8009cac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c98:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	f7ff f94d 	bl	8008f44 <vListInsert>
}
 8009caa:	e010      	b.n	8009cce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cac:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <prvAddCurrentTaskToDelayedList+0xc4>)
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4610      	mov	r0, r2
 8009cba:	f7ff f943 	bl	8008f44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009cbe:	4b0c      	ldr	r3, [pc, #48]	; (8009cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d202      	bcs.n	8009cce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009cc8:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	6013      	str	r3, [r2, #0]
}
 8009cce:	bf00      	nop
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	200002ec 	.word	0x200002ec
 8009cdc:	20000228 	.word	0x20000228
 8009ce0:	200002f0 	.word	0x200002f0
 8009ce4:	200002d4 	.word	0x200002d4
 8009ce8:	200002bc 	.word	0x200002bc
 8009cec:	200002b8 	.word	0x200002b8
 8009cf0:	20000304 	.word	0x20000304
	...

08009d00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d00:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <pxCurrentTCBConst2>)
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	6808      	ldr	r0, [r1, #0]
 8009d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0a:	f380 8809 	msr	PSP, r0
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f04f 0000 	mov.w	r0, #0
 8009d16:	f380 8811 	msr	BASEPRI, r0
 8009d1a:	4770      	bx	lr
 8009d1c:	f3af 8000 	nop.w

08009d20 <pxCurrentTCBConst2>:
 8009d20:	20000228 	.word	0x20000228
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop

08009d28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d40:	4b0e      	ldr	r3, [pc, #56]	; (8009d7c <vPortEnterCritical+0x54>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3301      	adds	r3, #1
 8009d46:	4a0d      	ldr	r2, [pc, #52]	; (8009d7c <vPortEnterCritical+0x54>)
 8009d48:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d4a:	4b0c      	ldr	r3, [pc, #48]	; (8009d7c <vPortEnterCritical+0x54>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d10e      	bne.n	8009d70 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d52:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <vPortEnterCritical+0x58>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d009      	beq.n	8009d70 <vPortEnterCritical+0x48>
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	603b      	str	r3, [r7, #0]
 8009d6e:	e7fe      	b.n	8009d6e <vPortEnterCritical+0x46>
	}
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	2000005c 	.word	0x2000005c
 8009d80:	e000ed04 	.word	0xe000ed04

08009d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <vPortExitCritical+0x4c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <vPortExitCritical+0x22>
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	607b      	str	r3, [r7, #4]
 8009da4:	e7fe      	b.n	8009da4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009da6:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <vPortExitCritical+0x4c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	4a08      	ldr	r2, [pc, #32]	; (8009dd0 <vPortExitCritical+0x4c>)
 8009dae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009db0:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <vPortExitCritical+0x4c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d104      	bne.n	8009dc2 <vPortExitCritical+0x3e>
 8009db8:	2300      	movs	r3, #0
 8009dba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dc2:	bf00      	nop
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	2000005c 	.word	0x2000005c
	...

08009de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009de0:	f3ef 8009 	mrs	r0, PSP
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <pxCurrentTCBConst>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	f01e 0f10 	tst.w	lr, #16
 8009df0:	bf08      	it	eq
 8009df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfa:	6010      	str	r0, [r2, #0]
 8009dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e04:	f380 8811 	msr	BASEPRI, r0
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f7ff fcc0 	bl	8009794 <vTaskSwitchContext>
 8009e14:	f04f 0000 	mov.w	r0, #0
 8009e18:	f380 8811 	msr	BASEPRI, r0
 8009e1c:	bc09      	pop	{r0, r3}
 8009e1e:	6819      	ldr	r1, [r3, #0]
 8009e20:	6808      	ldr	r0, [r1, #0]
 8009e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e26:	f01e 0f10 	tst.w	lr, #16
 8009e2a:	bf08      	it	eq
 8009e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e30:	f380 8809 	msr	PSP, r0
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	f3af 8000 	nop.w

08009e40 <pxCurrentTCBConst>:
 8009e40:	20000228 	.word	0x20000228
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop

08009e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e60:	f7ff fbe0 	bl	8009624 <xTaskIncrementTick>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e6a:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <SysTick_Handler+0x3c>)
 8009e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	2300      	movs	r3, #0
 8009e74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e7c:	bf00      	nop
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e8e:	f3ef 8305 	mrs	r3, IPSR
 8009e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b0f      	cmp	r3, #15
 8009e98:	d913      	bls.n	8009ec2 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e9a:	4a16      	ldr	r2, [pc, #88]	; (8009ef4 <vPortValidateInterruptPriority+0x6c>)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ea4:	4b14      	ldr	r3, [pc, #80]	; (8009ef8 <vPortValidateInterruptPriority+0x70>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	7afa      	ldrb	r2, [r7, #11]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d209      	bcs.n	8009ec2 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	607b      	str	r3, [r7, #4]
 8009ec0:	e7fe      	b.n	8009ec0 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ec2:	4b0e      	ldr	r3, [pc, #56]	; (8009efc <vPortValidateInterruptPriority+0x74>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009eca:	4b0d      	ldr	r3, [pc, #52]	; (8009f00 <vPortValidateInterruptPriority+0x78>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d909      	bls.n	8009ee6 <vPortValidateInterruptPriority+0x5e>
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	e7fe      	b.n	8009ee4 <vPortValidateInterruptPriority+0x5c>
	}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	e000e3f0 	.word	0xe000e3f0
 8009ef8:	2000030c 	.word	0x2000030c
 8009efc:	e000ed0c 	.word	0xe000ed0c
 8009f00:	20000310 	.word	0x20000310

08009f04 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe fec4 	bl	8008ca0 <USBH_LL_IncTimer>
}
 8009f18:	bf00      	nop
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe ff08 	bl	8008d44 <USBH_LL_Connect>
}
 8009f34:	bf00      	nop
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe ff1d 	bl	8008d8a <USBH_LL_Disconnect>
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	70fb      	strb	r3, [r7, #3]
 8009f64:	4613      	mov	r3, r2
 8009f66:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe ff3d 	bl	8008dee <USBH_LL_NotifyURBChange>
#endif
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe feb2 	bl	8008cf4 <USBH_LL_PortEnabled>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe febe 	bl	8008d28 <USBH_LL_PortDisabled>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f9 ffd1 	bl	8003f72 <HAL_HCD_Stop>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f808 	bl	8009fec <USBH_Get_USB_Status>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
	...

08009fec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d817      	bhi.n	800a030 <USBH_Get_USB_Status+0x44>
 800a000:	a201      	add	r2, pc, #4	; (adr r2, 800a008 <USBH_Get_USB_Status+0x1c>)
 800a002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a006:	bf00      	nop
 800a008:	0800a019 	.word	0x0800a019
 800a00c:	0800a01f 	.word	0x0800a01f
 800a010:	0800a025 	.word	0x0800a025
 800a014:	0800a02b 	.word	0x0800a02b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
    break;
 800a01c:	e00b      	b.n	800a036 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a01e:	2302      	movs	r3, #2
 800a020:	73fb      	strb	r3, [r7, #15]
    break;
 800a022:	e008      	b.n	800a036 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a024:	2301      	movs	r3, #1
 800a026:	73fb      	strb	r3, [r7, #15]
    break;
 800a028:	e005      	b.n	800a036 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a02a:	2302      	movs	r3, #2
 800a02c:	73fb      	strb	r3, [r7, #15]
    break;
 800a02e:	e002      	b.n	800a036 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a030:	2302      	movs	r3, #2
 800a032:	73fb      	strb	r3, [r7, #15]
    break;
 800a034:	bf00      	nop
  }
  return usb_status;
 800a036:	7bfb      	ldrb	r3, [r7, #15]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <__libc_init_array>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	4e0d      	ldr	r6, [pc, #52]	; (800a07c <__libc_init_array+0x38>)
 800a048:	4c0d      	ldr	r4, [pc, #52]	; (800a080 <__libc_init_array+0x3c>)
 800a04a:	1ba4      	subs	r4, r4, r6
 800a04c:	10a4      	asrs	r4, r4, #2
 800a04e:	2500      	movs	r5, #0
 800a050:	42a5      	cmp	r5, r4
 800a052:	d109      	bne.n	800a068 <__libc_init_array+0x24>
 800a054:	4e0b      	ldr	r6, [pc, #44]	; (800a084 <__libc_init_array+0x40>)
 800a056:	4c0c      	ldr	r4, [pc, #48]	; (800a088 <__libc_init_array+0x44>)
 800a058:	f000 f82c 	bl	800a0b4 <_init>
 800a05c:	1ba4      	subs	r4, r4, r6
 800a05e:	10a4      	asrs	r4, r4, #2
 800a060:	2500      	movs	r5, #0
 800a062:	42a5      	cmp	r5, r4
 800a064:	d105      	bne.n	800a072 <__libc_init_array+0x2e>
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a06c:	4798      	blx	r3
 800a06e:	3501      	adds	r5, #1
 800a070:	e7ee      	b.n	800a050 <__libc_init_array+0xc>
 800a072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a076:	4798      	blx	r3
 800a078:	3501      	adds	r5, #1
 800a07a:	e7f2      	b.n	800a062 <__libc_init_array+0x1e>
 800a07c:	0800c080 	.word	0x0800c080
 800a080:	0800c080 	.word	0x0800c080
 800a084:	0800c080 	.word	0x0800c080
 800a088:	0800c084 	.word	0x0800c084

0800a08c <memcpy>:
 800a08c:	b510      	push	{r4, lr}
 800a08e:	1e43      	subs	r3, r0, #1
 800a090:	440a      	add	r2, r1
 800a092:	4291      	cmp	r1, r2
 800a094:	d100      	bne.n	800a098 <memcpy+0xc>
 800a096:	bd10      	pop	{r4, pc}
 800a098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a09c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a0:	e7f7      	b.n	800a092 <memcpy+0x6>

0800a0a2 <memset>:
 800a0a2:	4402      	add	r2, r0
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d100      	bne.n	800a0ac <memset+0xa>
 800a0aa:	4770      	bx	lr
 800a0ac:	f803 1b01 	strb.w	r1, [r3], #1
 800a0b0:	e7f9      	b.n	800a0a6 <memset+0x4>
	...

0800a0b4 <_init>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	bf00      	nop
 800a0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ba:	bc08      	pop	{r3}
 800a0bc:	469e      	mov	lr, r3
 800a0be:	4770      	bx	lr

0800a0c0 <_fini>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr
